// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/serviceitem"
	"github.com/Dan6erbond/revline/ent/servicelog"
	"github.com/Dan6erbond/revline/ent/serviceschedule"
	"github.com/google/uuid"
)

// ServiceScheduleCreate is the builder for creating a ServiceSchedule entity.
type ServiceScheduleCreate struct {
	config
	mutation *ServiceScheduleMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ssc *ServiceScheduleCreate) SetCreateTime(t time.Time) *ServiceScheduleCreate {
	ssc.mutation.SetCreateTime(t)
	return ssc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ssc *ServiceScheduleCreate) SetNillableCreateTime(t *time.Time) *ServiceScheduleCreate {
	if t != nil {
		ssc.SetCreateTime(*t)
	}
	return ssc
}

// SetUpdateTime sets the "update_time" field.
func (ssc *ServiceScheduleCreate) SetUpdateTime(t time.Time) *ServiceScheduleCreate {
	ssc.mutation.SetUpdateTime(t)
	return ssc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ssc *ServiceScheduleCreate) SetNillableUpdateTime(t *time.Time) *ServiceScheduleCreate {
	if t != nil {
		ssc.SetUpdateTime(*t)
	}
	return ssc
}

// SetTitle sets the "title" field.
func (ssc *ServiceScheduleCreate) SetTitle(s string) *ServiceScheduleCreate {
	ssc.mutation.SetTitle(s)
	return ssc
}

// SetRepeatEveryKm sets the "repeat_every_km" field.
func (ssc *ServiceScheduleCreate) SetRepeatEveryKm(f float64) *ServiceScheduleCreate {
	ssc.mutation.SetRepeatEveryKm(f)
	return ssc
}

// SetNillableRepeatEveryKm sets the "repeat_every_km" field if the given value is not nil.
func (ssc *ServiceScheduleCreate) SetNillableRepeatEveryKm(f *float64) *ServiceScheduleCreate {
	if f != nil {
		ssc.SetRepeatEveryKm(*f)
	}
	return ssc
}

// SetStartsAtKm sets the "starts_at_km" field.
func (ssc *ServiceScheduleCreate) SetStartsAtKm(f float64) *ServiceScheduleCreate {
	ssc.mutation.SetStartsAtKm(f)
	return ssc
}

// SetNillableStartsAtKm sets the "starts_at_km" field if the given value is not nil.
func (ssc *ServiceScheduleCreate) SetNillableStartsAtKm(f *float64) *ServiceScheduleCreate {
	if f != nil {
		ssc.SetStartsAtKm(*f)
	}
	return ssc
}

// SetRepeatEveryMonths sets the "repeat_every_months" field.
func (ssc *ServiceScheduleCreate) SetRepeatEveryMonths(i int) *ServiceScheduleCreate {
	ssc.mutation.SetRepeatEveryMonths(i)
	return ssc
}

// SetNillableRepeatEveryMonths sets the "repeat_every_months" field if the given value is not nil.
func (ssc *ServiceScheduleCreate) SetNillableRepeatEveryMonths(i *int) *ServiceScheduleCreate {
	if i != nil {
		ssc.SetRepeatEveryMonths(*i)
	}
	return ssc
}

// SetStartsAtMonths sets the "starts_at_months" field.
func (ssc *ServiceScheduleCreate) SetStartsAtMonths(i int) *ServiceScheduleCreate {
	ssc.mutation.SetStartsAtMonths(i)
	return ssc
}

// SetNillableStartsAtMonths sets the "starts_at_months" field if the given value is not nil.
func (ssc *ServiceScheduleCreate) SetNillableStartsAtMonths(i *int) *ServiceScheduleCreate {
	if i != nil {
		ssc.SetStartsAtMonths(*i)
	}
	return ssc
}

// SetNotes sets the "notes" field.
func (ssc *ServiceScheduleCreate) SetNotes(s string) *ServiceScheduleCreate {
	ssc.mutation.SetNotes(s)
	return ssc
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (ssc *ServiceScheduleCreate) SetNillableNotes(s *string) *ServiceScheduleCreate {
	if s != nil {
		ssc.SetNotes(*s)
	}
	return ssc
}

// SetArchived sets the "archived" field.
func (ssc *ServiceScheduleCreate) SetArchived(b bool) *ServiceScheduleCreate {
	ssc.mutation.SetArchived(b)
	return ssc
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (ssc *ServiceScheduleCreate) SetNillableArchived(b *bool) *ServiceScheduleCreate {
	if b != nil {
		ssc.SetArchived(*b)
	}
	return ssc
}

// SetID sets the "id" field.
func (ssc *ServiceScheduleCreate) SetID(u uuid.UUID) *ServiceScheduleCreate {
	ssc.mutation.SetID(u)
	return ssc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ssc *ServiceScheduleCreate) SetNillableID(u *uuid.UUID) *ServiceScheduleCreate {
	if u != nil {
		ssc.SetID(*u)
	}
	return ssc
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (ssc *ServiceScheduleCreate) SetCarID(id uuid.UUID) *ServiceScheduleCreate {
	ssc.mutation.SetCarID(id)
	return ssc
}

// SetCar sets the "car" edge to the Car entity.
func (ssc *ServiceScheduleCreate) SetCar(c *Car) *ServiceScheduleCreate {
	return ssc.SetCarID(c.ID)
}

// AddItemIDs adds the "items" edge to the ServiceItem entity by IDs.
func (ssc *ServiceScheduleCreate) AddItemIDs(ids ...uuid.UUID) *ServiceScheduleCreate {
	ssc.mutation.AddItemIDs(ids...)
	return ssc
}

// AddItems adds the "items" edges to the ServiceItem entity.
func (ssc *ServiceScheduleCreate) AddItems(s ...*ServiceItem) *ServiceScheduleCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssc.AddItemIDs(ids...)
}

// AddLogIDs adds the "logs" edge to the ServiceLog entity by IDs.
func (ssc *ServiceScheduleCreate) AddLogIDs(ids ...uuid.UUID) *ServiceScheduleCreate {
	ssc.mutation.AddLogIDs(ids...)
	return ssc
}

// AddLogs adds the "logs" edges to the ServiceLog entity.
func (ssc *ServiceScheduleCreate) AddLogs(s ...*ServiceLog) *ServiceScheduleCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssc.AddLogIDs(ids...)
}

// Mutation returns the ServiceScheduleMutation object of the builder.
func (ssc *ServiceScheduleCreate) Mutation() *ServiceScheduleMutation {
	return ssc.mutation
}

// Save creates the ServiceSchedule in the database.
func (ssc *ServiceScheduleCreate) Save(ctx context.Context) (*ServiceSchedule, error) {
	ssc.defaults()
	return withHooks(ctx, ssc.sqlSave, ssc.mutation, ssc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ssc *ServiceScheduleCreate) SaveX(ctx context.Context) *ServiceSchedule {
	v, err := ssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssc *ServiceScheduleCreate) Exec(ctx context.Context) error {
	_, err := ssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssc *ServiceScheduleCreate) ExecX(ctx context.Context) {
	if err := ssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssc *ServiceScheduleCreate) defaults() {
	if _, ok := ssc.mutation.CreateTime(); !ok {
		v := serviceschedule.DefaultCreateTime()
		ssc.mutation.SetCreateTime(v)
	}
	if _, ok := ssc.mutation.UpdateTime(); !ok {
		v := serviceschedule.DefaultUpdateTime()
		ssc.mutation.SetUpdateTime(v)
	}
	if _, ok := ssc.mutation.Archived(); !ok {
		v := serviceschedule.DefaultArchived
		ssc.mutation.SetArchived(v)
	}
	if _, ok := ssc.mutation.ID(); !ok {
		v := serviceschedule.DefaultID()
		ssc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssc *ServiceScheduleCreate) check() error {
	if _, ok := ssc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "ServiceSchedule.create_time"`)}
	}
	if _, ok := ssc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "ServiceSchedule.update_time"`)}
	}
	if _, ok := ssc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "ServiceSchedule.title"`)}
	}
	if _, ok := ssc.mutation.Archived(); !ok {
		return &ValidationError{Name: "archived", err: errors.New(`ent: missing required field "ServiceSchedule.archived"`)}
	}
	if len(ssc.mutation.CarIDs()) == 0 {
		return &ValidationError{Name: "car", err: errors.New(`ent: missing required edge "ServiceSchedule.car"`)}
	}
	return nil
}

func (ssc *ServiceScheduleCreate) sqlSave(ctx context.Context) (*ServiceSchedule, error) {
	if err := ssc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ssc.mutation.id = &_node.ID
	ssc.mutation.done = true
	return _node, nil
}

func (ssc *ServiceScheduleCreate) createSpec() (*ServiceSchedule, *sqlgraph.CreateSpec) {
	var (
		_node = &ServiceSchedule{config: ssc.config}
		_spec = sqlgraph.NewCreateSpec(serviceschedule.Table, sqlgraph.NewFieldSpec(serviceschedule.FieldID, field.TypeUUID))
	)
	if id, ok := ssc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ssc.mutation.CreateTime(); ok {
		_spec.SetField(serviceschedule.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ssc.mutation.UpdateTime(); ok {
		_spec.SetField(serviceschedule.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ssc.mutation.Title(); ok {
		_spec.SetField(serviceschedule.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ssc.mutation.RepeatEveryKm(); ok {
		_spec.SetField(serviceschedule.FieldRepeatEveryKm, field.TypeFloat64, value)
		_node.RepeatEveryKm = &value
	}
	if value, ok := ssc.mutation.StartsAtKm(); ok {
		_spec.SetField(serviceschedule.FieldStartsAtKm, field.TypeFloat64, value)
		_node.StartsAtKm = &value
	}
	if value, ok := ssc.mutation.RepeatEveryMonths(); ok {
		_spec.SetField(serviceschedule.FieldRepeatEveryMonths, field.TypeInt, value)
		_node.RepeatEveryMonths = &value
	}
	if value, ok := ssc.mutation.StartsAtMonths(); ok {
		_spec.SetField(serviceschedule.FieldStartsAtMonths, field.TypeInt, value)
		_node.StartsAtMonths = &value
	}
	if value, ok := ssc.mutation.Notes(); ok {
		_spec.SetField(serviceschedule.FieldNotes, field.TypeString, value)
		_node.Notes = &value
	}
	if value, ok := ssc.mutation.Archived(); ok {
		_spec.SetField(serviceschedule.FieldArchived, field.TypeBool, value)
		_node.Archived = value
	}
	if nodes := ssc.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceschedule.CarTable,
			Columns: []string{serviceschedule.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.car_service_schedules = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ssc.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   serviceschedule.ItemsTable,
			Columns: serviceschedule.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ssc.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceschedule.LogsTable,
			Columns: []string{serviceschedule.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ServiceScheduleCreateBulk is the builder for creating many ServiceSchedule entities in bulk.
type ServiceScheduleCreateBulk struct {
	config
	err      error
	builders []*ServiceScheduleCreate
}

// Save creates the ServiceSchedule entities in the database.
func (sscb *ServiceScheduleCreateBulk) Save(ctx context.Context) ([]*ServiceSchedule, error) {
	if sscb.err != nil {
		return nil, sscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sscb.builders))
	nodes := make([]*ServiceSchedule, len(sscb.builders))
	mutators := make([]Mutator, len(sscb.builders))
	for i := range sscb.builders {
		func(i int, root context.Context) {
			builder := sscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceScheduleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sscb *ServiceScheduleCreateBulk) SaveX(ctx context.Context) []*ServiceSchedule {
	v, err := sscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sscb *ServiceScheduleCreateBulk) Exec(ctx context.Context) error {
	_, err := sscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscb *ServiceScheduleCreateBulk) ExecX(ctx context.Context) {
	if err := sscb.Exec(ctx); err != nil {
		panic(err)
	}
}
