// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Dan6erbond/revline/ent/dragresult"
	"github.com/Dan6erbond/revline/ent/dragsession"
	"github.com/google/uuid"
)

// DragResult is the model entity for the DragResult schema.
type DragResult struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Unit holds the value of the "unit" field.
	Unit dragresult.Unit `json:"unit,omitempty"`
	// Value holds the value of the "value" field.
	Value float64 `json:"value,omitempty"`
	// Result holds the value of the "result" field.
	Result float64 `json:"result,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DragResultQuery when eager-loading is set.
	Edges                DragResultEdges `json:"edges"`
	drag_session_results *uuid.UUID
	selectValues         sql.SelectValues
}

// DragResultEdges holds the relations/edges for other nodes in the graph.
type DragResultEdges struct {
	// Session holds the value of the session edge.
	Session *DragSession `json:"session,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// SessionOrErr returns the Session value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DragResultEdges) SessionOrErr() (*DragSession, error) {
	if e.Session != nil {
		return e.Session, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: dragsession.Label}
	}
	return nil, &NotLoadedError{edge: "session"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DragResult) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dragresult.FieldValue, dragresult.FieldResult:
			values[i] = new(sql.NullFloat64)
		case dragresult.FieldUnit:
			values[i] = new(sql.NullString)
		case dragresult.FieldCreateTime, dragresult.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case dragresult.FieldID:
			values[i] = new(uuid.UUID)
		case dragresult.ForeignKeys[0]: // drag_session_results
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DragResult fields.
func (dr *DragResult) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dragresult.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				dr.ID = *value
			}
		case dragresult.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				dr.CreateTime = value.Time
			}
		case dragresult.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				dr.UpdateTime = value.Time
			}
		case dragresult.FieldUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[i])
			} else if value.Valid {
				dr.Unit = dragresult.Unit(value.String)
			}
		case dragresult.FieldValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				dr.Value = value.Float64
			}
		case dragresult.FieldResult:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value.Valid {
				dr.Result = value.Float64
			}
		case dragresult.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field drag_session_results", values[i])
			} else if value.Valid {
				dr.drag_session_results = new(uuid.UUID)
				*dr.drag_session_results = *value.S.(*uuid.UUID)
			}
		default:
			dr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the DragResult.
// This includes values selected through modifiers, order, etc.
func (dr *DragResult) GetValue(name string) (ent.Value, error) {
	return dr.selectValues.Get(name)
}

// QuerySession queries the "session" edge of the DragResult entity.
func (dr *DragResult) QuerySession() *DragSessionQuery {
	return NewDragResultClient(dr.config).QuerySession(dr)
}

// Update returns a builder for updating this DragResult.
// Note that you need to call DragResult.Unwrap() before calling this method if this DragResult
// was returned from a transaction, and the transaction was committed or rolled back.
func (dr *DragResult) Update() *DragResultUpdateOne {
	return NewDragResultClient(dr.config).UpdateOne(dr)
}

// Unwrap unwraps the DragResult entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dr *DragResult) Unwrap() *DragResult {
	_tx, ok := dr.config.driver.(*txDriver)
	if !ok {
		panic("ent: DragResult is not a transactional entity")
	}
	dr.config.driver = _tx.drv
	return dr
}

// String implements the fmt.Stringer.
func (dr *DragResult) String() string {
	var builder strings.Builder
	builder.WriteString("DragResult(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dr.ID))
	builder.WriteString("create_time=")
	builder.WriteString(dr.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(dr.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("unit=")
	builder.WriteString(fmt.Sprintf("%v", dr.Unit))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", dr.Value))
	builder.WriteString(", ")
	builder.WriteString("result=")
	builder.WriteString(fmt.Sprintf("%v", dr.Result))
	builder.WriteByte(')')
	return builder.String()
}

// DragResults is a parsable slice of DragResult.
type DragResults []*DragResult
