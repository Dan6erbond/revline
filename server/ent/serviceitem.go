// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/serviceitem"
	"github.com/google/uuid"
)

// ServiceItem is the model entity for the ServiceItem schema.
type ServiceItem struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Label holds the value of the "label" field.
	Label string `json:"label,omitempty"`
	// EstimatedMinutes holds the value of the "estimated_minutes" field.
	EstimatedMinutes *int `json:"estimated_minutes,omitempty"`
	// DefaultIntervalKm holds the value of the "default_interval_km" field.
	DefaultIntervalKm *float64 `json:"default_interval_km,omitempty"`
	// DefaultIntervalMonths holds the value of the "default_interval_months" field.
	DefaultIntervalMonths *int `json:"default_interval_months,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes *string `json:"notes,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags []string `json:"tags,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceItemQuery when eager-loading is set.
	Edges             ServiceItemEdges `json:"edges"`
	car_service_items *uuid.UUID
	selectValues      sql.SelectValues
}

// ServiceItemEdges holds the relations/edges for other nodes in the graph.
type ServiceItemEdges struct {
	// Car holds the value of the car edge.
	Car *Car `json:"car,omitempty"`
	// Schedules holds the value of the schedules edge.
	Schedules []*ServiceSchedule `json:"schedules,omitempty"`
	// Logs holds the value of the logs edge.
	Logs []*ServiceLog `json:"logs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedSchedules map[string][]*ServiceSchedule
	namedLogs      map[string][]*ServiceLog
}

// CarOrErr returns the Car value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceItemEdges) CarOrErr() (*Car, error) {
	if e.Car != nil {
		return e.Car, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: car.Label}
	}
	return nil, &NotLoadedError{edge: "car"}
}

// SchedulesOrErr returns the Schedules value or an error if the edge
// was not loaded in eager-loading.
func (e ServiceItemEdges) SchedulesOrErr() ([]*ServiceSchedule, error) {
	if e.loadedTypes[1] {
		return e.Schedules, nil
	}
	return nil, &NotLoadedError{edge: "schedules"}
}

// LogsOrErr returns the Logs value or an error if the edge
// was not loaded in eager-loading.
func (e ServiceItemEdges) LogsOrErr() ([]*ServiceLog, error) {
	if e.loadedTypes[2] {
		return e.Logs, nil
	}
	return nil, &NotLoadedError{edge: "logs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case serviceitem.FieldTags:
			values[i] = new([]byte)
		case serviceitem.FieldDefaultIntervalKm:
			values[i] = new(sql.NullFloat64)
		case serviceitem.FieldEstimatedMinutes, serviceitem.FieldDefaultIntervalMonths:
			values[i] = new(sql.NullInt64)
		case serviceitem.FieldLabel, serviceitem.FieldNotes:
			values[i] = new(sql.NullString)
		case serviceitem.FieldCreateTime, serviceitem.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case serviceitem.FieldID:
			values[i] = new(uuid.UUID)
		case serviceitem.ForeignKeys[0]: // car_service_items
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceItem fields.
func (si *ServiceItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case serviceitem.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				si.ID = *value
			}
		case serviceitem.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				si.CreateTime = value.Time
			}
		case serviceitem.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				si.UpdateTime = value.Time
			}
		case serviceitem.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				si.Label = value.String
			}
		case serviceitem.FieldEstimatedMinutes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_minutes", values[i])
			} else if value.Valid {
				si.EstimatedMinutes = new(int)
				*si.EstimatedMinutes = int(value.Int64)
			}
		case serviceitem.FieldDefaultIntervalKm:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field default_interval_km", values[i])
			} else if value.Valid {
				si.DefaultIntervalKm = new(float64)
				*si.DefaultIntervalKm = value.Float64
			}
		case serviceitem.FieldDefaultIntervalMonths:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field default_interval_months", values[i])
			} else if value.Valid {
				si.DefaultIntervalMonths = new(int)
				*si.DefaultIntervalMonths = int(value.Int64)
			}
		case serviceitem.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				si.Notes = new(string)
				*si.Notes = value.String
			}
		case serviceitem.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &si.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case serviceitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field car_service_items", values[i])
			} else if value.Valid {
				si.car_service_items = new(uuid.UUID)
				*si.car_service_items = *value.S.(*uuid.UUID)
			}
		default:
			si.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServiceItem.
// This includes values selected through modifiers, order, etc.
func (si *ServiceItem) Value(name string) (ent.Value, error) {
	return si.selectValues.Get(name)
}

// QueryCar queries the "car" edge of the ServiceItem entity.
func (si *ServiceItem) QueryCar() *CarQuery {
	return NewServiceItemClient(si.config).QueryCar(si)
}

// QuerySchedules queries the "schedules" edge of the ServiceItem entity.
func (si *ServiceItem) QuerySchedules() *ServiceScheduleQuery {
	return NewServiceItemClient(si.config).QuerySchedules(si)
}

// QueryLogs queries the "logs" edge of the ServiceItem entity.
func (si *ServiceItem) QueryLogs() *ServiceLogQuery {
	return NewServiceItemClient(si.config).QueryLogs(si)
}

// Update returns a builder for updating this ServiceItem.
// Note that you need to call ServiceItem.Unwrap() before calling this method if this ServiceItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (si *ServiceItem) Update() *ServiceItemUpdateOne {
	return NewServiceItemClient(si.config).UpdateOne(si)
}

// Unwrap unwraps the ServiceItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (si *ServiceItem) Unwrap() *ServiceItem {
	_tx, ok := si.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServiceItem is not a transactional entity")
	}
	si.config.driver = _tx.drv
	return si
}

// String implements the fmt.Stringer.
func (si *ServiceItem) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", si.ID))
	builder.WriteString("create_time=")
	builder.WriteString(si.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(si.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("label=")
	builder.WriteString(si.Label)
	builder.WriteString(", ")
	if v := si.EstimatedMinutes; v != nil {
		builder.WriteString("estimated_minutes=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := si.DefaultIntervalKm; v != nil {
		builder.WriteString("default_interval_km=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := si.DefaultIntervalMonths; v != nil {
		builder.WriteString("default_interval_months=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := si.Notes; v != nil {
		builder.WriteString("notes=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", si.Tags))
	builder.WriteByte(')')
	return builder.String()
}

// NamedSchedules returns the Schedules named value or an error if the edge was not
// loaded in eager-loading with this name.
func (si *ServiceItem) NamedSchedules(name string) ([]*ServiceSchedule, error) {
	if si.Edges.namedSchedules == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := si.Edges.namedSchedules[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (si *ServiceItem) appendNamedSchedules(name string, edges ...*ServiceSchedule) {
	if si.Edges.namedSchedules == nil {
		si.Edges.namedSchedules = make(map[string][]*ServiceSchedule)
	}
	if len(edges) == 0 {
		si.Edges.namedSchedules[name] = []*ServiceSchedule{}
	} else {
		si.Edges.namedSchedules[name] = append(si.Edges.namedSchedules[name], edges...)
	}
}

// NamedLogs returns the Logs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (si *ServiceItem) NamedLogs(name string) ([]*ServiceLog, error) {
	if si.Edges.namedLogs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := si.Edges.namedLogs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (si *ServiceItem) appendNamedLogs(name string, edges ...*ServiceLog) {
	if si.Edges.namedLogs == nil {
		si.Edges.namedLogs = make(map[string][]*ServiceLog)
	}
	if len(edges) == 0 {
		si.Edges.namedLogs[name] = []*ServiceLog{}
	} else {
		si.Edges.namedLogs[name] = append(si.Edges.namedLogs[name], edges...)
	}
}

// ServiceItems is a parsable slice of ServiceItem.
type ServiceItems []*ServiceItem
