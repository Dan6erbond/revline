// Code generated by ent, DO NOT EDIT.

package checkoutsession

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldEQ(FieldUpdateTime, v))
}

// StripeSessionID applies equality check predicate on the "stripe_session_id" field. It's identical to StripeSessionIDEQ.
func StripeSessionID(v string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldEQ(FieldStripeSessionID, v))
}

// StripePriceID applies equality check predicate on the "stripe_price_id" field. It's identical to StripePriceIDEQ.
func StripePriceID(v string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldEQ(FieldStripePriceID, v))
}

// Completed applies equality check predicate on the "completed" field. It's identical to CompletedEQ.
func Completed(v bool) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldEQ(FieldCompleted, v))
}

// CompletedAt applies equality check predicate on the "completed_at" field. It's identical to CompletedAtEQ.
func CompletedAt(v time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldEQ(FieldCompletedAt, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldLTE(FieldUpdateTime, v))
}

// StripeSessionIDEQ applies the EQ predicate on the "stripe_session_id" field.
func StripeSessionIDEQ(v string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldEQ(FieldStripeSessionID, v))
}

// StripeSessionIDNEQ applies the NEQ predicate on the "stripe_session_id" field.
func StripeSessionIDNEQ(v string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldNEQ(FieldStripeSessionID, v))
}

// StripeSessionIDIn applies the In predicate on the "stripe_session_id" field.
func StripeSessionIDIn(vs ...string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldIn(FieldStripeSessionID, vs...))
}

// StripeSessionIDNotIn applies the NotIn predicate on the "stripe_session_id" field.
func StripeSessionIDNotIn(vs ...string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldNotIn(FieldStripeSessionID, vs...))
}

// StripeSessionIDGT applies the GT predicate on the "stripe_session_id" field.
func StripeSessionIDGT(v string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldGT(FieldStripeSessionID, v))
}

// StripeSessionIDGTE applies the GTE predicate on the "stripe_session_id" field.
func StripeSessionIDGTE(v string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldGTE(FieldStripeSessionID, v))
}

// StripeSessionIDLT applies the LT predicate on the "stripe_session_id" field.
func StripeSessionIDLT(v string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldLT(FieldStripeSessionID, v))
}

// StripeSessionIDLTE applies the LTE predicate on the "stripe_session_id" field.
func StripeSessionIDLTE(v string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldLTE(FieldStripeSessionID, v))
}

// StripeSessionIDContains applies the Contains predicate on the "stripe_session_id" field.
func StripeSessionIDContains(v string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldContains(FieldStripeSessionID, v))
}

// StripeSessionIDHasPrefix applies the HasPrefix predicate on the "stripe_session_id" field.
func StripeSessionIDHasPrefix(v string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldHasPrefix(FieldStripeSessionID, v))
}

// StripeSessionIDHasSuffix applies the HasSuffix predicate on the "stripe_session_id" field.
func StripeSessionIDHasSuffix(v string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldHasSuffix(FieldStripeSessionID, v))
}

// StripeSessionIDIsNil applies the IsNil predicate on the "stripe_session_id" field.
func StripeSessionIDIsNil() predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldIsNull(FieldStripeSessionID))
}

// StripeSessionIDNotNil applies the NotNil predicate on the "stripe_session_id" field.
func StripeSessionIDNotNil() predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldNotNull(FieldStripeSessionID))
}

// StripeSessionIDEqualFold applies the EqualFold predicate on the "stripe_session_id" field.
func StripeSessionIDEqualFold(v string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldEqualFold(FieldStripeSessionID, v))
}

// StripeSessionIDContainsFold applies the ContainsFold predicate on the "stripe_session_id" field.
func StripeSessionIDContainsFold(v string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldContainsFold(FieldStripeSessionID, v))
}

// StripePriceIDEQ applies the EQ predicate on the "stripe_price_id" field.
func StripePriceIDEQ(v string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldEQ(FieldStripePriceID, v))
}

// StripePriceIDNEQ applies the NEQ predicate on the "stripe_price_id" field.
func StripePriceIDNEQ(v string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldNEQ(FieldStripePriceID, v))
}

// StripePriceIDIn applies the In predicate on the "stripe_price_id" field.
func StripePriceIDIn(vs ...string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldIn(FieldStripePriceID, vs...))
}

// StripePriceIDNotIn applies the NotIn predicate on the "stripe_price_id" field.
func StripePriceIDNotIn(vs ...string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldNotIn(FieldStripePriceID, vs...))
}

// StripePriceIDGT applies the GT predicate on the "stripe_price_id" field.
func StripePriceIDGT(v string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldGT(FieldStripePriceID, v))
}

// StripePriceIDGTE applies the GTE predicate on the "stripe_price_id" field.
func StripePriceIDGTE(v string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldGTE(FieldStripePriceID, v))
}

// StripePriceIDLT applies the LT predicate on the "stripe_price_id" field.
func StripePriceIDLT(v string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldLT(FieldStripePriceID, v))
}

// StripePriceIDLTE applies the LTE predicate on the "stripe_price_id" field.
func StripePriceIDLTE(v string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldLTE(FieldStripePriceID, v))
}

// StripePriceIDContains applies the Contains predicate on the "stripe_price_id" field.
func StripePriceIDContains(v string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldContains(FieldStripePriceID, v))
}

// StripePriceIDHasPrefix applies the HasPrefix predicate on the "stripe_price_id" field.
func StripePriceIDHasPrefix(v string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldHasPrefix(FieldStripePriceID, v))
}

// StripePriceIDHasSuffix applies the HasSuffix predicate on the "stripe_price_id" field.
func StripePriceIDHasSuffix(v string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldHasSuffix(FieldStripePriceID, v))
}

// StripePriceIDEqualFold applies the EqualFold predicate on the "stripe_price_id" field.
func StripePriceIDEqualFold(v string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldEqualFold(FieldStripePriceID, v))
}

// StripePriceIDContainsFold applies the ContainsFold predicate on the "stripe_price_id" field.
func StripePriceIDContainsFold(v string) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldContainsFold(FieldStripePriceID, v))
}

// ModeEQ applies the EQ predicate on the "mode" field.
func ModeEQ(v Mode) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldEQ(FieldMode, v))
}

// ModeNEQ applies the NEQ predicate on the "mode" field.
func ModeNEQ(v Mode) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldNEQ(FieldMode, v))
}

// ModeIn applies the In predicate on the "mode" field.
func ModeIn(vs ...Mode) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldIn(FieldMode, vs...))
}

// ModeNotIn applies the NotIn predicate on the "mode" field.
func ModeNotIn(vs ...Mode) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldNotIn(FieldMode, vs...))
}

// CompletedEQ applies the EQ predicate on the "completed" field.
func CompletedEQ(v bool) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldEQ(FieldCompleted, v))
}

// CompletedNEQ applies the NEQ predicate on the "completed" field.
func CompletedNEQ(v bool) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldNEQ(FieldCompleted, v))
}

// CompletedAtEQ applies the EQ predicate on the "completed_at" field.
func CompletedAtEQ(v time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldEQ(FieldCompletedAt, v))
}

// CompletedAtNEQ applies the NEQ predicate on the "completed_at" field.
func CompletedAtNEQ(v time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldNEQ(FieldCompletedAt, v))
}

// CompletedAtIn applies the In predicate on the "completed_at" field.
func CompletedAtIn(vs ...time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldIn(FieldCompletedAt, vs...))
}

// CompletedAtNotIn applies the NotIn predicate on the "completed_at" field.
func CompletedAtNotIn(vs ...time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldNotIn(FieldCompletedAt, vs...))
}

// CompletedAtGT applies the GT predicate on the "completed_at" field.
func CompletedAtGT(v time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldGT(FieldCompletedAt, v))
}

// CompletedAtGTE applies the GTE predicate on the "completed_at" field.
func CompletedAtGTE(v time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldGTE(FieldCompletedAt, v))
}

// CompletedAtLT applies the LT predicate on the "completed_at" field.
func CompletedAtLT(v time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldLT(FieldCompletedAt, v))
}

// CompletedAtLTE applies the LTE predicate on the "completed_at" field.
func CompletedAtLTE(v time.Time) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldLTE(FieldCompletedAt, v))
}

// CompletedAtIsNil applies the IsNil predicate on the "completed_at" field.
func CompletedAtIsNil() predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldIsNull(FieldCompletedAt))
}

// CompletedAtNotNil applies the NotNil predicate on the "completed_at" field.
func CompletedAtNotNil() predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.FieldNotNull(FieldCompletedAt))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.CheckoutSession {
	return predicate.CheckoutSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.CheckoutSession {
	return predicate.CheckoutSession(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscription applies the HasEdge predicate on the "subscription" edge.
func HasSubscription() predicate.CheckoutSession {
	return predicate.CheckoutSession(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, SubscriptionTable, SubscriptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionWith applies the HasEdge predicate on the "subscription" edge with a given conditions (other predicates).
func HasSubscriptionWith(preds ...predicate.Subscription) predicate.CheckoutSession {
	return predicate.CheckoutSession(func(s *sql.Selector) {
		step := newSubscriptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CheckoutSession) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CheckoutSession) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CheckoutSession) predicate.CheckoutSession {
	return predicate.CheckoutSession(sql.NotPredicates(p))
}
