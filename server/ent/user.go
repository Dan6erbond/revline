// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Dan6erbond/revline/ent/profile"
	"github.com/Dan6erbond/revline/ent/user"
	"github.com/Dan6erbond/revline/ent/usersettings"
	"github.com/google/uuid"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// StripeCustomerID holds the value of the "stripe_customer_id" field.
	StripeCustomerID *string `json:"stripe_customer_id,omitempty"`
	// StripeAccountID holds the value of the "stripe_account_id" field.
	StripeAccountID *string `json:"stripe_account_id,omitempty"`
	// StripeAccountCapabilities holds the value of the "stripe_account_capabilities" field.
	StripeAccountCapabilities map[string]string `json:"stripe_account_capabilities,omitempty"`
	// Affiliate6moCode holds the value of the "affiliate_6mo_code" field.
	Affiliate6moCode *string `json:"affiliate_6mo_code,omitempty"`
	// Affiliate12moCode holds the value of the "affiliate_12mo_code" field.
	Affiliate12moCode *string `json:"affiliate_12mo_code,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Cars holds the value of the cars edge.
	Cars []*Car `json:"cars,omitempty"`
	// Profile holds the value of the profile edge.
	Profile *Profile `json:"profile,omitempty"`
	// Settings holds the value of the settings edge.
	Settings *UserSettings `json:"settings,omitempty"`
	// Subscriptions holds the value of the subscriptions edge.
	Subscriptions []*Subscription `json:"subscriptions,omitempty"`
	// CheckoutSessions holds the value of the checkout_sessions edge.
	CheckoutSessions []*CheckoutSession `json:"checkout_sessions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedCars             map[string][]*Car
	namedSubscriptions    map[string][]*Subscription
	namedCheckoutSessions map[string][]*CheckoutSession
}

// CarsOrErr returns the Cars value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CarsOrErr() ([]*Car, error) {
	if e.loadedTypes[0] {
		return e.Cars, nil
	}
	return nil, &NotLoadedError{edge: "cars"}
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) ProfileOrErr() (*Profile, error) {
	if e.Profile != nil {
		return e.Profile, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: profile.Label}
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// SettingsOrErr returns the Settings value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) SettingsOrErr() (*UserSettings, error) {
	if e.Settings != nil {
		return e.Settings, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: usersettings.Label}
	}
	return nil, &NotLoadedError{edge: "settings"}
}

// SubscriptionsOrErr returns the Subscriptions value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SubscriptionsOrErr() ([]*Subscription, error) {
	if e.loadedTypes[3] {
		return e.Subscriptions, nil
	}
	return nil, &NotLoadedError{edge: "subscriptions"}
}

// CheckoutSessionsOrErr returns the CheckoutSessions value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CheckoutSessionsOrErr() ([]*CheckoutSession, error) {
	if e.loadedTypes[4] {
		return e.CheckoutSessions, nil
	}
	return nil, &NotLoadedError{edge: "checkout_sessions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldStripeAccountCapabilities:
			values[i] = new([]byte)
		case user.FieldEmail, user.FieldStripeCustomerID, user.FieldStripeAccountID, user.FieldAffiliate6moCode, user.FieldAffiliate12moCode:
			values[i] = new(sql.NullString)
		case user.FieldCreateTime, user.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case user.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				u.CreateTime = value.Time
			}
		case user.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				u.UpdateTime = value.Time
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldStripeCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_customer_id", values[i])
			} else if value.Valid {
				u.StripeCustomerID = new(string)
				*u.StripeCustomerID = value.String
			}
		case user.FieldStripeAccountID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_account_id", values[i])
			} else if value.Valid {
				u.StripeAccountID = new(string)
				*u.StripeAccountID = value.String
			}
		case user.FieldStripeAccountCapabilities:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_account_capabilities", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &u.StripeAccountCapabilities); err != nil {
					return fmt.Errorf("unmarshal field stripe_account_capabilities: %w", err)
				}
			}
		case user.FieldAffiliate6moCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field affiliate_6mo_code", values[i])
			} else if value.Valid {
				u.Affiliate6moCode = new(string)
				*u.Affiliate6moCode = value.String
			}
		case user.FieldAffiliate12moCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field affiliate_12mo_code", values[i])
			} else if value.Valid {
				u.Affiliate12moCode = new(string)
				*u.Affiliate12moCode = value.String
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryCars queries the "cars" edge of the User entity.
func (u *User) QueryCars() *CarQuery {
	return NewUserClient(u.config).QueryCars(u)
}

// QueryProfile queries the "profile" edge of the User entity.
func (u *User) QueryProfile() *ProfileQuery {
	return NewUserClient(u.config).QueryProfile(u)
}

// QuerySettings queries the "settings" edge of the User entity.
func (u *User) QuerySettings() *UserSettingsQuery {
	return NewUserClient(u.config).QuerySettings(u)
}

// QuerySubscriptions queries the "subscriptions" edge of the User entity.
func (u *User) QuerySubscriptions() *SubscriptionQuery {
	return NewUserClient(u.config).QuerySubscriptions(u)
}

// QueryCheckoutSessions queries the "checkout_sessions" edge of the User entity.
func (u *User) QueryCheckoutSessions() *CheckoutSessionQuery {
	return NewUserClient(u.config).QueryCheckoutSessions(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("create_time=")
	builder.WriteString(u.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(u.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	if v := u.StripeCustomerID; v != nil {
		builder.WriteString("stripe_customer_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.StripeAccountID; v != nil {
		builder.WriteString("stripe_account_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("stripe_account_capabilities=")
	builder.WriteString(fmt.Sprintf("%v", u.StripeAccountCapabilities))
	builder.WriteString(", ")
	if v := u.Affiliate6moCode; v != nil {
		builder.WriteString("affiliate_6mo_code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.Affiliate12moCode; v != nil {
		builder.WriteString("affiliate_12mo_code=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedCars returns the Cars named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedCars(name string) ([]*Car, error) {
	if u.Edges.namedCars == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedCars[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedCars(name string, edges ...*Car) {
	if u.Edges.namedCars == nil {
		u.Edges.namedCars = make(map[string][]*Car)
	}
	if len(edges) == 0 {
		u.Edges.namedCars[name] = []*Car{}
	} else {
		u.Edges.namedCars[name] = append(u.Edges.namedCars[name], edges...)
	}
}

// NamedSubscriptions returns the Subscriptions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedSubscriptions(name string) ([]*Subscription, error) {
	if u.Edges.namedSubscriptions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedSubscriptions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedSubscriptions(name string, edges ...*Subscription) {
	if u.Edges.namedSubscriptions == nil {
		u.Edges.namedSubscriptions = make(map[string][]*Subscription)
	}
	if len(edges) == 0 {
		u.Edges.namedSubscriptions[name] = []*Subscription{}
	} else {
		u.Edges.namedSubscriptions[name] = append(u.Edges.namedSubscriptions[name], edges...)
	}
}

// NamedCheckoutSessions returns the CheckoutSessions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedCheckoutSessions(name string) ([]*CheckoutSession, error) {
	if u.Edges.namedCheckoutSessions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedCheckoutSessions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedCheckoutSessions(name string, edges ...*CheckoutSession) {
	if u.Edges.namedCheckoutSessions == nil {
		u.Edges.namedCheckoutSessions = make(map[string][]*CheckoutSession)
	}
	if len(edges) == 0 {
		u.Edges.namedCheckoutSessions[name] = []*CheckoutSession{}
	} else {
		u.Edges.namedCheckoutSessions[name] = append(u.Edges.namedCheckoutSessions[name], edges...)
	}
}

// Users is a parsable slice of User.
type Users []*User
