// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/Dan6erbond/revline/ent/profile"
	"github.com/Dan6erbond/revline/ent/user"
	"github.com/google/uuid"
)

// ProfileUpdate is the builder for updating Profile entities.
type ProfileUpdate struct {
	config
	hooks    []Hook
	mutation *ProfileMutation
}

// Where appends a list predicates to the ProfileUpdate builder.
func (pu *ProfileUpdate) Where(ps ...predicate.Profile) *ProfileUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdateTime sets the "update_time" field.
func (pu *ProfileUpdate) SetUpdateTime(t time.Time) *ProfileUpdate {
	pu.mutation.SetUpdateTime(t)
	return pu
}

// SetUsername sets the "username" field.
func (pu *ProfileUpdate) SetUsername(s string) *ProfileUpdate {
	pu.mutation.SetUsername(s)
	return pu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableUsername(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetUsername(*s)
	}
	return pu
}

// ClearUsername clears the value of the "username" field.
func (pu *ProfileUpdate) ClearUsername() *ProfileUpdate {
	pu.mutation.ClearUsername()
	return pu
}

// SetFirstName sets the "first_name" field.
func (pu *ProfileUpdate) SetFirstName(s string) *ProfileUpdate {
	pu.mutation.SetFirstName(s)
	return pu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableFirstName(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetFirstName(*s)
	}
	return pu
}

// ClearFirstName clears the value of the "first_name" field.
func (pu *ProfileUpdate) ClearFirstName() *ProfileUpdate {
	pu.mutation.ClearFirstName()
	return pu
}

// SetLastName sets the "last_name" field.
func (pu *ProfileUpdate) SetLastName(s string) *ProfileUpdate {
	pu.mutation.SetLastName(s)
	return pu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableLastName(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetLastName(*s)
	}
	return pu
}

// ClearLastName clears the value of the "last_name" field.
func (pu *ProfileUpdate) ClearLastName() *ProfileUpdate {
	pu.mutation.ClearLastName()
	return pu
}

// SetPicture sets the "picture" field.
func (pu *ProfileUpdate) SetPicture(u uuid.UUID) *ProfileUpdate {
	pu.mutation.SetPicture(u)
	return pu
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillablePicture(u *uuid.UUID) *ProfileUpdate {
	if u != nil {
		pu.SetPicture(*u)
	}
	return pu
}

// ClearPicture clears the value of the "picture" field.
func (pu *ProfileUpdate) ClearPicture() *ProfileUpdate {
	pu.mutation.ClearPicture()
	return pu
}

// SetCurrencyCode sets the "currency_code" field.
func (pu *ProfileUpdate) SetCurrencyCode(s string) *ProfileUpdate {
	pu.mutation.SetCurrencyCode(s)
	return pu
}

// SetNillableCurrencyCode sets the "currency_code" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableCurrencyCode(s *string) *ProfileUpdate {
	if s != nil {
		pu.SetCurrencyCode(*s)
	}
	return pu
}

// ClearCurrencyCode clears the value of the "currency_code" field.
func (pu *ProfileUpdate) ClearCurrencyCode() *ProfileUpdate {
	pu.mutation.ClearCurrencyCode()
	return pu
}

// SetFuelVolumeUnit sets the "fuel_volume_unit" field.
func (pu *ProfileUpdate) SetFuelVolumeUnit(pvu profile.FuelVolumeUnit) *ProfileUpdate {
	pu.mutation.SetFuelVolumeUnit(pvu)
	return pu
}

// SetNillableFuelVolumeUnit sets the "fuel_volume_unit" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableFuelVolumeUnit(pvu *profile.FuelVolumeUnit) *ProfileUpdate {
	if pvu != nil {
		pu.SetFuelVolumeUnit(*pvu)
	}
	return pu
}

// ClearFuelVolumeUnit clears the value of the "fuel_volume_unit" field.
func (pu *ProfileUpdate) ClearFuelVolumeUnit() *ProfileUpdate {
	pu.mutation.ClearFuelVolumeUnit()
	return pu
}

// SetDistanceUnit sets the "distance_unit" field.
func (pu *ProfileUpdate) SetDistanceUnit(value profile.DistanceUnit) *ProfileUpdate {
	pu.mutation.SetDistanceUnit(value)
	return pu
}

// SetNillableDistanceUnit sets the "distance_unit" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableDistanceUnit(value *profile.DistanceUnit) *ProfileUpdate {
	if value != nil {
		pu.SetDistanceUnit(*value)
	}
	return pu
}

// ClearDistanceUnit clears the value of the "distance_unit" field.
func (pu *ProfileUpdate) ClearDistanceUnit() *ProfileUpdate {
	pu.mutation.ClearDistanceUnit()
	return pu
}

// SetFuelConsumptionUnit sets the "fuel_consumption_unit" field.
func (pu *ProfileUpdate) SetFuelConsumptionUnit(pcu profile.FuelConsumptionUnit) *ProfileUpdate {
	pu.mutation.SetFuelConsumptionUnit(pcu)
	return pu
}

// SetNillableFuelConsumptionUnit sets the "fuel_consumption_unit" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableFuelConsumptionUnit(pcu *profile.FuelConsumptionUnit) *ProfileUpdate {
	if pcu != nil {
		pu.SetFuelConsumptionUnit(*pcu)
	}
	return pu
}

// ClearFuelConsumptionUnit clears the value of the "fuel_consumption_unit" field.
func (pu *ProfileUpdate) ClearFuelConsumptionUnit() *ProfileUpdate {
	pu.mutation.ClearFuelConsumptionUnit()
	return pu
}

// SetTemperatureUnit sets the "temperature_unit" field.
func (pu *ProfileUpdate) SetTemperatureUnit(value profile.TemperatureUnit) *ProfileUpdate {
	pu.mutation.SetTemperatureUnit(value)
	return pu
}

// SetNillableTemperatureUnit sets the "temperature_unit" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableTemperatureUnit(value *profile.TemperatureUnit) *ProfileUpdate {
	if value != nil {
		pu.SetTemperatureUnit(*value)
	}
	return pu
}

// ClearTemperatureUnit clears the value of the "temperature_unit" field.
func (pu *ProfileUpdate) ClearTemperatureUnit() *ProfileUpdate {
	pu.mutation.ClearTemperatureUnit()
	return pu
}

// SetPowerUnit sets the "power_unit" field.
func (pu *ProfileUpdate) SetPowerUnit(value profile.PowerUnit) *ProfileUpdate {
	pu.mutation.SetPowerUnit(value)
	return pu
}

// SetNillablePowerUnit sets the "power_unit" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillablePowerUnit(value *profile.PowerUnit) *ProfileUpdate {
	if value != nil {
		pu.SetPowerUnit(*value)
	}
	return pu
}

// ClearPowerUnit clears the value of the "power_unit" field.
func (pu *ProfileUpdate) ClearPowerUnit() *ProfileUpdate {
	pu.mutation.ClearPowerUnit()
	return pu
}

// SetTorqueUnit sets the "torque_unit" field.
func (pu *ProfileUpdate) SetTorqueUnit(value profile.TorqueUnit) *ProfileUpdate {
	pu.mutation.SetTorqueUnit(value)
	return pu
}

// SetNillableTorqueUnit sets the "torque_unit" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableTorqueUnit(value *profile.TorqueUnit) *ProfileUpdate {
	if value != nil {
		pu.SetTorqueUnit(*value)
	}
	return pu
}

// ClearTorqueUnit clears the value of the "torque_unit" field.
func (pu *ProfileUpdate) ClearTorqueUnit() *ProfileUpdate {
	pu.mutation.ClearTorqueUnit()
	return pu
}

// SetVisibility sets the "visibility" field.
func (pu *ProfileUpdate) SetVisibility(pr profile.Visibility) *ProfileUpdate {
	pu.mutation.SetVisibility(pr)
	return pu
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (pu *ProfileUpdate) SetNillableVisibility(pr *profile.Visibility) *ProfileUpdate {
	if pr != nil {
		pu.SetVisibility(*pr)
	}
	return pu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pu *ProfileUpdate) SetUserID(id uuid.UUID) *ProfileUpdate {
	pu.mutation.SetUserID(id)
	return pu
}

// SetUser sets the "user" edge to the User entity.
func (pu *ProfileUpdate) SetUser(u *User) *ProfileUpdate {
	return pu.SetUserID(u.ID)
}

// Mutation returns the ProfileMutation object of the builder.
func (pu *ProfileUpdate) Mutation() *ProfileMutation {
	return pu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pu *ProfileUpdate) ClearUser() *ProfileUpdate {
	pu.mutation.ClearUser()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProfileUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProfileUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProfileUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProfileUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProfileUpdate) defaults() {
	if _, ok := pu.mutation.UpdateTime(); !ok {
		v := profile.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProfileUpdate) check() error {
	if v, ok := pu.mutation.FuelVolumeUnit(); ok {
		if err := profile.FuelVolumeUnitValidator(v); err != nil {
			return &ValidationError{Name: "fuel_volume_unit", err: fmt.Errorf(`ent: validator failed for field "Profile.fuel_volume_unit": %w`, err)}
		}
	}
	if v, ok := pu.mutation.DistanceUnit(); ok {
		if err := profile.DistanceUnitValidator(v); err != nil {
			return &ValidationError{Name: "distance_unit", err: fmt.Errorf(`ent: validator failed for field "Profile.distance_unit": %w`, err)}
		}
	}
	if v, ok := pu.mutation.FuelConsumptionUnit(); ok {
		if err := profile.FuelConsumptionUnitValidator(v); err != nil {
			return &ValidationError{Name: "fuel_consumption_unit", err: fmt.Errorf(`ent: validator failed for field "Profile.fuel_consumption_unit": %w`, err)}
		}
	}
	if v, ok := pu.mutation.TemperatureUnit(); ok {
		if err := profile.TemperatureUnitValidator(v); err != nil {
			return &ValidationError{Name: "temperature_unit", err: fmt.Errorf(`ent: validator failed for field "Profile.temperature_unit": %w`, err)}
		}
	}
	if v, ok := pu.mutation.PowerUnit(); ok {
		if err := profile.PowerUnitValidator(v); err != nil {
			return &ValidationError{Name: "power_unit", err: fmt.Errorf(`ent: validator failed for field "Profile.power_unit": %w`, err)}
		}
	}
	if v, ok := pu.mutation.TorqueUnit(); ok {
		if err := profile.TorqueUnitValidator(v); err != nil {
			return &ValidationError{Name: "torque_unit", err: fmt.Errorf(`ent: validator failed for field "Profile.torque_unit": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Visibility(); ok {
		if err := profile.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`ent: validator failed for field "Profile.visibility": %w`, err)}
		}
	}
	if pu.mutation.UserCleared() && len(pu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Profile.user"`)
	}
	return nil
}

func (pu *ProfileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(profile.Table, profile.Columns, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.SetField(profile.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Username(); ok {
		_spec.SetField(profile.FieldUsername, field.TypeString, value)
	}
	if pu.mutation.UsernameCleared() {
		_spec.ClearField(profile.FieldUsername, field.TypeString)
	}
	if value, ok := pu.mutation.FirstName(); ok {
		_spec.SetField(profile.FieldFirstName, field.TypeString, value)
	}
	if pu.mutation.FirstNameCleared() {
		_spec.ClearField(profile.FieldFirstName, field.TypeString)
	}
	if value, ok := pu.mutation.LastName(); ok {
		_spec.SetField(profile.FieldLastName, field.TypeString, value)
	}
	if pu.mutation.LastNameCleared() {
		_spec.ClearField(profile.FieldLastName, field.TypeString)
	}
	if value, ok := pu.mutation.Picture(); ok {
		_spec.SetField(profile.FieldPicture, field.TypeUUID, value)
	}
	if pu.mutation.PictureCleared() {
		_spec.ClearField(profile.FieldPicture, field.TypeUUID)
	}
	if value, ok := pu.mutation.CurrencyCode(); ok {
		_spec.SetField(profile.FieldCurrencyCode, field.TypeString, value)
	}
	if pu.mutation.CurrencyCodeCleared() {
		_spec.ClearField(profile.FieldCurrencyCode, field.TypeString)
	}
	if value, ok := pu.mutation.FuelVolumeUnit(); ok {
		_spec.SetField(profile.FieldFuelVolumeUnit, field.TypeEnum, value)
	}
	if pu.mutation.FuelVolumeUnitCleared() {
		_spec.ClearField(profile.FieldFuelVolumeUnit, field.TypeEnum)
	}
	if value, ok := pu.mutation.DistanceUnit(); ok {
		_spec.SetField(profile.FieldDistanceUnit, field.TypeEnum, value)
	}
	if pu.mutation.DistanceUnitCleared() {
		_spec.ClearField(profile.FieldDistanceUnit, field.TypeEnum)
	}
	if value, ok := pu.mutation.FuelConsumptionUnit(); ok {
		_spec.SetField(profile.FieldFuelConsumptionUnit, field.TypeEnum, value)
	}
	if pu.mutation.FuelConsumptionUnitCleared() {
		_spec.ClearField(profile.FieldFuelConsumptionUnit, field.TypeEnum)
	}
	if value, ok := pu.mutation.TemperatureUnit(); ok {
		_spec.SetField(profile.FieldTemperatureUnit, field.TypeEnum, value)
	}
	if pu.mutation.TemperatureUnitCleared() {
		_spec.ClearField(profile.FieldTemperatureUnit, field.TypeEnum)
	}
	if value, ok := pu.mutation.PowerUnit(); ok {
		_spec.SetField(profile.FieldPowerUnit, field.TypeEnum, value)
	}
	if pu.mutation.PowerUnitCleared() {
		_spec.ClearField(profile.FieldPowerUnit, field.TypeEnum)
	}
	if value, ok := pu.mutation.TorqueUnit(); ok {
		_spec.SetField(profile.FieldTorqueUnit, field.TypeEnum, value)
	}
	if pu.mutation.TorqueUnitCleared() {
		_spec.ClearField(profile.FieldTorqueUnit, field.TypeEnum)
	}
	if value, ok := pu.mutation.Visibility(); ok {
		_spec.SetField(profile.FieldVisibility, field.TypeEnum, value)
	}
	if pu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProfileUpdateOne is the builder for updating a single Profile entity.
type ProfileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProfileMutation
}

// SetUpdateTime sets the "update_time" field.
func (puo *ProfileUpdateOne) SetUpdateTime(t time.Time) *ProfileUpdateOne {
	puo.mutation.SetUpdateTime(t)
	return puo
}

// SetUsername sets the "username" field.
func (puo *ProfileUpdateOne) SetUsername(s string) *ProfileUpdateOne {
	puo.mutation.SetUsername(s)
	return puo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableUsername(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetUsername(*s)
	}
	return puo
}

// ClearUsername clears the value of the "username" field.
func (puo *ProfileUpdateOne) ClearUsername() *ProfileUpdateOne {
	puo.mutation.ClearUsername()
	return puo
}

// SetFirstName sets the "first_name" field.
func (puo *ProfileUpdateOne) SetFirstName(s string) *ProfileUpdateOne {
	puo.mutation.SetFirstName(s)
	return puo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableFirstName(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetFirstName(*s)
	}
	return puo
}

// ClearFirstName clears the value of the "first_name" field.
func (puo *ProfileUpdateOne) ClearFirstName() *ProfileUpdateOne {
	puo.mutation.ClearFirstName()
	return puo
}

// SetLastName sets the "last_name" field.
func (puo *ProfileUpdateOne) SetLastName(s string) *ProfileUpdateOne {
	puo.mutation.SetLastName(s)
	return puo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableLastName(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetLastName(*s)
	}
	return puo
}

// ClearLastName clears the value of the "last_name" field.
func (puo *ProfileUpdateOne) ClearLastName() *ProfileUpdateOne {
	puo.mutation.ClearLastName()
	return puo
}

// SetPicture sets the "picture" field.
func (puo *ProfileUpdateOne) SetPicture(u uuid.UUID) *ProfileUpdateOne {
	puo.mutation.SetPicture(u)
	return puo
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillablePicture(u *uuid.UUID) *ProfileUpdateOne {
	if u != nil {
		puo.SetPicture(*u)
	}
	return puo
}

// ClearPicture clears the value of the "picture" field.
func (puo *ProfileUpdateOne) ClearPicture() *ProfileUpdateOne {
	puo.mutation.ClearPicture()
	return puo
}

// SetCurrencyCode sets the "currency_code" field.
func (puo *ProfileUpdateOne) SetCurrencyCode(s string) *ProfileUpdateOne {
	puo.mutation.SetCurrencyCode(s)
	return puo
}

// SetNillableCurrencyCode sets the "currency_code" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableCurrencyCode(s *string) *ProfileUpdateOne {
	if s != nil {
		puo.SetCurrencyCode(*s)
	}
	return puo
}

// ClearCurrencyCode clears the value of the "currency_code" field.
func (puo *ProfileUpdateOne) ClearCurrencyCode() *ProfileUpdateOne {
	puo.mutation.ClearCurrencyCode()
	return puo
}

// SetFuelVolumeUnit sets the "fuel_volume_unit" field.
func (puo *ProfileUpdateOne) SetFuelVolumeUnit(pvu profile.FuelVolumeUnit) *ProfileUpdateOne {
	puo.mutation.SetFuelVolumeUnit(pvu)
	return puo
}

// SetNillableFuelVolumeUnit sets the "fuel_volume_unit" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableFuelVolumeUnit(pvu *profile.FuelVolumeUnit) *ProfileUpdateOne {
	if pvu != nil {
		puo.SetFuelVolumeUnit(*pvu)
	}
	return puo
}

// ClearFuelVolumeUnit clears the value of the "fuel_volume_unit" field.
func (puo *ProfileUpdateOne) ClearFuelVolumeUnit() *ProfileUpdateOne {
	puo.mutation.ClearFuelVolumeUnit()
	return puo
}

// SetDistanceUnit sets the "distance_unit" field.
func (puo *ProfileUpdateOne) SetDistanceUnit(pu profile.DistanceUnit) *ProfileUpdateOne {
	puo.mutation.SetDistanceUnit(pu)
	return puo
}

// SetNillableDistanceUnit sets the "distance_unit" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableDistanceUnit(pu *profile.DistanceUnit) *ProfileUpdateOne {
	if pu != nil {
		puo.SetDistanceUnit(*pu)
	}
	return puo
}

// ClearDistanceUnit clears the value of the "distance_unit" field.
func (puo *ProfileUpdateOne) ClearDistanceUnit() *ProfileUpdateOne {
	puo.mutation.ClearDistanceUnit()
	return puo
}

// SetFuelConsumptionUnit sets the "fuel_consumption_unit" field.
func (puo *ProfileUpdateOne) SetFuelConsumptionUnit(pcu profile.FuelConsumptionUnit) *ProfileUpdateOne {
	puo.mutation.SetFuelConsumptionUnit(pcu)
	return puo
}

// SetNillableFuelConsumptionUnit sets the "fuel_consumption_unit" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableFuelConsumptionUnit(pcu *profile.FuelConsumptionUnit) *ProfileUpdateOne {
	if pcu != nil {
		puo.SetFuelConsumptionUnit(*pcu)
	}
	return puo
}

// ClearFuelConsumptionUnit clears the value of the "fuel_consumption_unit" field.
func (puo *ProfileUpdateOne) ClearFuelConsumptionUnit() *ProfileUpdateOne {
	puo.mutation.ClearFuelConsumptionUnit()
	return puo
}

// SetTemperatureUnit sets the "temperature_unit" field.
func (puo *ProfileUpdateOne) SetTemperatureUnit(pu profile.TemperatureUnit) *ProfileUpdateOne {
	puo.mutation.SetTemperatureUnit(pu)
	return puo
}

// SetNillableTemperatureUnit sets the "temperature_unit" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableTemperatureUnit(pu *profile.TemperatureUnit) *ProfileUpdateOne {
	if pu != nil {
		puo.SetTemperatureUnit(*pu)
	}
	return puo
}

// ClearTemperatureUnit clears the value of the "temperature_unit" field.
func (puo *ProfileUpdateOne) ClearTemperatureUnit() *ProfileUpdateOne {
	puo.mutation.ClearTemperatureUnit()
	return puo
}

// SetPowerUnit sets the "power_unit" field.
func (puo *ProfileUpdateOne) SetPowerUnit(pu profile.PowerUnit) *ProfileUpdateOne {
	puo.mutation.SetPowerUnit(pu)
	return puo
}

// SetNillablePowerUnit sets the "power_unit" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillablePowerUnit(pu *profile.PowerUnit) *ProfileUpdateOne {
	if pu != nil {
		puo.SetPowerUnit(*pu)
	}
	return puo
}

// ClearPowerUnit clears the value of the "power_unit" field.
func (puo *ProfileUpdateOne) ClearPowerUnit() *ProfileUpdateOne {
	puo.mutation.ClearPowerUnit()
	return puo
}

// SetTorqueUnit sets the "torque_unit" field.
func (puo *ProfileUpdateOne) SetTorqueUnit(pu profile.TorqueUnit) *ProfileUpdateOne {
	puo.mutation.SetTorqueUnit(pu)
	return puo
}

// SetNillableTorqueUnit sets the "torque_unit" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableTorqueUnit(pu *profile.TorqueUnit) *ProfileUpdateOne {
	if pu != nil {
		puo.SetTorqueUnit(*pu)
	}
	return puo
}

// ClearTorqueUnit clears the value of the "torque_unit" field.
func (puo *ProfileUpdateOne) ClearTorqueUnit() *ProfileUpdateOne {
	puo.mutation.ClearTorqueUnit()
	return puo
}

// SetVisibility sets the "visibility" field.
func (puo *ProfileUpdateOne) SetVisibility(pr profile.Visibility) *ProfileUpdateOne {
	puo.mutation.SetVisibility(pr)
	return puo
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (puo *ProfileUpdateOne) SetNillableVisibility(pr *profile.Visibility) *ProfileUpdateOne {
	if pr != nil {
		puo.SetVisibility(*pr)
	}
	return puo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (puo *ProfileUpdateOne) SetUserID(id uuid.UUID) *ProfileUpdateOne {
	puo.mutation.SetUserID(id)
	return puo
}

// SetUser sets the "user" edge to the User entity.
func (puo *ProfileUpdateOne) SetUser(u *User) *ProfileUpdateOne {
	return puo.SetUserID(u.ID)
}

// Mutation returns the ProfileMutation object of the builder.
func (puo *ProfileUpdateOne) Mutation() *ProfileMutation {
	return puo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (puo *ProfileUpdateOne) ClearUser() *ProfileUpdateOne {
	puo.mutation.ClearUser()
	return puo
}

// Where appends a list predicates to the ProfileUpdate builder.
func (puo *ProfileUpdateOne) Where(ps ...predicate.Profile) *ProfileUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProfileUpdateOne) Select(field string, fields ...string) *ProfileUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Profile entity.
func (puo *ProfileUpdateOne) Save(ctx context.Context) (*Profile, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProfileUpdateOne) SaveX(ctx context.Context) *Profile {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProfileUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProfileUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProfileUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdateTime(); !ok {
		v := profile.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProfileUpdateOne) check() error {
	if v, ok := puo.mutation.FuelVolumeUnit(); ok {
		if err := profile.FuelVolumeUnitValidator(v); err != nil {
			return &ValidationError{Name: "fuel_volume_unit", err: fmt.Errorf(`ent: validator failed for field "Profile.fuel_volume_unit": %w`, err)}
		}
	}
	if v, ok := puo.mutation.DistanceUnit(); ok {
		if err := profile.DistanceUnitValidator(v); err != nil {
			return &ValidationError{Name: "distance_unit", err: fmt.Errorf(`ent: validator failed for field "Profile.distance_unit": %w`, err)}
		}
	}
	if v, ok := puo.mutation.FuelConsumptionUnit(); ok {
		if err := profile.FuelConsumptionUnitValidator(v); err != nil {
			return &ValidationError{Name: "fuel_consumption_unit", err: fmt.Errorf(`ent: validator failed for field "Profile.fuel_consumption_unit": %w`, err)}
		}
	}
	if v, ok := puo.mutation.TemperatureUnit(); ok {
		if err := profile.TemperatureUnitValidator(v); err != nil {
			return &ValidationError{Name: "temperature_unit", err: fmt.Errorf(`ent: validator failed for field "Profile.temperature_unit": %w`, err)}
		}
	}
	if v, ok := puo.mutation.PowerUnit(); ok {
		if err := profile.PowerUnitValidator(v); err != nil {
			return &ValidationError{Name: "power_unit", err: fmt.Errorf(`ent: validator failed for field "Profile.power_unit": %w`, err)}
		}
	}
	if v, ok := puo.mutation.TorqueUnit(); ok {
		if err := profile.TorqueUnitValidator(v); err != nil {
			return &ValidationError{Name: "torque_unit", err: fmt.Errorf(`ent: validator failed for field "Profile.torque_unit": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Visibility(); ok {
		if err := profile.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`ent: validator failed for field "Profile.visibility": %w`, err)}
		}
	}
	if puo.mutation.UserCleared() && len(puo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Profile.user"`)
	}
	return nil
}

func (puo *ProfileUpdateOne) sqlSave(ctx context.Context) (_node *Profile, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(profile.Table, profile.Columns, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Profile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, profile.FieldID)
		for _, f := range fields {
			if !profile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != profile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.SetField(profile.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Username(); ok {
		_spec.SetField(profile.FieldUsername, field.TypeString, value)
	}
	if puo.mutation.UsernameCleared() {
		_spec.ClearField(profile.FieldUsername, field.TypeString)
	}
	if value, ok := puo.mutation.FirstName(); ok {
		_spec.SetField(profile.FieldFirstName, field.TypeString, value)
	}
	if puo.mutation.FirstNameCleared() {
		_spec.ClearField(profile.FieldFirstName, field.TypeString)
	}
	if value, ok := puo.mutation.LastName(); ok {
		_spec.SetField(profile.FieldLastName, field.TypeString, value)
	}
	if puo.mutation.LastNameCleared() {
		_spec.ClearField(profile.FieldLastName, field.TypeString)
	}
	if value, ok := puo.mutation.Picture(); ok {
		_spec.SetField(profile.FieldPicture, field.TypeUUID, value)
	}
	if puo.mutation.PictureCleared() {
		_spec.ClearField(profile.FieldPicture, field.TypeUUID)
	}
	if value, ok := puo.mutation.CurrencyCode(); ok {
		_spec.SetField(profile.FieldCurrencyCode, field.TypeString, value)
	}
	if puo.mutation.CurrencyCodeCleared() {
		_spec.ClearField(profile.FieldCurrencyCode, field.TypeString)
	}
	if value, ok := puo.mutation.FuelVolumeUnit(); ok {
		_spec.SetField(profile.FieldFuelVolumeUnit, field.TypeEnum, value)
	}
	if puo.mutation.FuelVolumeUnitCleared() {
		_spec.ClearField(profile.FieldFuelVolumeUnit, field.TypeEnum)
	}
	if value, ok := puo.mutation.DistanceUnit(); ok {
		_spec.SetField(profile.FieldDistanceUnit, field.TypeEnum, value)
	}
	if puo.mutation.DistanceUnitCleared() {
		_spec.ClearField(profile.FieldDistanceUnit, field.TypeEnum)
	}
	if value, ok := puo.mutation.FuelConsumptionUnit(); ok {
		_spec.SetField(profile.FieldFuelConsumptionUnit, field.TypeEnum, value)
	}
	if puo.mutation.FuelConsumptionUnitCleared() {
		_spec.ClearField(profile.FieldFuelConsumptionUnit, field.TypeEnum)
	}
	if value, ok := puo.mutation.TemperatureUnit(); ok {
		_spec.SetField(profile.FieldTemperatureUnit, field.TypeEnum, value)
	}
	if puo.mutation.TemperatureUnitCleared() {
		_spec.ClearField(profile.FieldTemperatureUnit, field.TypeEnum)
	}
	if value, ok := puo.mutation.PowerUnit(); ok {
		_spec.SetField(profile.FieldPowerUnit, field.TypeEnum, value)
	}
	if puo.mutation.PowerUnitCleared() {
		_spec.ClearField(profile.FieldPowerUnit, field.TypeEnum)
	}
	if value, ok := puo.mutation.TorqueUnit(); ok {
		_spec.SetField(profile.FieldTorqueUnit, field.TypeEnum, value)
	}
	if puo.mutation.TorqueUnitCleared() {
		_spec.ClearField(profile.FieldTorqueUnit, field.TypeEnum)
	}
	if value, ok := puo.mutation.Visibility(); ok {
		_spec.SetField(profile.FieldVisibility, field.TypeEnum, value)
	}
	if puo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Profile{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
