// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/Dan6erbond/revline/ent/user"
	"github.com/Dan6erbond/revline/ent/usersettings"
	"github.com/google/uuid"
)

// UserSettingsUpdate is the builder for updating UserSettings entities.
type UserSettingsUpdate struct {
	config
	hooks    []Hook
	mutation *UserSettingsMutation
}

// Where appends a list predicates to the UserSettingsUpdate builder.
func (usu *UserSettingsUpdate) Where(ps ...predicate.UserSettings) *UserSettingsUpdate {
	usu.mutation.Where(ps...)
	return usu
}

// SetUpdateTime sets the "update_time" field.
func (usu *UserSettingsUpdate) SetUpdateTime(t time.Time) *UserSettingsUpdate {
	usu.mutation.SetUpdateTime(t)
	return usu
}

// SetCurrencyCode sets the "currency_code" field.
func (usu *UserSettingsUpdate) SetCurrencyCode(s string) *UserSettingsUpdate {
	usu.mutation.SetCurrencyCode(s)
	return usu
}

// SetNillableCurrencyCode sets the "currency_code" field if the given value is not nil.
func (usu *UserSettingsUpdate) SetNillableCurrencyCode(s *string) *UserSettingsUpdate {
	if s != nil {
		usu.SetCurrencyCode(*s)
	}
	return usu
}

// ClearCurrencyCode clears the value of the "currency_code" field.
func (usu *UserSettingsUpdate) ClearCurrencyCode() *UserSettingsUpdate {
	usu.mutation.ClearCurrencyCode()
	return usu
}

// SetFuelVolumeUnit sets the "fuel_volume_unit" field.
func (usu *UserSettingsUpdate) SetFuelVolumeUnit(uvu usersettings.FuelVolumeUnit) *UserSettingsUpdate {
	usu.mutation.SetFuelVolumeUnit(uvu)
	return usu
}

// SetNillableFuelVolumeUnit sets the "fuel_volume_unit" field if the given value is not nil.
func (usu *UserSettingsUpdate) SetNillableFuelVolumeUnit(uvu *usersettings.FuelVolumeUnit) *UserSettingsUpdate {
	if uvu != nil {
		usu.SetFuelVolumeUnit(*uvu)
	}
	return usu
}

// ClearFuelVolumeUnit clears the value of the "fuel_volume_unit" field.
func (usu *UserSettingsUpdate) ClearFuelVolumeUnit() *UserSettingsUpdate {
	usu.mutation.ClearFuelVolumeUnit()
	return usu
}

// SetDistanceUnit sets the "distance_unit" field.
func (usu *UserSettingsUpdate) SetDistanceUnit(uu usersettings.DistanceUnit) *UserSettingsUpdate {
	usu.mutation.SetDistanceUnit(uu)
	return usu
}

// SetNillableDistanceUnit sets the "distance_unit" field if the given value is not nil.
func (usu *UserSettingsUpdate) SetNillableDistanceUnit(uu *usersettings.DistanceUnit) *UserSettingsUpdate {
	if uu != nil {
		usu.SetDistanceUnit(*uu)
	}
	return usu
}

// ClearDistanceUnit clears the value of the "distance_unit" field.
func (usu *UserSettingsUpdate) ClearDistanceUnit() *UserSettingsUpdate {
	usu.mutation.ClearDistanceUnit()
	return usu
}

// SetFuelConsumptionUnit sets the "fuel_consumption_unit" field.
func (usu *UserSettingsUpdate) SetFuelConsumptionUnit(ucu usersettings.FuelConsumptionUnit) *UserSettingsUpdate {
	usu.mutation.SetFuelConsumptionUnit(ucu)
	return usu
}

// SetNillableFuelConsumptionUnit sets the "fuel_consumption_unit" field if the given value is not nil.
func (usu *UserSettingsUpdate) SetNillableFuelConsumptionUnit(ucu *usersettings.FuelConsumptionUnit) *UserSettingsUpdate {
	if ucu != nil {
		usu.SetFuelConsumptionUnit(*ucu)
	}
	return usu
}

// ClearFuelConsumptionUnit clears the value of the "fuel_consumption_unit" field.
func (usu *UserSettingsUpdate) ClearFuelConsumptionUnit() *UserSettingsUpdate {
	usu.mutation.ClearFuelConsumptionUnit()
	return usu
}

// SetTemperatureUnit sets the "temperature_unit" field.
func (usu *UserSettingsUpdate) SetTemperatureUnit(uu usersettings.TemperatureUnit) *UserSettingsUpdate {
	usu.mutation.SetTemperatureUnit(uu)
	return usu
}

// SetNillableTemperatureUnit sets the "temperature_unit" field if the given value is not nil.
func (usu *UserSettingsUpdate) SetNillableTemperatureUnit(uu *usersettings.TemperatureUnit) *UserSettingsUpdate {
	if uu != nil {
		usu.SetTemperatureUnit(*uu)
	}
	return usu
}

// ClearTemperatureUnit clears the value of the "temperature_unit" field.
func (usu *UserSettingsUpdate) ClearTemperatureUnit() *UserSettingsUpdate {
	usu.mutation.ClearTemperatureUnit()
	return usu
}

// SetPowerUnit sets the "power_unit" field.
func (usu *UserSettingsUpdate) SetPowerUnit(uu usersettings.PowerUnit) *UserSettingsUpdate {
	usu.mutation.SetPowerUnit(uu)
	return usu
}

// SetNillablePowerUnit sets the "power_unit" field if the given value is not nil.
func (usu *UserSettingsUpdate) SetNillablePowerUnit(uu *usersettings.PowerUnit) *UserSettingsUpdate {
	if uu != nil {
		usu.SetPowerUnit(*uu)
	}
	return usu
}

// ClearPowerUnit clears the value of the "power_unit" field.
func (usu *UserSettingsUpdate) ClearPowerUnit() *UserSettingsUpdate {
	usu.mutation.ClearPowerUnit()
	return usu
}

// SetTorqueUnit sets the "torque_unit" field.
func (usu *UserSettingsUpdate) SetTorqueUnit(uu usersettings.TorqueUnit) *UserSettingsUpdate {
	usu.mutation.SetTorqueUnit(uu)
	return usu
}

// SetNillableTorqueUnit sets the "torque_unit" field if the given value is not nil.
func (usu *UserSettingsUpdate) SetNillableTorqueUnit(uu *usersettings.TorqueUnit) *UserSettingsUpdate {
	if uu != nil {
		usu.SetTorqueUnit(*uu)
	}
	return usu
}

// ClearTorqueUnit clears the value of the "torque_unit" field.
func (usu *UserSettingsUpdate) ClearTorqueUnit() *UserSettingsUpdate {
	usu.mutation.ClearTorqueUnit()
	return usu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (usu *UserSettingsUpdate) SetUserID(id uuid.UUID) *UserSettingsUpdate {
	usu.mutation.SetUserID(id)
	return usu
}

// SetUser sets the "user" edge to the User entity.
func (usu *UserSettingsUpdate) SetUser(u *User) *UserSettingsUpdate {
	return usu.SetUserID(u.ID)
}

// Mutation returns the UserSettingsMutation object of the builder.
func (usu *UserSettingsUpdate) Mutation() *UserSettingsMutation {
	return usu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (usu *UserSettingsUpdate) ClearUser() *UserSettingsUpdate {
	usu.mutation.ClearUser()
	return usu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (usu *UserSettingsUpdate) Save(ctx context.Context) (int, error) {
	usu.defaults()
	return withHooks(ctx, usu.sqlSave, usu.mutation, usu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usu *UserSettingsUpdate) SaveX(ctx context.Context) int {
	affected, err := usu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (usu *UserSettingsUpdate) Exec(ctx context.Context) error {
	_, err := usu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usu *UserSettingsUpdate) ExecX(ctx context.Context) {
	if err := usu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usu *UserSettingsUpdate) defaults() {
	if _, ok := usu.mutation.UpdateTime(); !ok {
		v := usersettings.UpdateDefaultUpdateTime()
		usu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usu *UserSettingsUpdate) check() error {
	if v, ok := usu.mutation.FuelVolumeUnit(); ok {
		if err := usersettings.FuelVolumeUnitValidator(v); err != nil {
			return &ValidationError{Name: "fuel_volume_unit", err: fmt.Errorf(`ent: validator failed for field "UserSettings.fuel_volume_unit": %w`, err)}
		}
	}
	if v, ok := usu.mutation.DistanceUnit(); ok {
		if err := usersettings.DistanceUnitValidator(v); err != nil {
			return &ValidationError{Name: "distance_unit", err: fmt.Errorf(`ent: validator failed for field "UserSettings.distance_unit": %w`, err)}
		}
	}
	if v, ok := usu.mutation.FuelConsumptionUnit(); ok {
		if err := usersettings.FuelConsumptionUnitValidator(v); err != nil {
			return &ValidationError{Name: "fuel_consumption_unit", err: fmt.Errorf(`ent: validator failed for field "UserSettings.fuel_consumption_unit": %w`, err)}
		}
	}
	if v, ok := usu.mutation.TemperatureUnit(); ok {
		if err := usersettings.TemperatureUnitValidator(v); err != nil {
			return &ValidationError{Name: "temperature_unit", err: fmt.Errorf(`ent: validator failed for field "UserSettings.temperature_unit": %w`, err)}
		}
	}
	if v, ok := usu.mutation.PowerUnit(); ok {
		if err := usersettings.PowerUnitValidator(v); err != nil {
			return &ValidationError{Name: "power_unit", err: fmt.Errorf(`ent: validator failed for field "UserSettings.power_unit": %w`, err)}
		}
	}
	if v, ok := usu.mutation.TorqueUnit(); ok {
		if err := usersettings.TorqueUnitValidator(v); err != nil {
			return &ValidationError{Name: "torque_unit", err: fmt.Errorf(`ent: validator failed for field "UserSettings.torque_unit": %w`, err)}
		}
	}
	if usu.mutation.UserCleared() && len(usu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserSettings.user"`)
	}
	return nil
}

func (usu *UserSettingsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := usu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usersettings.Table, usersettings.Columns, sqlgraph.NewFieldSpec(usersettings.FieldID, field.TypeUUID))
	if ps := usu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usu.mutation.UpdateTime(); ok {
		_spec.SetField(usersettings.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := usu.mutation.CurrencyCode(); ok {
		_spec.SetField(usersettings.FieldCurrencyCode, field.TypeString, value)
	}
	if usu.mutation.CurrencyCodeCleared() {
		_spec.ClearField(usersettings.FieldCurrencyCode, field.TypeString)
	}
	if value, ok := usu.mutation.FuelVolumeUnit(); ok {
		_spec.SetField(usersettings.FieldFuelVolumeUnit, field.TypeEnum, value)
	}
	if usu.mutation.FuelVolumeUnitCleared() {
		_spec.ClearField(usersettings.FieldFuelVolumeUnit, field.TypeEnum)
	}
	if value, ok := usu.mutation.DistanceUnit(); ok {
		_spec.SetField(usersettings.FieldDistanceUnit, field.TypeEnum, value)
	}
	if usu.mutation.DistanceUnitCleared() {
		_spec.ClearField(usersettings.FieldDistanceUnit, field.TypeEnum)
	}
	if value, ok := usu.mutation.FuelConsumptionUnit(); ok {
		_spec.SetField(usersettings.FieldFuelConsumptionUnit, field.TypeEnum, value)
	}
	if usu.mutation.FuelConsumptionUnitCleared() {
		_spec.ClearField(usersettings.FieldFuelConsumptionUnit, field.TypeEnum)
	}
	if value, ok := usu.mutation.TemperatureUnit(); ok {
		_spec.SetField(usersettings.FieldTemperatureUnit, field.TypeEnum, value)
	}
	if usu.mutation.TemperatureUnitCleared() {
		_spec.ClearField(usersettings.FieldTemperatureUnit, field.TypeEnum)
	}
	if value, ok := usu.mutation.PowerUnit(); ok {
		_spec.SetField(usersettings.FieldPowerUnit, field.TypeEnum, value)
	}
	if usu.mutation.PowerUnitCleared() {
		_spec.ClearField(usersettings.FieldPowerUnit, field.TypeEnum)
	}
	if value, ok := usu.mutation.TorqueUnit(); ok {
		_spec.SetField(usersettings.FieldTorqueUnit, field.TypeEnum, value)
	}
	if usu.mutation.TorqueUnitCleared() {
		_spec.ClearField(usersettings.FieldTorqueUnit, field.TypeEnum)
	}
	if usu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usersettings.UserTable,
			Columns: []string{usersettings.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usersettings.UserTable,
			Columns: []string{usersettings.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, usu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersettings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	usu.mutation.done = true
	return n, nil
}

// UserSettingsUpdateOne is the builder for updating a single UserSettings entity.
type UserSettingsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserSettingsMutation
}

// SetUpdateTime sets the "update_time" field.
func (usuo *UserSettingsUpdateOne) SetUpdateTime(t time.Time) *UserSettingsUpdateOne {
	usuo.mutation.SetUpdateTime(t)
	return usuo
}

// SetCurrencyCode sets the "currency_code" field.
func (usuo *UserSettingsUpdateOne) SetCurrencyCode(s string) *UserSettingsUpdateOne {
	usuo.mutation.SetCurrencyCode(s)
	return usuo
}

// SetNillableCurrencyCode sets the "currency_code" field if the given value is not nil.
func (usuo *UserSettingsUpdateOne) SetNillableCurrencyCode(s *string) *UserSettingsUpdateOne {
	if s != nil {
		usuo.SetCurrencyCode(*s)
	}
	return usuo
}

// ClearCurrencyCode clears the value of the "currency_code" field.
func (usuo *UserSettingsUpdateOne) ClearCurrencyCode() *UserSettingsUpdateOne {
	usuo.mutation.ClearCurrencyCode()
	return usuo
}

// SetFuelVolumeUnit sets the "fuel_volume_unit" field.
func (usuo *UserSettingsUpdateOne) SetFuelVolumeUnit(uvu usersettings.FuelVolumeUnit) *UserSettingsUpdateOne {
	usuo.mutation.SetFuelVolumeUnit(uvu)
	return usuo
}

// SetNillableFuelVolumeUnit sets the "fuel_volume_unit" field if the given value is not nil.
func (usuo *UserSettingsUpdateOne) SetNillableFuelVolumeUnit(uvu *usersettings.FuelVolumeUnit) *UserSettingsUpdateOne {
	if uvu != nil {
		usuo.SetFuelVolumeUnit(*uvu)
	}
	return usuo
}

// ClearFuelVolumeUnit clears the value of the "fuel_volume_unit" field.
func (usuo *UserSettingsUpdateOne) ClearFuelVolumeUnit() *UserSettingsUpdateOne {
	usuo.mutation.ClearFuelVolumeUnit()
	return usuo
}

// SetDistanceUnit sets the "distance_unit" field.
func (usuo *UserSettingsUpdateOne) SetDistanceUnit(uu usersettings.DistanceUnit) *UserSettingsUpdateOne {
	usuo.mutation.SetDistanceUnit(uu)
	return usuo
}

// SetNillableDistanceUnit sets the "distance_unit" field if the given value is not nil.
func (usuo *UserSettingsUpdateOne) SetNillableDistanceUnit(uu *usersettings.DistanceUnit) *UserSettingsUpdateOne {
	if uu != nil {
		usuo.SetDistanceUnit(*uu)
	}
	return usuo
}

// ClearDistanceUnit clears the value of the "distance_unit" field.
func (usuo *UserSettingsUpdateOne) ClearDistanceUnit() *UserSettingsUpdateOne {
	usuo.mutation.ClearDistanceUnit()
	return usuo
}

// SetFuelConsumptionUnit sets the "fuel_consumption_unit" field.
func (usuo *UserSettingsUpdateOne) SetFuelConsumptionUnit(ucu usersettings.FuelConsumptionUnit) *UserSettingsUpdateOne {
	usuo.mutation.SetFuelConsumptionUnit(ucu)
	return usuo
}

// SetNillableFuelConsumptionUnit sets the "fuel_consumption_unit" field if the given value is not nil.
func (usuo *UserSettingsUpdateOne) SetNillableFuelConsumptionUnit(ucu *usersettings.FuelConsumptionUnit) *UserSettingsUpdateOne {
	if ucu != nil {
		usuo.SetFuelConsumptionUnit(*ucu)
	}
	return usuo
}

// ClearFuelConsumptionUnit clears the value of the "fuel_consumption_unit" field.
func (usuo *UserSettingsUpdateOne) ClearFuelConsumptionUnit() *UserSettingsUpdateOne {
	usuo.mutation.ClearFuelConsumptionUnit()
	return usuo
}

// SetTemperatureUnit sets the "temperature_unit" field.
func (usuo *UserSettingsUpdateOne) SetTemperatureUnit(uu usersettings.TemperatureUnit) *UserSettingsUpdateOne {
	usuo.mutation.SetTemperatureUnit(uu)
	return usuo
}

// SetNillableTemperatureUnit sets the "temperature_unit" field if the given value is not nil.
func (usuo *UserSettingsUpdateOne) SetNillableTemperatureUnit(uu *usersettings.TemperatureUnit) *UserSettingsUpdateOne {
	if uu != nil {
		usuo.SetTemperatureUnit(*uu)
	}
	return usuo
}

// ClearTemperatureUnit clears the value of the "temperature_unit" field.
func (usuo *UserSettingsUpdateOne) ClearTemperatureUnit() *UserSettingsUpdateOne {
	usuo.mutation.ClearTemperatureUnit()
	return usuo
}

// SetPowerUnit sets the "power_unit" field.
func (usuo *UserSettingsUpdateOne) SetPowerUnit(uu usersettings.PowerUnit) *UserSettingsUpdateOne {
	usuo.mutation.SetPowerUnit(uu)
	return usuo
}

// SetNillablePowerUnit sets the "power_unit" field if the given value is not nil.
func (usuo *UserSettingsUpdateOne) SetNillablePowerUnit(uu *usersettings.PowerUnit) *UserSettingsUpdateOne {
	if uu != nil {
		usuo.SetPowerUnit(*uu)
	}
	return usuo
}

// ClearPowerUnit clears the value of the "power_unit" field.
func (usuo *UserSettingsUpdateOne) ClearPowerUnit() *UserSettingsUpdateOne {
	usuo.mutation.ClearPowerUnit()
	return usuo
}

// SetTorqueUnit sets the "torque_unit" field.
func (usuo *UserSettingsUpdateOne) SetTorqueUnit(uu usersettings.TorqueUnit) *UserSettingsUpdateOne {
	usuo.mutation.SetTorqueUnit(uu)
	return usuo
}

// SetNillableTorqueUnit sets the "torque_unit" field if the given value is not nil.
func (usuo *UserSettingsUpdateOne) SetNillableTorqueUnit(uu *usersettings.TorqueUnit) *UserSettingsUpdateOne {
	if uu != nil {
		usuo.SetTorqueUnit(*uu)
	}
	return usuo
}

// ClearTorqueUnit clears the value of the "torque_unit" field.
func (usuo *UserSettingsUpdateOne) ClearTorqueUnit() *UserSettingsUpdateOne {
	usuo.mutation.ClearTorqueUnit()
	return usuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (usuo *UserSettingsUpdateOne) SetUserID(id uuid.UUID) *UserSettingsUpdateOne {
	usuo.mutation.SetUserID(id)
	return usuo
}

// SetUser sets the "user" edge to the User entity.
func (usuo *UserSettingsUpdateOne) SetUser(u *User) *UserSettingsUpdateOne {
	return usuo.SetUserID(u.ID)
}

// Mutation returns the UserSettingsMutation object of the builder.
func (usuo *UserSettingsUpdateOne) Mutation() *UserSettingsMutation {
	return usuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (usuo *UserSettingsUpdateOne) ClearUser() *UserSettingsUpdateOne {
	usuo.mutation.ClearUser()
	return usuo
}

// Where appends a list predicates to the UserSettingsUpdate builder.
func (usuo *UserSettingsUpdateOne) Where(ps ...predicate.UserSettings) *UserSettingsUpdateOne {
	usuo.mutation.Where(ps...)
	return usuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (usuo *UserSettingsUpdateOne) Select(field string, fields ...string) *UserSettingsUpdateOne {
	usuo.fields = append([]string{field}, fields...)
	return usuo
}

// Save executes the query and returns the updated UserSettings entity.
func (usuo *UserSettingsUpdateOne) Save(ctx context.Context) (*UserSettings, error) {
	usuo.defaults()
	return withHooks(ctx, usuo.sqlSave, usuo.mutation, usuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usuo *UserSettingsUpdateOne) SaveX(ctx context.Context) *UserSettings {
	node, err := usuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (usuo *UserSettingsUpdateOne) Exec(ctx context.Context) error {
	_, err := usuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usuo *UserSettingsUpdateOne) ExecX(ctx context.Context) {
	if err := usuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usuo *UserSettingsUpdateOne) defaults() {
	if _, ok := usuo.mutation.UpdateTime(); !ok {
		v := usersettings.UpdateDefaultUpdateTime()
		usuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usuo *UserSettingsUpdateOne) check() error {
	if v, ok := usuo.mutation.FuelVolumeUnit(); ok {
		if err := usersettings.FuelVolumeUnitValidator(v); err != nil {
			return &ValidationError{Name: "fuel_volume_unit", err: fmt.Errorf(`ent: validator failed for field "UserSettings.fuel_volume_unit": %w`, err)}
		}
	}
	if v, ok := usuo.mutation.DistanceUnit(); ok {
		if err := usersettings.DistanceUnitValidator(v); err != nil {
			return &ValidationError{Name: "distance_unit", err: fmt.Errorf(`ent: validator failed for field "UserSettings.distance_unit": %w`, err)}
		}
	}
	if v, ok := usuo.mutation.FuelConsumptionUnit(); ok {
		if err := usersettings.FuelConsumptionUnitValidator(v); err != nil {
			return &ValidationError{Name: "fuel_consumption_unit", err: fmt.Errorf(`ent: validator failed for field "UserSettings.fuel_consumption_unit": %w`, err)}
		}
	}
	if v, ok := usuo.mutation.TemperatureUnit(); ok {
		if err := usersettings.TemperatureUnitValidator(v); err != nil {
			return &ValidationError{Name: "temperature_unit", err: fmt.Errorf(`ent: validator failed for field "UserSettings.temperature_unit": %w`, err)}
		}
	}
	if v, ok := usuo.mutation.PowerUnit(); ok {
		if err := usersettings.PowerUnitValidator(v); err != nil {
			return &ValidationError{Name: "power_unit", err: fmt.Errorf(`ent: validator failed for field "UserSettings.power_unit": %w`, err)}
		}
	}
	if v, ok := usuo.mutation.TorqueUnit(); ok {
		if err := usersettings.TorqueUnitValidator(v); err != nil {
			return &ValidationError{Name: "torque_unit", err: fmt.Errorf(`ent: validator failed for field "UserSettings.torque_unit": %w`, err)}
		}
	}
	if usuo.mutation.UserCleared() && len(usuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserSettings.user"`)
	}
	return nil
}

func (usuo *UserSettingsUpdateOne) sqlSave(ctx context.Context) (_node *UserSettings, err error) {
	if err := usuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usersettings.Table, usersettings.Columns, sqlgraph.NewFieldSpec(usersettings.FieldID, field.TypeUUID))
	id, ok := usuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserSettings.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := usuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usersettings.FieldID)
		for _, f := range fields {
			if !usersettings.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usersettings.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := usuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usuo.mutation.UpdateTime(); ok {
		_spec.SetField(usersettings.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := usuo.mutation.CurrencyCode(); ok {
		_spec.SetField(usersettings.FieldCurrencyCode, field.TypeString, value)
	}
	if usuo.mutation.CurrencyCodeCleared() {
		_spec.ClearField(usersettings.FieldCurrencyCode, field.TypeString)
	}
	if value, ok := usuo.mutation.FuelVolumeUnit(); ok {
		_spec.SetField(usersettings.FieldFuelVolumeUnit, field.TypeEnum, value)
	}
	if usuo.mutation.FuelVolumeUnitCleared() {
		_spec.ClearField(usersettings.FieldFuelVolumeUnit, field.TypeEnum)
	}
	if value, ok := usuo.mutation.DistanceUnit(); ok {
		_spec.SetField(usersettings.FieldDistanceUnit, field.TypeEnum, value)
	}
	if usuo.mutation.DistanceUnitCleared() {
		_spec.ClearField(usersettings.FieldDistanceUnit, field.TypeEnum)
	}
	if value, ok := usuo.mutation.FuelConsumptionUnit(); ok {
		_spec.SetField(usersettings.FieldFuelConsumptionUnit, field.TypeEnum, value)
	}
	if usuo.mutation.FuelConsumptionUnitCleared() {
		_spec.ClearField(usersettings.FieldFuelConsumptionUnit, field.TypeEnum)
	}
	if value, ok := usuo.mutation.TemperatureUnit(); ok {
		_spec.SetField(usersettings.FieldTemperatureUnit, field.TypeEnum, value)
	}
	if usuo.mutation.TemperatureUnitCleared() {
		_spec.ClearField(usersettings.FieldTemperatureUnit, field.TypeEnum)
	}
	if value, ok := usuo.mutation.PowerUnit(); ok {
		_spec.SetField(usersettings.FieldPowerUnit, field.TypeEnum, value)
	}
	if usuo.mutation.PowerUnitCleared() {
		_spec.ClearField(usersettings.FieldPowerUnit, field.TypeEnum)
	}
	if value, ok := usuo.mutation.TorqueUnit(); ok {
		_spec.SetField(usersettings.FieldTorqueUnit, field.TypeEnum, value)
	}
	if usuo.mutation.TorqueUnitCleared() {
		_spec.ClearField(usersettings.FieldTorqueUnit, field.TypeEnum)
	}
	if usuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usersettings.UserTable,
			Columns: []string{usersettings.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usersettings.UserTable,
			Columns: []string{usersettings.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserSettings{config: usuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, usuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersettings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	usuo.mutation.done = true
	return _node, nil
}
