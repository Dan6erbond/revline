// Code generated by ent, DO NOT EDIT.

package fuelup

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldEQ(FieldUpdateTime, v))
}

// OccurredAt applies equality check predicate on the "occurred_at" field. It's identical to OccurredAtEQ.
func OccurredAt(v time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldEQ(FieldOccurredAt, v))
}

// Station applies equality check predicate on the "station" field. It's identical to StationEQ.
func Station(v string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldEQ(FieldStation, v))
}

// AmountLiters applies equality check predicate on the "amount_liters" field. It's identical to AmountLitersEQ.
func AmountLiters(v float64) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldEQ(FieldAmountLiters, v))
}

// IsFullTank applies equality check predicate on the "is_full_tank" field. It's identical to IsFullTankEQ.
func IsFullTank(v bool) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldEQ(FieldIsFullTank, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldEQ(FieldNotes, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldLTE(FieldUpdateTime, v))
}

// OccurredAtEQ applies the EQ predicate on the "occurred_at" field.
func OccurredAtEQ(v time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldEQ(FieldOccurredAt, v))
}

// OccurredAtNEQ applies the NEQ predicate on the "occurred_at" field.
func OccurredAtNEQ(v time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldNEQ(FieldOccurredAt, v))
}

// OccurredAtIn applies the In predicate on the "occurred_at" field.
func OccurredAtIn(vs ...time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldIn(FieldOccurredAt, vs...))
}

// OccurredAtNotIn applies the NotIn predicate on the "occurred_at" field.
func OccurredAtNotIn(vs ...time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldNotIn(FieldOccurredAt, vs...))
}

// OccurredAtGT applies the GT predicate on the "occurred_at" field.
func OccurredAtGT(v time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldGT(FieldOccurredAt, v))
}

// OccurredAtGTE applies the GTE predicate on the "occurred_at" field.
func OccurredAtGTE(v time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldGTE(FieldOccurredAt, v))
}

// OccurredAtLT applies the LT predicate on the "occurred_at" field.
func OccurredAtLT(v time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldLT(FieldOccurredAt, v))
}

// OccurredAtLTE applies the LTE predicate on the "occurred_at" field.
func OccurredAtLTE(v time.Time) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldLTE(FieldOccurredAt, v))
}

// StationEQ applies the EQ predicate on the "station" field.
func StationEQ(v string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldEQ(FieldStation, v))
}

// StationNEQ applies the NEQ predicate on the "station" field.
func StationNEQ(v string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldNEQ(FieldStation, v))
}

// StationIn applies the In predicate on the "station" field.
func StationIn(vs ...string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldIn(FieldStation, vs...))
}

// StationNotIn applies the NotIn predicate on the "station" field.
func StationNotIn(vs ...string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldNotIn(FieldStation, vs...))
}

// StationGT applies the GT predicate on the "station" field.
func StationGT(v string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldGT(FieldStation, v))
}

// StationGTE applies the GTE predicate on the "station" field.
func StationGTE(v string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldGTE(FieldStation, v))
}

// StationLT applies the LT predicate on the "station" field.
func StationLT(v string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldLT(FieldStation, v))
}

// StationLTE applies the LTE predicate on the "station" field.
func StationLTE(v string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldLTE(FieldStation, v))
}

// StationContains applies the Contains predicate on the "station" field.
func StationContains(v string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldContains(FieldStation, v))
}

// StationHasPrefix applies the HasPrefix predicate on the "station" field.
func StationHasPrefix(v string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldHasPrefix(FieldStation, v))
}

// StationHasSuffix applies the HasSuffix predicate on the "station" field.
func StationHasSuffix(v string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldHasSuffix(FieldStation, v))
}

// StationEqualFold applies the EqualFold predicate on the "station" field.
func StationEqualFold(v string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldEqualFold(FieldStation, v))
}

// StationContainsFold applies the ContainsFold predicate on the "station" field.
func StationContainsFold(v string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldContainsFold(FieldStation, v))
}

// AmountLitersEQ applies the EQ predicate on the "amount_liters" field.
func AmountLitersEQ(v float64) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldEQ(FieldAmountLiters, v))
}

// AmountLitersNEQ applies the NEQ predicate on the "amount_liters" field.
func AmountLitersNEQ(v float64) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldNEQ(FieldAmountLiters, v))
}

// AmountLitersIn applies the In predicate on the "amount_liters" field.
func AmountLitersIn(vs ...float64) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldIn(FieldAmountLiters, vs...))
}

// AmountLitersNotIn applies the NotIn predicate on the "amount_liters" field.
func AmountLitersNotIn(vs ...float64) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldNotIn(FieldAmountLiters, vs...))
}

// AmountLitersGT applies the GT predicate on the "amount_liters" field.
func AmountLitersGT(v float64) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldGT(FieldAmountLiters, v))
}

// AmountLitersGTE applies the GTE predicate on the "amount_liters" field.
func AmountLitersGTE(v float64) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldGTE(FieldAmountLiters, v))
}

// AmountLitersLT applies the LT predicate on the "amount_liters" field.
func AmountLitersLT(v float64) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldLT(FieldAmountLiters, v))
}

// AmountLitersLTE applies the LTE predicate on the "amount_liters" field.
func AmountLitersLTE(v float64) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldLTE(FieldAmountLiters, v))
}

// FuelCategoryEQ applies the EQ predicate on the "fuel_category" field.
func FuelCategoryEQ(v FuelCategory) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldEQ(FieldFuelCategory, v))
}

// FuelCategoryNEQ applies the NEQ predicate on the "fuel_category" field.
func FuelCategoryNEQ(v FuelCategory) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldNEQ(FieldFuelCategory, v))
}

// FuelCategoryIn applies the In predicate on the "fuel_category" field.
func FuelCategoryIn(vs ...FuelCategory) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldIn(FieldFuelCategory, vs...))
}

// FuelCategoryNotIn applies the NotIn predicate on the "fuel_category" field.
func FuelCategoryNotIn(vs ...FuelCategory) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldNotIn(FieldFuelCategory, vs...))
}

// OctaneRatingEQ applies the EQ predicate on the "octane_rating" field.
func OctaneRatingEQ(v OctaneRating) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldEQ(FieldOctaneRating, v))
}

// OctaneRatingNEQ applies the NEQ predicate on the "octane_rating" field.
func OctaneRatingNEQ(v OctaneRating) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldNEQ(FieldOctaneRating, v))
}

// OctaneRatingIn applies the In predicate on the "octane_rating" field.
func OctaneRatingIn(vs ...OctaneRating) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldIn(FieldOctaneRating, vs...))
}

// OctaneRatingNotIn applies the NotIn predicate on the "octane_rating" field.
func OctaneRatingNotIn(vs ...OctaneRating) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldNotIn(FieldOctaneRating, vs...))
}

// OctaneRatingIsNil applies the IsNil predicate on the "octane_rating" field.
func OctaneRatingIsNil() predicate.FuelUp {
	return predicate.FuelUp(sql.FieldIsNull(FieldOctaneRating))
}

// OctaneRatingNotNil applies the NotNil predicate on the "octane_rating" field.
func OctaneRatingNotNil() predicate.FuelUp {
	return predicate.FuelUp(sql.FieldNotNull(FieldOctaneRating))
}

// IsFullTankEQ applies the EQ predicate on the "is_full_tank" field.
func IsFullTankEQ(v bool) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldEQ(FieldIsFullTank, v))
}

// IsFullTankNEQ applies the NEQ predicate on the "is_full_tank" field.
func IsFullTankNEQ(v bool) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldNEQ(FieldIsFullTank, v))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.FuelUp {
	return predicate.FuelUp(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.FuelUp {
	return predicate.FuelUp(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.FuelUp {
	return predicate.FuelUp(sql.FieldContainsFold(FieldNotes, v))
}

// HasCar applies the HasEdge predicate on the "car" edge.
func HasCar() predicate.FuelUp {
	return predicate.FuelUp(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CarTable, CarColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarWith applies the HasEdge predicate on the "car" edge with a given conditions (other predicates).
func HasCarWith(preds ...predicate.Car) predicate.FuelUp {
	return predicate.FuelUp(func(s *sql.Selector) {
		step := newCarStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOdometerReading applies the HasEdge predicate on the "odometer_reading" edge.
func HasOdometerReading() predicate.FuelUp {
	return predicate.FuelUp(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OdometerReadingTable, OdometerReadingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOdometerReadingWith applies the HasEdge predicate on the "odometer_reading" edge with a given conditions (other predicates).
func HasOdometerReadingWith(preds ...predicate.OdometerReading) predicate.FuelUp {
	return predicate.FuelUp(func(s *sql.Selector) {
		step := newOdometerReadingStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExpense applies the HasEdge predicate on the "expense" edge.
func HasExpense() predicate.FuelUp {
	return predicate.FuelUp(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ExpenseTable, ExpenseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExpenseWith applies the HasEdge predicate on the "expense" edge with a given conditions (other predicates).
func HasExpenseWith(preds ...predicate.Expense) predicate.FuelUp {
	return predicate.FuelUp(func(s *sql.Selector) {
		step := newExpenseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FuelUp) predicate.FuelUp {
	return predicate.FuelUp(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FuelUp) predicate.FuelUp {
	return predicate.FuelUp(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FuelUp) predicate.FuelUp {
	return predicate.FuelUp(sql.NotPredicates(p))
}
