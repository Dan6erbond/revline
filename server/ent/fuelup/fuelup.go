// Code generated by ent, DO NOT EDIT.

package fuelup

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the fuelup type in the database.
	Label = "fuel_up"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldOccurredAt holds the string denoting the occurred_at field in the database.
	FieldOccurredAt = "occurred_at"
	// FieldStation holds the string denoting the station field in the database.
	FieldStation = "station"
	// FieldAmountLiters holds the string denoting the amount_liters field in the database.
	FieldAmountLiters = "amount_liters"
	// FieldCost holds the string denoting the cost field in the database.
	FieldCost = "cost"
	// FieldFuelCategory holds the string denoting the fuel_category field in the database.
	FieldFuelCategory = "fuel_category"
	// FieldOctaneRating holds the string denoting the octane_rating field in the database.
	FieldOctaneRating = "octane_rating"
	// FieldIsFullTank holds the string denoting the is_full_tank field in the database.
	FieldIsFullTank = "is_full_tank"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// EdgeCar holds the string denoting the car edge name in mutations.
	EdgeCar = "car"
	// EdgeOdometerReading holds the string denoting the odometer_reading edge name in mutations.
	EdgeOdometerReading = "odometer_reading"
	// Table holds the table name of the fuelup in the database.
	Table = "fuel_ups"
	// CarTable is the table that holds the car relation/edge.
	CarTable = "fuel_ups"
	// CarInverseTable is the table name for the Car entity.
	// It exists in this package in order to avoid circular dependency with the "car" package.
	CarInverseTable = "cars"
	// CarColumn is the table column denoting the car relation/edge.
	CarColumn = "car_fuel_ups"
	// OdometerReadingTable is the table that holds the odometer_reading relation/edge.
	OdometerReadingTable = "fuel_ups"
	// OdometerReadingInverseTable is the table name for the OdometerReading entity.
	// It exists in this package in order to avoid circular dependency with the "odometerreading" package.
	OdometerReadingInverseTable = "odometer_readings"
	// OdometerReadingColumn is the table column denoting the odometer_reading relation/edge.
	OdometerReadingColumn = "odometer_reading_fuel_up"
)

// Columns holds all SQL columns for fuelup fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldOccurredAt,
	FieldStation,
	FieldAmountLiters,
	FieldCost,
	FieldFuelCategory,
	FieldOctaneRating,
	FieldIsFullTank,
	FieldNotes,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "fuel_ups"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"car_fuel_ups",
	"odometer_reading_fuel_up",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultIsFullTank holds the default value on creation for the "is_full_tank" field.
	DefaultIsFullTank bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// FuelCategory defines the type for the "fuel_category" enum field.
type FuelCategory string

// FuelCategory values.
const (
	FuelCategoryPetrol   FuelCategory = "petrol"
	FuelCategoryDiesel   FuelCategory = "diesel"
	FuelCategoryElectric FuelCategory = "electric"
	FuelCategoryLpg      FuelCategory = "lpg"
	FuelCategoryOther    FuelCategory = "other"
)

func (fc FuelCategory) String() string {
	return string(fc)
}

// FuelCategoryValidator is a validator for the "fuel_category" field enum values. It is called by the builders before save.
func FuelCategoryValidator(fc FuelCategory) error {
	switch fc {
	case FuelCategoryPetrol, FuelCategoryDiesel, FuelCategoryElectric, FuelCategoryLpg, FuelCategoryOther:
		return nil
	default:
		return fmt.Errorf("fuelup: invalid enum value for fuel_category field: %q", fc)
	}
}

// OctaneRating defines the type for the "octane_rating" enum field.
type OctaneRating string

// OctaneRating values.
const (
	OctaneRatingRon91  OctaneRating = "ron91"
	OctaneRatingRon95  OctaneRating = "ron95"
	OctaneRatingRon98  OctaneRating = "ron98"
	OctaneRatingRon100 OctaneRating = "ron100"
	OctaneRatingE85    OctaneRating = "e85"
	OctaneRatingRace   OctaneRating = "race"
)

func (or OctaneRating) String() string {
	return string(or)
}

// OctaneRatingValidator is a validator for the "octane_rating" field enum values. It is called by the builders before save.
func OctaneRatingValidator(or OctaneRating) error {
	switch or {
	case OctaneRatingRon91, OctaneRatingRon95, OctaneRatingRon98, OctaneRatingRon100, OctaneRatingE85, OctaneRatingRace:
		return nil
	default:
		return fmt.Errorf("fuelup: invalid enum value for octane_rating field: %q", or)
	}
}

// OrderOption defines the ordering options for the FuelUp queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByOccurredAt orders the results by the occurred_at field.
func ByOccurredAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOccurredAt, opts...).ToFunc()
}

// ByStation orders the results by the station field.
func ByStation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStation, opts...).ToFunc()
}

// ByAmountLiters orders the results by the amount_liters field.
func ByAmountLiters(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmountLiters, opts...).ToFunc()
}

// ByCost orders the results by the cost field.
func ByCost(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCost, opts...).ToFunc()
}

// ByFuelCategory orders the results by the fuel_category field.
func ByFuelCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFuelCategory, opts...).ToFunc()
}

// ByOctaneRating orders the results by the octane_rating field.
func ByOctaneRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOctaneRating, opts...).ToFunc()
}

// ByIsFullTank orders the results by the is_full_tank field.
func ByIsFullTank(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsFullTank, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByCarField orders the results by car field.
func ByCarField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarStep(), sql.OrderByField(field, opts...))
	}
}

// ByOdometerReadingField orders the results by odometer_reading field.
func ByOdometerReadingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOdometerReadingStep(), sql.OrderByField(field, opts...))
	}
}
func newCarStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CarTable, CarColumn),
	)
}
func newOdometerReadingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OdometerReadingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, OdometerReadingTable, OdometerReadingColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e FuelCategory) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *FuelCategory) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = FuelCategory(str)
	if err := FuelCategoryValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid FuelCategory", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e OctaneRating) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *OctaneRating) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = OctaneRating(str)
	if err := OctaneRatingValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid OctaneRating", str)
	}
	return nil
}
