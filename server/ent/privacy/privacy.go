// Code generated by ent, DO NOT EDIT.

package privacy

import (
	"context"

	"github.com/Dan6erbond/revline/ent"

	"entgo.io/ent/entql"
	"entgo.io/ent/privacy"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with allow decision.
	Allow = privacy.Allow

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with deny decision.
	Deny = privacy.Deny

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = privacy.Skip
)

// Allowf returns a formatted wrapped Allow decision.
func Allowf(format string, a ...any) error {
	return privacy.Allowf(format, a...)
}

// Denyf returns a formatted wrapped Deny decision.
func Denyf(format string, a ...any) error {
	return privacy.Denyf(format, a...)
}

// Skipf returns a formatted wrapped Skip decision.
func Skipf(format string, a ...any) error {
	return privacy.Skipf(format, a...)
}

// DecisionContext creates a new context from the given parent context with
// a policy decision attach to it.
func DecisionContext(parent context.Context, decision error) context.Context {
	return privacy.DecisionContext(parent, decision)
}

// DecisionFromContext retrieves the policy decision from the context.
func DecisionFromContext(ctx context.Context) (error, bool) {
	return privacy.DecisionFromContext(ctx)
}

type (
	// Policy groups query and mutation policies.
	Policy = privacy.Policy

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule = privacy.QueryRule
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy = privacy.QueryPolicy

	// MutationRule defines the interface which decides whether a
	// mutation is allowed and optionally modifies it.
	MutationRule = privacy.MutationRule
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy = privacy.MutationPolicy
	// MutationRuleFunc type is an adapter which allows the use of
	// ordinary functions as mutation rules.
	MutationRuleFunc = privacy.MutationRuleFunc

	// QueryMutationRule is an interface which groups query and mutation rules.
	QueryMutationRule = privacy.QueryMutationRule
)

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return privacy.AlwaysAllowRule()
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return privacy.AlwaysDenyRule()
}

// ContextQueryMutationRule creates a query/mutation rule from a context eval func.
func ContextQueryMutationRule(eval func(context.Context) error) QueryMutationRule {
	return privacy.ContextQueryMutationRule(eval)
}

// OnMutationOperation evaluates the given rule only on a given mutation operation.
func OnMutationOperation(rule MutationRule, op ent.Op) MutationRule {
	return privacy.OnMutationOperation(rule, op)
}

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	rule := MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		return Denyf("ent/privacy: operation %s is not allowed", m.Op())
	})
	return OnMutationOperation(rule, op)
}

// The AlbumQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AlbumQueryRuleFunc func(context.Context, *ent.AlbumQuery) error

// EvalQuery return f(ctx, q).
func (f AlbumQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AlbumQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AlbumQuery", q)
}

// The AlbumMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AlbumMutationRuleFunc func(context.Context, *ent.AlbumMutation) error

// EvalMutation calls f(ctx, m).
func (f AlbumMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AlbumMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AlbumMutation", m)
}

// The CarQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CarQueryRuleFunc func(context.Context, *ent.CarQuery) error

// EvalQuery return f(ctx, q).
func (f CarQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CarQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CarQuery", q)
}

// The CarMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CarMutationRuleFunc func(context.Context, *ent.CarMutation) error

// EvalMutation calls f(ctx, m).
func (f CarMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CarMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CarMutation", m)
}

// The CheckoutSessionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type CheckoutSessionQueryRuleFunc func(context.Context, *ent.CheckoutSessionQuery) error

// EvalQuery return f(ctx, q).
func (f CheckoutSessionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CheckoutSessionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.CheckoutSessionQuery", q)
}

// The CheckoutSessionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type CheckoutSessionMutationRuleFunc func(context.Context, *ent.CheckoutSessionMutation) error

// EvalMutation calls f(ctx, m).
func (f CheckoutSessionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.CheckoutSessionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.CheckoutSessionMutation", m)
}

// The DocumentQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DocumentQueryRuleFunc func(context.Context, *ent.DocumentQuery) error

// EvalQuery return f(ctx, q).
func (f DocumentQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DocumentQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DocumentQuery", q)
}

// The DocumentMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DocumentMutationRuleFunc func(context.Context, *ent.DocumentMutation) error

// EvalMutation calls f(ctx, m).
func (f DocumentMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DocumentMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DocumentMutation", m)
}

// The DragResultQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DragResultQueryRuleFunc func(context.Context, *ent.DragResultQuery) error

// EvalQuery return f(ctx, q).
func (f DragResultQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DragResultQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DragResultQuery", q)
}

// The DragResultMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DragResultMutationRuleFunc func(context.Context, *ent.DragResultMutation) error

// EvalMutation calls f(ctx, m).
func (f DragResultMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DragResultMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DragResultMutation", m)
}

// The DragSessionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DragSessionQueryRuleFunc func(context.Context, *ent.DragSessionQuery) error

// EvalQuery return f(ctx, q).
func (f DragSessionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DragSessionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DragSessionQuery", q)
}

// The DragSessionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DragSessionMutationRuleFunc func(context.Context, *ent.DragSessionMutation) error

// EvalMutation calls f(ctx, m).
func (f DragSessionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DragSessionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DragSessionMutation", m)
}

// The DynoResultQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DynoResultQueryRuleFunc func(context.Context, *ent.DynoResultQuery) error

// EvalQuery return f(ctx, q).
func (f DynoResultQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DynoResultQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DynoResultQuery", q)
}

// The DynoResultMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DynoResultMutationRuleFunc func(context.Context, *ent.DynoResultMutation) error

// EvalMutation calls f(ctx, m).
func (f DynoResultMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DynoResultMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DynoResultMutation", m)
}

// The DynoSessionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DynoSessionQueryRuleFunc func(context.Context, *ent.DynoSessionQuery) error

// EvalQuery return f(ctx, q).
func (f DynoSessionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DynoSessionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DynoSessionQuery", q)
}

// The DynoSessionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DynoSessionMutationRuleFunc func(context.Context, *ent.DynoSessionMutation) error

// EvalMutation calls f(ctx, m).
func (f DynoSessionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DynoSessionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DynoSessionMutation", m)
}

// The ExpenseQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ExpenseQueryRuleFunc func(context.Context, *ent.ExpenseQuery) error

// EvalQuery return f(ctx, q).
func (f ExpenseQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ExpenseQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ExpenseQuery", q)
}

// The ExpenseMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ExpenseMutationRuleFunc func(context.Context, *ent.ExpenseMutation) error

// EvalMutation calls f(ctx, m).
func (f ExpenseMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ExpenseMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ExpenseMutation", m)
}

// The FuelUpQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FuelUpQueryRuleFunc func(context.Context, *ent.FuelUpQuery) error

// EvalQuery return f(ctx, q).
func (f FuelUpQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FuelUpQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FuelUpQuery", q)
}

// The FuelUpMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FuelUpMutationRuleFunc func(context.Context, *ent.FuelUpMutation) error

// EvalMutation calls f(ctx, m).
func (f FuelUpMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FuelUpMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FuelUpMutation", m)
}

// The MediaQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type MediaQueryRuleFunc func(context.Context, *ent.MediaQuery) error

// EvalQuery return f(ctx, q).
func (f MediaQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MediaQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.MediaQuery", q)
}

// The MediaMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type MediaMutationRuleFunc func(context.Context, *ent.MediaMutation) error

// EvalMutation calls f(ctx, m).
func (f MediaMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.MediaMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.MediaMutation", m)
}

// The OdometerReadingQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type OdometerReadingQueryRuleFunc func(context.Context, *ent.OdometerReadingQuery) error

// EvalQuery return f(ctx, q).
func (f OdometerReadingQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OdometerReadingQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.OdometerReadingQuery", q)
}

// The OdometerReadingMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type OdometerReadingMutationRuleFunc func(context.Context, *ent.OdometerReadingMutation) error

// EvalMutation calls f(ctx, m).
func (f OdometerReadingMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.OdometerReadingMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.OdometerReadingMutation", m)
}

// The ProfileQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ProfileQueryRuleFunc func(context.Context, *ent.ProfileQuery) error

// EvalQuery return f(ctx, q).
func (f ProfileQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProfileQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ProfileQuery", q)
}

// The ProfileMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ProfileMutationRuleFunc func(context.Context, *ent.ProfileMutation) error

// EvalMutation calls f(ctx, m).
func (f ProfileMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ProfileMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ProfileMutation", m)
}

// The ServiceItemQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ServiceItemQueryRuleFunc func(context.Context, *ent.ServiceItemQuery) error

// EvalQuery return f(ctx, q).
func (f ServiceItemQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ServiceItemQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ServiceItemQuery", q)
}

// The ServiceItemMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ServiceItemMutationRuleFunc func(context.Context, *ent.ServiceItemMutation) error

// EvalMutation calls f(ctx, m).
func (f ServiceItemMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ServiceItemMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ServiceItemMutation", m)
}

// The ServiceLogQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ServiceLogQueryRuleFunc func(context.Context, *ent.ServiceLogQuery) error

// EvalQuery return f(ctx, q).
func (f ServiceLogQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ServiceLogQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ServiceLogQuery", q)
}

// The ServiceLogMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ServiceLogMutationRuleFunc func(context.Context, *ent.ServiceLogMutation) error

// EvalMutation calls f(ctx, m).
func (f ServiceLogMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ServiceLogMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ServiceLogMutation", m)
}

// The ServiceScheduleQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ServiceScheduleQueryRuleFunc func(context.Context, *ent.ServiceScheduleQuery) error

// EvalQuery return f(ctx, q).
func (f ServiceScheduleQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ServiceScheduleQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ServiceScheduleQuery", q)
}

// The ServiceScheduleMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ServiceScheduleMutationRuleFunc func(context.Context, *ent.ServiceScheduleMutation) error

// EvalMutation calls f(ctx, m).
func (f ServiceScheduleMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ServiceScheduleMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ServiceScheduleMutation", m)
}

// The SubscriptionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SubscriptionQueryRuleFunc func(context.Context, *ent.SubscriptionQuery) error

// EvalQuery return f(ctx, q).
func (f SubscriptionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SubscriptionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SubscriptionQuery", q)
}

// The SubscriptionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SubscriptionMutationRuleFunc func(context.Context, *ent.SubscriptionMutation) error

// EvalMutation calls f(ctx, m).
func (f SubscriptionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SubscriptionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SubscriptionMutation", m)
}

// The UserQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type UserQueryRuleFunc func(context.Context, *ent.UserQuery) error

// EvalQuery return f(ctx, q).
func (f UserQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.UserQuery", q)
}

// The UserMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type UserMutationRuleFunc func(context.Context, *ent.UserMutation) error

// EvalMutation calls f(ctx, m).
func (f UserMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.UserMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.UserMutation", m)
}

type (
	// Filter is the interface that wraps the Where function
	// for filtering nodes in queries and mutations.
	Filter interface {
		// Where applies a filter on the executed query/mutation.
		Where(entql.P)
	}

	// The FilterFunc type is an adapter that allows the use of ordinary
	// functions as filters for query and mutation types.
	FilterFunc func(context.Context, Filter) error
)

// EvalQuery calls f(ctx, q) if the query implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	fr, err := queryFilter(q)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

// EvalMutation calls f(ctx, q) if the mutation implements the Filter interface, otherwise it is denied.
func (f FilterFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	fr, err := mutationFilter(m)
	if err != nil {
		return err
	}
	return f(ctx, fr)
}

var _ QueryMutationRule = FilterFunc(nil)

func queryFilter(q ent.Query) (Filter, error) {
	switch q := q.(type) {
	case *ent.AlbumQuery:
		return q.Filter(), nil
	case *ent.CarQuery:
		return q.Filter(), nil
	case *ent.CheckoutSessionQuery:
		return q.Filter(), nil
	case *ent.DocumentQuery:
		return q.Filter(), nil
	case *ent.DragResultQuery:
		return q.Filter(), nil
	case *ent.DragSessionQuery:
		return q.Filter(), nil
	case *ent.DynoResultQuery:
		return q.Filter(), nil
	case *ent.DynoSessionQuery:
		return q.Filter(), nil
	case *ent.ExpenseQuery:
		return q.Filter(), nil
	case *ent.FuelUpQuery:
		return q.Filter(), nil
	case *ent.MediaQuery:
		return q.Filter(), nil
	case *ent.OdometerReadingQuery:
		return q.Filter(), nil
	case *ent.ProfileQuery:
		return q.Filter(), nil
	case *ent.ServiceItemQuery:
		return q.Filter(), nil
	case *ent.ServiceLogQuery:
		return q.Filter(), nil
	case *ent.ServiceScheduleQuery:
		return q.Filter(), nil
	case *ent.SubscriptionQuery:
		return q.Filter(), nil
	case *ent.UserQuery:
		return q.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected query type %T for query filter", q)
	}
}

func mutationFilter(m ent.Mutation) (Filter, error) {
	switch m := m.(type) {
	case *ent.AlbumMutation:
		return m.Filter(), nil
	case *ent.CarMutation:
		return m.Filter(), nil
	case *ent.CheckoutSessionMutation:
		return m.Filter(), nil
	case *ent.DocumentMutation:
		return m.Filter(), nil
	case *ent.DragResultMutation:
		return m.Filter(), nil
	case *ent.DragSessionMutation:
		return m.Filter(), nil
	case *ent.DynoResultMutation:
		return m.Filter(), nil
	case *ent.DynoSessionMutation:
		return m.Filter(), nil
	case *ent.ExpenseMutation:
		return m.Filter(), nil
	case *ent.FuelUpMutation:
		return m.Filter(), nil
	case *ent.MediaMutation:
		return m.Filter(), nil
	case *ent.OdometerReadingMutation:
		return m.Filter(), nil
	case *ent.ProfileMutation:
		return m.Filter(), nil
	case *ent.ServiceItemMutation:
		return m.Filter(), nil
	case *ent.ServiceLogMutation:
		return m.Filter(), nil
	case *ent.ServiceScheduleMutation:
		return m.Filter(), nil
	case *ent.SubscriptionMutation:
		return m.Filter(), nil
	case *ent.UserMutation:
		return m.Filter(), nil
	default:
		return nil, Denyf("ent/privacy: unexpected mutation type %T for mutation filter", m)
	}
}
