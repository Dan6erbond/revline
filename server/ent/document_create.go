// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/document"
	"github.com/Dan6erbond/revline/ent/dragsession"
	"github.com/Dan6erbond/revline/ent/dynosession"
	"github.com/Dan6erbond/revline/ent/expense"
	"github.com/Dan6erbond/revline/ent/fuelup"
	"github.com/Dan6erbond/revline/ent/servicelog"
	"github.com/google/uuid"
)

// DocumentCreate is the builder for creating a Document entity.
type DocumentCreate struct {
	config
	mutation *DocumentMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (dc *DocumentCreate) SetCreateTime(t time.Time) *DocumentCreate {
	dc.mutation.SetCreateTime(t)
	return dc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableCreateTime(t *time.Time) *DocumentCreate {
	if t != nil {
		dc.SetCreateTime(*t)
	}
	return dc
}

// SetUpdateTime sets the "update_time" field.
func (dc *DocumentCreate) SetUpdateTime(t time.Time) *DocumentCreate {
	dc.mutation.SetUpdateTime(t)
	return dc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableUpdateTime(t *time.Time) *DocumentCreate {
	if t != nil {
		dc.SetUpdateTime(*t)
	}
	return dc
}

// SetName sets the "name" field.
func (dc *DocumentCreate) SetName(s string) *DocumentCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetTags sets the "tags" field.
func (dc *DocumentCreate) SetTags(s []string) *DocumentCreate {
	dc.mutation.SetTags(s)
	return dc
}

// SetID sets the "id" field.
func (dc *DocumentCreate) SetID(u uuid.UUID) *DocumentCreate {
	dc.mutation.SetID(u)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DocumentCreate) SetNillableID(u *uuid.UUID) *DocumentCreate {
	if u != nil {
		dc.SetID(*u)
	}
	return dc
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (dc *DocumentCreate) SetCarID(id uuid.UUID) *DocumentCreate {
	dc.mutation.SetCarID(id)
	return dc
}

// SetNillableCarID sets the "car" edge to the Car entity by ID if the given value is not nil.
func (dc *DocumentCreate) SetNillableCarID(id *uuid.UUID) *DocumentCreate {
	if id != nil {
		dc = dc.SetCarID(*id)
	}
	return dc
}

// SetCar sets the "car" edge to the Car entity.
func (dc *DocumentCreate) SetCar(c *Car) *DocumentCreate {
	return dc.SetCarID(c.ID)
}

// SetExpenseID sets the "expense" edge to the Expense entity by ID.
func (dc *DocumentCreate) SetExpenseID(id uuid.UUID) *DocumentCreate {
	dc.mutation.SetExpenseID(id)
	return dc
}

// SetNillableExpenseID sets the "expense" edge to the Expense entity by ID if the given value is not nil.
func (dc *DocumentCreate) SetNillableExpenseID(id *uuid.UUID) *DocumentCreate {
	if id != nil {
		dc = dc.SetExpenseID(*id)
	}
	return dc
}

// SetExpense sets the "expense" edge to the Expense entity.
func (dc *DocumentCreate) SetExpense(e *Expense) *DocumentCreate {
	return dc.SetExpenseID(e.ID)
}

// SetFuelUpID sets the "fuel_up" edge to the FuelUp entity by ID.
func (dc *DocumentCreate) SetFuelUpID(id uuid.UUID) *DocumentCreate {
	dc.mutation.SetFuelUpID(id)
	return dc
}

// SetNillableFuelUpID sets the "fuel_up" edge to the FuelUp entity by ID if the given value is not nil.
func (dc *DocumentCreate) SetNillableFuelUpID(id *uuid.UUID) *DocumentCreate {
	if id != nil {
		dc = dc.SetFuelUpID(*id)
	}
	return dc
}

// SetFuelUp sets the "fuel_up" edge to the FuelUp entity.
func (dc *DocumentCreate) SetFuelUp(f *FuelUp) *DocumentCreate {
	return dc.SetFuelUpID(f.ID)
}

// SetServiceLogID sets the "service_log" edge to the ServiceLog entity by ID.
func (dc *DocumentCreate) SetServiceLogID(id uuid.UUID) *DocumentCreate {
	dc.mutation.SetServiceLogID(id)
	return dc
}

// SetNillableServiceLogID sets the "service_log" edge to the ServiceLog entity by ID if the given value is not nil.
func (dc *DocumentCreate) SetNillableServiceLogID(id *uuid.UUID) *DocumentCreate {
	if id != nil {
		dc = dc.SetServiceLogID(*id)
	}
	return dc
}

// SetServiceLog sets the "service_log" edge to the ServiceLog entity.
func (dc *DocumentCreate) SetServiceLog(s *ServiceLog) *DocumentCreate {
	return dc.SetServiceLogID(s.ID)
}

// SetDragSessionID sets the "drag_session" edge to the DragSession entity by ID.
func (dc *DocumentCreate) SetDragSessionID(id uuid.UUID) *DocumentCreate {
	dc.mutation.SetDragSessionID(id)
	return dc
}

// SetNillableDragSessionID sets the "drag_session" edge to the DragSession entity by ID if the given value is not nil.
func (dc *DocumentCreate) SetNillableDragSessionID(id *uuid.UUID) *DocumentCreate {
	if id != nil {
		dc = dc.SetDragSessionID(*id)
	}
	return dc
}

// SetDragSession sets the "drag_session" edge to the DragSession entity.
func (dc *DocumentCreate) SetDragSession(d *DragSession) *DocumentCreate {
	return dc.SetDragSessionID(d.ID)
}

// SetDynoSessionID sets the "dyno_session" edge to the DynoSession entity by ID.
func (dc *DocumentCreate) SetDynoSessionID(id uuid.UUID) *DocumentCreate {
	dc.mutation.SetDynoSessionID(id)
	return dc
}

// SetNillableDynoSessionID sets the "dyno_session" edge to the DynoSession entity by ID if the given value is not nil.
func (dc *DocumentCreate) SetNillableDynoSessionID(id *uuid.UUID) *DocumentCreate {
	if id != nil {
		dc = dc.SetDynoSessionID(*id)
	}
	return dc
}

// SetDynoSession sets the "dyno_session" edge to the DynoSession entity.
func (dc *DocumentCreate) SetDynoSession(d *DynoSession) *DocumentCreate {
	return dc.SetDynoSessionID(d.ID)
}

// Mutation returns the DocumentMutation object of the builder.
func (dc *DocumentCreate) Mutation() *DocumentMutation {
	return dc.mutation
}

// Save creates the Document in the database.
func (dc *DocumentCreate) Save(ctx context.Context) (*Document, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DocumentCreate) SaveX(ctx context.Context) *Document {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DocumentCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DocumentCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DocumentCreate) defaults() {
	if _, ok := dc.mutation.CreateTime(); !ok {
		v := document.DefaultCreateTime()
		dc.mutation.SetCreateTime(v)
	}
	if _, ok := dc.mutation.UpdateTime(); !ok {
		v := document.DefaultUpdateTime()
		dc.mutation.SetUpdateTime(v)
	}
	if _, ok := dc.mutation.Tags(); !ok {
		v := document.DefaultTags
		dc.mutation.SetTags(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		v := document.DefaultID()
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DocumentCreate) check() error {
	if _, ok := dc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Document.create_time"`)}
	}
	if _, ok := dc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Document.update_time"`)}
	}
	if _, ok := dc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Document.name"`)}
	}
	if _, ok := dc.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "Document.tags"`)}
	}
	return nil
}

func (dc *DocumentCreate) sqlSave(ctx context.Context) (*Document, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DocumentCreate) createSpec() (*Document, *sqlgraph.CreateSpec) {
	var (
		_node = &Document{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(document.Table, sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID))
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dc.mutation.CreateTime(); ok {
		_spec.SetField(document.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := dc.mutation.UpdateTime(); ok {
		_spec.SetField(document.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.SetField(document.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dc.mutation.Tags(); ok {
		_spec.SetField(document.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if nodes := dc.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.CarTable,
			Columns: []string{document.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.car_documents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.ExpenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.ExpenseTable,
			Columns: []string{document.ExpenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(expense.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.expense_documents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.FuelUpIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.FuelUpTable,
			Columns: []string{document.FuelUpColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fuelup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.fuel_up_documents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.ServiceLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.ServiceLogTable,
			Columns: []string{document.ServiceLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.service_log_documents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.DragSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.DragSessionTable,
			Columns: []string{document.DragSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dragsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.drag_session_documents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.DynoSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.DynoSessionTable,
			Columns: []string{document.DynoSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dynosession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.dyno_session_documents = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DocumentCreateBulk is the builder for creating many Document entities in bulk.
type DocumentCreateBulk struct {
	config
	err      error
	builders []*DocumentCreate
}

// Save creates the Document entities in the database.
func (dcb *DocumentCreateBulk) Save(ctx context.Context) ([]*Document, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Document, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DocumentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DocumentCreateBulk) SaveX(ctx context.Context) []*Document {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DocumentCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DocumentCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
