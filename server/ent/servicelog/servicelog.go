// Code generated by ent, DO NOT EDIT.

package servicelog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the servicelog type in the database.
	Label = "service_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldDatePerformed holds the string denoting the date_performed field in the database.
	FieldDatePerformed = "date_performed"
	// FieldPerformedBy holds the string denoting the performed_by field in the database.
	FieldPerformedBy = "performed_by"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// EdgeCar holds the string denoting the car edge name in mutations.
	EdgeCar = "car"
	// EdgeItems holds the string denoting the items edge name in mutations.
	EdgeItems = "items"
	// EdgeSchedule holds the string denoting the schedule edge name in mutations.
	EdgeSchedule = "schedule"
	// EdgeOdometerReading holds the string denoting the odometer_reading edge name in mutations.
	EdgeOdometerReading = "odometer_reading"
	// EdgeExpense holds the string denoting the expense edge name in mutations.
	EdgeExpense = "expense"
	// Table holds the table name of the servicelog in the database.
	Table = "service_logs"
	// CarTable is the table that holds the car relation/edge.
	CarTable = "service_logs"
	// CarInverseTable is the table name for the Car entity.
	// It exists in this package in order to avoid circular dependency with the "car" package.
	CarInverseTable = "cars"
	// CarColumn is the table column denoting the car relation/edge.
	CarColumn = "car_service_logs"
	// ItemsTable is the table that holds the items relation/edge. The primary key declared below.
	ItemsTable = "service_log_items"
	// ItemsInverseTable is the table name for the ServiceItem entity.
	// It exists in this package in order to avoid circular dependency with the "serviceitem" package.
	ItemsInverseTable = "service_items"
	// ScheduleTable is the table that holds the schedule relation/edge.
	ScheduleTable = "service_logs"
	// ScheduleInverseTable is the table name for the ServiceSchedule entity.
	// It exists in this package in order to avoid circular dependency with the "serviceschedule" package.
	ScheduleInverseTable = "service_schedules"
	// ScheduleColumn is the table column denoting the schedule relation/edge.
	ScheduleColumn = "service_schedule_logs"
	// OdometerReadingTable is the table that holds the odometer_reading relation/edge.
	OdometerReadingTable = "service_logs"
	// OdometerReadingInverseTable is the table name for the OdometerReading entity.
	// It exists in this package in order to avoid circular dependency with the "odometerreading" package.
	OdometerReadingInverseTable = "odometer_readings"
	// OdometerReadingColumn is the table column denoting the odometer_reading relation/edge.
	OdometerReadingColumn = "odometer_reading_service_log"
	// ExpenseTable is the table that holds the expense relation/edge.
	ExpenseTable = "expenses"
	// ExpenseInverseTable is the table name for the Expense entity.
	// It exists in this package in order to avoid circular dependency with the "expense" package.
	ExpenseInverseTable = "expenses"
	// ExpenseColumn is the table column denoting the expense relation/edge.
	ExpenseColumn = "service_log_expense"
)

// Columns holds all SQL columns for servicelog fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldDatePerformed,
	FieldPerformedBy,
	FieldNotes,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "service_logs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"car_service_logs",
	"odometer_reading_service_log",
	"service_schedule_logs",
}

var (
	// ItemsPrimaryKey and ItemsColumn2 are the table columns denoting the
	// primary key for the items relation (M2M).
	ItemsPrimaryKey = []string{"service_log_id", "service_item_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ServiceLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByDatePerformed orders the results by the date_performed field.
func ByDatePerformed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDatePerformed, opts...).ToFunc()
}

// ByPerformedBy orders the results by the performed_by field.
func ByPerformedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPerformedBy, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByCarField orders the results by car field.
func ByCarField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarStep(), sql.OrderByField(field, opts...))
	}
}

// ByItemsCount orders the results by items count.
func ByItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newItemsStep(), opts...)
	}
}

// ByItems orders the results by items terms.
func ByItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByScheduleField orders the results by schedule field.
func ByScheduleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScheduleStep(), sql.OrderByField(field, opts...))
	}
}

// ByOdometerReadingField orders the results by odometer_reading field.
func ByOdometerReadingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOdometerReadingStep(), sql.OrderByField(field, opts...))
	}
}

// ByExpenseField orders the results by expense field.
func ByExpenseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExpenseStep(), sql.OrderByField(field, opts...))
	}
}
func newCarStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CarTable, CarColumn),
	)
}
func newItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ItemsTable, ItemsPrimaryKey...),
	)
}
func newScheduleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScheduleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ScheduleTable, ScheduleColumn),
	)
}
func newOdometerReadingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OdometerReadingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, OdometerReadingTable, OdometerReadingColumn),
	)
}
func newExpenseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExpenseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ExpenseTable, ExpenseColumn),
	)
}
