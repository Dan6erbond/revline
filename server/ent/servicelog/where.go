// Code generated by ent, DO NOT EDIT.

package servicelog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldEQ(FieldUpdateTime, v))
}

// DatePerformed applies equality check predicate on the "date_performed" field. It's identical to DatePerformedEQ.
func DatePerformed(v time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldEQ(FieldDatePerformed, v))
}

// PerformedBy applies equality check predicate on the "performed_by" field. It's identical to PerformedByEQ.
func PerformedBy(v string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldEQ(FieldPerformedBy, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldEQ(FieldNotes, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldLTE(FieldUpdateTime, v))
}

// DatePerformedEQ applies the EQ predicate on the "date_performed" field.
func DatePerformedEQ(v time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldEQ(FieldDatePerformed, v))
}

// DatePerformedNEQ applies the NEQ predicate on the "date_performed" field.
func DatePerformedNEQ(v time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldNEQ(FieldDatePerformed, v))
}

// DatePerformedIn applies the In predicate on the "date_performed" field.
func DatePerformedIn(vs ...time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldIn(FieldDatePerformed, vs...))
}

// DatePerformedNotIn applies the NotIn predicate on the "date_performed" field.
func DatePerformedNotIn(vs ...time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldNotIn(FieldDatePerformed, vs...))
}

// DatePerformedGT applies the GT predicate on the "date_performed" field.
func DatePerformedGT(v time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldGT(FieldDatePerformed, v))
}

// DatePerformedGTE applies the GTE predicate on the "date_performed" field.
func DatePerformedGTE(v time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldGTE(FieldDatePerformed, v))
}

// DatePerformedLT applies the LT predicate on the "date_performed" field.
func DatePerformedLT(v time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldLT(FieldDatePerformed, v))
}

// DatePerformedLTE applies the LTE predicate on the "date_performed" field.
func DatePerformedLTE(v time.Time) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldLTE(FieldDatePerformed, v))
}

// PerformedByEQ applies the EQ predicate on the "performed_by" field.
func PerformedByEQ(v string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldEQ(FieldPerformedBy, v))
}

// PerformedByNEQ applies the NEQ predicate on the "performed_by" field.
func PerformedByNEQ(v string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldNEQ(FieldPerformedBy, v))
}

// PerformedByIn applies the In predicate on the "performed_by" field.
func PerformedByIn(vs ...string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldIn(FieldPerformedBy, vs...))
}

// PerformedByNotIn applies the NotIn predicate on the "performed_by" field.
func PerformedByNotIn(vs ...string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldNotIn(FieldPerformedBy, vs...))
}

// PerformedByGT applies the GT predicate on the "performed_by" field.
func PerformedByGT(v string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldGT(FieldPerformedBy, v))
}

// PerformedByGTE applies the GTE predicate on the "performed_by" field.
func PerformedByGTE(v string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldGTE(FieldPerformedBy, v))
}

// PerformedByLT applies the LT predicate on the "performed_by" field.
func PerformedByLT(v string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldLT(FieldPerformedBy, v))
}

// PerformedByLTE applies the LTE predicate on the "performed_by" field.
func PerformedByLTE(v string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldLTE(FieldPerformedBy, v))
}

// PerformedByContains applies the Contains predicate on the "performed_by" field.
func PerformedByContains(v string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldContains(FieldPerformedBy, v))
}

// PerformedByHasPrefix applies the HasPrefix predicate on the "performed_by" field.
func PerformedByHasPrefix(v string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldHasPrefix(FieldPerformedBy, v))
}

// PerformedByHasSuffix applies the HasSuffix predicate on the "performed_by" field.
func PerformedByHasSuffix(v string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldHasSuffix(FieldPerformedBy, v))
}

// PerformedByIsNil applies the IsNil predicate on the "performed_by" field.
func PerformedByIsNil() predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldIsNull(FieldPerformedBy))
}

// PerformedByNotNil applies the NotNil predicate on the "performed_by" field.
func PerformedByNotNil() predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldNotNull(FieldPerformedBy))
}

// PerformedByEqualFold applies the EqualFold predicate on the "performed_by" field.
func PerformedByEqualFold(v string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldEqualFold(FieldPerformedBy, v))
}

// PerformedByContainsFold applies the ContainsFold predicate on the "performed_by" field.
func PerformedByContainsFold(v string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldContainsFold(FieldPerformedBy, v))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.ServiceLog {
	return predicate.ServiceLog(sql.FieldContainsFold(FieldNotes, v))
}

// HasCar applies the HasEdge predicate on the "car" edge.
func HasCar() predicate.ServiceLog {
	return predicate.ServiceLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CarTable, CarColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarWith applies the HasEdge predicate on the "car" edge with a given conditions (other predicates).
func HasCarWith(preds ...predicate.Car) predicate.ServiceLog {
	return predicate.ServiceLog(func(s *sql.Selector) {
		step := newCarStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasItems applies the HasEdge predicate on the "items" edge.
func HasItems() predicate.ServiceLog {
	return predicate.ServiceLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ItemsTable, ItemsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemsWith applies the HasEdge predicate on the "items" edge with a given conditions (other predicates).
func HasItemsWith(preds ...predicate.ServiceItem) predicate.ServiceLog {
	return predicate.ServiceLog(func(s *sql.Selector) {
		step := newItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSchedule applies the HasEdge predicate on the "schedule" edge.
func HasSchedule() predicate.ServiceLog {
	return predicate.ServiceLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScheduleTable, ScheduleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScheduleWith applies the HasEdge predicate on the "schedule" edge with a given conditions (other predicates).
func HasScheduleWith(preds ...predicate.ServiceSchedule) predicate.ServiceLog {
	return predicate.ServiceLog(func(s *sql.Selector) {
		step := newScheduleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOdometerReading applies the HasEdge predicate on the "odometer_reading" edge.
func HasOdometerReading() predicate.ServiceLog {
	return predicate.ServiceLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, OdometerReadingTable, OdometerReadingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOdometerReadingWith applies the HasEdge predicate on the "odometer_reading" edge with a given conditions (other predicates).
func HasOdometerReadingWith(preds ...predicate.OdometerReading) predicate.ServiceLog {
	return predicate.ServiceLog(func(s *sql.Selector) {
		step := newOdometerReadingStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExpense applies the HasEdge predicate on the "expense" edge.
func HasExpense() predicate.ServiceLog {
	return predicate.ServiceLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ExpenseTable, ExpenseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExpenseWith applies the HasEdge predicate on the "expense" edge with a given conditions (other predicates).
func HasExpenseWith(preds ...predicate.Expense) predicate.ServiceLog {
	return predicate.ServiceLog(func(s *sql.Selector) {
		step := newExpenseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ServiceLog) predicate.ServiceLog {
	return predicate.ServiceLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ServiceLog) predicate.ServiceLog {
	return predicate.ServiceLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ServiceLog) predicate.ServiceLog {
	return predicate.ServiceLog(sql.NotPredicates(p))
}
