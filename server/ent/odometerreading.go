// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/fuelup"
	"github.com/Dan6erbond/revline/ent/odometerreading"
	"github.com/Dan6erbond/revline/ent/servicelog"
	"github.com/google/uuid"
)

// OdometerReading is the model entity for the OdometerReading schema.
type OdometerReading struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// ReadingKm holds the value of the "reading_km" field.
	ReadingKm float64 `json:"reading_km,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes *string `json:"notes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OdometerReadingQuery when eager-loading is set.
	Edges                 OdometerReadingEdges `json:"edges"`
	car_odometer_readings *uuid.UUID
	selectValues          sql.SelectValues
}

// OdometerReadingEdges holds the relations/edges for other nodes in the graph.
type OdometerReadingEdges struct {
	// Car holds the value of the car edge.
	Car *Car `json:"car,omitempty"`
	// FuelUp holds the value of the fuel_up edge.
	FuelUp *FuelUp `json:"fuel_up,omitempty"`
	// ServiceLog holds the value of the service_log edge.
	ServiceLog *ServiceLog `json:"service_log,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// CarOrErr returns the Car value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OdometerReadingEdges) CarOrErr() (*Car, error) {
	if e.Car != nil {
		return e.Car, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: car.Label}
	}
	return nil, &NotLoadedError{edge: "car"}
}

// FuelUpOrErr returns the FuelUp value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OdometerReadingEdges) FuelUpOrErr() (*FuelUp, error) {
	if e.FuelUp != nil {
		return e.FuelUp, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: fuelup.Label}
	}
	return nil, &NotLoadedError{edge: "fuel_up"}
}

// ServiceLogOrErr returns the ServiceLog value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OdometerReadingEdges) ServiceLogOrErr() (*ServiceLog, error) {
	if e.ServiceLog != nil {
		return e.ServiceLog, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: servicelog.Label}
	}
	return nil, &NotLoadedError{edge: "service_log"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OdometerReading) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case odometerreading.FieldReadingKm:
			values[i] = new(sql.NullFloat64)
		case odometerreading.FieldNotes:
			values[i] = new(sql.NullString)
		case odometerreading.FieldCreateTime, odometerreading.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case odometerreading.FieldID:
			values[i] = new(uuid.UUID)
		case odometerreading.ForeignKeys[0]: // car_odometer_readings
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OdometerReading fields.
func (or *OdometerReading) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case odometerreading.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				or.ID = *value
			}
		case odometerreading.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				or.CreateTime = value.Time
			}
		case odometerreading.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				or.UpdateTime = value.Time
			}
		case odometerreading.FieldReadingKm:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field reading_km", values[i])
			} else if value.Valid {
				or.ReadingKm = value.Float64
			}
		case odometerreading.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				or.Notes = new(string)
				*or.Notes = value.String
			}
		case odometerreading.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field car_odometer_readings", values[i])
			} else if value.Valid {
				or.car_odometer_readings = new(uuid.UUID)
				*or.car_odometer_readings = *value.S.(*uuid.UUID)
			}
		default:
			or.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OdometerReading.
// This includes values selected through modifiers, order, etc.
func (or *OdometerReading) Value(name string) (ent.Value, error) {
	return or.selectValues.Get(name)
}

// QueryCar queries the "car" edge of the OdometerReading entity.
func (or *OdometerReading) QueryCar() *CarQuery {
	return NewOdometerReadingClient(or.config).QueryCar(or)
}

// QueryFuelUp queries the "fuel_up" edge of the OdometerReading entity.
func (or *OdometerReading) QueryFuelUp() *FuelUpQuery {
	return NewOdometerReadingClient(or.config).QueryFuelUp(or)
}

// QueryServiceLog queries the "service_log" edge of the OdometerReading entity.
func (or *OdometerReading) QueryServiceLog() *ServiceLogQuery {
	return NewOdometerReadingClient(or.config).QueryServiceLog(or)
}

// Update returns a builder for updating this OdometerReading.
// Note that you need to call OdometerReading.Unwrap() before calling this method if this OdometerReading
// was returned from a transaction, and the transaction was committed or rolled back.
func (or *OdometerReading) Update() *OdometerReadingUpdateOne {
	return NewOdometerReadingClient(or.config).UpdateOne(or)
}

// Unwrap unwraps the OdometerReading entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (or *OdometerReading) Unwrap() *OdometerReading {
	_tx, ok := or.config.driver.(*txDriver)
	if !ok {
		panic("ent: OdometerReading is not a transactional entity")
	}
	or.config.driver = _tx.drv
	return or
}

// String implements the fmt.Stringer.
func (or *OdometerReading) String() string {
	var builder strings.Builder
	builder.WriteString("OdometerReading(")
	builder.WriteString(fmt.Sprintf("id=%v, ", or.ID))
	builder.WriteString("create_time=")
	builder.WriteString(or.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(or.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("reading_km=")
	builder.WriteString(fmt.Sprintf("%v", or.ReadingKm))
	builder.WriteString(", ")
	if v := or.Notes; v != nil {
		builder.WriteString("notes=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// OdometerReadings is a parsable slice of OdometerReading.
type OdometerReadings []*OdometerReading
