// Code generated by ent, DO NOT EDIT.

package profile

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the profile type in the database.
	Label = "profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldPicture holds the string denoting the picture field in the database.
	FieldPicture = "picture"
	// FieldCurrencyCode holds the string denoting the currency_code field in the database.
	FieldCurrencyCode = "currency_code"
	// FieldFuelVolumeUnit holds the string denoting the fuel_volume_unit field in the database.
	FieldFuelVolumeUnit = "fuel_volume_unit"
	// FieldDistanceUnit holds the string denoting the distance_unit field in the database.
	FieldDistanceUnit = "distance_unit"
	// FieldFuelConsumptionUnit holds the string denoting the fuel_consumption_unit field in the database.
	FieldFuelConsumptionUnit = "fuel_consumption_unit"
	// FieldTemperatureUnit holds the string denoting the temperature_unit field in the database.
	FieldTemperatureUnit = "temperature_unit"
	// FieldPowerUnit holds the string denoting the power_unit field in the database.
	FieldPowerUnit = "power_unit"
	// FieldTorqueUnit holds the string denoting the torque_unit field in the database.
	FieldTorqueUnit = "torque_unit"
	// FieldVisibility holds the string denoting the visibility field in the database.
	FieldVisibility = "visibility"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the profile in the database.
	Table = "profiles"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "profiles"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_profile"
)

// Columns holds all SQL columns for profile fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldUsername,
	FieldFirstName,
	FieldLastName,
	FieldPicture,
	FieldCurrencyCode,
	FieldFuelVolumeUnit,
	FieldDistanceUnit,
	FieldFuelConsumptionUnit,
	FieldTemperatureUnit,
	FieldPowerUnit,
	FieldTorqueUnit,
	FieldVisibility,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "profiles"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_profile",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// FuelVolumeUnit defines the type for the "fuel_volume_unit" enum field.
type FuelVolumeUnit string

// FuelVolumeUnit values.
const (
	FuelVolumeUnitLiter     FuelVolumeUnit = "liter"
	FuelVolumeUnitGallon    FuelVolumeUnit = "gallon"
	FuelVolumeUnitImpGallon FuelVolumeUnit = "imp_gallon"
)

func (fvu FuelVolumeUnit) String() string {
	return string(fvu)
}

// FuelVolumeUnitValidator is a validator for the "fuel_volume_unit" field enum values. It is called by the builders before save.
func FuelVolumeUnitValidator(fvu FuelVolumeUnit) error {
	switch fvu {
	case FuelVolumeUnitLiter, FuelVolumeUnitGallon, FuelVolumeUnitImpGallon:
		return nil
	default:
		return fmt.Errorf("profile: invalid enum value for fuel_volume_unit field: %q", fvu)
	}
}

// DistanceUnit defines the type for the "distance_unit" enum field.
type DistanceUnit string

// DistanceUnit values.
const (
	DistanceUnitKilometers DistanceUnit = "kilometers"
	DistanceUnitMiles      DistanceUnit = "miles"
)

func (du DistanceUnit) String() string {
	return string(du)
}

// DistanceUnitValidator is a validator for the "distance_unit" field enum values. It is called by the builders before save.
func DistanceUnitValidator(du DistanceUnit) error {
	switch du {
	case DistanceUnitKilometers, DistanceUnitMiles:
		return nil
	default:
		return fmt.Errorf("profile: invalid enum value for distance_unit field: %q", du)
	}
}

// FuelConsumptionUnit defines the type for the "fuel_consumption_unit" enum field.
type FuelConsumptionUnit string

// FuelConsumptionUnit values.
const (
	FuelConsumptionUnitMpg    FuelConsumptionUnit = "mpg"
	FuelConsumptionUnitImpMpg FuelConsumptionUnit = "imp_mpg"
	FuelConsumptionUnitKpl    FuelConsumptionUnit = "kpl"
	FuelConsumptionUnitLp100k FuelConsumptionUnit = "lp100k"
)

func (fcu FuelConsumptionUnit) String() string {
	return string(fcu)
}

// FuelConsumptionUnitValidator is a validator for the "fuel_consumption_unit" field enum values. It is called by the builders before save.
func FuelConsumptionUnitValidator(fcu FuelConsumptionUnit) error {
	switch fcu {
	case FuelConsumptionUnitMpg, FuelConsumptionUnitImpMpg, FuelConsumptionUnitKpl, FuelConsumptionUnitLp100k:
		return nil
	default:
		return fmt.Errorf("profile: invalid enum value for fuel_consumption_unit field: %q", fcu)
	}
}

// TemperatureUnit defines the type for the "temperature_unit" enum field.
type TemperatureUnit string

// TemperatureUnit values.
const (
	TemperatureUnitCelsius    TemperatureUnit = "celsius"
	TemperatureUnitFahrenheit TemperatureUnit = "fahrenheit"
)

func (tu TemperatureUnit) String() string {
	return string(tu)
}

// TemperatureUnitValidator is a validator for the "temperature_unit" field enum values. It is called by the builders before save.
func TemperatureUnitValidator(tu TemperatureUnit) error {
	switch tu {
	case TemperatureUnitCelsius, TemperatureUnitFahrenheit:
		return nil
	default:
		return fmt.Errorf("profile: invalid enum value for temperature_unit field: %q", tu)
	}
}

// PowerUnit defines the type for the "power_unit" enum field.
type PowerUnit string

// PowerUnit values.
const (
	PowerUnitMetricHorsepower   PowerUnit = "metric_horsepower"
	PowerUnitMechHorsepower     PowerUnit = "mech_horsepower"
	PowerUnitKilowatts          PowerUnit = "kilowatts"
	PowerUnitImpHorsepower      PowerUnit = "imp_horsepower"
	PowerUnitElectricHorsepower PowerUnit = "electric_horsepower"
)

func (pu PowerUnit) String() string {
	return string(pu)
}

// PowerUnitValidator is a validator for the "power_unit" field enum values. It is called by the builders before save.
func PowerUnitValidator(pu PowerUnit) error {
	switch pu {
	case PowerUnitMetricHorsepower, PowerUnitMechHorsepower, PowerUnitKilowatts, PowerUnitImpHorsepower, PowerUnitElectricHorsepower:
		return nil
	default:
		return fmt.Errorf("profile: invalid enum value for power_unit field: %q", pu)
	}
}

// TorqueUnit defines the type for the "torque_unit" enum field.
type TorqueUnit string

// TorqueUnit values.
const (
	TorqueUnitNewtonMeters  TorqueUnit = "newton_meters"
	TorqueUnitPoundFeet     TorqueUnit = "pound_feet"
	TorqueUnitKilogramMeter TorqueUnit = "kilogram_meter"
)

func (tu TorqueUnit) String() string {
	return string(tu)
}

// TorqueUnitValidator is a validator for the "torque_unit" field enum values. It is called by the builders before save.
func TorqueUnitValidator(tu TorqueUnit) error {
	switch tu {
	case TorqueUnitNewtonMeters, TorqueUnitPoundFeet, TorqueUnitKilogramMeter:
		return nil
	default:
		return fmt.Errorf("profile: invalid enum value for torque_unit field: %q", tu)
	}
}

// Visibility defines the type for the "visibility" enum field.
type Visibility string

// VisibilityPrivate is the default value of the Visibility enum.
const DefaultVisibility = VisibilityPrivate

// Visibility values.
const (
	VisibilityPublic  Visibility = "public"
	VisibilityPrivate Visibility = "private"
)

func (v Visibility) String() string {
	return string(v)
}

// VisibilityValidator is a validator for the "visibility" field enum values. It is called by the builders before save.
func VisibilityValidator(v Visibility) error {
	switch v {
	case VisibilityPublic, VisibilityPrivate:
		return nil
	default:
		return fmt.Errorf("profile: invalid enum value for visibility field: %q", v)
	}
}

// OrderOption defines the ordering options for the Profile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByPicture orders the results by the picture field.
func ByPicture(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPicture, opts...).ToFunc()
}

// ByCurrencyCode orders the results by the currency_code field.
func ByCurrencyCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrencyCode, opts...).ToFunc()
}

// ByFuelVolumeUnit orders the results by the fuel_volume_unit field.
func ByFuelVolumeUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFuelVolumeUnit, opts...).ToFunc()
}

// ByDistanceUnit orders the results by the distance_unit field.
func ByDistanceUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDistanceUnit, opts...).ToFunc()
}

// ByFuelConsumptionUnit orders the results by the fuel_consumption_unit field.
func ByFuelConsumptionUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFuelConsumptionUnit, opts...).ToFunc()
}

// ByTemperatureUnit orders the results by the temperature_unit field.
func ByTemperatureUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTemperatureUnit, opts...).ToFunc()
}

// ByPowerUnit orders the results by the power_unit field.
func ByPowerUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPowerUnit, opts...).ToFunc()
}

// ByTorqueUnit orders the results by the torque_unit field.
func ByTorqueUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTorqueUnit, opts...).ToFunc()
}

// ByVisibility orders the results by the visibility field.
func ByVisibility(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVisibility, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e FuelVolumeUnit) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *FuelVolumeUnit) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = FuelVolumeUnit(str)
	if err := FuelVolumeUnitValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid FuelVolumeUnit", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e DistanceUnit) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *DistanceUnit) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = DistanceUnit(str)
	if err := DistanceUnitValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid DistanceUnit", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e FuelConsumptionUnit) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *FuelConsumptionUnit) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = FuelConsumptionUnit(str)
	if err := FuelConsumptionUnitValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid FuelConsumptionUnit", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e TemperatureUnit) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *TemperatureUnit) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = TemperatureUnit(str)
	if err := TemperatureUnitValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid TemperatureUnit", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e PowerUnit) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *PowerUnit) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = PowerUnit(str)
	if err := PowerUnitValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid PowerUnit", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e TorqueUnit) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *TorqueUnit) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = TorqueUnit(str)
	if err := TorqueUnitValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid TorqueUnit", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Visibility) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Visibility) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Visibility(str)
	if err := VisibilityValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Visibility", str)
	}
	return nil
}
