// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (c *Car) Owner(ctx context.Context) (*User, error) {
	result, err := c.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Car) DragSessions(ctx context.Context) (result []*DragSession, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedDragSessions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.DragSessionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryDragSessions().All(ctx)
	}
	return result, err
}

func (c *Car) FuelUps(ctx context.Context) (result []*FuelUp, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedFuelUps(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.FuelUpsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryFuelUps().All(ctx)
	}
	return result, err
}

func (c *Car) OdometerReadings(ctx context.Context) (result []*OdometerReading, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedOdometerReadings(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.OdometerReadingsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryOdometerReadings().All(ctx)
	}
	return result, err
}

func (c *Car) ServiceItems(ctx context.Context) (result []*ServiceItem, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedServiceItems(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ServiceItemsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryServiceItems().All(ctx)
	}
	return result, err
}

func (c *Car) ServiceLogs(ctx context.Context) (result []*ServiceLog, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedServiceLogs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ServiceLogsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryServiceLogs().All(ctx)
	}
	return result, err
}

func (c *Car) ServiceSchedules(ctx context.Context) (result []*ServiceSchedule, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedServiceSchedules(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ServiceSchedulesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryServiceSchedules().All(ctx)
	}
	return result, err
}

func (c *Car) Media(ctx context.Context) (result []*Media, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedMedia(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.MediaOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryMedia().All(ctx)
	}
	return result, err
}

func (c *Car) BannerImage(ctx context.Context) (*Media, error) {
	result, err := c.Edges.BannerImageOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryBannerImage().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (dr *DragResult) Session(ctx context.Context) (*DragSession, error) {
	result, err := dr.Edges.SessionOrErr()
	if IsNotLoaded(err) {
		result, err = dr.QuerySession().Only(ctx)
	}
	return result, err
}

func (ds *DragSession) Car(ctx context.Context) (*Car, error) {
	result, err := ds.Edges.CarOrErr()
	if IsNotLoaded(err) {
		result, err = ds.QueryCar().Only(ctx)
	}
	return result, err
}

func (ds *DragSession) Results(ctx context.Context) (result []*DragResult, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ds.NamedResults(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ds.Edges.ResultsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ds.QueryResults().All(ctx)
	}
	return result, err
}

func (fu *FuelUp) Car(ctx context.Context) (*Car, error) {
	result, err := fu.Edges.CarOrErr()
	if IsNotLoaded(err) {
		result, err = fu.QueryCar().Only(ctx)
	}
	return result, err
}

func (fu *FuelUp) OdometerReading(ctx context.Context) (*OdometerReading, error) {
	result, err := fu.Edges.OdometerReadingOrErr()
	if IsNotLoaded(err) {
		result, err = fu.QueryOdometerReading().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (m *Media) Car(ctx context.Context) (*Car, error) {
	result, err := m.Edges.CarOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryCar().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (or *OdometerReading) Car(ctx context.Context) (*Car, error) {
	result, err := or.Edges.CarOrErr()
	if IsNotLoaded(err) {
		result, err = or.QueryCar().Only(ctx)
	}
	return result, err
}

func (or *OdometerReading) FuelUp(ctx context.Context) (*FuelUp, error) {
	result, err := or.Edges.FuelUpOrErr()
	if IsNotLoaded(err) {
		result, err = or.QueryFuelUp().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (or *OdometerReading) ServiceLog(ctx context.Context) (*ServiceLog, error) {
	result, err := or.Edges.ServiceLogOrErr()
	if IsNotLoaded(err) {
		result, err = or.QueryServiceLog().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Profile) User(ctx context.Context) (*User, error) {
	result, err := pr.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryUser().Only(ctx)
	}
	return result, err
}

func (si *ServiceItem) Car(ctx context.Context) (*Car, error) {
	result, err := si.Edges.CarOrErr()
	if IsNotLoaded(err) {
		result, err = si.QueryCar().Only(ctx)
	}
	return result, err
}

func (si *ServiceItem) Schedules(ctx context.Context) (result []*ServiceSchedule, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = si.NamedSchedules(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = si.Edges.SchedulesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = si.QuerySchedules().All(ctx)
	}
	return result, err
}

func (si *ServiceItem) Logs(ctx context.Context) (result []*ServiceLog, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = si.NamedLogs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = si.Edges.LogsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = si.QueryLogs().All(ctx)
	}
	return result, err
}

func (sl *ServiceLog) Car(ctx context.Context) (*Car, error) {
	result, err := sl.Edges.CarOrErr()
	if IsNotLoaded(err) {
		result, err = sl.QueryCar().Only(ctx)
	}
	return result, err
}

func (sl *ServiceLog) Items(ctx context.Context) (result []*ServiceItem, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = sl.NamedItems(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = sl.Edges.ItemsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = sl.QueryItems().All(ctx)
	}
	return result, err
}

func (sl *ServiceLog) Schedule(ctx context.Context) (*ServiceSchedule, error) {
	result, err := sl.Edges.ScheduleOrErr()
	if IsNotLoaded(err) {
		result, err = sl.QuerySchedule().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (sl *ServiceLog) OdometerReading(ctx context.Context) (*OdometerReading, error) {
	result, err := sl.Edges.OdometerReadingOrErr()
	if IsNotLoaded(err) {
		result, err = sl.QueryOdometerReading().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ss *ServiceSchedule) Car(ctx context.Context) (*Car, error) {
	result, err := ss.Edges.CarOrErr()
	if IsNotLoaded(err) {
		result, err = ss.QueryCar().Only(ctx)
	}
	return result, err
}

func (ss *ServiceSchedule) Items(ctx context.Context) (result []*ServiceItem, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ss.NamedItems(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ss.Edges.ItemsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ss.QueryItems().All(ctx)
	}
	return result, err
}

func (ss *ServiceSchedule) Logs(ctx context.Context) (result []*ServiceLog, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ss.NamedLogs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ss.Edges.LogsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ss.QueryLogs().All(ctx)
	}
	return result, err
}

func (u *User) Cars(ctx context.Context) (result []*Car, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedCars(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.CarsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryCars().All(ctx)
	}
	return result, err
}

func (u *User) Profile(ctx context.Context) (*Profile, error) {
	result, err := u.Edges.ProfileOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryProfile().Only(ctx)
	}
	return result, MaskNotFound(err)
}
