// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *Album) Car(ctx context.Context) (*Car, error) {
	result, err := a.Edges.CarOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryCar().Only(ctx)
	}
	return result, err
}

func (a *Album) Media(ctx context.Context) (result []*Media, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedMedia(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.MediaOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryMedia().All(ctx)
	}
	return result, err
}

func (c *Car) Owner(ctx context.Context) (*User, error) {
	result, err := c.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Car) DragSessions(ctx context.Context) (result []*DragSession, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedDragSessions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.DragSessionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryDragSessions().All(ctx)
	}
	return result, err
}

func (c *Car) FuelUps(ctx context.Context) (result []*FuelUp, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedFuelUps(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.FuelUpsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryFuelUps().All(ctx)
	}
	return result, err
}

func (c *Car) OdometerReadings(ctx context.Context) (result []*OdometerReading, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedOdometerReadings(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.OdometerReadingsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryOdometerReadings().All(ctx)
	}
	return result, err
}

func (c *Car) ServiceItems(ctx context.Context) (result []*ServiceItem, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedServiceItems(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ServiceItemsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryServiceItems().All(ctx)
	}
	return result, err
}

func (c *Car) ServiceLogs(ctx context.Context) (result []*ServiceLog, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedServiceLogs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ServiceLogsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryServiceLogs().All(ctx)
	}
	return result, err
}

func (c *Car) ServiceSchedules(ctx context.Context) (result []*ServiceSchedule, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedServiceSchedules(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ServiceSchedulesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryServiceSchedules().All(ctx)
	}
	return result, err
}

func (c *Car) Media(ctx context.Context) (result []*Media, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedMedia(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.MediaOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryMedia().All(ctx)
	}
	return result, err
}

func (c *Car) Albums(ctx context.Context) (result []*Album, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedAlbums(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.AlbumsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryAlbums().All(ctx)
	}
	return result, err
}

func (c *Car) Documents(ctx context.Context) (result []*Document, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedDocuments(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.DocumentsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryDocuments().All(ctx)
	}
	return result, err
}

func (c *Car) DynoSessions(ctx context.Context) (result []*DynoSession, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedDynoSessions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.DynoSessionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryDynoSessions().All(ctx)
	}
	return result, err
}

func (c *Car) Expenses(ctx context.Context) (result []*Expense, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedExpenses(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ExpensesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryExpenses().All(ctx)
	}
	return result, err
}

func (c *Car) BannerImage(ctx context.Context) (*Media, error) {
	result, err := c.Edges.BannerImageOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryBannerImage().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Car) Tasks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*TaskOrder, where *TaskWhereInput,
) (*TaskConnection, error) {
	opts := []TaskPaginateOption{
		WithTaskOrder(orderBy),
		WithTaskFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := c.Edges.totalCount[13][alias]
	if nodes, err := c.NamedTasks(alias); err == nil || hasTotalCount {
		pager, err := newTaskPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &TaskConnection{Edges: []*TaskEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return c.QueryTasks().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Car) ModIdeas(ctx context.Context) (result []*ModIdea, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedModIdeas(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ModIdeasOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryModIdeas().All(ctx)
	}
	return result, err
}

func (cs *CheckoutSession) User(ctx context.Context) (*User, error) {
	result, err := cs.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = cs.QueryUser().Only(ctx)
	}
	return result, err
}

func (cs *CheckoutSession) Subscription(ctx context.Context) (*Subscription, error) {
	result, err := cs.Edges.SubscriptionOrErr()
	if IsNotLoaded(err) {
		result, err = cs.QuerySubscription().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (d *Document) Car(ctx context.Context) (*Car, error) {
	result, err := d.Edges.CarOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryCar().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (d *Document) Expense(ctx context.Context) (*Expense, error) {
	result, err := d.Edges.ExpenseOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryExpense().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (d *Document) FuelUp(ctx context.Context) (*FuelUp, error) {
	result, err := d.Edges.FuelUpOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryFuelUp().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (d *Document) ServiceLog(ctx context.Context) (*ServiceLog, error) {
	result, err := d.Edges.ServiceLogOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryServiceLog().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (dr *DragResult) Session(ctx context.Context) (*DragSession, error) {
	result, err := dr.Edges.SessionOrErr()
	if IsNotLoaded(err) {
		result, err = dr.QuerySession().Only(ctx)
	}
	return result, err
}

func (ds *DragSession) Car(ctx context.Context) (*Car, error) {
	result, err := ds.Edges.CarOrErr()
	if IsNotLoaded(err) {
		result, err = ds.QueryCar().Only(ctx)
	}
	return result, err
}

func (ds *DragSession) Results(ctx context.Context) (result []*DragResult, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ds.NamedResults(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ds.Edges.ResultsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ds.QueryResults().All(ctx)
	}
	return result, err
}

func (dr *DynoResult) Session(ctx context.Context) (*DynoSession, error) {
	result, err := dr.Edges.SessionOrErr()
	if IsNotLoaded(err) {
		result, err = dr.QuerySession().Only(ctx)
	}
	return result, err
}

func (ds *DynoSession) Car(ctx context.Context) (*Car, error) {
	result, err := ds.Edges.CarOrErr()
	if IsNotLoaded(err) {
		result, err = ds.QueryCar().Only(ctx)
	}
	return result, err
}

func (ds *DynoSession) Results(ctx context.Context) (result []*DynoResult, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ds.NamedResults(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ds.Edges.ResultsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ds.QueryResults().All(ctx)
	}
	return result, err
}

func (e *Expense) Car(ctx context.Context) (*Car, error) {
	result, err := e.Edges.CarOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryCar().Only(ctx)
	}
	return result, err
}

func (e *Expense) FuelUp(ctx context.Context) (*FuelUp, error) {
	result, err := e.Edges.FuelUpOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryFuelUp().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Expense) ServiceLog(ctx context.Context) (*ServiceLog, error) {
	result, err := e.Edges.ServiceLogOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryServiceLog().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (e *Expense) Documents(ctx context.Context) (result []*Document, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = e.NamedDocuments(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = e.Edges.DocumentsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = e.QueryDocuments().All(ctx)
	}
	return result, err
}

func (fu *FuelUp) Car(ctx context.Context) (*Car, error) {
	result, err := fu.Edges.CarOrErr()
	if IsNotLoaded(err) {
		result, err = fu.QueryCar().Only(ctx)
	}
	return result, err
}

func (fu *FuelUp) OdometerReading(ctx context.Context) (*OdometerReading, error) {
	result, err := fu.Edges.OdometerReadingOrErr()
	if IsNotLoaded(err) {
		result, err = fu.QueryOdometerReading().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (fu *FuelUp) Expense(ctx context.Context) (*Expense, error) {
	result, err := fu.Edges.ExpenseOrErr()
	if IsNotLoaded(err) {
		result, err = fu.QueryExpense().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (fu *FuelUp) Documents(ctx context.Context) (result []*Document, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = fu.NamedDocuments(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = fu.Edges.DocumentsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = fu.QueryDocuments().All(ctx)
	}
	return result, err
}

func (m *Media) Car(ctx context.Context) (*Car, error) {
	result, err := m.Edges.CarOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryCar().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (m *Media) Albums(ctx context.Context) (result []*Album, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = m.NamedAlbums(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = m.Edges.AlbumsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = m.QueryAlbums().All(ctx)
	}
	return result, err
}

func (mi *ModIdea) Car(ctx context.Context) (*Car, error) {
	result, err := mi.Edges.CarOrErr()
	if IsNotLoaded(err) {
		result, err = mi.QueryCar().Only(ctx)
	}
	return result, err
}

func (mi *ModIdea) Tasks(ctx context.Context) (result []*Task, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = mi.NamedTasks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = mi.Edges.TasksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = mi.QueryTasks().All(ctx)
	}
	return result, err
}

func (mi *ModIdea) ProductOptions(ctx context.Context) (result []*ModProductOption, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = mi.NamedProductOptions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = mi.Edges.ProductOptionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = mi.QueryProductOptions().All(ctx)
	}
	return result, err
}

func (mpo *ModProductOption) Idea(ctx context.Context) (*ModIdea, error) {
	result, err := mpo.Edges.IdeaOrErr()
	if IsNotLoaded(err) {
		result, err = mpo.QueryIdea().Only(ctx)
	}
	return result, err
}

func (or *OdometerReading) Car(ctx context.Context) (*Car, error) {
	result, err := or.Edges.CarOrErr()
	if IsNotLoaded(err) {
		result, err = or.QueryCar().Only(ctx)
	}
	return result, err
}

func (or *OdometerReading) FuelUp(ctx context.Context) (*FuelUp, error) {
	result, err := or.Edges.FuelUpOrErr()
	if IsNotLoaded(err) {
		result, err = or.QueryFuelUp().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (or *OdometerReading) ServiceLog(ctx context.Context) (*ServiceLog, error) {
	result, err := or.Edges.ServiceLogOrErr()
	if IsNotLoaded(err) {
		result, err = or.QueryServiceLog().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pr *Profile) User(ctx context.Context) (*User, error) {
	result, err := pr.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = pr.QueryUser().Only(ctx)
	}
	return result, err
}

func (si *ServiceItem) Car(ctx context.Context) (*Car, error) {
	result, err := si.Edges.CarOrErr()
	if IsNotLoaded(err) {
		result, err = si.QueryCar().Only(ctx)
	}
	return result, err
}

func (si *ServiceItem) Schedules(ctx context.Context) (result []*ServiceSchedule, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = si.NamedSchedules(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = si.Edges.SchedulesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = si.QuerySchedules().All(ctx)
	}
	return result, err
}

func (si *ServiceItem) Logs(ctx context.Context) (result []*ServiceLog, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = si.NamedLogs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = si.Edges.LogsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = si.QueryLogs().All(ctx)
	}
	return result, err
}

func (sl *ServiceLog) Car(ctx context.Context) (*Car, error) {
	result, err := sl.Edges.CarOrErr()
	if IsNotLoaded(err) {
		result, err = sl.QueryCar().Only(ctx)
	}
	return result, err
}

func (sl *ServiceLog) Items(ctx context.Context) (result []*ServiceItem, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = sl.NamedItems(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = sl.Edges.ItemsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = sl.QueryItems().All(ctx)
	}
	return result, err
}

func (sl *ServiceLog) Schedule(ctx context.Context) (*ServiceSchedule, error) {
	result, err := sl.Edges.ScheduleOrErr()
	if IsNotLoaded(err) {
		result, err = sl.QuerySchedule().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (sl *ServiceLog) OdometerReading(ctx context.Context) (*OdometerReading, error) {
	result, err := sl.Edges.OdometerReadingOrErr()
	if IsNotLoaded(err) {
		result, err = sl.QueryOdometerReading().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (sl *ServiceLog) Expense(ctx context.Context) (*Expense, error) {
	result, err := sl.Edges.ExpenseOrErr()
	if IsNotLoaded(err) {
		result, err = sl.QueryExpense().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (sl *ServiceLog) Documents(ctx context.Context) (result []*Document, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = sl.NamedDocuments(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = sl.Edges.DocumentsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = sl.QueryDocuments().All(ctx)
	}
	return result, err
}

func (ss *ServiceSchedule) Car(ctx context.Context) (*Car, error) {
	result, err := ss.Edges.CarOrErr()
	if IsNotLoaded(err) {
		result, err = ss.QueryCar().Only(ctx)
	}
	return result, err
}

func (ss *ServiceSchedule) Items(ctx context.Context) (result []*ServiceItem, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ss.NamedItems(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ss.Edges.ItemsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ss.QueryItems().All(ctx)
	}
	return result, err
}

func (ss *ServiceSchedule) Logs(ctx context.Context) (result []*ServiceLog, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ss.NamedLogs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ss.Edges.LogsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ss.QueryLogs().All(ctx)
	}
	return result, err
}

func (s *Subscription) User(ctx context.Context) (*User, error) {
	result, err := s.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryUser().Only(ctx)
	}
	return result, err
}

func (s *Subscription) CheckoutSession(ctx context.Context) (*CheckoutSession, error) {
	result, err := s.Edges.CheckoutSessionOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryCheckoutSession().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Task) Car(ctx context.Context) (*Car, error) {
	result, err := t.Edges.CarOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryCar().Only(ctx)
	}
	return result, err
}

func (t *Task) Parent(ctx context.Context) (*Task, error) {
	result, err := t.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Task) Subtasks(ctx context.Context) (result []*Task, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedSubtasks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.SubtasksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QuerySubtasks().All(ctx)
	}
	return result, err
}

func (t *Task) ModIdeas(ctx context.Context) (result []*ModIdea, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedModIdeas(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.ModIdeasOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryModIdeas().All(ctx)
	}
	return result, err
}

func (u *User) Cars(ctx context.Context) (result []*Car, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedCars(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.CarsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryCars().All(ctx)
	}
	return result, err
}

func (u *User) Profile(ctx context.Context) (*Profile, error) {
	result, err := u.Edges.ProfileOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryProfile().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Subscriptions(ctx context.Context) (result []*Subscription, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedSubscriptions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.SubscriptionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QuerySubscriptions().All(ctx)
	}
	return result, err
}

func (u *User) CheckoutSessions(ctx context.Context) (result []*CheckoutSession, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedCheckoutSessions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.CheckoutSessionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryCheckoutSessions().All(ctx)
	}
	return result, err
}
