// Code generated by ent, DO NOT EDIT.

package serviceitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldEQ(FieldUpdateTime, v))
}

// EstimatedMinutes applies equality check predicate on the "estimated_minutes" field. It's identical to EstimatedMinutesEQ.
func EstimatedMinutes(v int) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldEQ(FieldEstimatedMinutes, v))
}

// DefaultIntervalKm applies equality check predicate on the "default_interval_km" field. It's identical to DefaultIntervalKmEQ.
func DefaultIntervalKm(v float64) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldEQ(FieldDefaultIntervalKm, v))
}

// DefaultIntervalMonths applies equality check predicate on the "default_interval_months" field. It's identical to DefaultIntervalMonthsEQ.
func DefaultIntervalMonths(v int) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldEQ(FieldDefaultIntervalMonths, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldEQ(FieldNotes, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldLTE(FieldUpdateTime, v))
}

// LabelEQ applies the EQ predicate on the "label" field.
func LabelEQ(v string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldEQ(FieldLabel, v))
}

// LabelNEQ applies the NEQ predicate on the "label" field.
func LabelNEQ(v string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldNEQ(FieldLabel, v))
}

// LabelIn applies the In predicate on the "label" field.
func LabelIn(vs ...string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldIn(FieldLabel, vs...))
}

// LabelNotIn applies the NotIn predicate on the "label" field.
func LabelNotIn(vs ...string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldNotIn(FieldLabel, vs...))
}

// LabelGT applies the GT predicate on the "label" field.
func LabelGT(v string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldGT(FieldLabel, v))
}

// LabelGTE applies the GTE predicate on the "label" field.
func LabelGTE(v string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldGTE(FieldLabel, v))
}

// LabelLT applies the LT predicate on the "label" field.
func LabelLT(v string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldLT(FieldLabel, v))
}

// LabelLTE applies the LTE predicate on the "label" field.
func LabelLTE(v string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldLTE(FieldLabel, v))
}

// LabelContains applies the Contains predicate on the "label" field.
func LabelContains(v string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldContains(FieldLabel, v))
}

// LabelHasPrefix applies the HasPrefix predicate on the "label" field.
func LabelHasPrefix(v string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldHasPrefix(FieldLabel, v))
}

// LabelHasSuffix applies the HasSuffix predicate on the "label" field.
func LabelHasSuffix(v string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldHasSuffix(FieldLabel, v))
}

// LabelEqualFold applies the EqualFold predicate on the "label" field.
func LabelEqualFold(v string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldEqualFold(FieldLabel, v))
}

// LabelContainsFold applies the ContainsFold predicate on the "label" field.
func LabelContainsFold(v string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldContainsFold(FieldLabel, v))
}

// EstimatedMinutesEQ applies the EQ predicate on the "estimated_minutes" field.
func EstimatedMinutesEQ(v int) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldEQ(FieldEstimatedMinutes, v))
}

// EstimatedMinutesNEQ applies the NEQ predicate on the "estimated_minutes" field.
func EstimatedMinutesNEQ(v int) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldNEQ(FieldEstimatedMinutes, v))
}

// EstimatedMinutesIn applies the In predicate on the "estimated_minutes" field.
func EstimatedMinutesIn(vs ...int) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldIn(FieldEstimatedMinutes, vs...))
}

// EstimatedMinutesNotIn applies the NotIn predicate on the "estimated_minutes" field.
func EstimatedMinutesNotIn(vs ...int) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldNotIn(FieldEstimatedMinutes, vs...))
}

// EstimatedMinutesGT applies the GT predicate on the "estimated_minutes" field.
func EstimatedMinutesGT(v int) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldGT(FieldEstimatedMinutes, v))
}

// EstimatedMinutesGTE applies the GTE predicate on the "estimated_minutes" field.
func EstimatedMinutesGTE(v int) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldGTE(FieldEstimatedMinutes, v))
}

// EstimatedMinutesLT applies the LT predicate on the "estimated_minutes" field.
func EstimatedMinutesLT(v int) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldLT(FieldEstimatedMinutes, v))
}

// EstimatedMinutesLTE applies the LTE predicate on the "estimated_minutes" field.
func EstimatedMinutesLTE(v int) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldLTE(FieldEstimatedMinutes, v))
}

// EstimatedMinutesIsNil applies the IsNil predicate on the "estimated_minutes" field.
func EstimatedMinutesIsNil() predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldIsNull(FieldEstimatedMinutes))
}

// EstimatedMinutesNotNil applies the NotNil predicate on the "estimated_minutes" field.
func EstimatedMinutesNotNil() predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldNotNull(FieldEstimatedMinutes))
}

// DefaultIntervalKmEQ applies the EQ predicate on the "default_interval_km" field.
func DefaultIntervalKmEQ(v float64) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldEQ(FieldDefaultIntervalKm, v))
}

// DefaultIntervalKmNEQ applies the NEQ predicate on the "default_interval_km" field.
func DefaultIntervalKmNEQ(v float64) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldNEQ(FieldDefaultIntervalKm, v))
}

// DefaultIntervalKmIn applies the In predicate on the "default_interval_km" field.
func DefaultIntervalKmIn(vs ...float64) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldIn(FieldDefaultIntervalKm, vs...))
}

// DefaultIntervalKmNotIn applies the NotIn predicate on the "default_interval_km" field.
func DefaultIntervalKmNotIn(vs ...float64) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldNotIn(FieldDefaultIntervalKm, vs...))
}

// DefaultIntervalKmGT applies the GT predicate on the "default_interval_km" field.
func DefaultIntervalKmGT(v float64) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldGT(FieldDefaultIntervalKm, v))
}

// DefaultIntervalKmGTE applies the GTE predicate on the "default_interval_km" field.
func DefaultIntervalKmGTE(v float64) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldGTE(FieldDefaultIntervalKm, v))
}

// DefaultIntervalKmLT applies the LT predicate on the "default_interval_km" field.
func DefaultIntervalKmLT(v float64) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldLT(FieldDefaultIntervalKm, v))
}

// DefaultIntervalKmLTE applies the LTE predicate on the "default_interval_km" field.
func DefaultIntervalKmLTE(v float64) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldLTE(FieldDefaultIntervalKm, v))
}

// DefaultIntervalKmIsNil applies the IsNil predicate on the "default_interval_km" field.
func DefaultIntervalKmIsNil() predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldIsNull(FieldDefaultIntervalKm))
}

// DefaultIntervalKmNotNil applies the NotNil predicate on the "default_interval_km" field.
func DefaultIntervalKmNotNil() predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldNotNull(FieldDefaultIntervalKm))
}

// DefaultIntervalMonthsEQ applies the EQ predicate on the "default_interval_months" field.
func DefaultIntervalMonthsEQ(v int) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldEQ(FieldDefaultIntervalMonths, v))
}

// DefaultIntervalMonthsNEQ applies the NEQ predicate on the "default_interval_months" field.
func DefaultIntervalMonthsNEQ(v int) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldNEQ(FieldDefaultIntervalMonths, v))
}

// DefaultIntervalMonthsIn applies the In predicate on the "default_interval_months" field.
func DefaultIntervalMonthsIn(vs ...int) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldIn(FieldDefaultIntervalMonths, vs...))
}

// DefaultIntervalMonthsNotIn applies the NotIn predicate on the "default_interval_months" field.
func DefaultIntervalMonthsNotIn(vs ...int) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldNotIn(FieldDefaultIntervalMonths, vs...))
}

// DefaultIntervalMonthsGT applies the GT predicate on the "default_interval_months" field.
func DefaultIntervalMonthsGT(v int) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldGT(FieldDefaultIntervalMonths, v))
}

// DefaultIntervalMonthsGTE applies the GTE predicate on the "default_interval_months" field.
func DefaultIntervalMonthsGTE(v int) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldGTE(FieldDefaultIntervalMonths, v))
}

// DefaultIntervalMonthsLT applies the LT predicate on the "default_interval_months" field.
func DefaultIntervalMonthsLT(v int) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldLT(FieldDefaultIntervalMonths, v))
}

// DefaultIntervalMonthsLTE applies the LTE predicate on the "default_interval_months" field.
func DefaultIntervalMonthsLTE(v int) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldLTE(FieldDefaultIntervalMonths, v))
}

// DefaultIntervalMonthsIsNil applies the IsNil predicate on the "default_interval_months" field.
func DefaultIntervalMonthsIsNil() predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldIsNull(FieldDefaultIntervalMonths))
}

// DefaultIntervalMonthsNotNil applies the NotNil predicate on the "default_interval_months" field.
func DefaultIntervalMonthsNotNil() predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldNotNull(FieldDefaultIntervalMonths))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.ServiceItem {
	return predicate.ServiceItem(sql.FieldContainsFold(FieldNotes, v))
}

// HasCar applies the HasEdge predicate on the "car" edge.
func HasCar() predicate.ServiceItem {
	return predicate.ServiceItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CarTable, CarColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarWith applies the HasEdge predicate on the "car" edge with a given conditions (other predicates).
func HasCarWith(preds ...predicate.Car) predicate.ServiceItem {
	return predicate.ServiceItem(func(s *sql.Selector) {
		step := newCarStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSchedules applies the HasEdge predicate on the "schedules" edge.
func HasSchedules() predicate.ServiceItem {
	return predicate.ServiceItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, SchedulesTable, SchedulesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSchedulesWith applies the HasEdge predicate on the "schedules" edge with a given conditions (other predicates).
func HasSchedulesWith(preds ...predicate.ServiceSchedule) predicate.ServiceItem {
	return predicate.ServiceItem(func(s *sql.Selector) {
		step := newSchedulesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLogs applies the HasEdge predicate on the "logs" edge.
func HasLogs() predicate.ServiceItem {
	return predicate.ServiceItem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, LogsTable, LogsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLogsWith applies the HasEdge predicate on the "logs" edge with a given conditions (other predicates).
func HasLogsWith(preds ...predicate.ServiceLog) predicate.ServiceItem {
	return predicate.ServiceItem(func(s *sql.Selector) {
		step := newLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ServiceItem) predicate.ServiceItem {
	return predicate.ServiceItem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ServiceItem) predicate.ServiceItem {
	return predicate.ServiceItem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ServiceItem) predicate.ServiceItem {
	return predicate.ServiceItem(sql.NotPredicates(p))
}
