// Code generated by ent, DO NOT EDIT.

package serviceitem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the serviceitem type in the database.
	Label = "service_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldLabel holds the string denoting the label field in the database.
	FieldLabel = "label"
	// FieldEstimatedMinutes holds the string denoting the estimated_minutes field in the database.
	FieldEstimatedMinutes = "estimated_minutes"
	// FieldDefaultIntervalKm holds the string denoting the default_interval_km field in the database.
	FieldDefaultIntervalKm = "default_interval_km"
	// FieldDefaultIntervalMonths holds the string denoting the default_interval_months field in the database.
	FieldDefaultIntervalMonths = "default_interval_months"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// EdgeCar holds the string denoting the car edge name in mutations.
	EdgeCar = "car"
	// EdgeSchedules holds the string denoting the schedules edge name in mutations.
	EdgeSchedules = "schedules"
	// EdgeLogs holds the string denoting the logs edge name in mutations.
	EdgeLogs = "logs"
	// Table holds the table name of the serviceitem in the database.
	Table = "service_items"
	// CarTable is the table that holds the car relation/edge.
	CarTable = "service_items"
	// CarInverseTable is the table name for the Car entity.
	// It exists in this package in order to avoid circular dependency with the "car" package.
	CarInverseTable = "cars"
	// CarColumn is the table column denoting the car relation/edge.
	CarColumn = "car_service_items"
	// SchedulesTable is the table that holds the schedules relation/edge. The primary key declared below.
	SchedulesTable = "service_schedule_items"
	// SchedulesInverseTable is the table name for the ServiceSchedule entity.
	// It exists in this package in order to avoid circular dependency with the "serviceschedule" package.
	SchedulesInverseTable = "service_schedules"
	// LogsTable is the table that holds the logs relation/edge. The primary key declared below.
	LogsTable = "service_log_items"
	// LogsInverseTable is the table name for the ServiceLog entity.
	// It exists in this package in order to avoid circular dependency with the "servicelog" package.
	LogsInverseTable = "service_logs"
)

// Columns holds all SQL columns for serviceitem fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldLabel,
	FieldEstimatedMinutes,
	FieldDefaultIntervalKm,
	FieldDefaultIntervalMonths,
	FieldNotes,
	FieldTags,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "service_items"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"car_service_items",
}

var (
	// SchedulesPrimaryKey and SchedulesColumn2 are the table columns denoting the
	// primary key for the schedules relation (M2M).
	SchedulesPrimaryKey = []string{"service_schedule_id", "service_item_id"}
	// LogsPrimaryKey and LogsColumn2 are the table columns denoting the
	// primary key for the logs relation (M2M).
	LogsPrimaryKey = []string{"service_log_id", "service_item_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ServiceItem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByLabel orders the results by the label field.
func ByLabel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLabel, opts...).ToFunc()
}

// ByEstimatedMinutes orders the results by the estimated_minutes field.
func ByEstimatedMinutes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEstimatedMinutes, opts...).ToFunc()
}

// ByDefaultIntervalKm orders the results by the default_interval_km field.
func ByDefaultIntervalKm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDefaultIntervalKm, opts...).ToFunc()
}

// ByDefaultIntervalMonths orders the results by the default_interval_months field.
func ByDefaultIntervalMonths(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDefaultIntervalMonths, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByCarField orders the results by car field.
func ByCarField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarStep(), sql.OrderByField(field, opts...))
	}
}

// BySchedulesCount orders the results by schedules count.
func BySchedulesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSchedulesStep(), opts...)
	}
}

// BySchedules orders the results by schedules terms.
func BySchedules(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSchedulesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLogsCount orders the results by logs count.
func ByLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLogsStep(), opts...)
	}
}

// ByLogs orders the results by logs terms.
func ByLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCarStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CarTable, CarColumn),
	)
}
func newSchedulesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SchedulesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, SchedulesTable, SchedulesPrimaryKey...),
	)
}
func newLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, LogsTable, LogsPrimaryKey...),
	)
}
