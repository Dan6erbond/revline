// Code generated by ent, DO NOT EDIT.

package media

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the media type in the database.
	Label = "media"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeCar holds the string denoting the car edge name in mutations.
	EdgeCar = "car"
	// EdgeModProductOption holds the string denoting the mod_product_option edge name in mutations.
	EdgeModProductOption = "mod_product_option"
	// EdgeBuildLog holds the string denoting the build_log edge name in mutations.
	EdgeBuildLog = "build_log"
	// EdgeAlbums holds the string denoting the albums edge name in mutations.
	EdgeAlbums = "albums"
	// Table holds the table name of the media in the database.
	Table = "media"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "media"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_media"
	// CarTable is the table that holds the car relation/edge.
	CarTable = "media"
	// CarInverseTable is the table name for the Car entity.
	// It exists in this package in order to avoid circular dependency with the "car" package.
	CarInverseTable = "cars"
	// CarColumn is the table column denoting the car relation/edge.
	CarColumn = "car_media"
	// ModProductOptionTable is the table that holds the mod_product_option relation/edge.
	ModProductOptionTable = "media"
	// ModProductOptionInverseTable is the table name for the ModProductOption entity.
	// It exists in this package in order to avoid circular dependency with the "modproductoption" package.
	ModProductOptionInverseTable = "mod_product_options"
	// ModProductOptionColumn is the table column denoting the mod_product_option relation/edge.
	ModProductOptionColumn = "mod_product_option_media"
	// BuildLogTable is the table that holds the build_log relation/edge. The primary key declared below.
	BuildLogTable = "build_log_media"
	// BuildLogInverseTable is the table name for the BuildLog entity.
	// It exists in this package in order to avoid circular dependency with the "buildlog" package.
	BuildLogInverseTable = "build_logs"
	// AlbumsTable is the table that holds the albums relation/edge. The primary key declared below.
	AlbumsTable = "album_media"
	// AlbumsInverseTable is the table name for the Album entity.
	// It exists in this package in order to avoid circular dependency with the "album" package.
	AlbumsInverseTable = "albums"
)

// Columns holds all SQL columns for media fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDescription,
	FieldCreateTime,
	FieldUpdateTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "media"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"car_media",
	"mod_product_option_media",
	"user_media",
}

var (
	// BuildLogPrimaryKey and BuildLogColumn2 are the table columns denoting the
	// primary key for the build_log relation (M2M).
	BuildLogPrimaryKey = []string{"build_log_id", "media_id"}
	// AlbumsPrimaryKey and AlbumsColumn2 are the table columns denoting the
	// primary key for the albums relation (M2M).
	AlbumsPrimaryKey = []string{"album_id", "media_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Media queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarField orders the results by car field.
func ByCarField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarStep(), sql.OrderByField(field, opts...))
	}
}

// ByModProductOptionField orders the results by mod_product_option field.
func ByModProductOptionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModProductOptionStep(), sql.OrderByField(field, opts...))
	}
}

// ByBuildLogCount orders the results by build_log count.
func ByBuildLogCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBuildLogStep(), opts...)
	}
}

// ByBuildLog orders the results by build_log terms.
func ByBuildLog(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBuildLogStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAlbumsCount orders the results by albums count.
func ByAlbumsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAlbumsStep(), opts...)
	}
}

// ByAlbums orders the results by albums terms.
func ByAlbums(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAlbumsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newCarStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CarTable, CarColumn),
	)
}
func newModProductOptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ModProductOptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ModProductOptionTable, ModProductOptionColumn),
	)
}
func newBuildLogStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BuildLogInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, BuildLogTable, BuildLogPrimaryKey...),
	)
}
func newAlbumsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AlbumsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, AlbumsTable, AlbumsPrimaryKey...),
	)
}
