// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/document"
	"github.com/Dan6erbond/revline/ent/dragresult"
	"github.com/Dan6erbond/revline/ent/dragsession"
	"github.com/google/uuid"
)

// DragSessionCreate is the builder for creating a DragSession entity.
type DragSessionCreate struct {
	config
	mutation *DragSessionMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (dsc *DragSessionCreate) SetCreateTime(t time.Time) *DragSessionCreate {
	dsc.mutation.SetCreateTime(t)
	return dsc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (dsc *DragSessionCreate) SetNillableCreateTime(t *time.Time) *DragSessionCreate {
	if t != nil {
		dsc.SetCreateTime(*t)
	}
	return dsc
}

// SetUpdateTime sets the "update_time" field.
func (dsc *DragSessionCreate) SetUpdateTime(t time.Time) *DragSessionCreate {
	dsc.mutation.SetUpdateTime(t)
	return dsc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (dsc *DragSessionCreate) SetNillableUpdateTime(t *time.Time) *DragSessionCreate {
	if t != nil {
		dsc.SetUpdateTime(*t)
	}
	return dsc
}

// SetTitle sets the "title" field.
func (dsc *DragSessionCreate) SetTitle(s string) *DragSessionCreate {
	dsc.mutation.SetTitle(s)
	return dsc
}

// SetNotes sets the "notes" field.
func (dsc *DragSessionCreate) SetNotes(m map[string]interface{}) *DragSessionCreate {
	dsc.mutation.SetNotes(m)
	return dsc
}

// SetID sets the "id" field.
func (dsc *DragSessionCreate) SetID(u uuid.UUID) *DragSessionCreate {
	dsc.mutation.SetID(u)
	return dsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dsc *DragSessionCreate) SetNillableID(u *uuid.UUID) *DragSessionCreate {
	if u != nil {
		dsc.SetID(*u)
	}
	return dsc
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (dsc *DragSessionCreate) SetCarID(id uuid.UUID) *DragSessionCreate {
	dsc.mutation.SetCarID(id)
	return dsc
}

// SetCar sets the "car" edge to the Car entity.
func (dsc *DragSessionCreate) SetCar(c *Car) *DragSessionCreate {
	return dsc.SetCarID(c.ID)
}

// AddResultIDs adds the "results" edge to the DragResult entity by IDs.
func (dsc *DragSessionCreate) AddResultIDs(ids ...uuid.UUID) *DragSessionCreate {
	dsc.mutation.AddResultIDs(ids...)
	return dsc
}

// AddResults adds the "results" edges to the DragResult entity.
func (dsc *DragSessionCreate) AddResults(d ...*DragResult) *DragSessionCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dsc.AddResultIDs(ids...)
}

// AddDocumentIDs adds the "documents" edge to the Document entity by IDs.
func (dsc *DragSessionCreate) AddDocumentIDs(ids ...uuid.UUID) *DragSessionCreate {
	dsc.mutation.AddDocumentIDs(ids...)
	return dsc
}

// AddDocuments adds the "documents" edges to the Document entity.
func (dsc *DragSessionCreate) AddDocuments(d ...*Document) *DragSessionCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dsc.AddDocumentIDs(ids...)
}

// Mutation returns the DragSessionMutation object of the builder.
func (dsc *DragSessionCreate) Mutation() *DragSessionMutation {
	return dsc.mutation
}

// Save creates the DragSession in the database.
func (dsc *DragSessionCreate) Save(ctx context.Context) (*DragSession, error) {
	dsc.defaults()
	return withHooks(ctx, dsc.sqlSave, dsc.mutation, dsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dsc *DragSessionCreate) SaveX(ctx context.Context) *DragSession {
	v, err := dsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dsc *DragSessionCreate) Exec(ctx context.Context) error {
	_, err := dsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsc *DragSessionCreate) ExecX(ctx context.Context) {
	if err := dsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dsc *DragSessionCreate) defaults() {
	if _, ok := dsc.mutation.CreateTime(); !ok {
		v := dragsession.DefaultCreateTime()
		dsc.mutation.SetCreateTime(v)
	}
	if _, ok := dsc.mutation.UpdateTime(); !ok {
		v := dragsession.DefaultUpdateTime()
		dsc.mutation.SetUpdateTime(v)
	}
	if _, ok := dsc.mutation.ID(); !ok {
		v := dragsession.DefaultID()
		dsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsc *DragSessionCreate) check() error {
	if _, ok := dsc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "DragSession.create_time"`)}
	}
	if _, ok := dsc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "DragSession.update_time"`)}
	}
	if _, ok := dsc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "DragSession.title"`)}
	}
	if len(dsc.mutation.CarIDs()) == 0 {
		return &ValidationError{Name: "car", err: errors.New(`ent: missing required edge "DragSession.car"`)}
	}
	return nil
}

func (dsc *DragSessionCreate) sqlSave(ctx context.Context) (*DragSession, error) {
	if err := dsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dsc.mutation.id = &_node.ID
	dsc.mutation.done = true
	return _node, nil
}

func (dsc *DragSessionCreate) createSpec() (*DragSession, *sqlgraph.CreateSpec) {
	var (
		_node = &DragSession{config: dsc.config}
		_spec = sqlgraph.NewCreateSpec(dragsession.Table, sqlgraph.NewFieldSpec(dragsession.FieldID, field.TypeUUID))
	)
	if id, ok := dsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dsc.mutation.CreateTime(); ok {
		_spec.SetField(dragsession.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := dsc.mutation.UpdateTime(); ok {
		_spec.SetField(dragsession.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := dsc.mutation.Title(); ok {
		_spec.SetField(dragsession.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := dsc.mutation.Notes(); ok {
		_spec.SetField(dragsession.FieldNotes, field.TypeJSON, value)
		_node.Notes = value
	}
	if nodes := dsc.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dragsession.CarTable,
			Columns: []string{dragsession.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.car_drag_sessions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dsc.mutation.ResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dragsession.ResultsTable,
			Columns: []string{dragsession.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dragresult.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dsc.mutation.DocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dragsession.DocumentsTable,
			Columns: []string{dragsession.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DragSessionCreateBulk is the builder for creating many DragSession entities in bulk.
type DragSessionCreateBulk struct {
	config
	err      error
	builders []*DragSessionCreate
}

// Save creates the DragSession entities in the database.
func (dscb *DragSessionCreateBulk) Save(ctx context.Context) ([]*DragSession, error) {
	if dscb.err != nil {
		return nil, dscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dscb.builders))
	nodes := make([]*DragSession, len(dscb.builders))
	mutators := make([]Mutator, len(dscb.builders))
	for i := range dscb.builders {
		func(i int, root context.Context) {
			builder := dscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DragSessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dscb *DragSessionCreateBulk) SaveX(ctx context.Context) []*DragSession {
	v, err := dscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dscb *DragSessionCreateBulk) Exec(ctx context.Context) error {
	_, err := dscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dscb *DragSessionCreateBulk) ExecX(ctx context.Context) {
	if err := dscb.Exec(ctx); err != nil {
		panic(err)
	}
}
