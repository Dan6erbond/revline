// Code generated by ent, DO NOT EDIT.

package mod

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Mod {
	return predicate.Mod(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Mod {
	return predicate.Mod(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Mod {
	return predicate.Mod(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Mod {
	return predicate.Mod(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Mod {
	return predicate.Mod(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Mod {
	return predicate.Mod(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldUpdateTime, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldDescription, v))
}

// Stage applies equality check predicate on the "stage" field. It's identical to StageEQ.
func Stage(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldStage, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Mod {
	return predicate.Mod(sql.FieldLTE(FieldUpdateTime, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Mod {
	return predicate.Mod(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Mod {
	return predicate.Mod(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Mod {
	return predicate.Mod(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Mod {
	return predicate.Mod(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Mod {
	return predicate.Mod(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Mod {
	return predicate.Mod(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Mod {
	return predicate.Mod(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Mod {
	return predicate.Mod(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Mod {
	return predicate.Mod(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Mod {
	return predicate.Mod(sql.FieldContainsFold(FieldTitle, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v Category) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v Category) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...Category) predicate.Mod {
	return predicate.Mod(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...Category) predicate.Mod {
	return predicate.Mod(sql.FieldNotIn(FieldCategory, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Mod {
	return predicate.Mod(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Mod {
	return predicate.Mod(sql.FieldNotIn(FieldStatus, vs...))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Mod {
	return predicate.Mod(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Mod {
	return predicate.Mod(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Mod {
	return predicate.Mod(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Mod {
	return predicate.Mod(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Mod {
	return predicate.Mod(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Mod {
	return predicate.Mod(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Mod {
	return predicate.Mod(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Mod {
	return predicate.Mod(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Mod {
	return predicate.Mod(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Mod {
	return predicate.Mod(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Mod {
	return predicate.Mod(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Mod {
	return predicate.Mod(sql.FieldContainsFold(FieldDescription, v))
}

// StageEQ applies the EQ predicate on the "stage" field.
func StageEQ(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEQ(FieldStage, v))
}

// StageNEQ applies the NEQ predicate on the "stage" field.
func StageNEQ(v string) predicate.Mod {
	return predicate.Mod(sql.FieldNEQ(FieldStage, v))
}

// StageIn applies the In predicate on the "stage" field.
func StageIn(vs ...string) predicate.Mod {
	return predicate.Mod(sql.FieldIn(FieldStage, vs...))
}

// StageNotIn applies the NotIn predicate on the "stage" field.
func StageNotIn(vs ...string) predicate.Mod {
	return predicate.Mod(sql.FieldNotIn(FieldStage, vs...))
}

// StageGT applies the GT predicate on the "stage" field.
func StageGT(v string) predicate.Mod {
	return predicate.Mod(sql.FieldGT(FieldStage, v))
}

// StageGTE applies the GTE predicate on the "stage" field.
func StageGTE(v string) predicate.Mod {
	return predicate.Mod(sql.FieldGTE(FieldStage, v))
}

// StageLT applies the LT predicate on the "stage" field.
func StageLT(v string) predicate.Mod {
	return predicate.Mod(sql.FieldLT(FieldStage, v))
}

// StageLTE applies the LTE predicate on the "stage" field.
func StageLTE(v string) predicate.Mod {
	return predicate.Mod(sql.FieldLTE(FieldStage, v))
}

// StageContains applies the Contains predicate on the "stage" field.
func StageContains(v string) predicate.Mod {
	return predicate.Mod(sql.FieldContains(FieldStage, v))
}

// StageHasPrefix applies the HasPrefix predicate on the "stage" field.
func StageHasPrefix(v string) predicate.Mod {
	return predicate.Mod(sql.FieldHasPrefix(FieldStage, v))
}

// StageHasSuffix applies the HasSuffix predicate on the "stage" field.
func StageHasSuffix(v string) predicate.Mod {
	return predicate.Mod(sql.FieldHasSuffix(FieldStage, v))
}

// StageIsNil applies the IsNil predicate on the "stage" field.
func StageIsNil() predicate.Mod {
	return predicate.Mod(sql.FieldIsNull(FieldStage))
}

// StageNotNil applies the NotNil predicate on the "stage" field.
func StageNotNil() predicate.Mod {
	return predicate.Mod(sql.FieldNotNull(FieldStage))
}

// StageEqualFold applies the EqualFold predicate on the "stage" field.
func StageEqualFold(v string) predicate.Mod {
	return predicate.Mod(sql.FieldEqualFold(FieldStage, v))
}

// StageContainsFold applies the ContainsFold predicate on the "stage" field.
func StageContainsFold(v string) predicate.Mod {
	return predicate.Mod(sql.FieldContainsFold(FieldStage, v))
}

// HasCar applies the HasEdge predicate on the "car" edge.
func HasCar() predicate.Mod {
	return predicate.Mod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CarTable, CarColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarWith applies the HasEdge predicate on the "car" edge with a given conditions (other predicates).
func HasCarWith(preds ...predicate.Car) predicate.Mod {
	return predicate.Mod(func(s *sql.Selector) {
		step := newCarStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTasks applies the HasEdge predicate on the "tasks" edge.
func HasTasks() predicate.Mod {
	return predicate.Mod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TasksTable, TasksPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTasksWith applies the HasEdge predicate on the "tasks" edge with a given conditions (other predicates).
func HasTasksWith(preds ...predicate.Task) predicate.Mod {
	return predicate.Mod(func(s *sql.Selector) {
		step := newTasksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProductOptions applies the HasEdge predicate on the "product_options" edge.
func HasProductOptions() predicate.Mod {
	return predicate.Mod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductOptionsTable, ProductOptionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductOptionsWith applies the HasEdge predicate on the "product_options" edge with a given conditions (other predicates).
func HasProductOptionsWith(preds ...predicate.ModProductOption) predicate.Mod {
	return predicate.Mod(func(s *sql.Selector) {
		step := newProductOptionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBuildLogs applies the HasEdge predicate on the "build_logs" edge.
func HasBuildLogs() predicate.Mod {
	return predicate.Mod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, BuildLogsTable, BuildLogsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildLogsWith applies the HasEdge predicate on the "build_logs" edge with a given conditions (other predicates).
func HasBuildLogsWith(preds ...predicate.BuildLog) predicate.Mod {
	return predicate.Mod(func(s *sql.Selector) {
		step := newBuildLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Mod) predicate.Mod {
	return predicate.Mod(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Mod) predicate.Mod {
	return predicate.Mod(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Mod) predicate.Mod {
	return predicate.Mod(sql.NotPredicates(p))
}
