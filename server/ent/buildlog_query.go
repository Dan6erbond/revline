// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/buildlog"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/media"
	"github.com/Dan6erbond/revline/ent/mod"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/google/uuid"
)

// BuildLogQuery is the builder for querying BuildLog entities.
type BuildLogQuery struct {
	config
	ctx            *QueryContext
	order          []buildlog.OrderOption
	inters         []Interceptor
	predicates     []predicate.BuildLog
	withCar        *CarQuery
	withMods       *ModQuery
	withMedia      *MediaQuery
	withFKs        bool
	modifiers      []func(*sql.Selector)
	loadTotal      []func(context.Context, []*BuildLog) error
	withNamedMods  map[string]*ModQuery
	withNamedMedia map[string]*MediaQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BuildLogQuery builder.
func (blq *BuildLogQuery) Where(ps ...predicate.BuildLog) *BuildLogQuery {
	blq.predicates = append(blq.predicates, ps...)
	return blq
}

// Limit the number of records to be returned by this query.
func (blq *BuildLogQuery) Limit(limit int) *BuildLogQuery {
	blq.ctx.Limit = &limit
	return blq
}

// Offset to start from.
func (blq *BuildLogQuery) Offset(offset int) *BuildLogQuery {
	blq.ctx.Offset = &offset
	return blq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (blq *BuildLogQuery) Unique(unique bool) *BuildLogQuery {
	blq.ctx.Unique = &unique
	return blq
}

// Order specifies how the records should be ordered.
func (blq *BuildLogQuery) Order(o ...buildlog.OrderOption) *BuildLogQuery {
	blq.order = append(blq.order, o...)
	return blq
}

// QueryCar chains the current query on the "car" edge.
func (blq *BuildLogQuery) QueryCar() *CarQuery {
	query := (&CarClient{config: blq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := blq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := blq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(buildlog.Table, buildlog.FieldID, selector),
			sqlgraph.To(car.Table, car.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, buildlog.CarTable, buildlog.CarColumn),
		)
		fromU = sqlgraph.SetNeighbors(blq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMods chains the current query on the "mods" edge.
func (blq *BuildLogQuery) QueryMods() *ModQuery {
	query := (&ModClient{config: blq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := blq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := blq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(buildlog.Table, buildlog.FieldID, selector),
			sqlgraph.To(mod.Table, mod.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, buildlog.ModsTable, buildlog.ModsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(blq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMedia chains the current query on the "media" edge.
func (blq *BuildLogQuery) QueryMedia() *MediaQuery {
	query := (&MediaClient{config: blq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := blq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := blq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(buildlog.Table, buildlog.FieldID, selector),
			sqlgraph.To(media.Table, media.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, buildlog.MediaTable, buildlog.MediaColumn),
		)
		fromU = sqlgraph.SetNeighbors(blq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first BuildLog entity from the query.
// Returns a *NotFoundError when no BuildLog was found.
func (blq *BuildLogQuery) First(ctx context.Context) (*BuildLog, error) {
	nodes, err := blq.Limit(1).All(setContextOp(ctx, blq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{buildlog.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (blq *BuildLogQuery) FirstX(ctx context.Context) *BuildLog {
	node, err := blq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BuildLog ID from the query.
// Returns a *NotFoundError when no BuildLog ID was found.
func (blq *BuildLogQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = blq.Limit(1).IDs(setContextOp(ctx, blq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{buildlog.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (blq *BuildLogQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := blq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BuildLog entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BuildLog entity is found.
// Returns a *NotFoundError when no BuildLog entities are found.
func (blq *BuildLogQuery) Only(ctx context.Context) (*BuildLog, error) {
	nodes, err := blq.Limit(2).All(setContextOp(ctx, blq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{buildlog.Label}
	default:
		return nil, &NotSingularError{buildlog.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (blq *BuildLogQuery) OnlyX(ctx context.Context) *BuildLog {
	node, err := blq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BuildLog ID in the query.
// Returns a *NotSingularError when more than one BuildLog ID is found.
// Returns a *NotFoundError when no entities are found.
func (blq *BuildLogQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = blq.Limit(2).IDs(setContextOp(ctx, blq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{buildlog.Label}
	default:
		err = &NotSingularError{buildlog.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (blq *BuildLogQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := blq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BuildLogs.
func (blq *BuildLogQuery) All(ctx context.Context) ([]*BuildLog, error) {
	ctx = setContextOp(ctx, blq.ctx, ent.OpQueryAll)
	if err := blq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BuildLog, *BuildLogQuery]()
	return withInterceptors[[]*BuildLog](ctx, blq, qr, blq.inters)
}

// AllX is like All, but panics if an error occurs.
func (blq *BuildLogQuery) AllX(ctx context.Context) []*BuildLog {
	nodes, err := blq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BuildLog IDs.
func (blq *BuildLogQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if blq.ctx.Unique == nil && blq.path != nil {
		blq.Unique(true)
	}
	ctx = setContextOp(ctx, blq.ctx, ent.OpQueryIDs)
	if err = blq.Select(buildlog.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (blq *BuildLogQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := blq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (blq *BuildLogQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, blq.ctx, ent.OpQueryCount)
	if err := blq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, blq, querierCount[*BuildLogQuery](), blq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (blq *BuildLogQuery) CountX(ctx context.Context) int {
	count, err := blq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (blq *BuildLogQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, blq.ctx, ent.OpQueryExist)
	switch _, err := blq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (blq *BuildLogQuery) ExistX(ctx context.Context) bool {
	exist, err := blq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BuildLogQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (blq *BuildLogQuery) Clone() *BuildLogQuery {
	if blq == nil {
		return nil
	}
	return &BuildLogQuery{
		config:     blq.config,
		ctx:        blq.ctx.Clone(),
		order:      append([]buildlog.OrderOption{}, blq.order...),
		inters:     append([]Interceptor{}, blq.inters...),
		predicates: append([]predicate.BuildLog{}, blq.predicates...),
		withCar:    blq.withCar.Clone(),
		withMods:   blq.withMods.Clone(),
		withMedia:  blq.withMedia.Clone(),
		// clone intermediate query.
		sql:  blq.sql.Clone(),
		path: blq.path,
	}
}

// WithCar tells the query-builder to eager-load the nodes that are connected to
// the "car" edge. The optional arguments are used to configure the query builder of the edge.
func (blq *BuildLogQuery) WithCar(opts ...func(*CarQuery)) *BuildLogQuery {
	query := (&CarClient{config: blq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	blq.withCar = query
	return blq
}

// WithMods tells the query-builder to eager-load the nodes that are connected to
// the "mods" edge. The optional arguments are used to configure the query builder of the edge.
func (blq *BuildLogQuery) WithMods(opts ...func(*ModQuery)) *BuildLogQuery {
	query := (&ModClient{config: blq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	blq.withMods = query
	return blq
}

// WithMedia tells the query-builder to eager-load the nodes that are connected to
// the "media" edge. The optional arguments are used to configure the query builder of the edge.
func (blq *BuildLogQuery) WithMedia(opts ...func(*MediaQuery)) *BuildLogQuery {
	query := (&MediaClient{config: blq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	blq.withMedia = query
	return blq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BuildLog.Query().
//		GroupBy(buildlog.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (blq *BuildLogQuery) GroupBy(field string, fields ...string) *BuildLogGroupBy {
	blq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BuildLogGroupBy{build: blq}
	grbuild.flds = &blq.ctx.Fields
	grbuild.label = buildlog.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.BuildLog.Query().
//		Select(buildlog.FieldCreateTime).
//		Scan(ctx, &v)
func (blq *BuildLogQuery) Select(fields ...string) *BuildLogSelect {
	blq.ctx.Fields = append(blq.ctx.Fields, fields...)
	sbuild := &BuildLogSelect{BuildLogQuery: blq}
	sbuild.label = buildlog.Label
	sbuild.flds, sbuild.scan = &blq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BuildLogSelect configured with the given aggregations.
func (blq *BuildLogQuery) Aggregate(fns ...AggregateFunc) *BuildLogSelect {
	return blq.Select().Aggregate(fns...)
}

func (blq *BuildLogQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range blq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, blq); err != nil {
				return err
			}
		}
	}
	for _, f := range blq.ctx.Fields {
		if !buildlog.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if blq.path != nil {
		prev, err := blq.path(ctx)
		if err != nil {
			return err
		}
		blq.sql = prev
	}
	return nil
}

func (blq *BuildLogQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BuildLog, error) {
	var (
		nodes       = []*BuildLog{}
		withFKs     = blq.withFKs
		_spec       = blq.querySpec()
		loadedTypes = [3]bool{
			blq.withCar != nil,
			blq.withMods != nil,
			blq.withMedia != nil,
		}
	)
	if blq.withCar != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, buildlog.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BuildLog).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BuildLog{config: blq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(blq.modifiers) > 0 {
		_spec.Modifiers = blq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, blq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := blq.withCar; query != nil {
		if err := blq.loadCar(ctx, query, nodes, nil,
			func(n *BuildLog, e *Car) { n.Edges.Car = e }); err != nil {
			return nil, err
		}
	}
	if query := blq.withMods; query != nil {
		if err := blq.loadMods(ctx, query, nodes,
			func(n *BuildLog) { n.Edges.Mods = []*Mod{} },
			func(n *BuildLog, e *Mod) { n.Edges.Mods = append(n.Edges.Mods, e) }); err != nil {
			return nil, err
		}
	}
	if query := blq.withMedia; query != nil {
		if err := blq.loadMedia(ctx, query, nodes,
			func(n *BuildLog) { n.Edges.Media = []*Media{} },
			func(n *BuildLog, e *Media) { n.Edges.Media = append(n.Edges.Media, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range blq.withNamedMods {
		if err := blq.loadMods(ctx, query, nodes,
			func(n *BuildLog) { n.appendNamedMods(name) },
			func(n *BuildLog, e *Mod) { n.appendNamedMods(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range blq.withNamedMedia {
		if err := blq.loadMedia(ctx, query, nodes,
			func(n *BuildLog) { n.appendNamedMedia(name) },
			func(n *BuildLog, e *Media) { n.appendNamedMedia(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range blq.loadTotal {
		if err := blq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (blq *BuildLogQuery) loadCar(ctx context.Context, query *CarQuery, nodes []*BuildLog, init func(*BuildLog), assign func(*BuildLog, *Car)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*BuildLog)
	for i := range nodes {
		if nodes[i].car_build_logs == nil {
			continue
		}
		fk := *nodes[i].car_build_logs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(car.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "car_build_logs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (blq *BuildLogQuery) loadMods(ctx context.Context, query *ModQuery, nodes []*BuildLog, init func(*BuildLog), assign func(*BuildLog, *Mod)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*BuildLog)
	nids := make(map[uuid.UUID]map[*BuildLog]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(buildlog.ModsTable)
		s.Join(joinT).On(s.C(mod.FieldID), joinT.C(buildlog.ModsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(buildlog.ModsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(buildlog.ModsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*BuildLog]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Mod](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "mods" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (blq *BuildLogQuery) loadMedia(ctx context.Context, query *MediaQuery, nodes []*BuildLog, init func(*BuildLog), assign func(*BuildLog, *Media)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*BuildLog)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Media(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(buildlog.MediaColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.build_log_media
		if fk == nil {
			return fmt.Errorf(`foreign-key "build_log_media" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "build_log_media" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (blq *BuildLogQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := blq.querySpec()
	if len(blq.modifiers) > 0 {
		_spec.Modifiers = blq.modifiers
	}
	_spec.Node.Columns = blq.ctx.Fields
	if len(blq.ctx.Fields) > 0 {
		_spec.Unique = blq.ctx.Unique != nil && *blq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, blq.driver, _spec)
}

func (blq *BuildLogQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(buildlog.Table, buildlog.Columns, sqlgraph.NewFieldSpec(buildlog.FieldID, field.TypeUUID))
	_spec.From = blq.sql
	if unique := blq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if blq.path != nil {
		_spec.Unique = true
	}
	if fields := blq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, buildlog.FieldID)
		for i := range fields {
			if fields[i] != buildlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := blq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := blq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := blq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := blq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (blq *BuildLogQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(blq.driver.Dialect())
	t1 := builder.Table(buildlog.Table)
	columns := blq.ctx.Fields
	if len(columns) == 0 {
		columns = buildlog.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if blq.sql != nil {
		selector = blq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if blq.ctx.Unique != nil && *blq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range blq.predicates {
		p(selector)
	}
	for _, p := range blq.order {
		p(selector)
	}
	if offset := blq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := blq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedMods tells the query-builder to eager-load the nodes that are connected to the "mods"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (blq *BuildLogQuery) WithNamedMods(name string, opts ...func(*ModQuery)) *BuildLogQuery {
	query := (&ModClient{config: blq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if blq.withNamedMods == nil {
		blq.withNamedMods = make(map[string]*ModQuery)
	}
	blq.withNamedMods[name] = query
	return blq
}

// WithNamedMedia tells the query-builder to eager-load the nodes that are connected to the "media"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (blq *BuildLogQuery) WithNamedMedia(name string, opts ...func(*MediaQuery)) *BuildLogQuery {
	query := (&MediaClient{config: blq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if blq.withNamedMedia == nil {
		blq.withNamedMedia = make(map[string]*MediaQuery)
	}
	blq.withNamedMedia[name] = query
	return blq
}

// BuildLogGroupBy is the group-by builder for BuildLog entities.
type BuildLogGroupBy struct {
	selector
	build *BuildLogQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (blgb *BuildLogGroupBy) Aggregate(fns ...AggregateFunc) *BuildLogGroupBy {
	blgb.fns = append(blgb.fns, fns...)
	return blgb
}

// Scan applies the selector query and scans the result into the given value.
func (blgb *BuildLogGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, blgb.build.ctx, ent.OpQueryGroupBy)
	if err := blgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BuildLogQuery, *BuildLogGroupBy](ctx, blgb.build, blgb, blgb.build.inters, v)
}

func (blgb *BuildLogGroupBy) sqlScan(ctx context.Context, root *BuildLogQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(blgb.fns))
	for _, fn := range blgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*blgb.flds)+len(blgb.fns))
		for _, f := range *blgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*blgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := blgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BuildLogSelect is the builder for selecting fields of BuildLog entities.
type BuildLogSelect struct {
	*BuildLogQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bls *BuildLogSelect) Aggregate(fns ...AggregateFunc) *BuildLogSelect {
	bls.fns = append(bls.fns, fns...)
	return bls
}

// Scan applies the selector query and scans the result into the given value.
func (bls *BuildLogSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bls.ctx, ent.OpQuerySelect)
	if err := bls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BuildLogQuery, *BuildLogSelect](ctx, bls.BuildLogQuery, bls, bls.inters, v)
}

func (bls *BuildLogSelect) sqlScan(ctx context.Context, root *BuildLogQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bls.fns))
	for _, fn := range bls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
