// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/media"
	"github.com/Dan6erbond/revline/ent/modproductoption"
	"github.com/Dan6erbond/revline/ent/user"
	"github.com/google/uuid"
)

// Media is the model entity for the Media schema.
type Media struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title *string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MediaQuery when eager-loading is set.
	Edges                    MediaEdges `json:"edges"`
	car_media                *uuid.UUID
	mod_product_option_media *uuid.UUID
	user_media               *uuid.UUID
	selectValues             sql.SelectValues
}

// MediaEdges holds the relations/edges for other nodes in the graph.
type MediaEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Car holds the value of the car edge.
	Car *Car `json:"car,omitempty"`
	// ModProductOption holds the value of the mod_product_option edge.
	ModProductOption *ModProductOption `json:"mod_product_option,omitempty"`
	// BuildLog holds the value of the build_log edge.
	BuildLog []*BuildLog `json:"build_log,omitempty"`
	// Albums holds the value of the albums edge.
	Albums []*Album `json:"albums,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedBuildLog map[string][]*BuildLog
	namedAlbums   map[string][]*Album
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MediaEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CarOrErr returns the Car value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MediaEdges) CarOrErr() (*Car, error) {
	if e.Car != nil {
		return e.Car, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: car.Label}
	}
	return nil, &NotLoadedError{edge: "car"}
}

// ModProductOptionOrErr returns the ModProductOption value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MediaEdges) ModProductOptionOrErr() (*ModProductOption, error) {
	if e.ModProductOption != nil {
		return e.ModProductOption, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: modproductoption.Label}
	}
	return nil, &NotLoadedError{edge: "mod_product_option"}
}

// BuildLogOrErr returns the BuildLog value or an error if the edge
// was not loaded in eager-loading.
func (e MediaEdges) BuildLogOrErr() ([]*BuildLog, error) {
	if e.loadedTypes[3] {
		return e.BuildLog, nil
	}
	return nil, &NotLoadedError{edge: "build_log"}
}

// AlbumsOrErr returns the Albums value or an error if the edge
// was not loaded in eager-loading.
func (e MediaEdges) AlbumsOrErr() ([]*Album, error) {
	if e.loadedTypes[4] {
		return e.Albums, nil
	}
	return nil, &NotLoadedError{edge: "albums"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Media) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case media.FieldTitle, media.FieldDescription:
			values[i] = new(sql.NullString)
		case media.FieldCreateTime, media.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case media.FieldID:
			values[i] = new(uuid.UUID)
		case media.ForeignKeys[0]: // car_media
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case media.ForeignKeys[1]: // mod_product_option_media
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case media.ForeignKeys[2]: // user_media
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Media fields.
func (m *Media) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case media.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case media.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				m.Title = new(string)
				*m.Title = value.String
			}
		case media.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				m.Description = new(string)
				*m.Description = value.String
			}
		case media.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				m.CreateTime = value.Time
			}
		case media.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				m.UpdateTime = value.Time
			}
		case media.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field car_media", values[i])
			} else if value.Valid {
				m.car_media = new(uuid.UUID)
				*m.car_media = *value.S.(*uuid.UUID)
			}
		case media.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field mod_product_option_media", values[i])
			} else if value.Valid {
				m.mod_product_option_media = new(uuid.UUID)
				*m.mod_product_option_media = *value.S.(*uuid.UUID)
			}
		case media.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_media", values[i])
			} else if value.Valid {
				m.user_media = new(uuid.UUID)
				*m.user_media = *value.S.(*uuid.UUID)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Media.
// This includes values selected through modifiers, order, etc.
func (m *Media) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Media entity.
func (m *Media) QueryUser() *UserQuery {
	return NewMediaClient(m.config).QueryUser(m)
}

// QueryCar queries the "car" edge of the Media entity.
func (m *Media) QueryCar() *CarQuery {
	return NewMediaClient(m.config).QueryCar(m)
}

// QueryModProductOption queries the "mod_product_option" edge of the Media entity.
func (m *Media) QueryModProductOption() *ModProductOptionQuery {
	return NewMediaClient(m.config).QueryModProductOption(m)
}

// QueryBuildLog queries the "build_log" edge of the Media entity.
func (m *Media) QueryBuildLog() *BuildLogQuery {
	return NewMediaClient(m.config).QueryBuildLog(m)
}

// QueryAlbums queries the "albums" edge of the Media entity.
func (m *Media) QueryAlbums() *AlbumQuery {
	return NewMediaClient(m.config).QueryAlbums(m)
}

// Update returns a builder for updating this Media.
// Note that you need to call Media.Unwrap() before calling this method if this Media
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Media) Update() *MediaUpdateOne {
	return NewMediaClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Media entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Media) Unwrap() *Media {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Media is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Media) String() string {
	var builder strings.Builder
	builder.WriteString("Media(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	if v := m.Title; v != nil {
		builder.WriteString("title=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := m.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(m.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedBuildLog returns the BuildLog named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *Media) NamedBuildLog(name string) ([]*BuildLog, error) {
	if m.Edges.namedBuildLog == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedBuildLog[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *Media) appendNamedBuildLog(name string, edges ...*BuildLog) {
	if m.Edges.namedBuildLog == nil {
		m.Edges.namedBuildLog = make(map[string][]*BuildLog)
	}
	if len(edges) == 0 {
		m.Edges.namedBuildLog[name] = []*BuildLog{}
	} else {
		m.Edges.namedBuildLog[name] = append(m.Edges.namedBuildLog[name], edges...)
	}
}

// NamedAlbums returns the Albums named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *Media) NamedAlbums(name string) ([]*Album, error) {
	if m.Edges.namedAlbums == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedAlbums[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *Media) appendNamedAlbums(name string, edges ...*Album) {
	if m.Edges.namedAlbums == nil {
		m.Edges.namedAlbums = make(map[string][]*Album)
	}
	if len(edges) == 0 {
		m.Edges.namedAlbums[name] = []*Album{}
	} else {
		m.Edges.namedAlbums[name] = append(m.Edges.namedAlbums[name], edges...)
	}
}

// MediaSlice is a parsable slice of Media.
type MediaSlice []*Media
