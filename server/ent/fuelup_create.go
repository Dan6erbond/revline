// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/expense"
	"github.com/Dan6erbond/revline/ent/fuelup"
	"github.com/Dan6erbond/revline/ent/odometerreading"
	"github.com/google/uuid"
)

// FuelUpCreate is the builder for creating a FuelUp entity.
type FuelUpCreate struct {
	config
	mutation *FuelUpMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (fuc *FuelUpCreate) SetCreateTime(t time.Time) *FuelUpCreate {
	fuc.mutation.SetCreateTime(t)
	return fuc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (fuc *FuelUpCreate) SetNillableCreateTime(t *time.Time) *FuelUpCreate {
	if t != nil {
		fuc.SetCreateTime(*t)
	}
	return fuc
}

// SetUpdateTime sets the "update_time" field.
func (fuc *FuelUpCreate) SetUpdateTime(t time.Time) *FuelUpCreate {
	fuc.mutation.SetUpdateTime(t)
	return fuc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (fuc *FuelUpCreate) SetNillableUpdateTime(t *time.Time) *FuelUpCreate {
	if t != nil {
		fuc.SetUpdateTime(*t)
	}
	return fuc
}

// SetOccurredAt sets the "occurred_at" field.
func (fuc *FuelUpCreate) SetOccurredAt(t time.Time) *FuelUpCreate {
	fuc.mutation.SetOccurredAt(t)
	return fuc
}

// SetStation sets the "station" field.
func (fuc *FuelUpCreate) SetStation(s string) *FuelUpCreate {
	fuc.mutation.SetStation(s)
	return fuc
}

// SetAmountLiters sets the "amount_liters" field.
func (fuc *FuelUpCreate) SetAmountLiters(f float64) *FuelUpCreate {
	fuc.mutation.SetAmountLiters(f)
	return fuc
}

// SetFuelCategory sets the "fuel_category" field.
func (fuc *FuelUpCreate) SetFuelCategory(fc fuelup.FuelCategory) *FuelUpCreate {
	fuc.mutation.SetFuelCategory(fc)
	return fuc
}

// SetOctaneRating sets the "octane_rating" field.
func (fuc *FuelUpCreate) SetOctaneRating(fr fuelup.OctaneRating) *FuelUpCreate {
	fuc.mutation.SetOctaneRating(fr)
	return fuc
}

// SetNillableOctaneRating sets the "octane_rating" field if the given value is not nil.
func (fuc *FuelUpCreate) SetNillableOctaneRating(fr *fuelup.OctaneRating) *FuelUpCreate {
	if fr != nil {
		fuc.SetOctaneRating(*fr)
	}
	return fuc
}

// SetIsFullTank sets the "is_full_tank" field.
func (fuc *FuelUpCreate) SetIsFullTank(b bool) *FuelUpCreate {
	fuc.mutation.SetIsFullTank(b)
	return fuc
}

// SetNillableIsFullTank sets the "is_full_tank" field if the given value is not nil.
func (fuc *FuelUpCreate) SetNillableIsFullTank(b *bool) *FuelUpCreate {
	if b != nil {
		fuc.SetIsFullTank(*b)
	}
	return fuc
}

// SetNotes sets the "notes" field.
func (fuc *FuelUpCreate) SetNotes(s string) *FuelUpCreate {
	fuc.mutation.SetNotes(s)
	return fuc
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (fuc *FuelUpCreate) SetNillableNotes(s *string) *FuelUpCreate {
	if s != nil {
		fuc.SetNotes(*s)
	}
	return fuc
}

// SetID sets the "id" field.
func (fuc *FuelUpCreate) SetID(u uuid.UUID) *FuelUpCreate {
	fuc.mutation.SetID(u)
	return fuc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fuc *FuelUpCreate) SetNillableID(u *uuid.UUID) *FuelUpCreate {
	if u != nil {
		fuc.SetID(*u)
	}
	return fuc
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (fuc *FuelUpCreate) SetCarID(id uuid.UUID) *FuelUpCreate {
	fuc.mutation.SetCarID(id)
	return fuc
}

// SetCar sets the "car" edge to the Car entity.
func (fuc *FuelUpCreate) SetCar(c *Car) *FuelUpCreate {
	return fuc.SetCarID(c.ID)
}

// SetOdometerReadingID sets the "odometer_reading" edge to the OdometerReading entity by ID.
func (fuc *FuelUpCreate) SetOdometerReadingID(id uuid.UUID) *FuelUpCreate {
	fuc.mutation.SetOdometerReadingID(id)
	return fuc
}

// SetNillableOdometerReadingID sets the "odometer_reading" edge to the OdometerReading entity by ID if the given value is not nil.
func (fuc *FuelUpCreate) SetNillableOdometerReadingID(id *uuid.UUID) *FuelUpCreate {
	if id != nil {
		fuc = fuc.SetOdometerReadingID(*id)
	}
	return fuc
}

// SetOdometerReading sets the "odometer_reading" edge to the OdometerReading entity.
func (fuc *FuelUpCreate) SetOdometerReading(o *OdometerReading) *FuelUpCreate {
	return fuc.SetOdometerReadingID(o.ID)
}

// SetExpenseID sets the "expense" edge to the Expense entity by ID.
func (fuc *FuelUpCreate) SetExpenseID(id uuid.UUID) *FuelUpCreate {
	fuc.mutation.SetExpenseID(id)
	return fuc
}

// SetNillableExpenseID sets the "expense" edge to the Expense entity by ID if the given value is not nil.
func (fuc *FuelUpCreate) SetNillableExpenseID(id *uuid.UUID) *FuelUpCreate {
	if id != nil {
		fuc = fuc.SetExpenseID(*id)
	}
	return fuc
}

// SetExpense sets the "expense" edge to the Expense entity.
func (fuc *FuelUpCreate) SetExpense(e *Expense) *FuelUpCreate {
	return fuc.SetExpenseID(e.ID)
}

// Mutation returns the FuelUpMutation object of the builder.
func (fuc *FuelUpCreate) Mutation() *FuelUpMutation {
	return fuc.mutation
}

// Save creates the FuelUp in the database.
func (fuc *FuelUpCreate) Save(ctx context.Context) (*FuelUp, error) {
	fuc.defaults()
	return withHooks(ctx, fuc.sqlSave, fuc.mutation, fuc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fuc *FuelUpCreate) SaveX(ctx context.Context) *FuelUp {
	v, err := fuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fuc *FuelUpCreate) Exec(ctx context.Context) error {
	_, err := fuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuc *FuelUpCreate) ExecX(ctx context.Context) {
	if err := fuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuc *FuelUpCreate) defaults() {
	if _, ok := fuc.mutation.CreateTime(); !ok {
		v := fuelup.DefaultCreateTime()
		fuc.mutation.SetCreateTime(v)
	}
	if _, ok := fuc.mutation.UpdateTime(); !ok {
		v := fuelup.DefaultUpdateTime()
		fuc.mutation.SetUpdateTime(v)
	}
	if _, ok := fuc.mutation.IsFullTank(); !ok {
		v := fuelup.DefaultIsFullTank
		fuc.mutation.SetIsFullTank(v)
	}
	if _, ok := fuc.mutation.ID(); !ok {
		v := fuelup.DefaultID()
		fuc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuc *FuelUpCreate) check() error {
	if _, ok := fuc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "FuelUp.create_time"`)}
	}
	if _, ok := fuc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "FuelUp.update_time"`)}
	}
	if _, ok := fuc.mutation.OccurredAt(); !ok {
		return &ValidationError{Name: "occurred_at", err: errors.New(`ent: missing required field "FuelUp.occurred_at"`)}
	}
	if _, ok := fuc.mutation.Station(); !ok {
		return &ValidationError{Name: "station", err: errors.New(`ent: missing required field "FuelUp.station"`)}
	}
	if _, ok := fuc.mutation.AmountLiters(); !ok {
		return &ValidationError{Name: "amount_liters", err: errors.New(`ent: missing required field "FuelUp.amount_liters"`)}
	}
	if _, ok := fuc.mutation.FuelCategory(); !ok {
		return &ValidationError{Name: "fuel_category", err: errors.New(`ent: missing required field "FuelUp.fuel_category"`)}
	}
	if v, ok := fuc.mutation.FuelCategory(); ok {
		if err := fuelup.FuelCategoryValidator(v); err != nil {
			return &ValidationError{Name: "fuel_category", err: fmt.Errorf(`ent: validator failed for field "FuelUp.fuel_category": %w`, err)}
		}
	}
	if v, ok := fuc.mutation.OctaneRating(); ok {
		if err := fuelup.OctaneRatingValidator(v); err != nil {
			return &ValidationError{Name: "octane_rating", err: fmt.Errorf(`ent: validator failed for field "FuelUp.octane_rating": %w`, err)}
		}
	}
	if _, ok := fuc.mutation.IsFullTank(); !ok {
		return &ValidationError{Name: "is_full_tank", err: errors.New(`ent: missing required field "FuelUp.is_full_tank"`)}
	}
	if len(fuc.mutation.CarIDs()) == 0 {
		return &ValidationError{Name: "car", err: errors.New(`ent: missing required edge "FuelUp.car"`)}
	}
	return nil
}

func (fuc *FuelUpCreate) sqlSave(ctx context.Context) (*FuelUp, error) {
	if err := fuc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	fuc.mutation.id = &_node.ID
	fuc.mutation.done = true
	return _node, nil
}

func (fuc *FuelUpCreate) createSpec() (*FuelUp, *sqlgraph.CreateSpec) {
	var (
		_node = &FuelUp{config: fuc.config}
		_spec = sqlgraph.NewCreateSpec(fuelup.Table, sqlgraph.NewFieldSpec(fuelup.FieldID, field.TypeUUID))
	)
	if id, ok := fuc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := fuc.mutation.CreateTime(); ok {
		_spec.SetField(fuelup.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := fuc.mutation.UpdateTime(); ok {
		_spec.SetField(fuelup.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := fuc.mutation.OccurredAt(); ok {
		_spec.SetField(fuelup.FieldOccurredAt, field.TypeTime, value)
		_node.OccurredAt = value
	}
	if value, ok := fuc.mutation.Station(); ok {
		_spec.SetField(fuelup.FieldStation, field.TypeString, value)
		_node.Station = value
	}
	if value, ok := fuc.mutation.AmountLiters(); ok {
		_spec.SetField(fuelup.FieldAmountLiters, field.TypeFloat64, value)
		_node.AmountLiters = value
	}
	if value, ok := fuc.mutation.FuelCategory(); ok {
		_spec.SetField(fuelup.FieldFuelCategory, field.TypeEnum, value)
		_node.FuelCategory = value
	}
	if value, ok := fuc.mutation.OctaneRating(); ok {
		_spec.SetField(fuelup.FieldOctaneRating, field.TypeEnum, value)
		_node.OctaneRating = &value
	}
	if value, ok := fuc.mutation.IsFullTank(); ok {
		_spec.SetField(fuelup.FieldIsFullTank, field.TypeBool, value)
		_node.IsFullTank = value
	}
	if value, ok := fuc.mutation.Notes(); ok {
		_spec.SetField(fuelup.FieldNotes, field.TypeString, value)
		_node.Notes = &value
	}
	if nodes := fuc.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fuelup.CarTable,
			Columns: []string{fuelup.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.car_fuel_ups = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fuc.mutation.OdometerReadingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   fuelup.OdometerReadingTable,
			Columns: []string{fuelup.OdometerReadingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(odometerreading.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.odometer_reading_fuel_up = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fuc.mutation.ExpenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   fuelup.ExpenseTable,
			Columns: []string{fuelup.ExpenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(expense.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FuelUpCreateBulk is the builder for creating many FuelUp entities in bulk.
type FuelUpCreateBulk struct {
	config
	err      error
	builders []*FuelUpCreate
}

// Save creates the FuelUp entities in the database.
func (fucb *FuelUpCreateBulk) Save(ctx context.Context) ([]*FuelUp, error) {
	if fucb.err != nil {
		return nil, fucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fucb.builders))
	nodes := make([]*FuelUp, len(fucb.builders))
	mutators := make([]Mutator, len(fucb.builders))
	for i := range fucb.builders {
		func(i int, root context.Context) {
			builder := fucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FuelUpMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fucb *FuelUpCreateBulk) SaveX(ctx context.Context) []*FuelUp {
	v, err := fucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fucb *FuelUpCreateBulk) Exec(ctx context.Context) error {
	_, err := fucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fucb *FuelUpCreateBulk) ExecX(ctx context.Context) {
	if err := fucb.Exec(ctx); err != nil {
		panic(err)
	}
}
