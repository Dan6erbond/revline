// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/expense"
	"github.com/Dan6erbond/revline/ent/fuelup"
	"github.com/Dan6erbond/revline/ent/servicelog"
	"github.com/google/uuid"
)

// ExpenseCreate is the builder for creating a Expense entity.
type ExpenseCreate struct {
	config
	mutation *ExpenseMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (ec *ExpenseCreate) SetCreateTime(t time.Time) *ExpenseCreate {
	ec.mutation.SetCreateTime(t)
	return ec
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ec *ExpenseCreate) SetNillableCreateTime(t *time.Time) *ExpenseCreate {
	if t != nil {
		ec.SetCreateTime(*t)
	}
	return ec
}

// SetUpdateTime sets the "update_time" field.
func (ec *ExpenseCreate) SetUpdateTime(t time.Time) *ExpenseCreate {
	ec.mutation.SetUpdateTime(t)
	return ec
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ec *ExpenseCreate) SetNillableUpdateTime(t *time.Time) *ExpenseCreate {
	if t != nil {
		ec.SetUpdateTime(*t)
	}
	return ec
}

// SetOccurredAt sets the "occurred_at" field.
func (ec *ExpenseCreate) SetOccurredAt(t time.Time) *ExpenseCreate {
	ec.mutation.SetOccurredAt(t)
	return ec
}

// SetType sets the "type" field.
func (ec *ExpenseCreate) SetType(e expense.Type) *ExpenseCreate {
	ec.mutation.SetType(e)
	return ec
}

// SetAmount sets the "amount" field.
func (ec *ExpenseCreate) SetAmount(f float64) *ExpenseCreate {
	ec.mutation.SetAmount(f)
	return ec
}

// SetNotes sets the "notes" field.
func (ec *ExpenseCreate) SetNotes(s string) *ExpenseCreate {
	ec.mutation.SetNotes(s)
	return ec
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (ec *ExpenseCreate) SetNillableNotes(s *string) *ExpenseCreate {
	if s != nil {
		ec.SetNotes(*s)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *ExpenseCreate) SetID(u uuid.UUID) *ExpenseCreate {
	ec.mutation.SetID(u)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *ExpenseCreate) SetNillableID(u *uuid.UUID) *ExpenseCreate {
	if u != nil {
		ec.SetID(*u)
	}
	return ec
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (ec *ExpenseCreate) SetCarID(id uuid.UUID) *ExpenseCreate {
	ec.mutation.SetCarID(id)
	return ec
}

// SetCar sets the "car" edge to the Car entity.
func (ec *ExpenseCreate) SetCar(c *Car) *ExpenseCreate {
	return ec.SetCarID(c.ID)
}

// SetFuelUpID sets the "fuel_up" edge to the FuelUp entity by ID.
func (ec *ExpenseCreate) SetFuelUpID(id uuid.UUID) *ExpenseCreate {
	ec.mutation.SetFuelUpID(id)
	return ec
}

// SetNillableFuelUpID sets the "fuel_up" edge to the FuelUp entity by ID if the given value is not nil.
func (ec *ExpenseCreate) SetNillableFuelUpID(id *uuid.UUID) *ExpenseCreate {
	if id != nil {
		ec = ec.SetFuelUpID(*id)
	}
	return ec
}

// SetFuelUp sets the "fuel_up" edge to the FuelUp entity.
func (ec *ExpenseCreate) SetFuelUp(f *FuelUp) *ExpenseCreate {
	return ec.SetFuelUpID(f.ID)
}

// SetServiceLogID sets the "service_log" edge to the ServiceLog entity by ID.
func (ec *ExpenseCreate) SetServiceLogID(id uuid.UUID) *ExpenseCreate {
	ec.mutation.SetServiceLogID(id)
	return ec
}

// SetNillableServiceLogID sets the "service_log" edge to the ServiceLog entity by ID if the given value is not nil.
func (ec *ExpenseCreate) SetNillableServiceLogID(id *uuid.UUID) *ExpenseCreate {
	if id != nil {
		ec = ec.SetServiceLogID(*id)
	}
	return ec
}

// SetServiceLog sets the "service_log" edge to the ServiceLog entity.
func (ec *ExpenseCreate) SetServiceLog(s *ServiceLog) *ExpenseCreate {
	return ec.SetServiceLogID(s.ID)
}

// Mutation returns the ExpenseMutation object of the builder.
func (ec *ExpenseCreate) Mutation() *ExpenseMutation {
	return ec.mutation
}

// Save creates the Expense in the database.
func (ec *ExpenseCreate) Save(ctx context.Context) (*Expense, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ExpenseCreate) SaveX(ctx context.Context) *Expense {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *ExpenseCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *ExpenseCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *ExpenseCreate) defaults() {
	if _, ok := ec.mutation.CreateTime(); !ok {
		v := expense.DefaultCreateTime()
		ec.mutation.SetCreateTime(v)
	}
	if _, ok := ec.mutation.UpdateTime(); !ok {
		v := expense.DefaultUpdateTime()
		ec.mutation.SetUpdateTime(v)
	}
	if _, ok := ec.mutation.ID(); !ok {
		v := expense.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *ExpenseCreate) check() error {
	if _, ok := ec.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Expense.create_time"`)}
	}
	if _, ok := ec.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Expense.update_time"`)}
	}
	if _, ok := ec.mutation.OccurredAt(); !ok {
		return &ValidationError{Name: "occurred_at", err: errors.New(`ent: missing required field "Expense.occurred_at"`)}
	}
	if _, ok := ec.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Expense.type"`)}
	}
	if v, ok := ec.mutation.GetType(); ok {
		if err := expense.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Expense.type": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Expense.amount"`)}
	}
	if v, ok := ec.mutation.Amount(); ok {
		if err := expense.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Expense.amount": %w`, err)}
		}
	}
	if len(ec.mutation.CarIDs()) == 0 {
		return &ValidationError{Name: "car", err: errors.New(`ent: missing required edge "Expense.car"`)}
	}
	return nil
}

func (ec *ExpenseCreate) sqlSave(ctx context.Context) (*Expense, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *ExpenseCreate) createSpec() (*Expense, *sqlgraph.CreateSpec) {
	var (
		_node = &Expense{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(expense.Table, sqlgraph.NewFieldSpec(expense.FieldID, field.TypeUUID))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ec.mutation.CreateTime(); ok {
		_spec.SetField(expense.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ec.mutation.UpdateTime(); ok {
		_spec.SetField(expense.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := ec.mutation.OccurredAt(); ok {
		_spec.SetField(expense.FieldOccurredAt, field.TypeTime, value)
		_node.OccurredAt = value
	}
	if value, ok := ec.mutation.GetType(); ok {
		_spec.SetField(expense.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := ec.mutation.Amount(); ok {
		_spec.SetField(expense.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := ec.mutation.Notes(); ok {
		_spec.SetField(expense.FieldNotes, field.TypeString, value)
		_node.Notes = &value
	}
	if nodes := ec.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   expense.CarTable,
			Columns: []string{expense.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.car_expenses = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.FuelUpIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   expense.FuelUpTable,
			Columns: []string{expense.FuelUpColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fuelup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.fuel_up_expense = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ServiceLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   expense.ServiceLogTable,
			Columns: []string{expense.ServiceLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.service_log_expense = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExpenseCreateBulk is the builder for creating many Expense entities in bulk.
type ExpenseCreateBulk struct {
	config
	err      error
	builders []*ExpenseCreate
}

// Save creates the Expense entities in the database.
func (ecb *ExpenseCreateBulk) Save(ctx context.Context) ([]*Expense, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Expense, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExpenseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *ExpenseCreateBulk) SaveX(ctx context.Context) []*Expense {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *ExpenseCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *ExpenseCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
