// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/document"
	"github.com/Dan6erbond/revline/ent/dragresult"
	"github.com/Dan6erbond/revline/ent/dragsession"
	"github.com/Dan6erbond/revline/ent/fuelup"
	"github.com/Dan6erbond/revline/ent/media"
	"github.com/Dan6erbond/revline/ent/odometerreading"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/Dan6erbond/revline/ent/profile"
	"github.com/Dan6erbond/revline/ent/serviceitem"
	"github.com/Dan6erbond/revline/ent/servicelog"
	"github.com/Dan6erbond/revline/ent/serviceschedule"
	"github.com/Dan6erbond/revline/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 12)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   car.Table,
			Columns: car.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: car.FieldID,
			},
		},
		Type: "Car",
		Fields: map[string]*sqlgraph.FieldSpec{
			car.FieldCreateTime: {Type: field.TypeTime, Column: car.FieldCreateTime},
			car.FieldUpdateTime: {Type: field.TypeTime, Column: car.FieldUpdateTime},
			car.FieldName:       {Type: field.TypeString, Column: car.FieldName},
			car.FieldMake:       {Type: field.TypeString, Column: car.FieldMake},
			car.FieldModel:      {Type: field.TypeString, Column: car.FieldModel},
			car.FieldType:       {Type: field.TypeString, Column: car.FieldType},
			car.FieldYear:       {Type: field.TypeInt, Column: car.FieldYear},
			car.FieldTrim:       {Type: field.TypeString, Column: car.FieldTrim},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   document.Table,
			Columns: document.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: document.FieldID,
			},
		},
		Type: "Document",
		Fields: map[string]*sqlgraph.FieldSpec{
			document.FieldCreateTime: {Type: field.TypeTime, Column: document.FieldCreateTime},
			document.FieldUpdateTime: {Type: field.TypeTime, Column: document.FieldUpdateTime},
			document.FieldName:       {Type: field.TypeString, Column: document.FieldName},
			document.FieldTags:       {Type: field.TypeJSON, Column: document.FieldTags},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   dragresult.Table,
			Columns: dragresult.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: dragresult.FieldID,
			},
		},
		Type: "DragResult",
		Fields: map[string]*sqlgraph.FieldSpec{
			dragresult.FieldCreateTime: {Type: field.TypeTime, Column: dragresult.FieldCreateTime},
			dragresult.FieldUpdateTime: {Type: field.TypeTime, Column: dragresult.FieldUpdateTime},
			dragresult.FieldUnit:       {Type: field.TypeEnum, Column: dragresult.FieldUnit},
			dragresult.FieldValue:      {Type: field.TypeFloat64, Column: dragresult.FieldValue},
			dragresult.FieldResult:     {Type: field.TypeFloat64, Column: dragresult.FieldResult},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   dragsession.Table,
			Columns: dragsession.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: dragsession.FieldID,
			},
		},
		Type: "DragSession",
		Fields: map[string]*sqlgraph.FieldSpec{
			dragsession.FieldCreateTime: {Type: field.TypeTime, Column: dragsession.FieldCreateTime},
			dragsession.FieldUpdateTime: {Type: field.TypeTime, Column: dragsession.FieldUpdateTime},
			dragsession.FieldTitle:      {Type: field.TypeString, Column: dragsession.FieldTitle},
			dragsession.FieldNotes:      {Type: field.TypeString, Column: dragsession.FieldNotes},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   fuelup.Table,
			Columns: fuelup.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: fuelup.FieldID,
			},
		},
		Type: "FuelUp",
		Fields: map[string]*sqlgraph.FieldSpec{
			fuelup.FieldCreateTime:   {Type: field.TypeTime, Column: fuelup.FieldCreateTime},
			fuelup.FieldUpdateTime:   {Type: field.TypeTime, Column: fuelup.FieldUpdateTime},
			fuelup.FieldOccurredAt:   {Type: field.TypeTime, Column: fuelup.FieldOccurredAt},
			fuelup.FieldStation:      {Type: field.TypeString, Column: fuelup.FieldStation},
			fuelup.FieldAmountLiters: {Type: field.TypeFloat64, Column: fuelup.FieldAmountLiters},
			fuelup.FieldCost:         {Type: field.TypeFloat64, Column: fuelup.FieldCost},
			fuelup.FieldFuelCategory: {Type: field.TypeEnum, Column: fuelup.FieldFuelCategory},
			fuelup.FieldOctaneRating: {Type: field.TypeEnum, Column: fuelup.FieldOctaneRating},
			fuelup.FieldIsFullTank:   {Type: field.TypeBool, Column: fuelup.FieldIsFullTank},
			fuelup.FieldNotes:        {Type: field.TypeString, Column: fuelup.FieldNotes},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   media.Table,
			Columns: media.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: media.FieldID,
			},
		},
		Type: "Media",
		Fields: map[string]*sqlgraph.FieldSpec{
			media.FieldCreateTime: {Type: field.TypeTime, Column: media.FieldCreateTime},
			media.FieldUpdateTime: {Type: field.TypeTime, Column: media.FieldUpdateTime},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   odometerreading.Table,
			Columns: odometerreading.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: odometerreading.FieldID,
			},
		},
		Type: "OdometerReading",
		Fields: map[string]*sqlgraph.FieldSpec{
			odometerreading.FieldCreateTime: {Type: field.TypeTime, Column: odometerreading.FieldCreateTime},
			odometerreading.FieldUpdateTime: {Type: field.TypeTime, Column: odometerreading.FieldUpdateTime},
			odometerreading.FieldReadingKm:  {Type: field.TypeFloat64, Column: odometerreading.FieldReadingKm},
			odometerreading.FieldNotes:      {Type: field.TypeString, Column: odometerreading.FieldNotes},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   profile.Table,
			Columns: profile.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: profile.FieldID,
			},
		},
		Type: "Profile",
		Fields: map[string]*sqlgraph.FieldSpec{
			profile.FieldCreateTime:          {Type: field.TypeTime, Column: profile.FieldCreateTime},
			profile.FieldUpdateTime:          {Type: field.TypeTime, Column: profile.FieldUpdateTime},
			profile.FieldUsername:            {Type: field.TypeString, Column: profile.FieldUsername},
			profile.FieldFirstName:           {Type: field.TypeString, Column: profile.FieldFirstName},
			profile.FieldLastName:            {Type: field.TypeString, Column: profile.FieldLastName},
			profile.FieldPicture:             {Type: field.TypeUUID, Column: profile.FieldPicture},
			profile.FieldCurrencyCode:        {Type: field.TypeString, Column: profile.FieldCurrencyCode},
			profile.FieldFuelVolumeUnit:      {Type: field.TypeEnum, Column: profile.FieldFuelVolumeUnit},
			profile.FieldDistanceUnit:        {Type: field.TypeEnum, Column: profile.FieldDistanceUnit},
			profile.FieldFuelConsumptionUnit: {Type: field.TypeEnum, Column: profile.FieldFuelConsumptionUnit},
			profile.FieldTemperatureUnit:     {Type: field.TypeEnum, Column: profile.FieldTemperatureUnit},
			profile.FieldVisibility:          {Type: field.TypeEnum, Column: profile.FieldVisibility},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   serviceitem.Table,
			Columns: serviceitem.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: serviceitem.FieldID,
			},
		},
		Type: "ServiceItem",
		Fields: map[string]*sqlgraph.FieldSpec{
			serviceitem.FieldCreateTime:            {Type: field.TypeTime, Column: serviceitem.FieldCreateTime},
			serviceitem.FieldUpdateTime:            {Type: field.TypeTime, Column: serviceitem.FieldUpdateTime},
			serviceitem.FieldLabel:                 {Type: field.TypeString, Column: serviceitem.FieldLabel},
			serviceitem.FieldEstimatedMinutes:      {Type: field.TypeInt, Column: serviceitem.FieldEstimatedMinutes},
			serviceitem.FieldDefaultIntervalKm:     {Type: field.TypeFloat64, Column: serviceitem.FieldDefaultIntervalKm},
			serviceitem.FieldDefaultIntervalMonths: {Type: field.TypeInt, Column: serviceitem.FieldDefaultIntervalMonths},
			serviceitem.FieldNotes:                 {Type: field.TypeString, Column: serviceitem.FieldNotes},
			serviceitem.FieldTags:                  {Type: field.TypeJSON, Column: serviceitem.FieldTags},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   servicelog.Table,
			Columns: servicelog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: servicelog.FieldID,
			},
		},
		Type: "ServiceLog",
		Fields: map[string]*sqlgraph.FieldSpec{
			servicelog.FieldCreateTime:    {Type: field.TypeTime, Column: servicelog.FieldCreateTime},
			servicelog.FieldUpdateTime:    {Type: field.TypeTime, Column: servicelog.FieldUpdateTime},
			servicelog.FieldDatePerformed: {Type: field.TypeTime, Column: servicelog.FieldDatePerformed},
			servicelog.FieldPerformedBy:   {Type: field.TypeString, Column: servicelog.FieldPerformedBy},
			servicelog.FieldNotes:         {Type: field.TypeString, Column: servicelog.FieldNotes},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   serviceschedule.Table,
			Columns: serviceschedule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: serviceschedule.FieldID,
			},
		},
		Type: "ServiceSchedule",
		Fields: map[string]*sqlgraph.FieldSpec{
			serviceschedule.FieldCreateTime:        {Type: field.TypeTime, Column: serviceschedule.FieldCreateTime},
			serviceschedule.FieldUpdateTime:        {Type: field.TypeTime, Column: serviceschedule.FieldUpdateTime},
			serviceschedule.FieldTitle:             {Type: field.TypeString, Column: serviceschedule.FieldTitle},
			serviceschedule.FieldRepeatEveryKm:     {Type: field.TypeFloat64, Column: serviceschedule.FieldRepeatEveryKm},
			serviceschedule.FieldStartsAtKm:        {Type: field.TypeFloat64, Column: serviceschedule.FieldStartsAtKm},
			serviceschedule.FieldRepeatEveryMonths: {Type: field.TypeInt, Column: serviceschedule.FieldRepeatEveryMonths},
			serviceschedule.FieldStartsAtMonths:    {Type: field.TypeInt, Column: serviceschedule.FieldStartsAtMonths},
			serviceschedule.FieldNotes:             {Type: field.TypeString, Column: serviceschedule.FieldNotes},
			serviceschedule.FieldArchived:          {Type: field.TypeBool, Column: serviceschedule.FieldArchived},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreateTime: {Type: field.TypeTime, Column: user.FieldCreateTime},
			user.FieldUpdateTime: {Type: field.TypeTime, Column: user.FieldUpdateTime},
			user.FieldEmail:      {Type: field.TypeString, Column: user.FieldEmail},
		},
	}
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.OwnerTable,
			Columns: []string{car.OwnerColumn},
			Bidi:    false,
		},
		"Car",
		"User",
	)
	graph.MustAddE(
		"drag_sessions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.DragSessionsTable,
			Columns: []string{car.DragSessionsColumn},
			Bidi:    false,
		},
		"Car",
		"DragSession",
	)
	graph.MustAddE(
		"fuel_ups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.FuelUpsTable,
			Columns: []string{car.FuelUpsColumn},
			Bidi:    false,
		},
		"Car",
		"FuelUp",
	)
	graph.MustAddE(
		"odometer_readings",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.OdometerReadingsTable,
			Columns: []string{car.OdometerReadingsColumn},
			Bidi:    false,
		},
		"Car",
		"OdometerReading",
	)
	graph.MustAddE(
		"service_items",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ServiceItemsTable,
			Columns: []string{car.ServiceItemsColumn},
			Bidi:    false,
		},
		"Car",
		"ServiceItem",
	)
	graph.MustAddE(
		"service_logs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ServiceLogsTable,
			Columns: []string{car.ServiceLogsColumn},
			Bidi:    false,
		},
		"Car",
		"ServiceLog",
	)
	graph.MustAddE(
		"service_schedules",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ServiceSchedulesTable,
			Columns: []string{car.ServiceSchedulesColumn},
			Bidi:    false,
		},
		"Car",
		"ServiceSchedule",
	)
	graph.MustAddE(
		"media",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.MediaTable,
			Columns: []string{car.MediaColumn},
			Bidi:    false,
		},
		"Car",
		"Media",
	)
	graph.MustAddE(
		"documents",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.DocumentsTable,
			Columns: []string{car.DocumentsColumn},
			Bidi:    false,
		},
		"Car",
		"Document",
	)
	graph.MustAddE(
		"banner_image",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   car.BannerImageTable,
			Columns: []string{car.BannerImageColumn},
			Bidi:    false,
		},
		"Car",
		"Media",
	)
	graph.MustAddE(
		"car",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.CarTable,
			Columns: []string{document.CarColumn},
			Bidi:    false,
		},
		"Document",
		"Car",
	)
	graph.MustAddE(
		"session",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dragresult.SessionTable,
			Columns: []string{dragresult.SessionColumn},
			Bidi:    false,
		},
		"DragResult",
		"DragSession",
	)
	graph.MustAddE(
		"car",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dragsession.CarTable,
			Columns: []string{dragsession.CarColumn},
			Bidi:    false,
		},
		"DragSession",
		"Car",
	)
	graph.MustAddE(
		"results",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dragsession.ResultsTable,
			Columns: []string{dragsession.ResultsColumn},
			Bidi:    false,
		},
		"DragSession",
		"DragResult",
	)
	graph.MustAddE(
		"car",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   fuelup.CarTable,
			Columns: []string{fuelup.CarColumn},
			Bidi:    false,
		},
		"FuelUp",
		"Car",
	)
	graph.MustAddE(
		"odometer_reading",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   fuelup.OdometerReadingTable,
			Columns: []string{fuelup.OdometerReadingColumn},
			Bidi:    false,
		},
		"FuelUp",
		"OdometerReading",
	)
	graph.MustAddE(
		"car",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   media.CarTable,
			Columns: []string{media.CarColumn},
			Bidi:    false,
		},
		"Media",
		"Car",
	)
	graph.MustAddE(
		"car",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   odometerreading.CarTable,
			Columns: []string{odometerreading.CarColumn},
			Bidi:    false,
		},
		"OdometerReading",
		"Car",
	)
	graph.MustAddE(
		"fuel_up",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   odometerreading.FuelUpTable,
			Columns: []string{odometerreading.FuelUpColumn},
			Bidi:    false,
		},
		"OdometerReading",
		"FuelUp",
	)
	graph.MustAddE(
		"service_log",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   odometerreading.ServiceLogTable,
			Columns: []string{odometerreading.ServiceLogColumn},
			Bidi:    false,
		},
		"OdometerReading",
		"ServiceLog",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   profile.UserTable,
			Columns: []string{profile.UserColumn},
			Bidi:    false,
		},
		"Profile",
		"User",
	)
	graph.MustAddE(
		"car",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceitem.CarTable,
			Columns: []string{serviceitem.CarColumn},
			Bidi:    false,
		},
		"ServiceItem",
		"Car",
	)
	graph.MustAddE(
		"schedules",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   serviceitem.SchedulesTable,
			Columns: serviceitem.SchedulesPrimaryKey,
			Bidi:    false,
		},
		"ServiceItem",
		"ServiceSchedule",
	)
	graph.MustAddE(
		"logs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   serviceitem.LogsTable,
			Columns: serviceitem.LogsPrimaryKey,
			Bidi:    false,
		},
		"ServiceItem",
		"ServiceLog",
	)
	graph.MustAddE(
		"car",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicelog.CarTable,
			Columns: []string{servicelog.CarColumn},
			Bidi:    false,
		},
		"ServiceLog",
		"Car",
	)
	graph.MustAddE(
		"items",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   servicelog.ItemsTable,
			Columns: servicelog.ItemsPrimaryKey,
			Bidi:    false,
		},
		"ServiceLog",
		"ServiceItem",
	)
	graph.MustAddE(
		"schedule",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicelog.ScheduleTable,
			Columns: []string{servicelog.ScheduleColumn},
			Bidi:    false,
		},
		"ServiceLog",
		"ServiceSchedule",
	)
	graph.MustAddE(
		"odometer_reading",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   servicelog.OdometerReadingTable,
			Columns: []string{servicelog.OdometerReadingColumn},
			Bidi:    false,
		},
		"ServiceLog",
		"OdometerReading",
	)
	graph.MustAddE(
		"car",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceschedule.CarTable,
			Columns: []string{serviceschedule.CarColumn},
			Bidi:    false,
		},
		"ServiceSchedule",
		"Car",
	)
	graph.MustAddE(
		"items",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   serviceschedule.ItemsTable,
			Columns: serviceschedule.ItemsPrimaryKey,
			Bidi:    false,
		},
		"ServiceSchedule",
		"ServiceItem",
	)
	graph.MustAddE(
		"logs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceschedule.LogsTable,
			Columns: []string{serviceschedule.LogsColumn},
			Bidi:    false,
		},
		"ServiceSchedule",
		"ServiceLog",
	)
	graph.MustAddE(
		"cars",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CarsTable,
			Columns: []string{user.CarsColumn},
			Bidi:    false,
		},
		"User",
		"Car",
	)
	graph.MustAddE(
		"profile",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.ProfileTable,
			Columns: []string{user.ProfileColumn},
			Bidi:    false,
		},
		"User",
		"Profile",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (cq *CarQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarQuery builder.
func (cq *CarQuery) Filter() *CarFilter {
	return &CarFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarMutation builder.
func (m *CarMutation) Filter() *CarFilter {
	return &CarFilter{config: m.config, predicateAdder: m}
}

// CarFilter provides a generic filtering capability at runtime for CarQuery.
type CarFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *CarFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(car.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *CarFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(car.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *CarFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(car.FieldUpdateTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *CarFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(car.FieldName))
}

// WhereMake applies the entql string predicate on the make field.
func (f *CarFilter) WhereMake(p entql.StringP) {
	f.Where(p.Field(car.FieldMake))
}

// WhereModel applies the entql string predicate on the model field.
func (f *CarFilter) WhereModel(p entql.StringP) {
	f.Where(p.Field(car.FieldModel))
}

// WhereType applies the entql string predicate on the type field.
func (f *CarFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(car.FieldType))
}

// WhereYear applies the entql int predicate on the year field.
func (f *CarFilter) WhereYear(p entql.IntP) {
	f.Where(p.Field(car.FieldYear))
}

// WhereTrim applies the entql string predicate on the trim field.
func (f *CarFilter) WhereTrim(p entql.StringP) {
	f.Where(p.Field(car.FieldTrim))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *CarFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *CarFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDragSessions applies a predicate to check if query has an edge drag_sessions.
func (f *CarFilter) WhereHasDragSessions() {
	f.Where(entql.HasEdge("drag_sessions"))
}

// WhereHasDragSessionsWith applies a predicate to check if query has an edge drag_sessions with a given conditions (other predicates).
func (f *CarFilter) WhereHasDragSessionsWith(preds ...predicate.DragSession) {
	f.Where(entql.HasEdgeWith("drag_sessions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFuelUps applies a predicate to check if query has an edge fuel_ups.
func (f *CarFilter) WhereHasFuelUps() {
	f.Where(entql.HasEdge("fuel_ups"))
}

// WhereHasFuelUpsWith applies a predicate to check if query has an edge fuel_ups with a given conditions (other predicates).
func (f *CarFilter) WhereHasFuelUpsWith(preds ...predicate.FuelUp) {
	f.Where(entql.HasEdgeWith("fuel_ups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOdometerReadings applies a predicate to check if query has an edge odometer_readings.
func (f *CarFilter) WhereHasOdometerReadings() {
	f.Where(entql.HasEdge("odometer_readings"))
}

// WhereHasOdometerReadingsWith applies a predicate to check if query has an edge odometer_readings with a given conditions (other predicates).
func (f *CarFilter) WhereHasOdometerReadingsWith(preds ...predicate.OdometerReading) {
	f.Where(entql.HasEdgeWith("odometer_readings", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasServiceItems applies a predicate to check if query has an edge service_items.
func (f *CarFilter) WhereHasServiceItems() {
	f.Where(entql.HasEdge("service_items"))
}

// WhereHasServiceItemsWith applies a predicate to check if query has an edge service_items with a given conditions (other predicates).
func (f *CarFilter) WhereHasServiceItemsWith(preds ...predicate.ServiceItem) {
	f.Where(entql.HasEdgeWith("service_items", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasServiceLogs applies a predicate to check if query has an edge service_logs.
func (f *CarFilter) WhereHasServiceLogs() {
	f.Where(entql.HasEdge("service_logs"))
}

// WhereHasServiceLogsWith applies a predicate to check if query has an edge service_logs with a given conditions (other predicates).
func (f *CarFilter) WhereHasServiceLogsWith(preds ...predicate.ServiceLog) {
	f.Where(entql.HasEdgeWith("service_logs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasServiceSchedules applies a predicate to check if query has an edge service_schedules.
func (f *CarFilter) WhereHasServiceSchedules() {
	f.Where(entql.HasEdge("service_schedules"))
}

// WhereHasServiceSchedulesWith applies a predicate to check if query has an edge service_schedules with a given conditions (other predicates).
func (f *CarFilter) WhereHasServiceSchedulesWith(preds ...predicate.ServiceSchedule) {
	f.Where(entql.HasEdgeWith("service_schedules", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMedia applies a predicate to check if query has an edge media.
func (f *CarFilter) WhereHasMedia() {
	f.Where(entql.HasEdge("media"))
}

// WhereHasMediaWith applies a predicate to check if query has an edge media with a given conditions (other predicates).
func (f *CarFilter) WhereHasMediaWith(preds ...predicate.Media) {
	f.Where(entql.HasEdgeWith("media", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDocuments applies a predicate to check if query has an edge documents.
func (f *CarFilter) WhereHasDocuments() {
	f.Where(entql.HasEdge("documents"))
}

// WhereHasDocumentsWith applies a predicate to check if query has an edge documents with a given conditions (other predicates).
func (f *CarFilter) WhereHasDocumentsWith(preds ...predicate.Document) {
	f.Where(entql.HasEdgeWith("documents", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBannerImage applies a predicate to check if query has an edge banner_image.
func (f *CarFilter) WhereHasBannerImage() {
	f.Where(entql.HasEdge("banner_image"))
}

// WhereHasBannerImageWith applies a predicate to check if query has an edge banner_image with a given conditions (other predicates).
func (f *CarFilter) WhereHasBannerImageWith(preds ...predicate.Media) {
	f.Where(entql.HasEdgeWith("banner_image", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dq *DocumentQuery) addPredicate(pred func(s *sql.Selector)) {
	dq.predicates = append(dq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DocumentQuery builder.
func (dq *DocumentQuery) Filter() *DocumentFilter {
	return &DocumentFilter{config: dq.config, predicateAdder: dq}
}

// addPredicate implements the predicateAdder interface.
func (m *DocumentMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DocumentMutation builder.
func (m *DocumentMutation) Filter() *DocumentFilter {
	return &DocumentFilter{config: m.config, predicateAdder: m}
}

// DocumentFilter provides a generic filtering capability at runtime for DocumentQuery.
type DocumentFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DocumentFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *DocumentFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(document.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *DocumentFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(document.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *DocumentFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(document.FieldUpdateTime))
}

// WhereName applies the entql string predicate on the name field.
func (f *DocumentFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(document.FieldName))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *DocumentFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(document.FieldTags))
}

// WhereHasCar applies a predicate to check if query has an edge car.
func (f *DocumentFilter) WhereHasCar() {
	f.Where(entql.HasEdge("car"))
}

// WhereHasCarWith applies a predicate to check if query has an edge car with a given conditions (other predicates).
func (f *DocumentFilter) WhereHasCarWith(preds ...predicate.Car) {
	f.Where(entql.HasEdgeWith("car", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (drq *DragResultQuery) addPredicate(pred func(s *sql.Selector)) {
	drq.predicates = append(drq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DragResultQuery builder.
func (drq *DragResultQuery) Filter() *DragResultFilter {
	return &DragResultFilter{config: drq.config, predicateAdder: drq}
}

// addPredicate implements the predicateAdder interface.
func (m *DragResultMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DragResultMutation builder.
func (m *DragResultMutation) Filter() *DragResultFilter {
	return &DragResultFilter{config: m.config, predicateAdder: m}
}

// DragResultFilter provides a generic filtering capability at runtime for DragResultQuery.
type DragResultFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DragResultFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *DragResultFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(dragresult.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *DragResultFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(dragresult.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *DragResultFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(dragresult.FieldUpdateTime))
}

// WhereUnit applies the entql string predicate on the unit field.
func (f *DragResultFilter) WhereUnit(p entql.StringP) {
	f.Where(p.Field(dragresult.FieldUnit))
}

// WhereValue applies the entql float64 predicate on the value field.
func (f *DragResultFilter) WhereValue(p entql.Float64P) {
	f.Where(p.Field(dragresult.FieldValue))
}

// WhereResult applies the entql float64 predicate on the result field.
func (f *DragResultFilter) WhereResult(p entql.Float64P) {
	f.Where(p.Field(dragresult.FieldResult))
}

// WhereHasSession applies a predicate to check if query has an edge session.
func (f *DragResultFilter) WhereHasSession() {
	f.Where(entql.HasEdge("session"))
}

// WhereHasSessionWith applies a predicate to check if query has an edge session with a given conditions (other predicates).
func (f *DragResultFilter) WhereHasSessionWith(preds ...predicate.DragSession) {
	f.Where(entql.HasEdgeWith("session", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dsq *DragSessionQuery) addPredicate(pred func(s *sql.Selector)) {
	dsq.predicates = append(dsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DragSessionQuery builder.
func (dsq *DragSessionQuery) Filter() *DragSessionFilter {
	return &DragSessionFilter{config: dsq.config, predicateAdder: dsq}
}

// addPredicate implements the predicateAdder interface.
func (m *DragSessionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DragSessionMutation builder.
func (m *DragSessionMutation) Filter() *DragSessionFilter {
	return &DragSessionFilter{config: m.config, predicateAdder: m}
}

// DragSessionFilter provides a generic filtering capability at runtime for DragSessionQuery.
type DragSessionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DragSessionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *DragSessionFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(dragsession.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *DragSessionFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(dragsession.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *DragSessionFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(dragsession.FieldUpdateTime))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *DragSessionFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(dragsession.FieldTitle))
}

// WhereNotes applies the entql string predicate on the notes field.
func (f *DragSessionFilter) WhereNotes(p entql.StringP) {
	f.Where(p.Field(dragsession.FieldNotes))
}

// WhereHasCar applies a predicate to check if query has an edge car.
func (f *DragSessionFilter) WhereHasCar() {
	f.Where(entql.HasEdge("car"))
}

// WhereHasCarWith applies a predicate to check if query has an edge car with a given conditions (other predicates).
func (f *DragSessionFilter) WhereHasCarWith(preds ...predicate.Car) {
	f.Where(entql.HasEdgeWith("car", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasResults applies a predicate to check if query has an edge results.
func (f *DragSessionFilter) WhereHasResults() {
	f.Where(entql.HasEdge("results"))
}

// WhereHasResultsWith applies a predicate to check if query has an edge results with a given conditions (other predicates).
func (f *DragSessionFilter) WhereHasResultsWith(preds ...predicate.DragResult) {
	f.Where(entql.HasEdgeWith("results", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (fuq *FuelUpQuery) addPredicate(pred func(s *sql.Selector)) {
	fuq.predicates = append(fuq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FuelUpQuery builder.
func (fuq *FuelUpQuery) Filter() *FuelUpFilter {
	return &FuelUpFilter{config: fuq.config, predicateAdder: fuq}
}

// addPredicate implements the predicateAdder interface.
func (m *FuelUpMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FuelUpMutation builder.
func (m *FuelUpMutation) Filter() *FuelUpFilter {
	return &FuelUpFilter{config: m.config, predicateAdder: m}
}

// FuelUpFilter provides a generic filtering capability at runtime for FuelUpQuery.
type FuelUpFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FuelUpFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *FuelUpFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(fuelup.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *FuelUpFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(fuelup.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *FuelUpFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(fuelup.FieldUpdateTime))
}

// WhereOccurredAt applies the entql time.Time predicate on the occurred_at field.
func (f *FuelUpFilter) WhereOccurredAt(p entql.TimeP) {
	f.Where(p.Field(fuelup.FieldOccurredAt))
}

// WhereStation applies the entql string predicate on the station field.
func (f *FuelUpFilter) WhereStation(p entql.StringP) {
	f.Where(p.Field(fuelup.FieldStation))
}

// WhereAmountLiters applies the entql float64 predicate on the amount_liters field.
func (f *FuelUpFilter) WhereAmountLiters(p entql.Float64P) {
	f.Where(p.Field(fuelup.FieldAmountLiters))
}

// WhereCost applies the entql float64 predicate on the cost field.
func (f *FuelUpFilter) WhereCost(p entql.Float64P) {
	f.Where(p.Field(fuelup.FieldCost))
}

// WhereFuelCategory applies the entql string predicate on the fuel_category field.
func (f *FuelUpFilter) WhereFuelCategory(p entql.StringP) {
	f.Where(p.Field(fuelup.FieldFuelCategory))
}

// WhereOctaneRating applies the entql string predicate on the octane_rating field.
func (f *FuelUpFilter) WhereOctaneRating(p entql.StringP) {
	f.Where(p.Field(fuelup.FieldOctaneRating))
}

// WhereIsFullTank applies the entql bool predicate on the is_full_tank field.
func (f *FuelUpFilter) WhereIsFullTank(p entql.BoolP) {
	f.Where(p.Field(fuelup.FieldIsFullTank))
}

// WhereNotes applies the entql string predicate on the notes field.
func (f *FuelUpFilter) WhereNotes(p entql.StringP) {
	f.Where(p.Field(fuelup.FieldNotes))
}

// WhereHasCar applies a predicate to check if query has an edge car.
func (f *FuelUpFilter) WhereHasCar() {
	f.Where(entql.HasEdge("car"))
}

// WhereHasCarWith applies a predicate to check if query has an edge car with a given conditions (other predicates).
func (f *FuelUpFilter) WhereHasCarWith(preds ...predicate.Car) {
	f.Where(entql.HasEdgeWith("car", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOdometerReading applies a predicate to check if query has an edge odometer_reading.
func (f *FuelUpFilter) WhereHasOdometerReading() {
	f.Where(entql.HasEdge("odometer_reading"))
}

// WhereHasOdometerReadingWith applies a predicate to check if query has an edge odometer_reading with a given conditions (other predicates).
func (f *FuelUpFilter) WhereHasOdometerReadingWith(preds ...predicate.OdometerReading) {
	f.Where(entql.HasEdgeWith("odometer_reading", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (mq *MediaQuery) addPredicate(pred func(s *sql.Selector)) {
	mq.predicates = append(mq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MediaQuery builder.
func (mq *MediaQuery) Filter() *MediaFilter {
	return &MediaFilter{config: mq.config, predicateAdder: mq}
}

// addPredicate implements the predicateAdder interface.
func (m *MediaMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MediaMutation builder.
func (m *MediaMutation) Filter() *MediaFilter {
	return &MediaFilter{config: m.config, predicateAdder: m}
}

// MediaFilter provides a generic filtering capability at runtime for MediaQuery.
type MediaFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MediaFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *MediaFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(media.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *MediaFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(media.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *MediaFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(media.FieldUpdateTime))
}

// WhereHasCar applies a predicate to check if query has an edge car.
func (f *MediaFilter) WhereHasCar() {
	f.Where(entql.HasEdge("car"))
}

// WhereHasCarWith applies a predicate to check if query has an edge car with a given conditions (other predicates).
func (f *MediaFilter) WhereHasCarWith(preds ...predicate.Car) {
	f.Where(entql.HasEdgeWith("car", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (orq *OdometerReadingQuery) addPredicate(pred func(s *sql.Selector)) {
	orq.predicates = append(orq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OdometerReadingQuery builder.
func (orq *OdometerReadingQuery) Filter() *OdometerReadingFilter {
	return &OdometerReadingFilter{config: orq.config, predicateAdder: orq}
}

// addPredicate implements the predicateAdder interface.
func (m *OdometerReadingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OdometerReadingMutation builder.
func (m *OdometerReadingMutation) Filter() *OdometerReadingFilter {
	return &OdometerReadingFilter{config: m.config, predicateAdder: m}
}

// OdometerReadingFilter provides a generic filtering capability at runtime for OdometerReadingQuery.
type OdometerReadingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OdometerReadingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *OdometerReadingFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(odometerreading.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *OdometerReadingFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(odometerreading.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *OdometerReadingFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(odometerreading.FieldUpdateTime))
}

// WhereReadingKm applies the entql float64 predicate on the reading_km field.
func (f *OdometerReadingFilter) WhereReadingKm(p entql.Float64P) {
	f.Where(p.Field(odometerreading.FieldReadingKm))
}

// WhereNotes applies the entql string predicate on the notes field.
func (f *OdometerReadingFilter) WhereNotes(p entql.StringP) {
	f.Where(p.Field(odometerreading.FieldNotes))
}

// WhereHasCar applies a predicate to check if query has an edge car.
func (f *OdometerReadingFilter) WhereHasCar() {
	f.Where(entql.HasEdge("car"))
}

// WhereHasCarWith applies a predicate to check if query has an edge car with a given conditions (other predicates).
func (f *OdometerReadingFilter) WhereHasCarWith(preds ...predicate.Car) {
	f.Where(entql.HasEdgeWith("car", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasFuelUp applies a predicate to check if query has an edge fuel_up.
func (f *OdometerReadingFilter) WhereHasFuelUp() {
	f.Where(entql.HasEdge("fuel_up"))
}

// WhereHasFuelUpWith applies a predicate to check if query has an edge fuel_up with a given conditions (other predicates).
func (f *OdometerReadingFilter) WhereHasFuelUpWith(preds ...predicate.FuelUp) {
	f.Where(entql.HasEdgeWith("fuel_up", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasServiceLog applies a predicate to check if query has an edge service_log.
func (f *OdometerReadingFilter) WhereHasServiceLog() {
	f.Where(entql.HasEdge("service_log"))
}

// WhereHasServiceLogWith applies a predicate to check if query has an edge service_log with a given conditions (other predicates).
func (f *OdometerReadingFilter) WhereHasServiceLogWith(preds ...predicate.ServiceLog) {
	f.Where(entql.HasEdgeWith("service_log", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pq *ProfileQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ProfileQuery builder.
func (pq *ProfileQuery) Filter() *ProfileFilter {
	return &ProfileFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *ProfileMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ProfileMutation builder.
func (m *ProfileMutation) Filter() *ProfileFilter {
	return &ProfileFilter{config: m.config, predicateAdder: m}
}

// ProfileFilter provides a generic filtering capability at runtime for ProfileQuery.
type ProfileFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ProfileFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *ProfileFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(profile.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *ProfileFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(profile.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *ProfileFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(profile.FieldUpdateTime))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *ProfileFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(profile.FieldUsername))
}

// WhereFirstName applies the entql string predicate on the first_name field.
func (f *ProfileFilter) WhereFirstName(p entql.StringP) {
	f.Where(p.Field(profile.FieldFirstName))
}

// WhereLastName applies the entql string predicate on the last_name field.
func (f *ProfileFilter) WhereLastName(p entql.StringP) {
	f.Where(p.Field(profile.FieldLastName))
}

// WherePicture applies the entql [16]byte predicate on the picture field.
func (f *ProfileFilter) WherePicture(p entql.ValueP) {
	f.Where(p.Field(profile.FieldPicture))
}

// WhereCurrencyCode applies the entql string predicate on the currency_code field.
func (f *ProfileFilter) WhereCurrencyCode(p entql.StringP) {
	f.Where(p.Field(profile.FieldCurrencyCode))
}

// WhereFuelVolumeUnit applies the entql string predicate on the fuel_volume_unit field.
func (f *ProfileFilter) WhereFuelVolumeUnit(p entql.StringP) {
	f.Where(p.Field(profile.FieldFuelVolumeUnit))
}

// WhereDistanceUnit applies the entql string predicate on the distance_unit field.
func (f *ProfileFilter) WhereDistanceUnit(p entql.StringP) {
	f.Where(p.Field(profile.FieldDistanceUnit))
}

// WhereFuelConsumptionUnit applies the entql string predicate on the fuel_consumption_unit field.
func (f *ProfileFilter) WhereFuelConsumptionUnit(p entql.StringP) {
	f.Where(p.Field(profile.FieldFuelConsumptionUnit))
}

// WhereTemperatureUnit applies the entql string predicate on the temperature_unit field.
func (f *ProfileFilter) WhereTemperatureUnit(p entql.StringP) {
	f.Where(p.Field(profile.FieldTemperatureUnit))
}

// WhereVisibility applies the entql string predicate on the visibility field.
func (f *ProfileFilter) WhereVisibility(p entql.StringP) {
	f.Where(p.Field(profile.FieldVisibility))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *ProfileFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *ProfileFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (siq *ServiceItemQuery) addPredicate(pred func(s *sql.Selector)) {
	siq.predicates = append(siq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ServiceItemQuery builder.
func (siq *ServiceItemQuery) Filter() *ServiceItemFilter {
	return &ServiceItemFilter{config: siq.config, predicateAdder: siq}
}

// addPredicate implements the predicateAdder interface.
func (m *ServiceItemMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ServiceItemMutation builder.
func (m *ServiceItemMutation) Filter() *ServiceItemFilter {
	return &ServiceItemFilter{config: m.config, predicateAdder: m}
}

// ServiceItemFilter provides a generic filtering capability at runtime for ServiceItemQuery.
type ServiceItemFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ServiceItemFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *ServiceItemFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(serviceitem.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *ServiceItemFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(serviceitem.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *ServiceItemFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(serviceitem.FieldUpdateTime))
}

// WhereLabel applies the entql string predicate on the label field.
func (f *ServiceItemFilter) WhereLabel(p entql.StringP) {
	f.Where(p.Field(serviceitem.FieldLabel))
}

// WhereEstimatedMinutes applies the entql int predicate on the estimated_minutes field.
func (f *ServiceItemFilter) WhereEstimatedMinutes(p entql.IntP) {
	f.Where(p.Field(serviceitem.FieldEstimatedMinutes))
}

// WhereDefaultIntervalKm applies the entql float64 predicate on the default_interval_km field.
func (f *ServiceItemFilter) WhereDefaultIntervalKm(p entql.Float64P) {
	f.Where(p.Field(serviceitem.FieldDefaultIntervalKm))
}

// WhereDefaultIntervalMonths applies the entql int predicate on the default_interval_months field.
func (f *ServiceItemFilter) WhereDefaultIntervalMonths(p entql.IntP) {
	f.Where(p.Field(serviceitem.FieldDefaultIntervalMonths))
}

// WhereNotes applies the entql string predicate on the notes field.
func (f *ServiceItemFilter) WhereNotes(p entql.StringP) {
	f.Where(p.Field(serviceitem.FieldNotes))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *ServiceItemFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(serviceitem.FieldTags))
}

// WhereHasCar applies a predicate to check if query has an edge car.
func (f *ServiceItemFilter) WhereHasCar() {
	f.Where(entql.HasEdge("car"))
}

// WhereHasCarWith applies a predicate to check if query has an edge car with a given conditions (other predicates).
func (f *ServiceItemFilter) WhereHasCarWith(preds ...predicate.Car) {
	f.Where(entql.HasEdgeWith("car", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSchedules applies a predicate to check if query has an edge schedules.
func (f *ServiceItemFilter) WhereHasSchedules() {
	f.Where(entql.HasEdge("schedules"))
}

// WhereHasSchedulesWith applies a predicate to check if query has an edge schedules with a given conditions (other predicates).
func (f *ServiceItemFilter) WhereHasSchedulesWith(preds ...predicate.ServiceSchedule) {
	f.Where(entql.HasEdgeWith("schedules", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasLogs applies a predicate to check if query has an edge logs.
func (f *ServiceItemFilter) WhereHasLogs() {
	f.Where(entql.HasEdge("logs"))
}

// WhereHasLogsWith applies a predicate to check if query has an edge logs with a given conditions (other predicates).
func (f *ServiceItemFilter) WhereHasLogsWith(preds ...predicate.ServiceLog) {
	f.Where(entql.HasEdgeWith("logs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (slq *ServiceLogQuery) addPredicate(pred func(s *sql.Selector)) {
	slq.predicates = append(slq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ServiceLogQuery builder.
func (slq *ServiceLogQuery) Filter() *ServiceLogFilter {
	return &ServiceLogFilter{config: slq.config, predicateAdder: slq}
}

// addPredicate implements the predicateAdder interface.
func (m *ServiceLogMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ServiceLogMutation builder.
func (m *ServiceLogMutation) Filter() *ServiceLogFilter {
	return &ServiceLogFilter{config: m.config, predicateAdder: m}
}

// ServiceLogFilter provides a generic filtering capability at runtime for ServiceLogQuery.
type ServiceLogFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ServiceLogFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *ServiceLogFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(servicelog.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *ServiceLogFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(servicelog.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *ServiceLogFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(servicelog.FieldUpdateTime))
}

// WhereDatePerformed applies the entql time.Time predicate on the date_performed field.
func (f *ServiceLogFilter) WhereDatePerformed(p entql.TimeP) {
	f.Where(p.Field(servicelog.FieldDatePerformed))
}

// WherePerformedBy applies the entql string predicate on the performed_by field.
func (f *ServiceLogFilter) WherePerformedBy(p entql.StringP) {
	f.Where(p.Field(servicelog.FieldPerformedBy))
}

// WhereNotes applies the entql string predicate on the notes field.
func (f *ServiceLogFilter) WhereNotes(p entql.StringP) {
	f.Where(p.Field(servicelog.FieldNotes))
}

// WhereHasCar applies a predicate to check if query has an edge car.
func (f *ServiceLogFilter) WhereHasCar() {
	f.Where(entql.HasEdge("car"))
}

// WhereHasCarWith applies a predicate to check if query has an edge car with a given conditions (other predicates).
func (f *ServiceLogFilter) WhereHasCarWith(preds ...predicate.Car) {
	f.Where(entql.HasEdgeWith("car", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasItems applies a predicate to check if query has an edge items.
func (f *ServiceLogFilter) WhereHasItems() {
	f.Where(entql.HasEdge("items"))
}

// WhereHasItemsWith applies a predicate to check if query has an edge items with a given conditions (other predicates).
func (f *ServiceLogFilter) WhereHasItemsWith(preds ...predicate.ServiceItem) {
	f.Where(entql.HasEdgeWith("items", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSchedule applies a predicate to check if query has an edge schedule.
func (f *ServiceLogFilter) WhereHasSchedule() {
	f.Where(entql.HasEdge("schedule"))
}

// WhereHasScheduleWith applies a predicate to check if query has an edge schedule with a given conditions (other predicates).
func (f *ServiceLogFilter) WhereHasScheduleWith(preds ...predicate.ServiceSchedule) {
	f.Where(entql.HasEdgeWith("schedule", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOdometerReading applies a predicate to check if query has an edge odometer_reading.
func (f *ServiceLogFilter) WhereHasOdometerReading() {
	f.Where(entql.HasEdge("odometer_reading"))
}

// WhereHasOdometerReadingWith applies a predicate to check if query has an edge odometer_reading with a given conditions (other predicates).
func (f *ServiceLogFilter) WhereHasOdometerReadingWith(preds ...predicate.OdometerReading) {
	f.Where(entql.HasEdgeWith("odometer_reading", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (ssq *ServiceScheduleQuery) addPredicate(pred func(s *sql.Selector)) {
	ssq.predicates = append(ssq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ServiceScheduleQuery builder.
func (ssq *ServiceScheduleQuery) Filter() *ServiceScheduleFilter {
	return &ServiceScheduleFilter{config: ssq.config, predicateAdder: ssq}
}

// addPredicate implements the predicateAdder interface.
func (m *ServiceScheduleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ServiceScheduleMutation builder.
func (m *ServiceScheduleMutation) Filter() *ServiceScheduleFilter {
	return &ServiceScheduleFilter{config: m.config, predicateAdder: m}
}

// ServiceScheduleFilter provides a generic filtering capability at runtime for ServiceScheduleQuery.
type ServiceScheduleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ServiceScheduleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *ServiceScheduleFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(serviceschedule.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *ServiceScheduleFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(serviceschedule.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *ServiceScheduleFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(serviceschedule.FieldUpdateTime))
}

// WhereTitle applies the entql string predicate on the title field.
func (f *ServiceScheduleFilter) WhereTitle(p entql.StringP) {
	f.Where(p.Field(serviceschedule.FieldTitle))
}

// WhereRepeatEveryKm applies the entql float64 predicate on the repeat_every_km field.
func (f *ServiceScheduleFilter) WhereRepeatEveryKm(p entql.Float64P) {
	f.Where(p.Field(serviceschedule.FieldRepeatEveryKm))
}

// WhereStartsAtKm applies the entql float64 predicate on the starts_at_km field.
func (f *ServiceScheduleFilter) WhereStartsAtKm(p entql.Float64P) {
	f.Where(p.Field(serviceschedule.FieldStartsAtKm))
}

// WhereRepeatEveryMonths applies the entql int predicate on the repeat_every_months field.
func (f *ServiceScheduleFilter) WhereRepeatEveryMonths(p entql.IntP) {
	f.Where(p.Field(serviceschedule.FieldRepeatEveryMonths))
}

// WhereStartsAtMonths applies the entql int predicate on the starts_at_months field.
func (f *ServiceScheduleFilter) WhereStartsAtMonths(p entql.IntP) {
	f.Where(p.Field(serviceschedule.FieldStartsAtMonths))
}

// WhereNotes applies the entql string predicate on the notes field.
func (f *ServiceScheduleFilter) WhereNotes(p entql.StringP) {
	f.Where(p.Field(serviceschedule.FieldNotes))
}

// WhereArchived applies the entql bool predicate on the archived field.
func (f *ServiceScheduleFilter) WhereArchived(p entql.BoolP) {
	f.Where(p.Field(serviceschedule.FieldArchived))
}

// WhereHasCar applies a predicate to check if query has an edge car.
func (f *ServiceScheduleFilter) WhereHasCar() {
	f.Where(entql.HasEdge("car"))
}

// WhereHasCarWith applies a predicate to check if query has an edge car with a given conditions (other predicates).
func (f *ServiceScheduleFilter) WhereHasCarWith(preds ...predicate.Car) {
	f.Where(entql.HasEdgeWith("car", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasItems applies a predicate to check if query has an edge items.
func (f *ServiceScheduleFilter) WhereHasItems() {
	f.Where(entql.HasEdge("items"))
}

// WhereHasItemsWith applies a predicate to check if query has an edge items with a given conditions (other predicates).
func (f *ServiceScheduleFilter) WhereHasItemsWith(preds ...predicate.ServiceItem) {
	f.Where(entql.HasEdgeWith("items", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasLogs applies a predicate to check if query has an edge logs.
func (f *ServiceScheduleFilter) WhereHasLogs() {
	f.Where(entql.HasEdge("logs"))
}

// WhereHasLogsWith applies a predicate to check if query has an edge logs with a given conditions (other predicates).
func (f *ServiceScheduleFilter) WhereHasLogsWith(preds ...predicate.ServiceLog) {
	f.Where(entql.HasEdgeWith("logs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *UserFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *UserFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *UserFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdateTime))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WhereHasCars applies a predicate to check if query has an edge cars.
func (f *UserFilter) WhereHasCars() {
	f.Where(entql.HasEdge("cars"))
}

// WhereHasCarsWith applies a predicate to check if query has an edge cars with a given conditions (other predicates).
func (f *UserFilter) WhereHasCarsWith(preds ...predicate.Car) {
	f.Where(entql.HasEdgeWith("cars", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasProfile applies a predicate to check if query has an edge profile.
func (f *UserFilter) WhereHasProfile() {
	f.Where(entql.HasEdge("profile"))
}

// WhereHasProfileWith applies a predicate to check if query has an edge profile with a given conditions (other predicates).
func (f *UserFilter) WhereHasProfileWith(preds ...predicate.Profile) {
	f.Where(entql.HasEdgeWith("profile", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
