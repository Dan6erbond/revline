// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/mod"
	"github.com/Dan6erbond/revline/ent/modproductoption"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/Dan6erbond/revline/ent/task"
	"github.com/google/uuid"
)

// ModUpdate is the builder for updating Mod entities.
type ModUpdate struct {
	config
	hooks    []Hook
	mutation *ModMutation
}

// Where appends a list predicates to the ModUpdate builder.
func (mu *ModUpdate) Where(ps ...predicate.Mod) *ModUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdateTime sets the "update_time" field.
func (mu *ModUpdate) SetUpdateTime(t time.Time) *ModUpdate {
	mu.mutation.SetUpdateTime(t)
	return mu
}

// SetTitle sets the "title" field.
func (mu *ModUpdate) SetTitle(s string) *ModUpdate {
	mu.mutation.SetTitle(s)
	return mu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (mu *ModUpdate) SetNillableTitle(s *string) *ModUpdate {
	if s != nil {
		mu.SetTitle(*s)
	}
	return mu
}

// SetCategory sets the "category" field.
func (mu *ModUpdate) SetCategory(m mod.Category) *ModUpdate {
	mu.mutation.SetCategory(m)
	return mu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (mu *ModUpdate) SetNillableCategory(m *mod.Category) *ModUpdate {
	if m != nil {
		mu.SetCategory(*m)
	}
	return mu
}

// SetStatus sets the "status" field.
func (mu *ModUpdate) SetStatus(m mod.Status) *ModUpdate {
	mu.mutation.SetStatus(m)
	return mu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mu *ModUpdate) SetNillableStatus(m *mod.Status) *ModUpdate {
	if m != nil {
		mu.SetStatus(*m)
	}
	return mu
}

// SetDescription sets the "description" field.
func (mu *ModUpdate) SetDescription(s string) *ModUpdate {
	mu.mutation.SetDescription(s)
	return mu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mu *ModUpdate) SetNillableDescription(s *string) *ModUpdate {
	if s != nil {
		mu.SetDescription(*s)
	}
	return mu
}

// ClearDescription clears the value of the "description" field.
func (mu *ModUpdate) ClearDescription() *ModUpdate {
	mu.mutation.ClearDescription()
	return mu
}

// SetStage sets the "stage" field.
func (mu *ModUpdate) SetStage(s string) *ModUpdate {
	mu.mutation.SetStage(s)
	return mu
}

// SetNillableStage sets the "stage" field if the given value is not nil.
func (mu *ModUpdate) SetNillableStage(s *string) *ModUpdate {
	if s != nil {
		mu.SetStage(*s)
	}
	return mu
}

// ClearStage clears the value of the "stage" field.
func (mu *ModUpdate) ClearStage() *ModUpdate {
	mu.mutation.ClearStage()
	return mu
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (mu *ModUpdate) SetCarID(id uuid.UUID) *ModUpdate {
	mu.mutation.SetCarID(id)
	return mu
}

// SetCar sets the "car" edge to the Car entity.
func (mu *ModUpdate) SetCar(c *Car) *ModUpdate {
	return mu.SetCarID(c.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (mu *ModUpdate) AddTaskIDs(ids ...uuid.UUID) *ModUpdate {
	mu.mutation.AddTaskIDs(ids...)
	return mu
}

// AddTasks adds the "tasks" edges to the Task entity.
func (mu *ModUpdate) AddTasks(t ...*Task) *ModUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.AddTaskIDs(ids...)
}

// AddProductOptionIDs adds the "product_options" edge to the ModProductOption entity by IDs.
func (mu *ModUpdate) AddProductOptionIDs(ids ...uuid.UUID) *ModUpdate {
	mu.mutation.AddProductOptionIDs(ids...)
	return mu
}

// AddProductOptions adds the "product_options" edges to the ModProductOption entity.
func (mu *ModUpdate) AddProductOptions(m ...*ModProductOption) *ModUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddProductOptionIDs(ids...)
}

// Mutation returns the ModMutation object of the builder.
func (mu *ModUpdate) Mutation() *ModMutation {
	return mu.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (mu *ModUpdate) ClearCar() *ModUpdate {
	mu.mutation.ClearCar()
	return mu
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (mu *ModUpdate) ClearTasks() *ModUpdate {
	mu.mutation.ClearTasks()
	return mu
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (mu *ModUpdate) RemoveTaskIDs(ids ...uuid.UUID) *ModUpdate {
	mu.mutation.RemoveTaskIDs(ids...)
	return mu
}

// RemoveTasks removes "tasks" edges to Task entities.
func (mu *ModUpdate) RemoveTasks(t ...*Task) *ModUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.RemoveTaskIDs(ids...)
}

// ClearProductOptions clears all "product_options" edges to the ModProductOption entity.
func (mu *ModUpdate) ClearProductOptions() *ModUpdate {
	mu.mutation.ClearProductOptions()
	return mu
}

// RemoveProductOptionIDs removes the "product_options" edge to ModProductOption entities by IDs.
func (mu *ModUpdate) RemoveProductOptionIDs(ids ...uuid.UUID) *ModUpdate {
	mu.mutation.RemoveProductOptionIDs(ids...)
	return mu
}

// RemoveProductOptions removes "product_options" edges to ModProductOption entities.
func (mu *ModUpdate) RemoveProductOptions(m ...*ModProductOption) *ModUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveProductOptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *ModUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *ModUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *ModUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *ModUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *ModUpdate) defaults() {
	if _, ok := mu.mutation.UpdateTime(); !ok {
		v := mod.UpdateDefaultUpdateTime()
		mu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *ModUpdate) check() error {
	if v, ok := mu.mutation.Category(); ok {
		if err := mod.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Mod.category": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Status(); ok {
		if err := mod.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Mod.status": %w`, err)}
		}
	}
	if mu.mutation.CarCleared() && len(mu.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Mod.car"`)
	}
	return nil
}

func (mu *ModUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(mod.Table, mod.Columns, sqlgraph.NewFieldSpec(mod.FieldID, field.TypeUUID))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdateTime(); ok {
		_spec.SetField(mod.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := mu.mutation.Title(); ok {
		_spec.SetField(mod.FieldTitle, field.TypeString, value)
	}
	if value, ok := mu.mutation.Category(); ok {
		_spec.SetField(mod.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(mod.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := mu.mutation.Description(); ok {
		_spec.SetField(mod.FieldDescription, field.TypeString, value)
	}
	if mu.mutation.DescriptionCleared() {
		_spec.ClearField(mod.FieldDescription, field.TypeString)
	}
	if value, ok := mu.mutation.Stage(); ok {
		_spec.SetField(mod.FieldStage, field.TypeString, value)
	}
	if mu.mutation.StageCleared() {
		_spec.ClearField(mod.FieldStage, field.TypeString)
	}
	if mu.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mod.CarTable,
			Columns: []string{mod.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mod.CarTable,
			Columns: []string{mod.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mod.TasksTable,
			Columns: mod.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedTasksIDs(); len(nodes) > 0 && !mu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mod.TasksTable,
			Columns: mod.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mod.TasksTable,
			Columns: mod.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ProductOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mod.ProductOptionsTable,
			Columns: []string{mod.ProductOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modproductoption.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedProductOptionsIDs(); len(nodes) > 0 && !mu.mutation.ProductOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mod.ProductOptionsTable,
			Columns: []string{mod.ProductOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modproductoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ProductOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mod.ProductOptionsTable,
			Columns: []string{mod.ProductOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modproductoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// ModUpdateOne is the builder for updating a single Mod entity.
type ModUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ModMutation
}

// SetUpdateTime sets the "update_time" field.
func (muo *ModUpdateOne) SetUpdateTime(t time.Time) *ModUpdateOne {
	muo.mutation.SetUpdateTime(t)
	return muo
}

// SetTitle sets the "title" field.
func (muo *ModUpdateOne) SetTitle(s string) *ModUpdateOne {
	muo.mutation.SetTitle(s)
	return muo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (muo *ModUpdateOne) SetNillableTitle(s *string) *ModUpdateOne {
	if s != nil {
		muo.SetTitle(*s)
	}
	return muo
}

// SetCategory sets the "category" field.
func (muo *ModUpdateOne) SetCategory(m mod.Category) *ModUpdateOne {
	muo.mutation.SetCategory(m)
	return muo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (muo *ModUpdateOne) SetNillableCategory(m *mod.Category) *ModUpdateOne {
	if m != nil {
		muo.SetCategory(*m)
	}
	return muo
}

// SetStatus sets the "status" field.
func (muo *ModUpdateOne) SetStatus(m mod.Status) *ModUpdateOne {
	muo.mutation.SetStatus(m)
	return muo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (muo *ModUpdateOne) SetNillableStatus(m *mod.Status) *ModUpdateOne {
	if m != nil {
		muo.SetStatus(*m)
	}
	return muo
}

// SetDescription sets the "description" field.
func (muo *ModUpdateOne) SetDescription(s string) *ModUpdateOne {
	muo.mutation.SetDescription(s)
	return muo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (muo *ModUpdateOne) SetNillableDescription(s *string) *ModUpdateOne {
	if s != nil {
		muo.SetDescription(*s)
	}
	return muo
}

// ClearDescription clears the value of the "description" field.
func (muo *ModUpdateOne) ClearDescription() *ModUpdateOne {
	muo.mutation.ClearDescription()
	return muo
}

// SetStage sets the "stage" field.
func (muo *ModUpdateOne) SetStage(s string) *ModUpdateOne {
	muo.mutation.SetStage(s)
	return muo
}

// SetNillableStage sets the "stage" field if the given value is not nil.
func (muo *ModUpdateOne) SetNillableStage(s *string) *ModUpdateOne {
	if s != nil {
		muo.SetStage(*s)
	}
	return muo
}

// ClearStage clears the value of the "stage" field.
func (muo *ModUpdateOne) ClearStage() *ModUpdateOne {
	muo.mutation.ClearStage()
	return muo
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (muo *ModUpdateOne) SetCarID(id uuid.UUID) *ModUpdateOne {
	muo.mutation.SetCarID(id)
	return muo
}

// SetCar sets the "car" edge to the Car entity.
func (muo *ModUpdateOne) SetCar(c *Car) *ModUpdateOne {
	return muo.SetCarID(c.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (muo *ModUpdateOne) AddTaskIDs(ids ...uuid.UUID) *ModUpdateOne {
	muo.mutation.AddTaskIDs(ids...)
	return muo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (muo *ModUpdateOne) AddTasks(t ...*Task) *ModUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.AddTaskIDs(ids...)
}

// AddProductOptionIDs adds the "product_options" edge to the ModProductOption entity by IDs.
func (muo *ModUpdateOne) AddProductOptionIDs(ids ...uuid.UUID) *ModUpdateOne {
	muo.mutation.AddProductOptionIDs(ids...)
	return muo
}

// AddProductOptions adds the "product_options" edges to the ModProductOption entity.
func (muo *ModUpdateOne) AddProductOptions(m ...*ModProductOption) *ModUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddProductOptionIDs(ids...)
}

// Mutation returns the ModMutation object of the builder.
func (muo *ModUpdateOne) Mutation() *ModMutation {
	return muo.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (muo *ModUpdateOne) ClearCar() *ModUpdateOne {
	muo.mutation.ClearCar()
	return muo
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (muo *ModUpdateOne) ClearTasks() *ModUpdateOne {
	muo.mutation.ClearTasks()
	return muo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (muo *ModUpdateOne) RemoveTaskIDs(ids ...uuid.UUID) *ModUpdateOne {
	muo.mutation.RemoveTaskIDs(ids...)
	return muo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (muo *ModUpdateOne) RemoveTasks(t ...*Task) *ModUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.RemoveTaskIDs(ids...)
}

// ClearProductOptions clears all "product_options" edges to the ModProductOption entity.
func (muo *ModUpdateOne) ClearProductOptions() *ModUpdateOne {
	muo.mutation.ClearProductOptions()
	return muo
}

// RemoveProductOptionIDs removes the "product_options" edge to ModProductOption entities by IDs.
func (muo *ModUpdateOne) RemoveProductOptionIDs(ids ...uuid.UUID) *ModUpdateOne {
	muo.mutation.RemoveProductOptionIDs(ids...)
	return muo
}

// RemoveProductOptions removes "product_options" edges to ModProductOption entities.
func (muo *ModUpdateOne) RemoveProductOptions(m ...*ModProductOption) *ModUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveProductOptionIDs(ids...)
}

// Where appends a list predicates to the ModUpdate builder.
func (muo *ModUpdateOne) Where(ps ...predicate.Mod) *ModUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *ModUpdateOne) Select(field string, fields ...string) *ModUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Mod entity.
func (muo *ModUpdateOne) Save(ctx context.Context) (*Mod, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *ModUpdateOne) SaveX(ctx context.Context) *Mod {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *ModUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *ModUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *ModUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdateTime(); !ok {
		v := mod.UpdateDefaultUpdateTime()
		muo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *ModUpdateOne) check() error {
	if v, ok := muo.mutation.Category(); ok {
		if err := mod.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Mod.category": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Status(); ok {
		if err := mod.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Mod.status": %w`, err)}
		}
	}
	if muo.mutation.CarCleared() && len(muo.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Mod.car"`)
	}
	return nil
}

func (muo *ModUpdateOne) sqlSave(ctx context.Context) (_node *Mod, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(mod.Table, mod.Columns, sqlgraph.NewFieldSpec(mod.FieldID, field.TypeUUID))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Mod.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mod.FieldID)
		for _, f := range fields {
			if !mod.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mod.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdateTime(); ok {
		_spec.SetField(mod.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := muo.mutation.Title(); ok {
		_spec.SetField(mod.FieldTitle, field.TypeString, value)
	}
	if value, ok := muo.mutation.Category(); ok {
		_spec.SetField(mod.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(mod.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := muo.mutation.Description(); ok {
		_spec.SetField(mod.FieldDescription, field.TypeString, value)
	}
	if muo.mutation.DescriptionCleared() {
		_spec.ClearField(mod.FieldDescription, field.TypeString)
	}
	if value, ok := muo.mutation.Stage(); ok {
		_spec.SetField(mod.FieldStage, field.TypeString, value)
	}
	if muo.mutation.StageCleared() {
		_spec.ClearField(mod.FieldStage, field.TypeString)
	}
	if muo.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mod.CarTable,
			Columns: []string{mod.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mod.CarTable,
			Columns: []string{mod.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mod.TasksTable,
			Columns: mod.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !muo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mod.TasksTable,
			Columns: mod.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mod.TasksTable,
			Columns: mod.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ProductOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mod.ProductOptionsTable,
			Columns: []string{mod.ProductOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modproductoption.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedProductOptionsIDs(); len(nodes) > 0 && !muo.mutation.ProductOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mod.ProductOptionsTable,
			Columns: []string{mod.ProductOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modproductoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ProductOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mod.ProductOptionsTable,
			Columns: []string{mod.ProductOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modproductoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Mod{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
