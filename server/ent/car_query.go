// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/album"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/document"
	"github.com/Dan6erbond/revline/ent/dragsession"
	"github.com/Dan6erbond/revline/ent/dynosession"
	"github.com/Dan6erbond/revline/ent/expense"
	"github.com/Dan6erbond/revline/ent/fuelup"
	"github.com/Dan6erbond/revline/ent/media"
	"github.com/Dan6erbond/revline/ent/mod"
	"github.com/Dan6erbond/revline/ent/odometerreading"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/Dan6erbond/revline/ent/serviceitem"
	"github.com/Dan6erbond/revline/ent/servicelog"
	"github.com/Dan6erbond/revline/ent/serviceschedule"
	"github.com/Dan6erbond/revline/ent/task"
	"github.com/Dan6erbond/revline/ent/user"
	"github.com/google/uuid"
)

// CarQuery is the builder for querying Car entities.
type CarQuery struct {
	config
	ctx                       *QueryContext
	order                     []car.OrderOption
	inters                    []Interceptor
	predicates                []predicate.Car
	withOwner                 *UserQuery
	withDragSessions          *DragSessionQuery
	withFuelUps               *FuelUpQuery
	withOdometerReadings      *OdometerReadingQuery
	withServiceItems          *ServiceItemQuery
	withServiceLogs           *ServiceLogQuery
	withServiceSchedules      *ServiceScheduleQuery
	withMedia                 *MediaQuery
	withAlbums                *AlbumQuery
	withDocuments             *DocumentQuery
	withDynoSessions          *DynoSessionQuery
	withExpenses              *ExpenseQuery
	withBannerImage           *MediaQuery
	withTasks                 *TaskQuery
	withMods                  *ModQuery
	withFKs                   bool
	modifiers                 []func(*sql.Selector)
	loadTotal                 []func(context.Context, []*Car) error
	withNamedDragSessions     map[string]*DragSessionQuery
	withNamedFuelUps          map[string]*FuelUpQuery
	withNamedOdometerReadings map[string]*OdometerReadingQuery
	withNamedServiceItems     map[string]*ServiceItemQuery
	withNamedServiceLogs      map[string]*ServiceLogQuery
	withNamedServiceSchedules map[string]*ServiceScheduleQuery
	withNamedMedia            map[string]*MediaQuery
	withNamedAlbums           map[string]*AlbumQuery
	withNamedDocuments        map[string]*DocumentQuery
	withNamedDynoSessions     map[string]*DynoSessionQuery
	withNamedExpenses         map[string]*ExpenseQuery
	withNamedTasks            map[string]*TaskQuery
	withNamedMods             map[string]*ModQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the CarQuery builder.
func (cq *CarQuery) Where(ps ...predicate.Car) *CarQuery {
	cq.predicates = append(cq.predicates, ps...)
	return cq
}

// Limit the number of records to be returned by this query.
func (cq *CarQuery) Limit(limit int) *CarQuery {
	cq.ctx.Limit = &limit
	return cq
}

// Offset to start from.
func (cq *CarQuery) Offset(offset int) *CarQuery {
	cq.ctx.Offset = &offset
	return cq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (cq *CarQuery) Unique(unique bool) *CarQuery {
	cq.ctx.Unique = &unique
	return cq
}

// Order specifies how the records should be ordered.
func (cq *CarQuery) Order(o ...car.OrderOption) *CarQuery {
	cq.order = append(cq.order, o...)
	return cq
}

// QueryOwner chains the current query on the "owner" edge.
func (cq *CarQuery) QueryOwner() *UserQuery {
	query := (&UserClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(car.Table, car.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, car.OwnerTable, car.OwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDragSessions chains the current query on the "drag_sessions" edge.
func (cq *CarQuery) QueryDragSessions() *DragSessionQuery {
	query := (&DragSessionClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(car.Table, car.FieldID, selector),
			sqlgraph.To(dragsession.Table, dragsession.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, car.DragSessionsTable, car.DragSessionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFuelUps chains the current query on the "fuel_ups" edge.
func (cq *CarQuery) QueryFuelUps() *FuelUpQuery {
	query := (&FuelUpClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(car.Table, car.FieldID, selector),
			sqlgraph.To(fuelup.Table, fuelup.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, car.FuelUpsTable, car.FuelUpsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOdometerReadings chains the current query on the "odometer_readings" edge.
func (cq *CarQuery) QueryOdometerReadings() *OdometerReadingQuery {
	query := (&OdometerReadingClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(car.Table, car.FieldID, selector),
			sqlgraph.To(odometerreading.Table, odometerreading.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, car.OdometerReadingsTable, car.OdometerReadingsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryServiceItems chains the current query on the "service_items" edge.
func (cq *CarQuery) QueryServiceItems() *ServiceItemQuery {
	query := (&ServiceItemClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(car.Table, car.FieldID, selector),
			sqlgraph.To(serviceitem.Table, serviceitem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, car.ServiceItemsTable, car.ServiceItemsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryServiceLogs chains the current query on the "service_logs" edge.
func (cq *CarQuery) QueryServiceLogs() *ServiceLogQuery {
	query := (&ServiceLogClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(car.Table, car.FieldID, selector),
			sqlgraph.To(servicelog.Table, servicelog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, car.ServiceLogsTable, car.ServiceLogsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryServiceSchedules chains the current query on the "service_schedules" edge.
func (cq *CarQuery) QueryServiceSchedules() *ServiceScheduleQuery {
	query := (&ServiceScheduleClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(car.Table, car.FieldID, selector),
			sqlgraph.To(serviceschedule.Table, serviceschedule.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, car.ServiceSchedulesTable, car.ServiceSchedulesColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMedia chains the current query on the "media" edge.
func (cq *CarQuery) QueryMedia() *MediaQuery {
	query := (&MediaClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(car.Table, car.FieldID, selector),
			sqlgraph.To(media.Table, media.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, car.MediaTable, car.MediaColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAlbums chains the current query on the "albums" edge.
func (cq *CarQuery) QueryAlbums() *AlbumQuery {
	query := (&AlbumClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(car.Table, car.FieldID, selector),
			sqlgraph.To(album.Table, album.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, car.AlbumsTable, car.AlbumsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDocuments chains the current query on the "documents" edge.
func (cq *CarQuery) QueryDocuments() *DocumentQuery {
	query := (&DocumentClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(car.Table, car.FieldID, selector),
			sqlgraph.To(document.Table, document.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, car.DocumentsTable, car.DocumentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDynoSessions chains the current query on the "dyno_sessions" edge.
func (cq *CarQuery) QueryDynoSessions() *DynoSessionQuery {
	query := (&DynoSessionClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(car.Table, car.FieldID, selector),
			sqlgraph.To(dynosession.Table, dynosession.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, car.DynoSessionsTable, car.DynoSessionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExpenses chains the current query on the "expenses" edge.
func (cq *CarQuery) QueryExpenses() *ExpenseQuery {
	query := (&ExpenseClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(car.Table, car.FieldID, selector),
			sqlgraph.To(expense.Table, expense.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, car.ExpensesTable, car.ExpensesColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBannerImage chains the current query on the "banner_image" edge.
func (cq *CarQuery) QueryBannerImage() *MediaQuery {
	query := (&MediaClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(car.Table, car.FieldID, selector),
			sqlgraph.To(media.Table, media.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, car.BannerImageTable, car.BannerImageColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTasks chains the current query on the "tasks" edge.
func (cq *CarQuery) QueryTasks() *TaskQuery {
	query := (&TaskClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(car.Table, car.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, car.TasksTable, car.TasksColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMods chains the current query on the "mods" edge.
func (cq *CarQuery) QueryMods() *ModQuery {
	query := (&ModClient{config: cq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := cq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := cq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(car.Table, car.FieldID, selector),
			sqlgraph.To(mod.Table, mod.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, car.ModsTable, car.ModsColumn),
		)
		fromU = sqlgraph.SetNeighbors(cq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Car entity from the query.
// Returns a *NotFoundError when no Car was found.
func (cq *CarQuery) First(ctx context.Context) (*Car, error) {
	nodes, err := cq.Limit(1).All(setContextOp(ctx, cq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{car.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (cq *CarQuery) FirstX(ctx context.Context) *Car {
	node, err := cq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Car ID from the query.
// Returns a *NotFoundError when no Car ID was found.
func (cq *CarQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = cq.Limit(1).IDs(setContextOp(ctx, cq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{car.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (cq *CarQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := cq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Car entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Car entity is found.
// Returns a *NotFoundError when no Car entities are found.
func (cq *CarQuery) Only(ctx context.Context) (*Car, error) {
	nodes, err := cq.Limit(2).All(setContextOp(ctx, cq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{car.Label}
	default:
		return nil, &NotSingularError{car.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (cq *CarQuery) OnlyX(ctx context.Context) *Car {
	node, err := cq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Car ID in the query.
// Returns a *NotSingularError when more than one Car ID is found.
// Returns a *NotFoundError when no entities are found.
func (cq *CarQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = cq.Limit(2).IDs(setContextOp(ctx, cq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{car.Label}
	default:
		err = &NotSingularError{car.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (cq *CarQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := cq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Cars.
func (cq *CarQuery) All(ctx context.Context) ([]*Car, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryAll)
	if err := cq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Car, *CarQuery]()
	return withInterceptors[[]*Car](ctx, cq, qr, cq.inters)
}

// AllX is like All, but panics if an error occurs.
func (cq *CarQuery) AllX(ctx context.Context) []*Car {
	nodes, err := cq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Car IDs.
func (cq *CarQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if cq.ctx.Unique == nil && cq.path != nil {
		cq.Unique(true)
	}
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryIDs)
	if err = cq.Select(car.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (cq *CarQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := cq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (cq *CarQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryCount)
	if err := cq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, cq, querierCount[*CarQuery](), cq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (cq *CarQuery) CountX(ctx context.Context) int {
	count, err := cq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (cq *CarQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, cq.ctx, ent.OpQueryExist)
	switch _, err := cq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (cq *CarQuery) ExistX(ctx context.Context) bool {
	exist, err := cq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the CarQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (cq *CarQuery) Clone() *CarQuery {
	if cq == nil {
		return nil
	}
	return &CarQuery{
		config:               cq.config,
		ctx:                  cq.ctx.Clone(),
		order:                append([]car.OrderOption{}, cq.order...),
		inters:               append([]Interceptor{}, cq.inters...),
		predicates:           append([]predicate.Car{}, cq.predicates...),
		withOwner:            cq.withOwner.Clone(),
		withDragSessions:     cq.withDragSessions.Clone(),
		withFuelUps:          cq.withFuelUps.Clone(),
		withOdometerReadings: cq.withOdometerReadings.Clone(),
		withServiceItems:     cq.withServiceItems.Clone(),
		withServiceLogs:      cq.withServiceLogs.Clone(),
		withServiceSchedules: cq.withServiceSchedules.Clone(),
		withMedia:            cq.withMedia.Clone(),
		withAlbums:           cq.withAlbums.Clone(),
		withDocuments:        cq.withDocuments.Clone(),
		withDynoSessions:     cq.withDynoSessions.Clone(),
		withExpenses:         cq.withExpenses.Clone(),
		withBannerImage:      cq.withBannerImage.Clone(),
		withTasks:            cq.withTasks.Clone(),
		withMods:             cq.withMods.Clone(),
		// clone intermediate query.
		sql:  cq.sql.Clone(),
		path: cq.path,
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithOwner(opts ...func(*UserQuery)) *CarQuery {
	query := (&UserClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withOwner = query
	return cq
}

// WithDragSessions tells the query-builder to eager-load the nodes that are connected to
// the "drag_sessions" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithDragSessions(opts ...func(*DragSessionQuery)) *CarQuery {
	query := (&DragSessionClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withDragSessions = query
	return cq
}

// WithFuelUps tells the query-builder to eager-load the nodes that are connected to
// the "fuel_ups" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithFuelUps(opts ...func(*FuelUpQuery)) *CarQuery {
	query := (&FuelUpClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withFuelUps = query
	return cq
}

// WithOdometerReadings tells the query-builder to eager-load the nodes that are connected to
// the "odometer_readings" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithOdometerReadings(opts ...func(*OdometerReadingQuery)) *CarQuery {
	query := (&OdometerReadingClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withOdometerReadings = query
	return cq
}

// WithServiceItems tells the query-builder to eager-load the nodes that are connected to
// the "service_items" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithServiceItems(opts ...func(*ServiceItemQuery)) *CarQuery {
	query := (&ServiceItemClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withServiceItems = query
	return cq
}

// WithServiceLogs tells the query-builder to eager-load the nodes that are connected to
// the "service_logs" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithServiceLogs(opts ...func(*ServiceLogQuery)) *CarQuery {
	query := (&ServiceLogClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withServiceLogs = query
	return cq
}

// WithServiceSchedules tells the query-builder to eager-load the nodes that are connected to
// the "service_schedules" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithServiceSchedules(opts ...func(*ServiceScheduleQuery)) *CarQuery {
	query := (&ServiceScheduleClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withServiceSchedules = query
	return cq
}

// WithMedia tells the query-builder to eager-load the nodes that are connected to
// the "media" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithMedia(opts ...func(*MediaQuery)) *CarQuery {
	query := (&MediaClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withMedia = query
	return cq
}

// WithAlbums tells the query-builder to eager-load the nodes that are connected to
// the "albums" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithAlbums(opts ...func(*AlbumQuery)) *CarQuery {
	query := (&AlbumClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withAlbums = query
	return cq
}

// WithDocuments tells the query-builder to eager-load the nodes that are connected to
// the "documents" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithDocuments(opts ...func(*DocumentQuery)) *CarQuery {
	query := (&DocumentClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withDocuments = query
	return cq
}

// WithDynoSessions tells the query-builder to eager-load the nodes that are connected to
// the "dyno_sessions" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithDynoSessions(opts ...func(*DynoSessionQuery)) *CarQuery {
	query := (&DynoSessionClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withDynoSessions = query
	return cq
}

// WithExpenses tells the query-builder to eager-load the nodes that are connected to
// the "expenses" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithExpenses(opts ...func(*ExpenseQuery)) *CarQuery {
	query := (&ExpenseClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withExpenses = query
	return cq
}

// WithBannerImage tells the query-builder to eager-load the nodes that are connected to
// the "banner_image" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithBannerImage(opts ...func(*MediaQuery)) *CarQuery {
	query := (&MediaClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withBannerImage = query
	return cq
}

// WithTasks tells the query-builder to eager-load the nodes that are connected to
// the "tasks" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithTasks(opts ...func(*TaskQuery)) *CarQuery {
	query := (&TaskClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withTasks = query
	return cq
}

// WithMods tells the query-builder to eager-load the nodes that are connected to
// the "mods" edge. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithMods(opts ...func(*ModQuery)) *CarQuery {
	query := (&ModClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	cq.withMods = query
	return cq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Car.Query().
//		GroupBy(car.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (cq *CarQuery) GroupBy(field string, fields ...string) *CarGroupBy {
	cq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &CarGroupBy{build: cq}
	grbuild.flds = &cq.ctx.Fields
	grbuild.label = car.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.Car.Query().
//		Select(car.FieldCreateTime).
//		Scan(ctx, &v)
func (cq *CarQuery) Select(fields ...string) *CarSelect {
	cq.ctx.Fields = append(cq.ctx.Fields, fields...)
	sbuild := &CarSelect{CarQuery: cq}
	sbuild.label = car.Label
	sbuild.flds, sbuild.scan = &cq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a CarSelect configured with the given aggregations.
func (cq *CarQuery) Aggregate(fns ...AggregateFunc) *CarSelect {
	return cq.Select().Aggregate(fns...)
}

func (cq *CarQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range cq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, cq); err != nil {
				return err
			}
		}
	}
	for _, f := range cq.ctx.Fields {
		if !car.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if cq.path != nil {
		prev, err := cq.path(ctx)
		if err != nil {
			return err
		}
		cq.sql = prev
	}
	return nil
}

func (cq *CarQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Car, error) {
	var (
		nodes       = []*Car{}
		withFKs     = cq.withFKs
		_spec       = cq.querySpec()
		loadedTypes = [15]bool{
			cq.withOwner != nil,
			cq.withDragSessions != nil,
			cq.withFuelUps != nil,
			cq.withOdometerReadings != nil,
			cq.withServiceItems != nil,
			cq.withServiceLogs != nil,
			cq.withServiceSchedules != nil,
			cq.withMedia != nil,
			cq.withAlbums != nil,
			cq.withDocuments != nil,
			cq.withDynoSessions != nil,
			cq.withExpenses != nil,
			cq.withBannerImage != nil,
			cq.withTasks != nil,
			cq.withMods != nil,
		}
	)
	if cq.withOwner != nil || cq.withBannerImage != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, car.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Car).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Car{config: cq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, cq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := cq.withOwner; query != nil {
		if err := cq.loadOwner(ctx, query, nodes, nil,
			func(n *Car, e *User) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withDragSessions; query != nil {
		if err := cq.loadDragSessions(ctx, query, nodes,
			func(n *Car) { n.Edges.DragSessions = []*DragSession{} },
			func(n *Car, e *DragSession) { n.Edges.DragSessions = append(n.Edges.DragSessions, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withFuelUps; query != nil {
		if err := cq.loadFuelUps(ctx, query, nodes,
			func(n *Car) { n.Edges.FuelUps = []*FuelUp{} },
			func(n *Car, e *FuelUp) { n.Edges.FuelUps = append(n.Edges.FuelUps, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withOdometerReadings; query != nil {
		if err := cq.loadOdometerReadings(ctx, query, nodes,
			func(n *Car) { n.Edges.OdometerReadings = []*OdometerReading{} },
			func(n *Car, e *OdometerReading) { n.Edges.OdometerReadings = append(n.Edges.OdometerReadings, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withServiceItems; query != nil {
		if err := cq.loadServiceItems(ctx, query, nodes,
			func(n *Car) { n.Edges.ServiceItems = []*ServiceItem{} },
			func(n *Car, e *ServiceItem) { n.Edges.ServiceItems = append(n.Edges.ServiceItems, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withServiceLogs; query != nil {
		if err := cq.loadServiceLogs(ctx, query, nodes,
			func(n *Car) { n.Edges.ServiceLogs = []*ServiceLog{} },
			func(n *Car, e *ServiceLog) { n.Edges.ServiceLogs = append(n.Edges.ServiceLogs, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withServiceSchedules; query != nil {
		if err := cq.loadServiceSchedules(ctx, query, nodes,
			func(n *Car) { n.Edges.ServiceSchedules = []*ServiceSchedule{} },
			func(n *Car, e *ServiceSchedule) { n.Edges.ServiceSchedules = append(n.Edges.ServiceSchedules, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withMedia; query != nil {
		if err := cq.loadMedia(ctx, query, nodes,
			func(n *Car) { n.Edges.Media = []*Media{} },
			func(n *Car, e *Media) { n.Edges.Media = append(n.Edges.Media, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withAlbums; query != nil {
		if err := cq.loadAlbums(ctx, query, nodes,
			func(n *Car) { n.Edges.Albums = []*Album{} },
			func(n *Car, e *Album) { n.Edges.Albums = append(n.Edges.Albums, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withDocuments; query != nil {
		if err := cq.loadDocuments(ctx, query, nodes,
			func(n *Car) { n.Edges.Documents = []*Document{} },
			func(n *Car, e *Document) { n.Edges.Documents = append(n.Edges.Documents, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withDynoSessions; query != nil {
		if err := cq.loadDynoSessions(ctx, query, nodes,
			func(n *Car) { n.Edges.DynoSessions = []*DynoSession{} },
			func(n *Car, e *DynoSession) { n.Edges.DynoSessions = append(n.Edges.DynoSessions, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withExpenses; query != nil {
		if err := cq.loadExpenses(ctx, query, nodes,
			func(n *Car) { n.Edges.Expenses = []*Expense{} },
			func(n *Car, e *Expense) { n.Edges.Expenses = append(n.Edges.Expenses, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withBannerImage; query != nil {
		if err := cq.loadBannerImage(ctx, query, nodes, nil,
			func(n *Car, e *Media) { n.Edges.BannerImage = e }); err != nil {
			return nil, err
		}
	}
	if query := cq.withTasks; query != nil {
		if err := cq.loadTasks(ctx, query, nodes,
			func(n *Car) { n.Edges.Tasks = []*Task{} },
			func(n *Car, e *Task) { n.Edges.Tasks = append(n.Edges.Tasks, e) }); err != nil {
			return nil, err
		}
	}
	if query := cq.withMods; query != nil {
		if err := cq.loadMods(ctx, query, nodes,
			func(n *Car) { n.Edges.Mods = []*Mod{} },
			func(n *Car, e *Mod) { n.Edges.Mods = append(n.Edges.Mods, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedDragSessions {
		if err := cq.loadDragSessions(ctx, query, nodes,
			func(n *Car) { n.appendNamedDragSessions(name) },
			func(n *Car, e *DragSession) { n.appendNamedDragSessions(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedFuelUps {
		if err := cq.loadFuelUps(ctx, query, nodes,
			func(n *Car) { n.appendNamedFuelUps(name) },
			func(n *Car, e *FuelUp) { n.appendNamedFuelUps(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedOdometerReadings {
		if err := cq.loadOdometerReadings(ctx, query, nodes,
			func(n *Car) { n.appendNamedOdometerReadings(name) },
			func(n *Car, e *OdometerReading) { n.appendNamedOdometerReadings(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedServiceItems {
		if err := cq.loadServiceItems(ctx, query, nodes,
			func(n *Car) { n.appendNamedServiceItems(name) },
			func(n *Car, e *ServiceItem) { n.appendNamedServiceItems(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedServiceLogs {
		if err := cq.loadServiceLogs(ctx, query, nodes,
			func(n *Car) { n.appendNamedServiceLogs(name) },
			func(n *Car, e *ServiceLog) { n.appendNamedServiceLogs(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedServiceSchedules {
		if err := cq.loadServiceSchedules(ctx, query, nodes,
			func(n *Car) { n.appendNamedServiceSchedules(name) },
			func(n *Car, e *ServiceSchedule) { n.appendNamedServiceSchedules(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedMedia {
		if err := cq.loadMedia(ctx, query, nodes,
			func(n *Car) { n.appendNamedMedia(name) },
			func(n *Car, e *Media) { n.appendNamedMedia(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedAlbums {
		if err := cq.loadAlbums(ctx, query, nodes,
			func(n *Car) { n.appendNamedAlbums(name) },
			func(n *Car, e *Album) { n.appendNamedAlbums(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedDocuments {
		if err := cq.loadDocuments(ctx, query, nodes,
			func(n *Car) { n.appendNamedDocuments(name) },
			func(n *Car, e *Document) { n.appendNamedDocuments(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedDynoSessions {
		if err := cq.loadDynoSessions(ctx, query, nodes,
			func(n *Car) { n.appendNamedDynoSessions(name) },
			func(n *Car, e *DynoSession) { n.appendNamedDynoSessions(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedExpenses {
		if err := cq.loadExpenses(ctx, query, nodes,
			func(n *Car) { n.appendNamedExpenses(name) },
			func(n *Car, e *Expense) { n.appendNamedExpenses(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedTasks {
		if err := cq.loadTasks(ctx, query, nodes,
			func(n *Car) { n.appendNamedTasks(name) },
			func(n *Car, e *Task) { n.appendNamedTasks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range cq.withNamedMods {
		if err := cq.loadMods(ctx, query, nodes,
			func(n *Car) { n.appendNamedMods(name) },
			func(n *Car, e *Mod) { n.appendNamedMods(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range cq.loadTotal {
		if err := cq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (cq *CarQuery) loadOwner(ctx context.Context, query *UserQuery, nodes []*Car, init func(*Car), assign func(*Car, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Car)
	for i := range nodes {
		if nodes[i].user_cars == nil {
			continue
		}
		fk := *nodes[i].user_cars
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_cars" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *CarQuery) loadDragSessions(ctx context.Context, query *DragSessionQuery, nodes []*Car, init func(*Car), assign func(*Car, *DragSession)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Car)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.DragSession(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(car.DragSessionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.car_drag_sessions
		if fk == nil {
			return fmt.Errorf(`foreign-key "car_drag_sessions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "car_drag_sessions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CarQuery) loadFuelUps(ctx context.Context, query *FuelUpQuery, nodes []*Car, init func(*Car), assign func(*Car, *FuelUp)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Car)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.FuelUp(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(car.FuelUpsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.car_fuel_ups
		if fk == nil {
			return fmt.Errorf(`foreign-key "car_fuel_ups" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "car_fuel_ups" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CarQuery) loadOdometerReadings(ctx context.Context, query *OdometerReadingQuery, nodes []*Car, init func(*Car), assign func(*Car, *OdometerReading)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Car)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.OdometerReading(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(car.OdometerReadingsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.car_odometer_readings
		if fk == nil {
			return fmt.Errorf(`foreign-key "car_odometer_readings" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "car_odometer_readings" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CarQuery) loadServiceItems(ctx context.Context, query *ServiceItemQuery, nodes []*Car, init func(*Car), assign func(*Car, *ServiceItem)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Car)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ServiceItem(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(car.ServiceItemsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.car_service_items
		if fk == nil {
			return fmt.Errorf(`foreign-key "car_service_items" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "car_service_items" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CarQuery) loadServiceLogs(ctx context.Context, query *ServiceLogQuery, nodes []*Car, init func(*Car), assign func(*Car, *ServiceLog)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Car)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ServiceLog(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(car.ServiceLogsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.car_service_logs
		if fk == nil {
			return fmt.Errorf(`foreign-key "car_service_logs" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "car_service_logs" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CarQuery) loadServiceSchedules(ctx context.Context, query *ServiceScheduleQuery, nodes []*Car, init func(*Car), assign func(*Car, *ServiceSchedule)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Car)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ServiceSchedule(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(car.ServiceSchedulesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.car_service_schedules
		if fk == nil {
			return fmt.Errorf(`foreign-key "car_service_schedules" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "car_service_schedules" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CarQuery) loadMedia(ctx context.Context, query *MediaQuery, nodes []*Car, init func(*Car), assign func(*Car, *Media)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Car)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Media(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(car.MediaColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.car_media
		if fk == nil {
			return fmt.Errorf(`foreign-key "car_media" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "car_media" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CarQuery) loadAlbums(ctx context.Context, query *AlbumQuery, nodes []*Car, init func(*Car), assign func(*Car, *Album)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Car)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Album(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(car.AlbumsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.car_albums
		if fk == nil {
			return fmt.Errorf(`foreign-key "car_albums" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "car_albums" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CarQuery) loadDocuments(ctx context.Context, query *DocumentQuery, nodes []*Car, init func(*Car), assign func(*Car, *Document)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Car)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Document(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(car.DocumentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.car_documents
		if fk == nil {
			return fmt.Errorf(`foreign-key "car_documents" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "car_documents" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CarQuery) loadDynoSessions(ctx context.Context, query *DynoSessionQuery, nodes []*Car, init func(*Car), assign func(*Car, *DynoSession)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Car)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.DynoSession(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(car.DynoSessionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.car_dyno_sessions
		if fk == nil {
			return fmt.Errorf(`foreign-key "car_dyno_sessions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "car_dyno_sessions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CarQuery) loadExpenses(ctx context.Context, query *ExpenseQuery, nodes []*Car, init func(*Car), assign func(*Car, *Expense)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Car)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Expense(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(car.ExpensesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.car_expenses
		if fk == nil {
			return fmt.Errorf(`foreign-key "car_expenses" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "car_expenses" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CarQuery) loadBannerImage(ctx context.Context, query *MediaQuery, nodes []*Car, init func(*Car), assign func(*Car, *Media)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Car)
	for i := range nodes {
		if nodes[i].car_banner_image == nil {
			continue
		}
		fk := *nodes[i].car_banner_image
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(media.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "car_banner_image" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (cq *CarQuery) loadTasks(ctx context.Context, query *TaskQuery, nodes []*Car, init func(*Car), assign func(*Car, *Task)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Car)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Task(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(car.TasksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.car_tasks
		if fk == nil {
			return fmt.Errorf(`foreign-key "car_tasks" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "car_tasks" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (cq *CarQuery) loadMods(ctx context.Context, query *ModQuery, nodes []*Car, init func(*Car), assign func(*Car, *Mod)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Car)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Mod(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(car.ModsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.car_mods
		if fk == nil {
			return fmt.Errorf(`foreign-key "car_mods" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "car_mods" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (cq *CarQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := cq.querySpec()
	if len(cq.modifiers) > 0 {
		_spec.Modifiers = cq.modifiers
	}
	_spec.Node.Columns = cq.ctx.Fields
	if len(cq.ctx.Fields) > 0 {
		_spec.Unique = cq.ctx.Unique != nil && *cq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, cq.driver, _spec)
}

func (cq *CarQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(car.Table, car.Columns, sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID))
	_spec.From = cq.sql
	if unique := cq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if cq.path != nil {
		_spec.Unique = true
	}
	if fields := cq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, car.FieldID)
		for i := range fields {
			if fields[i] != car.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := cq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := cq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := cq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := cq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (cq *CarQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(cq.driver.Dialect())
	t1 := builder.Table(car.Table)
	columns := cq.ctx.Fields
	if len(columns) == 0 {
		columns = car.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if cq.sql != nil {
		selector = cq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if cq.ctx.Unique != nil && *cq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range cq.predicates {
		p(selector)
	}
	for _, p := range cq.order {
		p(selector)
	}
	if offset := cq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := cq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedDragSessions tells the query-builder to eager-load the nodes that are connected to the "drag_sessions"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithNamedDragSessions(name string, opts ...func(*DragSessionQuery)) *CarQuery {
	query := (&DragSessionClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedDragSessions == nil {
		cq.withNamedDragSessions = make(map[string]*DragSessionQuery)
	}
	cq.withNamedDragSessions[name] = query
	return cq
}

// WithNamedFuelUps tells the query-builder to eager-load the nodes that are connected to the "fuel_ups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithNamedFuelUps(name string, opts ...func(*FuelUpQuery)) *CarQuery {
	query := (&FuelUpClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedFuelUps == nil {
		cq.withNamedFuelUps = make(map[string]*FuelUpQuery)
	}
	cq.withNamedFuelUps[name] = query
	return cq
}

// WithNamedOdometerReadings tells the query-builder to eager-load the nodes that are connected to the "odometer_readings"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithNamedOdometerReadings(name string, opts ...func(*OdometerReadingQuery)) *CarQuery {
	query := (&OdometerReadingClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedOdometerReadings == nil {
		cq.withNamedOdometerReadings = make(map[string]*OdometerReadingQuery)
	}
	cq.withNamedOdometerReadings[name] = query
	return cq
}

// WithNamedServiceItems tells the query-builder to eager-load the nodes that are connected to the "service_items"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithNamedServiceItems(name string, opts ...func(*ServiceItemQuery)) *CarQuery {
	query := (&ServiceItemClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedServiceItems == nil {
		cq.withNamedServiceItems = make(map[string]*ServiceItemQuery)
	}
	cq.withNamedServiceItems[name] = query
	return cq
}

// WithNamedServiceLogs tells the query-builder to eager-load the nodes that are connected to the "service_logs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithNamedServiceLogs(name string, opts ...func(*ServiceLogQuery)) *CarQuery {
	query := (&ServiceLogClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedServiceLogs == nil {
		cq.withNamedServiceLogs = make(map[string]*ServiceLogQuery)
	}
	cq.withNamedServiceLogs[name] = query
	return cq
}

// WithNamedServiceSchedules tells the query-builder to eager-load the nodes that are connected to the "service_schedules"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithNamedServiceSchedules(name string, opts ...func(*ServiceScheduleQuery)) *CarQuery {
	query := (&ServiceScheduleClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedServiceSchedules == nil {
		cq.withNamedServiceSchedules = make(map[string]*ServiceScheduleQuery)
	}
	cq.withNamedServiceSchedules[name] = query
	return cq
}

// WithNamedMedia tells the query-builder to eager-load the nodes that are connected to the "media"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithNamedMedia(name string, opts ...func(*MediaQuery)) *CarQuery {
	query := (&MediaClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedMedia == nil {
		cq.withNamedMedia = make(map[string]*MediaQuery)
	}
	cq.withNamedMedia[name] = query
	return cq
}

// WithNamedAlbums tells the query-builder to eager-load the nodes that are connected to the "albums"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithNamedAlbums(name string, opts ...func(*AlbumQuery)) *CarQuery {
	query := (&AlbumClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedAlbums == nil {
		cq.withNamedAlbums = make(map[string]*AlbumQuery)
	}
	cq.withNamedAlbums[name] = query
	return cq
}

// WithNamedDocuments tells the query-builder to eager-load the nodes that are connected to the "documents"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithNamedDocuments(name string, opts ...func(*DocumentQuery)) *CarQuery {
	query := (&DocumentClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedDocuments == nil {
		cq.withNamedDocuments = make(map[string]*DocumentQuery)
	}
	cq.withNamedDocuments[name] = query
	return cq
}

// WithNamedDynoSessions tells the query-builder to eager-load the nodes that are connected to the "dyno_sessions"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithNamedDynoSessions(name string, opts ...func(*DynoSessionQuery)) *CarQuery {
	query := (&DynoSessionClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedDynoSessions == nil {
		cq.withNamedDynoSessions = make(map[string]*DynoSessionQuery)
	}
	cq.withNamedDynoSessions[name] = query
	return cq
}

// WithNamedExpenses tells the query-builder to eager-load the nodes that are connected to the "expenses"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithNamedExpenses(name string, opts ...func(*ExpenseQuery)) *CarQuery {
	query := (&ExpenseClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedExpenses == nil {
		cq.withNamedExpenses = make(map[string]*ExpenseQuery)
	}
	cq.withNamedExpenses[name] = query
	return cq
}

// WithNamedTasks tells the query-builder to eager-load the nodes that are connected to the "tasks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithNamedTasks(name string, opts ...func(*TaskQuery)) *CarQuery {
	query := (&TaskClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedTasks == nil {
		cq.withNamedTasks = make(map[string]*TaskQuery)
	}
	cq.withNamedTasks[name] = query
	return cq
}

// WithNamedMods tells the query-builder to eager-load the nodes that are connected to the "mods"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (cq *CarQuery) WithNamedMods(name string, opts ...func(*ModQuery)) *CarQuery {
	query := (&ModClient{config: cq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if cq.withNamedMods == nil {
		cq.withNamedMods = make(map[string]*ModQuery)
	}
	cq.withNamedMods[name] = query
	return cq
}

// CarGroupBy is the group-by builder for Car entities.
type CarGroupBy struct {
	selector
	build *CarQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cgb *CarGroupBy) Aggregate(fns ...AggregateFunc) *CarGroupBy {
	cgb.fns = append(cgb.fns, fns...)
	return cgb
}

// Scan applies the selector query and scans the result into the given value.
func (cgb *CarGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cgb.build.ctx, ent.OpQueryGroupBy)
	if err := cgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarQuery, *CarGroupBy](ctx, cgb.build, cgb, cgb.build.inters, v)
}

func (cgb *CarGroupBy) sqlScan(ctx context.Context, root *CarQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cgb.fns))
	for _, fn := range cgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cgb.flds)+len(cgb.fns))
		for _, f := range *cgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// CarSelect is the builder for selecting fields of Car entities.
type CarSelect struct {
	*CarQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cs *CarSelect) Aggregate(fns ...AggregateFunc) *CarSelect {
	cs.fns = append(cs.fns, fns...)
	return cs
}

// Scan applies the selector query and scans the result into the given value.
func (cs *CarSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cs.ctx, ent.OpQuerySelect)
	if err := cs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*CarQuery, *CarSelect](ctx, cs.CarQuery, cs, cs.inters, v)
}

func (cs *CarSelect) sqlScan(ctx context.Context, root *CarQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cs.fns))
	for _, fn := range cs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
