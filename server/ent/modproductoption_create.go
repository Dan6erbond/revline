// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/media"
	"github.com/Dan6erbond/revline/ent/mod"
	"github.com/Dan6erbond/revline/ent/modproductoption"
	"github.com/google/uuid"
)

// ModProductOptionCreate is the builder for creating a ModProductOption entity.
type ModProductOptionCreate struct {
	config
	mutation *ModProductOptionMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (mpoc *ModProductOptionCreate) SetCreateTime(t time.Time) *ModProductOptionCreate {
	mpoc.mutation.SetCreateTime(t)
	return mpoc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (mpoc *ModProductOptionCreate) SetNillableCreateTime(t *time.Time) *ModProductOptionCreate {
	if t != nil {
		mpoc.SetCreateTime(*t)
	}
	return mpoc
}

// SetUpdateTime sets the "update_time" field.
func (mpoc *ModProductOptionCreate) SetUpdateTime(t time.Time) *ModProductOptionCreate {
	mpoc.mutation.SetUpdateTime(t)
	return mpoc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (mpoc *ModProductOptionCreate) SetNillableUpdateTime(t *time.Time) *ModProductOptionCreate {
	if t != nil {
		mpoc.SetUpdateTime(*t)
	}
	return mpoc
}

// SetVendor sets the "vendor" field.
func (mpoc *ModProductOptionCreate) SetVendor(s string) *ModProductOptionCreate {
	mpoc.mutation.SetVendor(s)
	return mpoc
}

// SetNillableVendor sets the "vendor" field if the given value is not nil.
func (mpoc *ModProductOptionCreate) SetNillableVendor(s *string) *ModProductOptionCreate {
	if s != nil {
		mpoc.SetVendor(*s)
	}
	return mpoc
}

// SetName sets the "name" field.
func (mpoc *ModProductOptionCreate) SetName(s string) *ModProductOptionCreate {
	mpoc.mutation.SetName(s)
	return mpoc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mpoc *ModProductOptionCreate) SetNillableName(s *string) *ModProductOptionCreate {
	if s != nil {
		mpoc.SetName(*s)
	}
	return mpoc
}

// SetLink sets the "link" field.
func (mpoc *ModProductOptionCreate) SetLink(s string) *ModProductOptionCreate {
	mpoc.mutation.SetLink(s)
	return mpoc
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (mpoc *ModProductOptionCreate) SetNillableLink(s *string) *ModProductOptionCreate {
	if s != nil {
		mpoc.SetLink(*s)
	}
	return mpoc
}

// SetPrice sets the "price" field.
func (mpoc *ModProductOptionCreate) SetPrice(f float64) *ModProductOptionCreate {
	mpoc.mutation.SetPrice(f)
	return mpoc
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (mpoc *ModProductOptionCreate) SetNillablePrice(f *float64) *ModProductOptionCreate {
	if f != nil {
		mpoc.SetPrice(*f)
	}
	return mpoc
}

// SetNotes sets the "notes" field.
func (mpoc *ModProductOptionCreate) SetNotes(s string) *ModProductOptionCreate {
	mpoc.mutation.SetNotes(s)
	return mpoc
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (mpoc *ModProductOptionCreate) SetNillableNotes(s *string) *ModProductOptionCreate {
	if s != nil {
		mpoc.SetNotes(*s)
	}
	return mpoc
}

// SetPros sets the "pros" field.
func (mpoc *ModProductOptionCreate) SetPros(s []string) *ModProductOptionCreate {
	mpoc.mutation.SetPros(s)
	return mpoc
}

// SetCons sets the "cons" field.
func (mpoc *ModProductOptionCreate) SetCons(s []string) *ModProductOptionCreate {
	mpoc.mutation.SetCons(s)
	return mpoc
}

// SetSpecs sets the "specs" field.
func (mpoc *ModProductOptionCreate) SetSpecs(m map[string]string) *ModProductOptionCreate {
	mpoc.mutation.SetSpecs(m)
	return mpoc
}

// SetID sets the "id" field.
func (mpoc *ModProductOptionCreate) SetID(u uuid.UUID) *ModProductOptionCreate {
	mpoc.mutation.SetID(u)
	return mpoc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mpoc *ModProductOptionCreate) SetNillableID(u *uuid.UUID) *ModProductOptionCreate {
	if u != nil {
		mpoc.SetID(*u)
	}
	return mpoc
}

// SetModID sets the "mod" edge to the Mod entity by ID.
func (mpoc *ModProductOptionCreate) SetModID(id uuid.UUID) *ModProductOptionCreate {
	mpoc.mutation.SetModID(id)
	return mpoc
}

// SetMod sets the "mod" edge to the Mod entity.
func (mpoc *ModProductOptionCreate) SetMod(m *Mod) *ModProductOptionCreate {
	return mpoc.SetModID(m.ID)
}

// AddMediumIDs adds the "media" edge to the Media entity by IDs.
func (mpoc *ModProductOptionCreate) AddMediumIDs(ids ...uuid.UUID) *ModProductOptionCreate {
	mpoc.mutation.AddMediumIDs(ids...)
	return mpoc
}

// AddMedia adds the "media" edges to the Media entity.
func (mpoc *ModProductOptionCreate) AddMedia(m ...*Media) *ModProductOptionCreate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mpoc.AddMediumIDs(ids...)
}

// Mutation returns the ModProductOptionMutation object of the builder.
func (mpoc *ModProductOptionCreate) Mutation() *ModProductOptionMutation {
	return mpoc.mutation
}

// Save creates the ModProductOption in the database.
func (mpoc *ModProductOptionCreate) Save(ctx context.Context) (*ModProductOption, error) {
	mpoc.defaults()
	return withHooks(ctx, mpoc.sqlSave, mpoc.mutation, mpoc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mpoc *ModProductOptionCreate) SaveX(ctx context.Context) *ModProductOption {
	v, err := mpoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpoc *ModProductOptionCreate) Exec(ctx context.Context) error {
	_, err := mpoc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpoc *ModProductOptionCreate) ExecX(ctx context.Context) {
	if err := mpoc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpoc *ModProductOptionCreate) defaults() {
	if _, ok := mpoc.mutation.CreateTime(); !ok {
		v := modproductoption.DefaultCreateTime()
		mpoc.mutation.SetCreateTime(v)
	}
	if _, ok := mpoc.mutation.UpdateTime(); !ok {
		v := modproductoption.DefaultUpdateTime()
		mpoc.mutation.SetUpdateTime(v)
	}
	if _, ok := mpoc.mutation.ID(); !ok {
		v := modproductoption.DefaultID()
		mpoc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpoc *ModProductOptionCreate) check() error {
	if _, ok := mpoc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "ModProductOption.create_time"`)}
	}
	if _, ok := mpoc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "ModProductOption.update_time"`)}
	}
	if len(mpoc.mutation.ModIDs()) == 0 {
		return &ValidationError{Name: "mod", err: errors.New(`ent: missing required edge "ModProductOption.mod"`)}
	}
	return nil
}

func (mpoc *ModProductOptionCreate) sqlSave(ctx context.Context) (*ModProductOption, error) {
	if err := mpoc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mpoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mpoc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mpoc.mutation.id = &_node.ID
	mpoc.mutation.done = true
	return _node, nil
}

func (mpoc *ModProductOptionCreate) createSpec() (*ModProductOption, *sqlgraph.CreateSpec) {
	var (
		_node = &ModProductOption{config: mpoc.config}
		_spec = sqlgraph.NewCreateSpec(modproductoption.Table, sqlgraph.NewFieldSpec(modproductoption.FieldID, field.TypeUUID))
	)
	if id, ok := mpoc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mpoc.mutation.CreateTime(); ok {
		_spec.SetField(modproductoption.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := mpoc.mutation.UpdateTime(); ok {
		_spec.SetField(modproductoption.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := mpoc.mutation.Vendor(); ok {
		_spec.SetField(modproductoption.FieldVendor, field.TypeString, value)
		_node.Vendor = &value
	}
	if value, ok := mpoc.mutation.Name(); ok {
		_spec.SetField(modproductoption.FieldName, field.TypeString, value)
		_node.Name = &value
	}
	if value, ok := mpoc.mutation.Link(); ok {
		_spec.SetField(modproductoption.FieldLink, field.TypeString, value)
		_node.Link = &value
	}
	if value, ok := mpoc.mutation.Price(); ok {
		_spec.SetField(modproductoption.FieldPrice, field.TypeFloat64, value)
		_node.Price = &value
	}
	if value, ok := mpoc.mutation.Notes(); ok {
		_spec.SetField(modproductoption.FieldNotes, field.TypeString, value)
		_node.Notes = &value
	}
	if value, ok := mpoc.mutation.Pros(); ok {
		_spec.SetField(modproductoption.FieldPros, field.TypeJSON, value)
		_node.Pros = value
	}
	if value, ok := mpoc.mutation.Cons(); ok {
		_spec.SetField(modproductoption.FieldCons, field.TypeJSON, value)
		_node.Cons = value
	}
	if value, ok := mpoc.mutation.Specs(); ok {
		_spec.SetField(modproductoption.FieldSpecs, field.TypeJSON, value)
		_node.Specs = value
	}
	if nodes := mpoc.mutation.ModIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modproductoption.ModTable,
			Columns: []string{modproductoption.ModColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.mod_product_options = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mpoc.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modproductoption.MediaTable,
			Columns: []string{modproductoption.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ModProductOptionCreateBulk is the builder for creating many ModProductOption entities in bulk.
type ModProductOptionCreateBulk struct {
	config
	err      error
	builders []*ModProductOptionCreate
}

// Save creates the ModProductOption entities in the database.
func (mpocb *ModProductOptionCreateBulk) Save(ctx context.Context) ([]*ModProductOption, error) {
	if mpocb.err != nil {
		return nil, mpocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mpocb.builders))
	nodes := make([]*ModProductOption, len(mpocb.builders))
	mutators := make([]Mutator, len(mpocb.builders))
	for i := range mpocb.builders {
		func(i int, root context.Context) {
			builder := mpocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ModProductOptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mpocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mpocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mpocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mpocb *ModProductOptionCreateBulk) SaveX(ctx context.Context) []*ModProductOption {
	v, err := mpocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpocb *ModProductOptionCreateBulk) Exec(ctx context.Context) error {
	_, err := mpocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpocb *ModProductOptionCreateBulk) ExecX(ctx context.Context) {
	if err := mpocb.Exec(ctx); err != nil {
		panic(err)
	}
}
