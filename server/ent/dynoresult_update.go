// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/dynoresult"
	"github.com/Dan6erbond/revline/ent/dynosession"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/google/uuid"
)

// DynoResultUpdate is the builder for updating DynoResult entities.
type DynoResultUpdate struct {
	config
	hooks    []Hook
	mutation *DynoResultMutation
}

// Where appends a list predicates to the DynoResultUpdate builder.
func (dru *DynoResultUpdate) Where(ps ...predicate.DynoResult) *DynoResultUpdate {
	dru.mutation.Where(ps...)
	return dru
}

// SetUpdateTime sets the "update_time" field.
func (dru *DynoResultUpdate) SetUpdateTime(t time.Time) *DynoResultUpdate {
	dru.mutation.SetUpdateTime(t)
	return dru
}

// SetRpm sets the "rpm" field.
func (dru *DynoResultUpdate) SetRpm(i int) *DynoResultUpdate {
	dru.mutation.ResetRpm()
	dru.mutation.SetRpm(i)
	return dru
}

// SetNillableRpm sets the "rpm" field if the given value is not nil.
func (dru *DynoResultUpdate) SetNillableRpm(i *int) *DynoResultUpdate {
	if i != nil {
		dru.SetRpm(*i)
	}
	return dru
}

// AddRpm adds i to the "rpm" field.
func (dru *DynoResultUpdate) AddRpm(i int) *DynoResultUpdate {
	dru.mutation.AddRpm(i)
	return dru
}

// SetPowerKw sets the "power_kw" field.
func (dru *DynoResultUpdate) SetPowerKw(f float64) *DynoResultUpdate {
	dru.mutation.ResetPowerKw()
	dru.mutation.SetPowerKw(f)
	return dru
}

// SetNillablePowerKw sets the "power_kw" field if the given value is not nil.
func (dru *DynoResultUpdate) SetNillablePowerKw(f *float64) *DynoResultUpdate {
	if f != nil {
		dru.SetPowerKw(*f)
	}
	return dru
}

// AddPowerKw adds f to the "power_kw" field.
func (dru *DynoResultUpdate) AddPowerKw(f float64) *DynoResultUpdate {
	dru.mutation.AddPowerKw(f)
	return dru
}

// ClearPowerKw clears the value of the "power_kw" field.
func (dru *DynoResultUpdate) ClearPowerKw() *DynoResultUpdate {
	dru.mutation.ClearPowerKw()
	return dru
}

// SetTorqueNm sets the "torque_nm" field.
func (dru *DynoResultUpdate) SetTorqueNm(f float64) *DynoResultUpdate {
	dru.mutation.ResetTorqueNm()
	dru.mutation.SetTorqueNm(f)
	return dru
}

// SetNillableTorqueNm sets the "torque_nm" field if the given value is not nil.
func (dru *DynoResultUpdate) SetNillableTorqueNm(f *float64) *DynoResultUpdate {
	if f != nil {
		dru.SetTorqueNm(*f)
	}
	return dru
}

// AddTorqueNm adds f to the "torque_nm" field.
func (dru *DynoResultUpdate) AddTorqueNm(f float64) *DynoResultUpdate {
	dru.mutation.AddTorqueNm(f)
	return dru
}

// ClearTorqueNm clears the value of the "torque_nm" field.
func (dru *DynoResultUpdate) ClearTorqueNm() *DynoResultUpdate {
	dru.mutation.ClearTorqueNm()
	return dru
}

// SetSessionID sets the "session" edge to the DynoSession entity by ID.
func (dru *DynoResultUpdate) SetSessionID(id uuid.UUID) *DynoResultUpdate {
	dru.mutation.SetSessionID(id)
	return dru
}

// SetSession sets the "session" edge to the DynoSession entity.
func (dru *DynoResultUpdate) SetSession(d *DynoSession) *DynoResultUpdate {
	return dru.SetSessionID(d.ID)
}

// Mutation returns the DynoResultMutation object of the builder.
func (dru *DynoResultUpdate) Mutation() *DynoResultMutation {
	return dru.mutation
}

// ClearSession clears the "session" edge to the DynoSession entity.
func (dru *DynoResultUpdate) ClearSession() *DynoResultUpdate {
	dru.mutation.ClearSession()
	return dru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dru *DynoResultUpdate) Save(ctx context.Context) (int, error) {
	dru.defaults()
	return withHooks(ctx, dru.sqlSave, dru.mutation, dru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dru *DynoResultUpdate) SaveX(ctx context.Context) int {
	affected, err := dru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dru *DynoResultUpdate) Exec(ctx context.Context) error {
	_, err := dru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dru *DynoResultUpdate) ExecX(ctx context.Context) {
	if err := dru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dru *DynoResultUpdate) defaults() {
	if _, ok := dru.mutation.UpdateTime(); !ok {
		v := dynoresult.UpdateDefaultUpdateTime()
		dru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dru *DynoResultUpdate) check() error {
	if dru.mutation.SessionCleared() && len(dru.mutation.SessionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DynoResult.session"`)
	}
	return nil
}

func (dru *DynoResultUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(dynoresult.Table, dynoresult.Columns, sqlgraph.NewFieldSpec(dynoresult.FieldID, field.TypeUUID))
	if ps := dru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dru.mutation.UpdateTime(); ok {
		_spec.SetField(dynoresult.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := dru.mutation.Rpm(); ok {
		_spec.SetField(dynoresult.FieldRpm, field.TypeInt, value)
	}
	if value, ok := dru.mutation.AddedRpm(); ok {
		_spec.AddField(dynoresult.FieldRpm, field.TypeInt, value)
	}
	if value, ok := dru.mutation.PowerKw(); ok {
		_spec.SetField(dynoresult.FieldPowerKw, field.TypeFloat64, value)
	}
	if value, ok := dru.mutation.AddedPowerKw(); ok {
		_spec.AddField(dynoresult.FieldPowerKw, field.TypeFloat64, value)
	}
	if dru.mutation.PowerKwCleared() {
		_spec.ClearField(dynoresult.FieldPowerKw, field.TypeFloat64)
	}
	if value, ok := dru.mutation.TorqueNm(); ok {
		_spec.SetField(dynoresult.FieldTorqueNm, field.TypeFloat64, value)
	}
	if value, ok := dru.mutation.AddedTorqueNm(); ok {
		_spec.AddField(dynoresult.FieldTorqueNm, field.TypeFloat64, value)
	}
	if dru.mutation.TorqueNmCleared() {
		_spec.ClearField(dynoresult.FieldTorqueNm, field.TypeFloat64)
	}
	if dru.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dynoresult.SessionTable,
			Columns: []string{dynoresult.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dynosession.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dynoresult.SessionTable,
			Columns: []string{dynoresult.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dynosession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dynoresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dru.mutation.done = true
	return n, nil
}

// DynoResultUpdateOne is the builder for updating a single DynoResult entity.
type DynoResultUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DynoResultMutation
}

// SetUpdateTime sets the "update_time" field.
func (druo *DynoResultUpdateOne) SetUpdateTime(t time.Time) *DynoResultUpdateOne {
	druo.mutation.SetUpdateTime(t)
	return druo
}

// SetRpm sets the "rpm" field.
func (druo *DynoResultUpdateOne) SetRpm(i int) *DynoResultUpdateOne {
	druo.mutation.ResetRpm()
	druo.mutation.SetRpm(i)
	return druo
}

// SetNillableRpm sets the "rpm" field if the given value is not nil.
func (druo *DynoResultUpdateOne) SetNillableRpm(i *int) *DynoResultUpdateOne {
	if i != nil {
		druo.SetRpm(*i)
	}
	return druo
}

// AddRpm adds i to the "rpm" field.
func (druo *DynoResultUpdateOne) AddRpm(i int) *DynoResultUpdateOne {
	druo.mutation.AddRpm(i)
	return druo
}

// SetPowerKw sets the "power_kw" field.
func (druo *DynoResultUpdateOne) SetPowerKw(f float64) *DynoResultUpdateOne {
	druo.mutation.ResetPowerKw()
	druo.mutation.SetPowerKw(f)
	return druo
}

// SetNillablePowerKw sets the "power_kw" field if the given value is not nil.
func (druo *DynoResultUpdateOne) SetNillablePowerKw(f *float64) *DynoResultUpdateOne {
	if f != nil {
		druo.SetPowerKw(*f)
	}
	return druo
}

// AddPowerKw adds f to the "power_kw" field.
func (druo *DynoResultUpdateOne) AddPowerKw(f float64) *DynoResultUpdateOne {
	druo.mutation.AddPowerKw(f)
	return druo
}

// ClearPowerKw clears the value of the "power_kw" field.
func (druo *DynoResultUpdateOne) ClearPowerKw() *DynoResultUpdateOne {
	druo.mutation.ClearPowerKw()
	return druo
}

// SetTorqueNm sets the "torque_nm" field.
func (druo *DynoResultUpdateOne) SetTorqueNm(f float64) *DynoResultUpdateOne {
	druo.mutation.ResetTorqueNm()
	druo.mutation.SetTorqueNm(f)
	return druo
}

// SetNillableTorqueNm sets the "torque_nm" field if the given value is not nil.
func (druo *DynoResultUpdateOne) SetNillableTorqueNm(f *float64) *DynoResultUpdateOne {
	if f != nil {
		druo.SetTorqueNm(*f)
	}
	return druo
}

// AddTorqueNm adds f to the "torque_nm" field.
func (druo *DynoResultUpdateOne) AddTorqueNm(f float64) *DynoResultUpdateOne {
	druo.mutation.AddTorqueNm(f)
	return druo
}

// ClearTorqueNm clears the value of the "torque_nm" field.
func (druo *DynoResultUpdateOne) ClearTorqueNm() *DynoResultUpdateOne {
	druo.mutation.ClearTorqueNm()
	return druo
}

// SetSessionID sets the "session" edge to the DynoSession entity by ID.
func (druo *DynoResultUpdateOne) SetSessionID(id uuid.UUID) *DynoResultUpdateOne {
	druo.mutation.SetSessionID(id)
	return druo
}

// SetSession sets the "session" edge to the DynoSession entity.
func (druo *DynoResultUpdateOne) SetSession(d *DynoSession) *DynoResultUpdateOne {
	return druo.SetSessionID(d.ID)
}

// Mutation returns the DynoResultMutation object of the builder.
func (druo *DynoResultUpdateOne) Mutation() *DynoResultMutation {
	return druo.mutation
}

// ClearSession clears the "session" edge to the DynoSession entity.
func (druo *DynoResultUpdateOne) ClearSession() *DynoResultUpdateOne {
	druo.mutation.ClearSession()
	return druo
}

// Where appends a list predicates to the DynoResultUpdate builder.
func (druo *DynoResultUpdateOne) Where(ps ...predicate.DynoResult) *DynoResultUpdateOne {
	druo.mutation.Where(ps...)
	return druo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (druo *DynoResultUpdateOne) Select(field string, fields ...string) *DynoResultUpdateOne {
	druo.fields = append([]string{field}, fields...)
	return druo
}

// Save executes the query and returns the updated DynoResult entity.
func (druo *DynoResultUpdateOne) Save(ctx context.Context) (*DynoResult, error) {
	druo.defaults()
	return withHooks(ctx, druo.sqlSave, druo.mutation, druo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (druo *DynoResultUpdateOne) SaveX(ctx context.Context) *DynoResult {
	node, err := druo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (druo *DynoResultUpdateOne) Exec(ctx context.Context) error {
	_, err := druo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (druo *DynoResultUpdateOne) ExecX(ctx context.Context) {
	if err := druo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (druo *DynoResultUpdateOne) defaults() {
	if _, ok := druo.mutation.UpdateTime(); !ok {
		v := dynoresult.UpdateDefaultUpdateTime()
		druo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (druo *DynoResultUpdateOne) check() error {
	if druo.mutation.SessionCleared() && len(druo.mutation.SessionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DynoResult.session"`)
	}
	return nil
}

func (druo *DynoResultUpdateOne) sqlSave(ctx context.Context) (_node *DynoResult, err error) {
	if err := druo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dynoresult.Table, dynoresult.Columns, sqlgraph.NewFieldSpec(dynoresult.FieldID, field.TypeUUID))
	id, ok := druo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DynoResult.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := druo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dynoresult.FieldID)
		for _, f := range fields {
			if !dynoresult.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dynoresult.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := druo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := druo.mutation.UpdateTime(); ok {
		_spec.SetField(dynoresult.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := druo.mutation.Rpm(); ok {
		_spec.SetField(dynoresult.FieldRpm, field.TypeInt, value)
	}
	if value, ok := druo.mutation.AddedRpm(); ok {
		_spec.AddField(dynoresult.FieldRpm, field.TypeInt, value)
	}
	if value, ok := druo.mutation.PowerKw(); ok {
		_spec.SetField(dynoresult.FieldPowerKw, field.TypeFloat64, value)
	}
	if value, ok := druo.mutation.AddedPowerKw(); ok {
		_spec.AddField(dynoresult.FieldPowerKw, field.TypeFloat64, value)
	}
	if druo.mutation.PowerKwCleared() {
		_spec.ClearField(dynoresult.FieldPowerKw, field.TypeFloat64)
	}
	if value, ok := druo.mutation.TorqueNm(); ok {
		_spec.SetField(dynoresult.FieldTorqueNm, field.TypeFloat64, value)
	}
	if value, ok := druo.mutation.AddedTorqueNm(); ok {
		_spec.AddField(dynoresult.FieldTorqueNm, field.TypeFloat64, value)
	}
	if druo.mutation.TorqueNmCleared() {
		_spec.ClearField(dynoresult.FieldTorqueNm, field.TypeFloat64)
	}
	if druo.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dynoresult.SessionTable,
			Columns: []string{dynoresult.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dynosession.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dynoresult.SessionTable,
			Columns: []string{dynoresult.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dynosession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DynoResult{config: druo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, druo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dynoresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	druo.mutation.done = true
	return _node, nil
}
