// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/fuelup"
	"github.com/Dan6erbond/revline/ent/odometerreading"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/Dan6erbond/revline/ent/servicelog"
	"github.com/google/uuid"
)

// OdometerReadingUpdate is the builder for updating OdometerReading entities.
type OdometerReadingUpdate struct {
	config
	hooks    []Hook
	mutation *OdometerReadingMutation
}

// Where appends a list predicates to the OdometerReadingUpdate builder.
func (oru *OdometerReadingUpdate) Where(ps ...predicate.OdometerReading) *OdometerReadingUpdate {
	oru.mutation.Where(ps...)
	return oru
}

// SetUpdateTime sets the "update_time" field.
func (oru *OdometerReadingUpdate) SetUpdateTime(t time.Time) *OdometerReadingUpdate {
	oru.mutation.SetUpdateTime(t)
	return oru
}

// SetReadingKm sets the "reading_km" field.
func (oru *OdometerReadingUpdate) SetReadingKm(f float64) *OdometerReadingUpdate {
	oru.mutation.ResetReadingKm()
	oru.mutation.SetReadingKm(f)
	return oru
}

// SetNillableReadingKm sets the "reading_km" field if the given value is not nil.
func (oru *OdometerReadingUpdate) SetNillableReadingKm(f *float64) *OdometerReadingUpdate {
	if f != nil {
		oru.SetReadingKm(*f)
	}
	return oru
}

// AddReadingKm adds f to the "reading_km" field.
func (oru *OdometerReadingUpdate) AddReadingKm(f float64) *OdometerReadingUpdate {
	oru.mutation.AddReadingKm(f)
	return oru
}

// SetNotes sets the "notes" field.
func (oru *OdometerReadingUpdate) SetNotes(s string) *OdometerReadingUpdate {
	oru.mutation.SetNotes(s)
	return oru
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (oru *OdometerReadingUpdate) SetNillableNotes(s *string) *OdometerReadingUpdate {
	if s != nil {
		oru.SetNotes(*s)
	}
	return oru
}

// ClearNotes clears the value of the "notes" field.
func (oru *OdometerReadingUpdate) ClearNotes() *OdometerReadingUpdate {
	oru.mutation.ClearNotes()
	return oru
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (oru *OdometerReadingUpdate) SetCarID(id uuid.UUID) *OdometerReadingUpdate {
	oru.mutation.SetCarID(id)
	return oru
}

// SetCar sets the "car" edge to the Car entity.
func (oru *OdometerReadingUpdate) SetCar(c *Car) *OdometerReadingUpdate {
	return oru.SetCarID(c.ID)
}

// SetFuelUpID sets the "fuel_up" edge to the FuelUp entity by ID.
func (oru *OdometerReadingUpdate) SetFuelUpID(id uuid.UUID) *OdometerReadingUpdate {
	oru.mutation.SetFuelUpID(id)
	return oru
}

// SetNillableFuelUpID sets the "fuel_up" edge to the FuelUp entity by ID if the given value is not nil.
func (oru *OdometerReadingUpdate) SetNillableFuelUpID(id *uuid.UUID) *OdometerReadingUpdate {
	if id != nil {
		oru = oru.SetFuelUpID(*id)
	}
	return oru
}

// SetFuelUp sets the "fuel_up" edge to the FuelUp entity.
func (oru *OdometerReadingUpdate) SetFuelUp(f *FuelUp) *OdometerReadingUpdate {
	return oru.SetFuelUpID(f.ID)
}

// SetServiceLogID sets the "service_log" edge to the ServiceLog entity by ID.
func (oru *OdometerReadingUpdate) SetServiceLogID(id uuid.UUID) *OdometerReadingUpdate {
	oru.mutation.SetServiceLogID(id)
	return oru
}

// SetNillableServiceLogID sets the "service_log" edge to the ServiceLog entity by ID if the given value is not nil.
func (oru *OdometerReadingUpdate) SetNillableServiceLogID(id *uuid.UUID) *OdometerReadingUpdate {
	if id != nil {
		oru = oru.SetServiceLogID(*id)
	}
	return oru
}

// SetServiceLog sets the "service_log" edge to the ServiceLog entity.
func (oru *OdometerReadingUpdate) SetServiceLog(s *ServiceLog) *OdometerReadingUpdate {
	return oru.SetServiceLogID(s.ID)
}

// Mutation returns the OdometerReadingMutation object of the builder.
func (oru *OdometerReadingUpdate) Mutation() *OdometerReadingMutation {
	return oru.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (oru *OdometerReadingUpdate) ClearCar() *OdometerReadingUpdate {
	oru.mutation.ClearCar()
	return oru
}

// ClearFuelUp clears the "fuel_up" edge to the FuelUp entity.
func (oru *OdometerReadingUpdate) ClearFuelUp() *OdometerReadingUpdate {
	oru.mutation.ClearFuelUp()
	return oru
}

// ClearServiceLog clears the "service_log" edge to the ServiceLog entity.
func (oru *OdometerReadingUpdate) ClearServiceLog() *OdometerReadingUpdate {
	oru.mutation.ClearServiceLog()
	return oru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oru *OdometerReadingUpdate) Save(ctx context.Context) (int, error) {
	oru.defaults()
	return withHooks(ctx, oru.sqlSave, oru.mutation, oru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oru *OdometerReadingUpdate) SaveX(ctx context.Context) int {
	affected, err := oru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oru *OdometerReadingUpdate) Exec(ctx context.Context) error {
	_, err := oru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oru *OdometerReadingUpdate) ExecX(ctx context.Context) {
	if err := oru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oru *OdometerReadingUpdate) defaults() {
	if _, ok := oru.mutation.UpdateTime(); !ok {
		v := odometerreading.UpdateDefaultUpdateTime()
		oru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oru *OdometerReadingUpdate) check() error {
	if oru.mutation.CarCleared() && len(oru.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OdometerReading.car"`)
	}
	return nil
}

func (oru *OdometerReadingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(odometerreading.Table, odometerreading.Columns, sqlgraph.NewFieldSpec(odometerreading.FieldID, field.TypeUUID))
	if ps := oru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oru.mutation.UpdateTime(); ok {
		_spec.SetField(odometerreading.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := oru.mutation.ReadingKm(); ok {
		_spec.SetField(odometerreading.FieldReadingKm, field.TypeFloat64, value)
	}
	if value, ok := oru.mutation.AddedReadingKm(); ok {
		_spec.AddField(odometerreading.FieldReadingKm, field.TypeFloat64, value)
	}
	if value, ok := oru.mutation.Notes(); ok {
		_spec.SetField(odometerreading.FieldNotes, field.TypeString, value)
	}
	if oru.mutation.NotesCleared() {
		_spec.ClearField(odometerreading.FieldNotes, field.TypeString)
	}
	if oru.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   odometerreading.CarTable,
			Columns: []string{odometerreading.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   odometerreading.CarTable,
			Columns: []string{odometerreading.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oru.mutation.FuelUpCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   odometerreading.FuelUpTable,
			Columns: []string{odometerreading.FuelUpColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fuelup.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.FuelUpIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   odometerreading.FuelUpTable,
			Columns: []string{odometerreading.FuelUpColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fuelup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oru.mutation.ServiceLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   odometerreading.ServiceLogTable,
			Columns: []string{odometerreading.ServiceLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.ServiceLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   odometerreading.ServiceLogTable,
			Columns: []string{odometerreading.ServiceLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{odometerreading.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oru.mutation.done = true
	return n, nil
}

// OdometerReadingUpdateOne is the builder for updating a single OdometerReading entity.
type OdometerReadingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OdometerReadingMutation
}

// SetUpdateTime sets the "update_time" field.
func (oruo *OdometerReadingUpdateOne) SetUpdateTime(t time.Time) *OdometerReadingUpdateOne {
	oruo.mutation.SetUpdateTime(t)
	return oruo
}

// SetReadingKm sets the "reading_km" field.
func (oruo *OdometerReadingUpdateOne) SetReadingKm(f float64) *OdometerReadingUpdateOne {
	oruo.mutation.ResetReadingKm()
	oruo.mutation.SetReadingKm(f)
	return oruo
}

// SetNillableReadingKm sets the "reading_km" field if the given value is not nil.
func (oruo *OdometerReadingUpdateOne) SetNillableReadingKm(f *float64) *OdometerReadingUpdateOne {
	if f != nil {
		oruo.SetReadingKm(*f)
	}
	return oruo
}

// AddReadingKm adds f to the "reading_km" field.
func (oruo *OdometerReadingUpdateOne) AddReadingKm(f float64) *OdometerReadingUpdateOne {
	oruo.mutation.AddReadingKm(f)
	return oruo
}

// SetNotes sets the "notes" field.
func (oruo *OdometerReadingUpdateOne) SetNotes(s string) *OdometerReadingUpdateOne {
	oruo.mutation.SetNotes(s)
	return oruo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (oruo *OdometerReadingUpdateOne) SetNillableNotes(s *string) *OdometerReadingUpdateOne {
	if s != nil {
		oruo.SetNotes(*s)
	}
	return oruo
}

// ClearNotes clears the value of the "notes" field.
func (oruo *OdometerReadingUpdateOne) ClearNotes() *OdometerReadingUpdateOne {
	oruo.mutation.ClearNotes()
	return oruo
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (oruo *OdometerReadingUpdateOne) SetCarID(id uuid.UUID) *OdometerReadingUpdateOne {
	oruo.mutation.SetCarID(id)
	return oruo
}

// SetCar sets the "car" edge to the Car entity.
func (oruo *OdometerReadingUpdateOne) SetCar(c *Car) *OdometerReadingUpdateOne {
	return oruo.SetCarID(c.ID)
}

// SetFuelUpID sets the "fuel_up" edge to the FuelUp entity by ID.
func (oruo *OdometerReadingUpdateOne) SetFuelUpID(id uuid.UUID) *OdometerReadingUpdateOne {
	oruo.mutation.SetFuelUpID(id)
	return oruo
}

// SetNillableFuelUpID sets the "fuel_up" edge to the FuelUp entity by ID if the given value is not nil.
func (oruo *OdometerReadingUpdateOne) SetNillableFuelUpID(id *uuid.UUID) *OdometerReadingUpdateOne {
	if id != nil {
		oruo = oruo.SetFuelUpID(*id)
	}
	return oruo
}

// SetFuelUp sets the "fuel_up" edge to the FuelUp entity.
func (oruo *OdometerReadingUpdateOne) SetFuelUp(f *FuelUp) *OdometerReadingUpdateOne {
	return oruo.SetFuelUpID(f.ID)
}

// SetServiceLogID sets the "service_log" edge to the ServiceLog entity by ID.
func (oruo *OdometerReadingUpdateOne) SetServiceLogID(id uuid.UUID) *OdometerReadingUpdateOne {
	oruo.mutation.SetServiceLogID(id)
	return oruo
}

// SetNillableServiceLogID sets the "service_log" edge to the ServiceLog entity by ID if the given value is not nil.
func (oruo *OdometerReadingUpdateOne) SetNillableServiceLogID(id *uuid.UUID) *OdometerReadingUpdateOne {
	if id != nil {
		oruo = oruo.SetServiceLogID(*id)
	}
	return oruo
}

// SetServiceLog sets the "service_log" edge to the ServiceLog entity.
func (oruo *OdometerReadingUpdateOne) SetServiceLog(s *ServiceLog) *OdometerReadingUpdateOne {
	return oruo.SetServiceLogID(s.ID)
}

// Mutation returns the OdometerReadingMutation object of the builder.
func (oruo *OdometerReadingUpdateOne) Mutation() *OdometerReadingMutation {
	return oruo.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (oruo *OdometerReadingUpdateOne) ClearCar() *OdometerReadingUpdateOne {
	oruo.mutation.ClearCar()
	return oruo
}

// ClearFuelUp clears the "fuel_up" edge to the FuelUp entity.
func (oruo *OdometerReadingUpdateOne) ClearFuelUp() *OdometerReadingUpdateOne {
	oruo.mutation.ClearFuelUp()
	return oruo
}

// ClearServiceLog clears the "service_log" edge to the ServiceLog entity.
func (oruo *OdometerReadingUpdateOne) ClearServiceLog() *OdometerReadingUpdateOne {
	oruo.mutation.ClearServiceLog()
	return oruo
}

// Where appends a list predicates to the OdometerReadingUpdate builder.
func (oruo *OdometerReadingUpdateOne) Where(ps ...predicate.OdometerReading) *OdometerReadingUpdateOne {
	oruo.mutation.Where(ps...)
	return oruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oruo *OdometerReadingUpdateOne) Select(field string, fields ...string) *OdometerReadingUpdateOne {
	oruo.fields = append([]string{field}, fields...)
	return oruo
}

// Save executes the query and returns the updated OdometerReading entity.
func (oruo *OdometerReadingUpdateOne) Save(ctx context.Context) (*OdometerReading, error) {
	oruo.defaults()
	return withHooks(ctx, oruo.sqlSave, oruo.mutation, oruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oruo *OdometerReadingUpdateOne) SaveX(ctx context.Context) *OdometerReading {
	node, err := oruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oruo *OdometerReadingUpdateOne) Exec(ctx context.Context) error {
	_, err := oruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oruo *OdometerReadingUpdateOne) ExecX(ctx context.Context) {
	if err := oruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oruo *OdometerReadingUpdateOne) defaults() {
	if _, ok := oruo.mutation.UpdateTime(); !ok {
		v := odometerreading.UpdateDefaultUpdateTime()
		oruo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oruo *OdometerReadingUpdateOne) check() error {
	if oruo.mutation.CarCleared() && len(oruo.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OdometerReading.car"`)
	}
	return nil
}

func (oruo *OdometerReadingUpdateOne) sqlSave(ctx context.Context) (_node *OdometerReading, err error) {
	if err := oruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(odometerreading.Table, odometerreading.Columns, sqlgraph.NewFieldSpec(odometerreading.FieldID, field.TypeUUID))
	id, ok := oruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OdometerReading.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, odometerreading.FieldID)
		for _, f := range fields {
			if !odometerreading.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != odometerreading.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oruo.mutation.UpdateTime(); ok {
		_spec.SetField(odometerreading.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := oruo.mutation.ReadingKm(); ok {
		_spec.SetField(odometerreading.FieldReadingKm, field.TypeFloat64, value)
	}
	if value, ok := oruo.mutation.AddedReadingKm(); ok {
		_spec.AddField(odometerreading.FieldReadingKm, field.TypeFloat64, value)
	}
	if value, ok := oruo.mutation.Notes(); ok {
		_spec.SetField(odometerreading.FieldNotes, field.TypeString, value)
	}
	if oruo.mutation.NotesCleared() {
		_spec.ClearField(odometerreading.FieldNotes, field.TypeString)
	}
	if oruo.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   odometerreading.CarTable,
			Columns: []string{odometerreading.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   odometerreading.CarTable,
			Columns: []string{odometerreading.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oruo.mutation.FuelUpCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   odometerreading.FuelUpTable,
			Columns: []string{odometerreading.FuelUpColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fuelup.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.FuelUpIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   odometerreading.FuelUpTable,
			Columns: []string{odometerreading.FuelUpColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fuelup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oruo.mutation.ServiceLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   odometerreading.ServiceLogTable,
			Columns: []string{odometerreading.ServiceLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.ServiceLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   odometerreading.ServiceLogTable,
			Columns: []string{odometerreading.ServiceLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OdometerReading{config: oruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{odometerreading.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oruo.mutation.done = true
	return _node, nil
}
