// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/odometerreading"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/Dan6erbond/revline/ent/serviceitem"
	"github.com/Dan6erbond/revline/ent/servicelog"
	"github.com/Dan6erbond/revline/ent/serviceschedule"
	"github.com/google/uuid"
)

// ServiceLogQuery is the builder for querying ServiceLog entities.
type ServiceLogQuery struct {
	config
	ctx                 *QueryContext
	order               []servicelog.OrderOption
	inters              []Interceptor
	predicates          []predicate.ServiceLog
	withCar             *CarQuery
	withItems           *ServiceItemQuery
	withSchedule        *ServiceScheduleQuery
	withOdometerReading *OdometerReadingQuery
	withFKs             bool
	modifiers           []func(*sql.Selector)
	loadTotal           []func(context.Context, []*ServiceLog) error
	withNamedItems      map[string]*ServiceItemQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ServiceLogQuery builder.
func (slq *ServiceLogQuery) Where(ps ...predicate.ServiceLog) *ServiceLogQuery {
	slq.predicates = append(slq.predicates, ps...)
	return slq
}

// Limit the number of records to be returned by this query.
func (slq *ServiceLogQuery) Limit(limit int) *ServiceLogQuery {
	slq.ctx.Limit = &limit
	return slq
}

// Offset to start from.
func (slq *ServiceLogQuery) Offset(offset int) *ServiceLogQuery {
	slq.ctx.Offset = &offset
	return slq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (slq *ServiceLogQuery) Unique(unique bool) *ServiceLogQuery {
	slq.ctx.Unique = &unique
	return slq
}

// Order specifies how the records should be ordered.
func (slq *ServiceLogQuery) Order(o ...servicelog.OrderOption) *ServiceLogQuery {
	slq.order = append(slq.order, o...)
	return slq
}

// QueryCar chains the current query on the "car" edge.
func (slq *ServiceLogQuery) QueryCar() *CarQuery {
	query := (&CarClient{config: slq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := slq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := slq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(servicelog.Table, servicelog.FieldID, selector),
			sqlgraph.To(car.Table, car.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, servicelog.CarTable, servicelog.CarColumn),
		)
		fromU = sqlgraph.SetNeighbors(slq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryItems chains the current query on the "items" edge.
func (slq *ServiceLogQuery) QueryItems() *ServiceItemQuery {
	query := (&ServiceItemClient{config: slq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := slq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := slq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(servicelog.Table, servicelog.FieldID, selector),
			sqlgraph.To(serviceitem.Table, serviceitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, servicelog.ItemsTable, servicelog.ItemsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(slq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySchedule chains the current query on the "schedule" edge.
func (slq *ServiceLogQuery) QuerySchedule() *ServiceScheduleQuery {
	query := (&ServiceScheduleClient{config: slq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := slq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := slq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(servicelog.Table, servicelog.FieldID, selector),
			sqlgraph.To(serviceschedule.Table, serviceschedule.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, servicelog.ScheduleTable, servicelog.ScheduleColumn),
		)
		fromU = sqlgraph.SetNeighbors(slq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOdometerReading chains the current query on the "odometer_reading" edge.
func (slq *ServiceLogQuery) QueryOdometerReading() *OdometerReadingQuery {
	query := (&OdometerReadingClient{config: slq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := slq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := slq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(servicelog.Table, servicelog.FieldID, selector),
			sqlgraph.To(odometerreading.Table, odometerreading.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, servicelog.OdometerReadingTable, servicelog.OdometerReadingColumn),
		)
		fromU = sqlgraph.SetNeighbors(slq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ServiceLog entity from the query.
// Returns a *NotFoundError when no ServiceLog was found.
func (slq *ServiceLogQuery) First(ctx context.Context) (*ServiceLog, error) {
	nodes, err := slq.Limit(1).All(setContextOp(ctx, slq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{servicelog.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (slq *ServiceLogQuery) FirstX(ctx context.Context) *ServiceLog {
	node, err := slq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ServiceLog ID from the query.
// Returns a *NotFoundError when no ServiceLog ID was found.
func (slq *ServiceLogQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = slq.Limit(1).IDs(setContextOp(ctx, slq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{servicelog.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (slq *ServiceLogQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := slq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ServiceLog entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ServiceLog entity is found.
// Returns a *NotFoundError when no ServiceLog entities are found.
func (slq *ServiceLogQuery) Only(ctx context.Context) (*ServiceLog, error) {
	nodes, err := slq.Limit(2).All(setContextOp(ctx, slq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{servicelog.Label}
	default:
		return nil, &NotSingularError{servicelog.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (slq *ServiceLogQuery) OnlyX(ctx context.Context) *ServiceLog {
	node, err := slq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ServiceLog ID in the query.
// Returns a *NotSingularError when more than one ServiceLog ID is found.
// Returns a *NotFoundError when no entities are found.
func (slq *ServiceLogQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = slq.Limit(2).IDs(setContextOp(ctx, slq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{servicelog.Label}
	default:
		err = &NotSingularError{servicelog.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (slq *ServiceLogQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := slq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ServiceLogs.
func (slq *ServiceLogQuery) All(ctx context.Context) ([]*ServiceLog, error) {
	ctx = setContextOp(ctx, slq.ctx, ent.OpQueryAll)
	if err := slq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ServiceLog, *ServiceLogQuery]()
	return withInterceptors[[]*ServiceLog](ctx, slq, qr, slq.inters)
}

// AllX is like All, but panics if an error occurs.
func (slq *ServiceLogQuery) AllX(ctx context.Context) []*ServiceLog {
	nodes, err := slq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ServiceLog IDs.
func (slq *ServiceLogQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if slq.ctx.Unique == nil && slq.path != nil {
		slq.Unique(true)
	}
	ctx = setContextOp(ctx, slq.ctx, ent.OpQueryIDs)
	if err = slq.Select(servicelog.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (slq *ServiceLogQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := slq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (slq *ServiceLogQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, slq.ctx, ent.OpQueryCount)
	if err := slq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, slq, querierCount[*ServiceLogQuery](), slq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (slq *ServiceLogQuery) CountX(ctx context.Context) int {
	count, err := slq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (slq *ServiceLogQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, slq.ctx, ent.OpQueryExist)
	switch _, err := slq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (slq *ServiceLogQuery) ExistX(ctx context.Context) bool {
	exist, err := slq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ServiceLogQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (slq *ServiceLogQuery) Clone() *ServiceLogQuery {
	if slq == nil {
		return nil
	}
	return &ServiceLogQuery{
		config:              slq.config,
		ctx:                 slq.ctx.Clone(),
		order:               append([]servicelog.OrderOption{}, slq.order...),
		inters:              append([]Interceptor{}, slq.inters...),
		predicates:          append([]predicate.ServiceLog{}, slq.predicates...),
		withCar:             slq.withCar.Clone(),
		withItems:           slq.withItems.Clone(),
		withSchedule:        slq.withSchedule.Clone(),
		withOdometerReading: slq.withOdometerReading.Clone(),
		// clone intermediate query.
		sql:  slq.sql.Clone(),
		path: slq.path,
	}
}

// WithCar tells the query-builder to eager-load the nodes that are connected to
// the "car" edge. The optional arguments are used to configure the query builder of the edge.
func (slq *ServiceLogQuery) WithCar(opts ...func(*CarQuery)) *ServiceLogQuery {
	query := (&CarClient{config: slq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	slq.withCar = query
	return slq
}

// WithItems tells the query-builder to eager-load the nodes that are connected to
// the "items" edge. The optional arguments are used to configure the query builder of the edge.
func (slq *ServiceLogQuery) WithItems(opts ...func(*ServiceItemQuery)) *ServiceLogQuery {
	query := (&ServiceItemClient{config: slq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	slq.withItems = query
	return slq
}

// WithSchedule tells the query-builder to eager-load the nodes that are connected to
// the "schedule" edge. The optional arguments are used to configure the query builder of the edge.
func (slq *ServiceLogQuery) WithSchedule(opts ...func(*ServiceScheduleQuery)) *ServiceLogQuery {
	query := (&ServiceScheduleClient{config: slq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	slq.withSchedule = query
	return slq
}

// WithOdometerReading tells the query-builder to eager-load the nodes that are connected to
// the "odometer_reading" edge. The optional arguments are used to configure the query builder of the edge.
func (slq *ServiceLogQuery) WithOdometerReading(opts ...func(*OdometerReadingQuery)) *ServiceLogQuery {
	query := (&OdometerReadingClient{config: slq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	slq.withOdometerReading = query
	return slq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ServiceLog.Query().
//		GroupBy(servicelog.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (slq *ServiceLogQuery) GroupBy(field string, fields ...string) *ServiceLogGroupBy {
	slq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ServiceLogGroupBy{build: slq}
	grbuild.flds = &slq.ctx.Fields
	grbuild.label = servicelog.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.ServiceLog.Query().
//		Select(servicelog.FieldCreateTime).
//		Scan(ctx, &v)
func (slq *ServiceLogQuery) Select(fields ...string) *ServiceLogSelect {
	slq.ctx.Fields = append(slq.ctx.Fields, fields...)
	sbuild := &ServiceLogSelect{ServiceLogQuery: slq}
	sbuild.label = servicelog.Label
	sbuild.flds, sbuild.scan = &slq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ServiceLogSelect configured with the given aggregations.
func (slq *ServiceLogQuery) Aggregate(fns ...AggregateFunc) *ServiceLogSelect {
	return slq.Select().Aggregate(fns...)
}

func (slq *ServiceLogQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range slq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, slq); err != nil {
				return err
			}
		}
	}
	for _, f := range slq.ctx.Fields {
		if !servicelog.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if slq.path != nil {
		prev, err := slq.path(ctx)
		if err != nil {
			return err
		}
		slq.sql = prev
	}
	return nil
}

func (slq *ServiceLogQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ServiceLog, error) {
	var (
		nodes       = []*ServiceLog{}
		withFKs     = slq.withFKs
		_spec       = slq.querySpec()
		loadedTypes = [4]bool{
			slq.withCar != nil,
			slq.withItems != nil,
			slq.withSchedule != nil,
			slq.withOdometerReading != nil,
		}
	)
	if slq.withCar != nil || slq.withSchedule != nil || slq.withOdometerReading != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, servicelog.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ServiceLog).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ServiceLog{config: slq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(slq.modifiers) > 0 {
		_spec.Modifiers = slq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, slq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := slq.withCar; query != nil {
		if err := slq.loadCar(ctx, query, nodes, nil,
			func(n *ServiceLog, e *Car) { n.Edges.Car = e }); err != nil {
			return nil, err
		}
	}
	if query := slq.withItems; query != nil {
		if err := slq.loadItems(ctx, query, nodes,
			func(n *ServiceLog) { n.Edges.Items = []*ServiceItem{} },
			func(n *ServiceLog, e *ServiceItem) { n.Edges.Items = append(n.Edges.Items, e) }); err != nil {
			return nil, err
		}
	}
	if query := slq.withSchedule; query != nil {
		if err := slq.loadSchedule(ctx, query, nodes, nil,
			func(n *ServiceLog, e *ServiceSchedule) { n.Edges.Schedule = e }); err != nil {
			return nil, err
		}
	}
	if query := slq.withOdometerReading; query != nil {
		if err := slq.loadOdometerReading(ctx, query, nodes, nil,
			func(n *ServiceLog, e *OdometerReading) { n.Edges.OdometerReading = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range slq.withNamedItems {
		if err := slq.loadItems(ctx, query, nodes,
			func(n *ServiceLog) { n.appendNamedItems(name) },
			func(n *ServiceLog, e *ServiceItem) { n.appendNamedItems(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range slq.loadTotal {
		if err := slq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (slq *ServiceLogQuery) loadCar(ctx context.Context, query *CarQuery, nodes []*ServiceLog, init func(*ServiceLog), assign func(*ServiceLog, *Car)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ServiceLog)
	for i := range nodes {
		if nodes[i].car_service_logs == nil {
			continue
		}
		fk := *nodes[i].car_service_logs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(car.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "car_service_logs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (slq *ServiceLogQuery) loadItems(ctx context.Context, query *ServiceItemQuery, nodes []*ServiceLog, init func(*ServiceLog), assign func(*ServiceLog, *ServiceItem)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*ServiceLog)
	nids := make(map[uuid.UUID]map[*ServiceLog]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(servicelog.ItemsTable)
		s.Join(joinT).On(s.C(serviceitem.FieldID), joinT.C(servicelog.ItemsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(servicelog.ItemsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(servicelog.ItemsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*ServiceLog]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ServiceItem](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "items" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (slq *ServiceLogQuery) loadSchedule(ctx context.Context, query *ServiceScheduleQuery, nodes []*ServiceLog, init func(*ServiceLog), assign func(*ServiceLog, *ServiceSchedule)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ServiceLog)
	for i := range nodes {
		if nodes[i].service_schedule_logs == nil {
			continue
		}
		fk := *nodes[i].service_schedule_logs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(serviceschedule.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "service_schedule_logs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (slq *ServiceLogQuery) loadOdometerReading(ctx context.Context, query *OdometerReadingQuery, nodes []*ServiceLog, init func(*ServiceLog), assign func(*ServiceLog, *OdometerReading)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ServiceLog)
	for i := range nodes {
		if nodes[i].odometer_reading_service_log == nil {
			continue
		}
		fk := *nodes[i].odometer_reading_service_log
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(odometerreading.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "odometer_reading_service_log" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (slq *ServiceLogQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := slq.querySpec()
	if len(slq.modifiers) > 0 {
		_spec.Modifiers = slq.modifiers
	}
	_spec.Node.Columns = slq.ctx.Fields
	if len(slq.ctx.Fields) > 0 {
		_spec.Unique = slq.ctx.Unique != nil && *slq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, slq.driver, _spec)
}

func (slq *ServiceLogQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(servicelog.Table, servicelog.Columns, sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID))
	_spec.From = slq.sql
	if unique := slq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if slq.path != nil {
		_spec.Unique = true
	}
	if fields := slq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, servicelog.FieldID)
		for i := range fields {
			if fields[i] != servicelog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := slq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := slq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := slq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := slq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (slq *ServiceLogQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(slq.driver.Dialect())
	t1 := builder.Table(servicelog.Table)
	columns := slq.ctx.Fields
	if len(columns) == 0 {
		columns = servicelog.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if slq.sql != nil {
		selector = slq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if slq.ctx.Unique != nil && *slq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range slq.predicates {
		p(selector)
	}
	for _, p := range slq.order {
		p(selector)
	}
	if offset := slq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := slq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedItems tells the query-builder to eager-load the nodes that are connected to the "items"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (slq *ServiceLogQuery) WithNamedItems(name string, opts ...func(*ServiceItemQuery)) *ServiceLogQuery {
	query := (&ServiceItemClient{config: slq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if slq.withNamedItems == nil {
		slq.withNamedItems = make(map[string]*ServiceItemQuery)
	}
	slq.withNamedItems[name] = query
	return slq
}

// ServiceLogGroupBy is the group-by builder for ServiceLog entities.
type ServiceLogGroupBy struct {
	selector
	build *ServiceLogQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (slgb *ServiceLogGroupBy) Aggregate(fns ...AggregateFunc) *ServiceLogGroupBy {
	slgb.fns = append(slgb.fns, fns...)
	return slgb
}

// Scan applies the selector query and scans the result into the given value.
func (slgb *ServiceLogGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, slgb.build.ctx, ent.OpQueryGroupBy)
	if err := slgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ServiceLogQuery, *ServiceLogGroupBy](ctx, slgb.build, slgb, slgb.build.inters, v)
}

func (slgb *ServiceLogGroupBy) sqlScan(ctx context.Context, root *ServiceLogQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(slgb.fns))
	for _, fn := range slgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*slgb.flds)+len(slgb.fns))
		for _, f := range *slgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*slgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := slgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ServiceLogSelect is the builder for selecting fields of ServiceLog entities.
type ServiceLogSelect struct {
	*ServiceLogQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sls *ServiceLogSelect) Aggregate(fns ...AggregateFunc) *ServiceLogSelect {
	sls.fns = append(sls.fns, fns...)
	return sls
}

// Scan applies the selector query and scans the result into the given value.
func (sls *ServiceLogSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sls.ctx, ent.OpQuerySelect)
	if err := sls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ServiceLogQuery, *ServiceLogSelect](ctx, sls.ServiceLogQuery, sls, sls.inters, v)
}

func (sls *ServiceLogSelect) sqlScan(ctx context.Context, root *ServiceLogQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sls.fns))
	for _, fn := range sls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
