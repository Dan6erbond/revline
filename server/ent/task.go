// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/task"
	"github.com/google/uuid"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Status holds the value of the "status" field.
	Status task.Status `json:"status,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Rank holds the value of the "rank" field.
	Rank float64 `json:"rank,omitempty"`
	// Estimate holds the value of the "estimate" field.
	Estimate *float64 `json:"estimate,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority *task.Priority `json:"priority,omitempty"`
	// Effort holds the value of the "effort" field.
	Effort *task.Effort `json:"effort,omitempty"`
	// Difficulty holds the value of the "difficulty" field.
	Difficulty *task.Difficulty `json:"difficulty,omitempty"`
	// Category holds the value of the "category" field.
	Category *task.Category `json:"category,omitempty"`
	// Budget holds the value of the "budget" field.
	Budget *float64 `json:"budget,omitempty"`
	// PartsNeeded holds the value of the "parts_needed" field.
	PartsNeeded *string `json:"parts_needed,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskQuery when eager-loading is set.
	Edges         TaskEdges `json:"edges"`
	car_tasks     *uuid.UUID
	task_subtasks *uuid.UUID
	selectValues  sql.SelectValues
}

// TaskEdges holds the relations/edges for other nodes in the graph.
type TaskEdges struct {
	// Car holds the value of the car edge.
	Car *Car `json:"car,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *Task `json:"parent,omitempty"`
	// Subtasks holds the value of the subtasks edge.
	Subtasks []*Task `json:"subtasks,omitempty"`
	// Mods holds the value of the mods edge.
	Mods []*Mod `json:"mods,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedSubtasks map[string][]*Task
	namedMods     map[string][]*Mod
}

// CarOrErr returns the Car value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) CarOrErr() (*Car, error) {
	if e.Car != nil {
		return e.Car, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: car.Label}
	}
	return nil, &NotLoadedError{edge: "car"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) ParentOrErr() (*Task, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: task.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// SubtasksOrErr returns the Subtasks value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) SubtasksOrErr() ([]*Task, error) {
	if e.loadedTypes[2] {
		return e.Subtasks, nil
	}
	return nil, &NotLoadedError{edge: "subtasks"}
}

// ModsOrErr returns the Mods value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) ModsOrErr() ([]*Mod, error) {
	if e.loadedTypes[3] {
		return e.Mods, nil
	}
	return nil, &NotLoadedError{edge: "mods"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Task) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case task.FieldRank, task.FieldEstimate, task.FieldBudget:
			values[i] = new(sql.NullFloat64)
		case task.FieldStatus, task.FieldTitle, task.FieldDescription, task.FieldPriority, task.FieldEffort, task.FieldDifficulty, task.FieldCategory, task.FieldPartsNeeded:
			values[i] = new(sql.NullString)
		case task.FieldCreateTime, task.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case task.FieldID:
			values[i] = new(uuid.UUID)
		case task.ForeignKeys[0]: // car_tasks
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case task.ForeignKeys[1]: // task_subtasks
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Task fields.
func (t *Task) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case task.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case task.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				t.CreateTime = value.Time
			}
		case task.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				t.UpdateTime = value.Time
			}
		case task.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = task.Status(value.String)
			}
		case task.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				t.Title = value.String
			}
		case task.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = new(string)
				*t.Description = value.String
			}
		case task.FieldRank:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field rank", values[i])
			} else if value.Valid {
				t.Rank = value.Float64
			}
		case task.FieldEstimate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field estimate", values[i])
			} else if value.Valid {
				t.Estimate = new(float64)
				*t.Estimate = value.Float64
			}
		case task.FieldPriority:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				t.Priority = new(task.Priority)
				*t.Priority = task.Priority(value.String)
			}
		case task.FieldEffort:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field effort", values[i])
			} else if value.Valid {
				t.Effort = new(task.Effort)
				*t.Effort = task.Effort(value.String)
			}
		case task.FieldDifficulty:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field difficulty", values[i])
			} else if value.Valid {
				t.Difficulty = new(task.Difficulty)
				*t.Difficulty = task.Difficulty(value.String)
			}
		case task.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				t.Category = new(task.Category)
				*t.Category = task.Category(value.String)
			}
		case task.FieldBudget:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field budget", values[i])
			} else if value.Valid {
				t.Budget = new(float64)
				*t.Budget = value.Float64
			}
		case task.FieldPartsNeeded:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parts_needed", values[i])
			} else if value.Valid {
				t.PartsNeeded = new(string)
				*t.PartsNeeded = value.String
			}
		case task.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field car_tasks", values[i])
			} else if value.Valid {
				t.car_tasks = new(uuid.UUID)
				*t.car_tasks = *value.S.(*uuid.UUID)
			}
		case task.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field task_subtasks", values[i])
			} else if value.Valid {
				t.task_subtasks = new(uuid.UUID)
				*t.task_subtasks = *value.S.(*uuid.UUID)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Task.
// This includes values selected through modifiers, order, etc.
func (t *Task) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryCar queries the "car" edge of the Task entity.
func (t *Task) QueryCar() *CarQuery {
	return NewTaskClient(t.config).QueryCar(t)
}

// QueryParent queries the "parent" edge of the Task entity.
func (t *Task) QueryParent() *TaskQuery {
	return NewTaskClient(t.config).QueryParent(t)
}

// QuerySubtasks queries the "subtasks" edge of the Task entity.
func (t *Task) QuerySubtasks() *TaskQuery {
	return NewTaskClient(t.config).QuerySubtasks(t)
}

// QueryMods queries the "mods" edge of the Task entity.
func (t *Task) QueryMods() *ModQuery {
	return NewTaskClient(t.config).QueryMods(t)
}

// Update returns a builder for updating this Task.
// Note that you need to call Task.Unwrap() before calling this method if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Task) Update() *TaskUpdateOne {
	return NewTaskClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Task entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Task) Unwrap() *Task {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Task is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("create_time=")
	builder.WriteString(t.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(t.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(t.Title)
	builder.WriteString(", ")
	if v := t.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("rank=")
	builder.WriteString(fmt.Sprintf("%v", t.Rank))
	builder.WriteString(", ")
	if v := t.Estimate; v != nil {
		builder.WriteString("estimate=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := t.Priority; v != nil {
		builder.WriteString("priority=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := t.Effort; v != nil {
		builder.WriteString("effort=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := t.Difficulty; v != nil {
		builder.WriteString("difficulty=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := t.Category; v != nil {
		builder.WriteString("category=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := t.Budget; v != nil {
		builder.WriteString("budget=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := t.PartsNeeded; v != nil {
		builder.WriteString("parts_needed=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedSubtasks returns the Subtasks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Task) NamedSubtasks(name string) ([]*Task, error) {
	if t.Edges.namedSubtasks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedSubtasks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Task) appendNamedSubtasks(name string, edges ...*Task) {
	if t.Edges.namedSubtasks == nil {
		t.Edges.namedSubtasks = make(map[string][]*Task)
	}
	if len(edges) == 0 {
		t.Edges.namedSubtasks[name] = []*Task{}
	} else {
		t.Edges.namedSubtasks[name] = append(t.Edges.namedSubtasks[name], edges...)
	}
}

// NamedMods returns the Mods named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Task) NamedMods(name string) ([]*Mod, error) {
	if t.Edges.namedMods == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedMods[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Task) appendNamedMods(name string, edges ...*Mod) {
	if t.Edges.namedMods == nil {
		t.Edges.namedMods = make(map[string][]*Mod)
	}
	if len(edges) == 0 {
		t.Edges.namedMods[name] = []*Mod{}
	} else {
		t.Edges.namedMods[name] = append(t.Edges.namedMods[name], edges...)
	}
}

// Tasks is a parsable slice of Task.
type Tasks []*Task
