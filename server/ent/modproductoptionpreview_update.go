// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/modproductoption"
	"github.com/Dan6erbond/revline/ent/modproductoptionpreview"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/google/uuid"
)

// ModProductOptionPreviewUpdate is the builder for updating ModProductOptionPreview entities.
type ModProductOptionPreviewUpdate struct {
	config
	hooks    []Hook
	mutation *ModProductOptionPreviewMutation
}

// Where appends a list predicates to the ModProductOptionPreviewUpdate builder.
func (mpopu *ModProductOptionPreviewUpdate) Where(ps ...predicate.ModProductOptionPreview) *ModProductOptionPreviewUpdate {
	mpopu.mutation.Where(ps...)
	return mpopu
}

// SetUpdateTime sets the "update_time" field.
func (mpopu *ModProductOptionPreviewUpdate) SetUpdateTime(t time.Time) *ModProductOptionPreviewUpdate {
	mpopu.mutation.SetUpdateTime(t)
	return mpopu
}

// SetStatus sets the "status" field.
func (mpopu *ModProductOptionPreviewUpdate) SetStatus(m modproductoptionpreview.Status) *ModProductOptionPreviewUpdate {
	mpopu.mutation.SetStatus(m)
	return mpopu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mpopu *ModProductOptionPreviewUpdate) SetNillableStatus(m *modproductoptionpreview.Status) *ModProductOptionPreviewUpdate {
	if m != nil {
		mpopu.SetStatus(*m)
	}
	return mpopu
}

// SetProductOptionID sets the "product_option" edge to the ModProductOption entity by ID.
func (mpopu *ModProductOptionPreviewUpdate) SetProductOptionID(id uuid.UUID) *ModProductOptionPreviewUpdate {
	mpopu.mutation.SetProductOptionID(id)
	return mpopu
}

// SetProductOption sets the "product_option" edge to the ModProductOption entity.
func (mpopu *ModProductOptionPreviewUpdate) SetProductOption(m *ModProductOption) *ModProductOptionPreviewUpdate {
	return mpopu.SetProductOptionID(m.ID)
}

// Mutation returns the ModProductOptionPreviewMutation object of the builder.
func (mpopu *ModProductOptionPreviewUpdate) Mutation() *ModProductOptionPreviewMutation {
	return mpopu.mutation
}

// ClearProductOption clears the "product_option" edge to the ModProductOption entity.
func (mpopu *ModProductOptionPreviewUpdate) ClearProductOption() *ModProductOptionPreviewUpdate {
	mpopu.mutation.ClearProductOption()
	return mpopu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mpopu *ModProductOptionPreviewUpdate) Save(ctx context.Context) (int, error) {
	mpopu.defaults()
	return withHooks(ctx, mpopu.sqlSave, mpopu.mutation, mpopu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpopu *ModProductOptionPreviewUpdate) SaveX(ctx context.Context) int {
	affected, err := mpopu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mpopu *ModProductOptionPreviewUpdate) Exec(ctx context.Context) error {
	_, err := mpopu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpopu *ModProductOptionPreviewUpdate) ExecX(ctx context.Context) {
	if err := mpopu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpopu *ModProductOptionPreviewUpdate) defaults() {
	if _, ok := mpopu.mutation.UpdateTime(); !ok {
		v := modproductoptionpreview.UpdateDefaultUpdateTime()
		mpopu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpopu *ModProductOptionPreviewUpdate) check() error {
	if v, ok := mpopu.mutation.Status(); ok {
		if err := modproductoptionpreview.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ModProductOptionPreview.status": %w`, err)}
		}
	}
	if mpopu.mutation.ProductOptionCleared() && len(mpopu.mutation.ProductOptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ModProductOptionPreview.product_option"`)
	}
	return nil
}

func (mpopu *ModProductOptionPreviewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mpopu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(modproductoptionpreview.Table, modproductoptionpreview.Columns, sqlgraph.NewFieldSpec(modproductoptionpreview.FieldID, field.TypeUUID))
	if ps := mpopu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpopu.mutation.UpdateTime(); ok {
		_spec.SetField(modproductoptionpreview.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := mpopu.mutation.Status(); ok {
		_spec.SetField(modproductoptionpreview.FieldStatus, field.TypeEnum, value)
	}
	if mpopu.mutation.ProductOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modproductoptionpreview.ProductOptionTable,
			Columns: []string{modproductoptionpreview.ProductOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modproductoption.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpopu.mutation.ProductOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modproductoptionpreview.ProductOptionTable,
			Columns: []string{modproductoptionpreview.ProductOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modproductoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mpopu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{modproductoptionpreview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mpopu.mutation.done = true
	return n, nil
}

// ModProductOptionPreviewUpdateOne is the builder for updating a single ModProductOptionPreview entity.
type ModProductOptionPreviewUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ModProductOptionPreviewMutation
}

// SetUpdateTime sets the "update_time" field.
func (mpopuo *ModProductOptionPreviewUpdateOne) SetUpdateTime(t time.Time) *ModProductOptionPreviewUpdateOne {
	mpopuo.mutation.SetUpdateTime(t)
	return mpopuo
}

// SetStatus sets the "status" field.
func (mpopuo *ModProductOptionPreviewUpdateOne) SetStatus(m modproductoptionpreview.Status) *ModProductOptionPreviewUpdateOne {
	mpopuo.mutation.SetStatus(m)
	return mpopuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mpopuo *ModProductOptionPreviewUpdateOne) SetNillableStatus(m *modproductoptionpreview.Status) *ModProductOptionPreviewUpdateOne {
	if m != nil {
		mpopuo.SetStatus(*m)
	}
	return mpopuo
}

// SetProductOptionID sets the "product_option" edge to the ModProductOption entity by ID.
func (mpopuo *ModProductOptionPreviewUpdateOne) SetProductOptionID(id uuid.UUID) *ModProductOptionPreviewUpdateOne {
	mpopuo.mutation.SetProductOptionID(id)
	return mpopuo
}

// SetProductOption sets the "product_option" edge to the ModProductOption entity.
func (mpopuo *ModProductOptionPreviewUpdateOne) SetProductOption(m *ModProductOption) *ModProductOptionPreviewUpdateOne {
	return mpopuo.SetProductOptionID(m.ID)
}

// Mutation returns the ModProductOptionPreviewMutation object of the builder.
func (mpopuo *ModProductOptionPreviewUpdateOne) Mutation() *ModProductOptionPreviewMutation {
	return mpopuo.mutation
}

// ClearProductOption clears the "product_option" edge to the ModProductOption entity.
func (mpopuo *ModProductOptionPreviewUpdateOne) ClearProductOption() *ModProductOptionPreviewUpdateOne {
	mpopuo.mutation.ClearProductOption()
	return mpopuo
}

// Where appends a list predicates to the ModProductOptionPreviewUpdate builder.
func (mpopuo *ModProductOptionPreviewUpdateOne) Where(ps ...predicate.ModProductOptionPreview) *ModProductOptionPreviewUpdateOne {
	mpopuo.mutation.Where(ps...)
	return mpopuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mpopuo *ModProductOptionPreviewUpdateOne) Select(field string, fields ...string) *ModProductOptionPreviewUpdateOne {
	mpopuo.fields = append([]string{field}, fields...)
	return mpopuo
}

// Save executes the query and returns the updated ModProductOptionPreview entity.
func (mpopuo *ModProductOptionPreviewUpdateOne) Save(ctx context.Context) (*ModProductOptionPreview, error) {
	mpopuo.defaults()
	return withHooks(ctx, mpopuo.sqlSave, mpopuo.mutation, mpopuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpopuo *ModProductOptionPreviewUpdateOne) SaveX(ctx context.Context) *ModProductOptionPreview {
	node, err := mpopuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mpopuo *ModProductOptionPreviewUpdateOne) Exec(ctx context.Context) error {
	_, err := mpopuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpopuo *ModProductOptionPreviewUpdateOne) ExecX(ctx context.Context) {
	if err := mpopuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpopuo *ModProductOptionPreviewUpdateOne) defaults() {
	if _, ok := mpopuo.mutation.UpdateTime(); !ok {
		v := modproductoptionpreview.UpdateDefaultUpdateTime()
		mpopuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpopuo *ModProductOptionPreviewUpdateOne) check() error {
	if v, ok := mpopuo.mutation.Status(); ok {
		if err := modproductoptionpreview.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ModProductOptionPreview.status": %w`, err)}
		}
	}
	if mpopuo.mutation.ProductOptionCleared() && len(mpopuo.mutation.ProductOptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ModProductOptionPreview.product_option"`)
	}
	return nil
}

func (mpopuo *ModProductOptionPreviewUpdateOne) sqlSave(ctx context.Context) (_node *ModProductOptionPreview, err error) {
	if err := mpopuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(modproductoptionpreview.Table, modproductoptionpreview.Columns, sqlgraph.NewFieldSpec(modproductoptionpreview.FieldID, field.TypeUUID))
	id, ok := mpopuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ModProductOptionPreview.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mpopuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, modproductoptionpreview.FieldID)
		for _, f := range fields {
			if !modproductoptionpreview.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != modproductoptionpreview.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mpopuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpopuo.mutation.UpdateTime(); ok {
		_spec.SetField(modproductoptionpreview.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := mpopuo.mutation.Status(); ok {
		_spec.SetField(modproductoptionpreview.FieldStatus, field.TypeEnum, value)
	}
	if mpopuo.mutation.ProductOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modproductoptionpreview.ProductOptionTable,
			Columns: []string{modproductoptionpreview.ProductOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modproductoption.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpopuo.mutation.ProductOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modproductoptionpreview.ProductOptionTable,
			Columns: []string{modproductoptionpreview.ProductOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modproductoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ModProductOptionPreview{config: mpopuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mpopuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{modproductoptionpreview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mpopuo.mutation.done = true
	return _node, nil
}
