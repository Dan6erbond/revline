// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/modproductoption"
	"github.com/Dan6erbond/revline/ent/modproductoptionpreview"
	"github.com/google/uuid"
)

// ModProductOptionPreviewCreate is the builder for creating a ModProductOptionPreview entity.
type ModProductOptionPreviewCreate struct {
	config
	mutation *ModProductOptionPreviewMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (mpopc *ModProductOptionPreviewCreate) SetCreateTime(t time.Time) *ModProductOptionPreviewCreate {
	mpopc.mutation.SetCreateTime(t)
	return mpopc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (mpopc *ModProductOptionPreviewCreate) SetNillableCreateTime(t *time.Time) *ModProductOptionPreviewCreate {
	if t != nil {
		mpopc.SetCreateTime(*t)
	}
	return mpopc
}

// SetUpdateTime sets the "update_time" field.
func (mpopc *ModProductOptionPreviewCreate) SetUpdateTime(t time.Time) *ModProductOptionPreviewCreate {
	mpopc.mutation.SetUpdateTime(t)
	return mpopc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (mpopc *ModProductOptionPreviewCreate) SetNillableUpdateTime(t *time.Time) *ModProductOptionPreviewCreate {
	if t != nil {
		mpopc.SetUpdateTime(*t)
	}
	return mpopc
}

// SetStatus sets the "status" field.
func (mpopc *ModProductOptionPreviewCreate) SetStatus(m modproductoptionpreview.Status) *ModProductOptionPreviewCreate {
	mpopc.mutation.SetStatus(m)
	return mpopc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mpopc *ModProductOptionPreviewCreate) SetNillableStatus(m *modproductoptionpreview.Status) *ModProductOptionPreviewCreate {
	if m != nil {
		mpopc.SetStatus(*m)
	}
	return mpopc
}

// SetID sets the "id" field.
func (mpopc *ModProductOptionPreviewCreate) SetID(u uuid.UUID) *ModProductOptionPreviewCreate {
	mpopc.mutation.SetID(u)
	return mpopc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mpopc *ModProductOptionPreviewCreate) SetNillableID(u *uuid.UUID) *ModProductOptionPreviewCreate {
	if u != nil {
		mpopc.SetID(*u)
	}
	return mpopc
}

// SetProductOptionID sets the "product_option" edge to the ModProductOption entity by ID.
func (mpopc *ModProductOptionPreviewCreate) SetProductOptionID(id uuid.UUID) *ModProductOptionPreviewCreate {
	mpopc.mutation.SetProductOptionID(id)
	return mpopc
}

// SetProductOption sets the "product_option" edge to the ModProductOption entity.
func (mpopc *ModProductOptionPreviewCreate) SetProductOption(m *ModProductOption) *ModProductOptionPreviewCreate {
	return mpopc.SetProductOptionID(m.ID)
}

// Mutation returns the ModProductOptionPreviewMutation object of the builder.
func (mpopc *ModProductOptionPreviewCreate) Mutation() *ModProductOptionPreviewMutation {
	return mpopc.mutation
}

// Save creates the ModProductOptionPreview in the database.
func (mpopc *ModProductOptionPreviewCreate) Save(ctx context.Context) (*ModProductOptionPreview, error) {
	mpopc.defaults()
	return withHooks(ctx, mpopc.sqlSave, mpopc.mutation, mpopc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mpopc *ModProductOptionPreviewCreate) SaveX(ctx context.Context) *ModProductOptionPreview {
	v, err := mpopc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpopc *ModProductOptionPreviewCreate) Exec(ctx context.Context) error {
	_, err := mpopc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpopc *ModProductOptionPreviewCreate) ExecX(ctx context.Context) {
	if err := mpopc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpopc *ModProductOptionPreviewCreate) defaults() {
	if _, ok := mpopc.mutation.CreateTime(); !ok {
		v := modproductoptionpreview.DefaultCreateTime()
		mpopc.mutation.SetCreateTime(v)
	}
	if _, ok := mpopc.mutation.UpdateTime(); !ok {
		v := modproductoptionpreview.DefaultUpdateTime()
		mpopc.mutation.SetUpdateTime(v)
	}
	if _, ok := mpopc.mutation.Status(); !ok {
		v := modproductoptionpreview.DefaultStatus
		mpopc.mutation.SetStatus(v)
	}
	if _, ok := mpopc.mutation.ID(); !ok {
		v := modproductoptionpreview.DefaultID()
		mpopc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpopc *ModProductOptionPreviewCreate) check() error {
	if _, ok := mpopc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "ModProductOptionPreview.create_time"`)}
	}
	if _, ok := mpopc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "ModProductOptionPreview.update_time"`)}
	}
	if _, ok := mpopc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ModProductOptionPreview.status"`)}
	}
	if v, ok := mpopc.mutation.Status(); ok {
		if err := modproductoptionpreview.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ModProductOptionPreview.status": %w`, err)}
		}
	}
	if len(mpopc.mutation.ProductOptionIDs()) == 0 {
		return &ValidationError{Name: "product_option", err: errors.New(`ent: missing required edge "ModProductOptionPreview.product_option"`)}
	}
	return nil
}

func (mpopc *ModProductOptionPreviewCreate) sqlSave(ctx context.Context) (*ModProductOptionPreview, error) {
	if err := mpopc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mpopc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mpopc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mpopc.mutation.id = &_node.ID
	mpopc.mutation.done = true
	return _node, nil
}

func (mpopc *ModProductOptionPreviewCreate) createSpec() (*ModProductOptionPreview, *sqlgraph.CreateSpec) {
	var (
		_node = &ModProductOptionPreview{config: mpopc.config}
		_spec = sqlgraph.NewCreateSpec(modproductoptionpreview.Table, sqlgraph.NewFieldSpec(modproductoptionpreview.FieldID, field.TypeUUID))
	)
	if id, ok := mpopc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mpopc.mutation.CreateTime(); ok {
		_spec.SetField(modproductoptionpreview.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := mpopc.mutation.UpdateTime(); ok {
		_spec.SetField(modproductoptionpreview.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := mpopc.mutation.Status(); ok {
		_spec.SetField(modproductoptionpreview.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := mpopc.mutation.ProductOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modproductoptionpreview.ProductOptionTable,
			Columns: []string{modproductoptionpreview.ProductOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modproductoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.mod_product_option_previews = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ModProductOptionPreviewCreateBulk is the builder for creating many ModProductOptionPreview entities in bulk.
type ModProductOptionPreviewCreateBulk struct {
	config
	err      error
	builders []*ModProductOptionPreviewCreate
}

// Save creates the ModProductOptionPreview entities in the database.
func (mpopcb *ModProductOptionPreviewCreateBulk) Save(ctx context.Context) ([]*ModProductOptionPreview, error) {
	if mpopcb.err != nil {
		return nil, mpopcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mpopcb.builders))
	nodes := make([]*ModProductOptionPreview, len(mpopcb.builders))
	mutators := make([]Mutator, len(mpopcb.builders))
	for i := range mpopcb.builders {
		func(i int, root context.Context) {
			builder := mpopcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ModProductOptionPreviewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mpopcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mpopcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mpopcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mpopcb *ModProductOptionPreviewCreateBulk) SaveX(ctx context.Context) []*ModProductOptionPreview {
	v, err := mpopcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpopcb *ModProductOptionPreviewCreateBulk) Exec(ctx context.Context) error {
	_, err := mpopcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpopcb *ModProductOptionPreviewCreateBulk) ExecX(ctx context.Context) {
	if err := mpopcb.Exec(ctx); err != nil {
		panic(err)
	}
}
