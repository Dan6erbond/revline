// Code generated by ent, DO NOT EDIT.

package modproductoptionpreview

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the modproductoptionpreview type in the database.
	Label = "mod_product_option_preview"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeProductOption holds the string denoting the product_option edge name in mutations.
	EdgeProductOption = "product_option"
	// Table holds the table name of the modproductoptionpreview in the database.
	Table = "mod_product_option_previews"
	// ProductOptionTable is the table that holds the product_option relation/edge.
	ProductOptionTable = "mod_product_option_previews"
	// ProductOptionInverseTable is the table name for the ModProductOption entity.
	// It exists in this package in order to avoid circular dependency with the "modproductoption" package.
	ProductOptionInverseTable = "mod_product_options"
	// ProductOptionColumn is the table column denoting the product_option relation/edge.
	ProductOptionColumn = "mod_product_option_previews"
)

// Columns holds all SQL columns for modproductoptionpreview fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "mod_product_option_previews"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"mod_product_option_previews",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// StatusGenerating is the default value of the Status enum.
const DefaultStatus = StatusGenerating

// Status values.
const (
	StatusGenerating Status = "generating"
	StatusCompleted  Status = "completed"
	StatusFailed     Status = "failed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusGenerating, StatusCompleted, StatusFailed:
		return nil
	default:
		return fmt.Errorf("modproductoptionpreview: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the ModProductOptionPreview queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByProductOptionField orders the results by product_option field.
func ByProductOptionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProductOptionStep(), sql.OrderByField(field, opts...))
	}
}
func newProductOptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProductOptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProductOptionTable, ProductOptionColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
