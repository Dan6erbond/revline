// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Dan6erbond/revline/ent/profile"
	"github.com/Dan6erbond/revline/ent/user"
	"github.com/google/uuid"
)

// Profile is the model entity for the Profile schema.
type Profile struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Username holds the value of the "username" field.
	Username *string `json:"username,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName *string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName *string `json:"last_name,omitempty"`
	// Picture holds the value of the "picture" field.
	Picture *uuid.UUID `json:"picture,omitempty"`
	// CurrencyCode holds the value of the "currency_code" field.
	CurrencyCode *string `json:"currency_code,omitempty"`
	// FuelVolumeUnit holds the value of the "fuel_volume_unit" field.
	FuelVolumeUnit *profile.FuelVolumeUnit `json:"fuel_volume_unit,omitempty"`
	// DistanceUnit holds the value of the "distance_unit" field.
	DistanceUnit *profile.DistanceUnit `json:"distance_unit,omitempty"`
	// FuelConsumptionUnit holds the value of the "fuel_consumption_unit" field.
	FuelConsumptionUnit *profile.FuelConsumptionUnit `json:"fuel_consumption_unit,omitempty"`
	// TemperatureUnit holds the value of the "temperature_unit" field.
	TemperatureUnit *profile.TemperatureUnit `json:"temperature_unit,omitempty"`
	// Visibility holds the value of the "visibility" field.
	Visibility profile.Visibility `json:"visibility,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProfileQuery when eager-loading is set.
	Edges        ProfileEdges `json:"edges"`
	user_profile *uuid.UUID
	selectValues sql.SelectValues
}

// ProfileEdges holds the relations/edges for other nodes in the graph.
type ProfileEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfileEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Profile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case profile.FieldPicture:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case profile.FieldUsername, profile.FieldFirstName, profile.FieldLastName, profile.FieldCurrencyCode, profile.FieldFuelVolumeUnit, profile.FieldDistanceUnit, profile.FieldFuelConsumptionUnit, profile.FieldTemperatureUnit, profile.FieldVisibility:
			values[i] = new(sql.NullString)
		case profile.FieldCreateTime, profile.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case profile.FieldID:
			values[i] = new(uuid.UUID)
		case profile.ForeignKeys[0]: // user_profile
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Profile fields.
func (pr *Profile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case profile.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pr.ID = *value
			}
		case profile.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pr.CreateTime = value.Time
			}
		case profile.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pr.UpdateTime = value.Time
			}
		case profile.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				pr.Username = new(string)
				*pr.Username = value.String
			}
		case profile.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				pr.FirstName = new(string)
				*pr.FirstName = value.String
			}
		case profile.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				pr.LastName = new(string)
				*pr.LastName = value.String
			}
		case profile.FieldPicture:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field picture", values[i])
			} else if value.Valid {
				pr.Picture = new(uuid.UUID)
				*pr.Picture = *value.S.(*uuid.UUID)
			}
		case profile.FieldCurrencyCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency_code", values[i])
			} else if value.Valid {
				pr.CurrencyCode = new(string)
				*pr.CurrencyCode = value.String
			}
		case profile.FieldFuelVolumeUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fuel_volume_unit", values[i])
			} else if value.Valid {
				pr.FuelVolumeUnit = new(profile.FuelVolumeUnit)
				*pr.FuelVolumeUnit = profile.FuelVolumeUnit(value.String)
			}
		case profile.FieldDistanceUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field distance_unit", values[i])
			} else if value.Valid {
				pr.DistanceUnit = new(profile.DistanceUnit)
				*pr.DistanceUnit = profile.DistanceUnit(value.String)
			}
		case profile.FieldFuelConsumptionUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fuel_consumption_unit", values[i])
			} else if value.Valid {
				pr.FuelConsumptionUnit = new(profile.FuelConsumptionUnit)
				*pr.FuelConsumptionUnit = profile.FuelConsumptionUnit(value.String)
			}
		case profile.FieldTemperatureUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field temperature_unit", values[i])
			} else if value.Valid {
				pr.TemperatureUnit = new(profile.TemperatureUnit)
				*pr.TemperatureUnit = profile.TemperatureUnit(value.String)
			}
		case profile.FieldVisibility:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field visibility", values[i])
			} else if value.Valid {
				pr.Visibility = profile.Visibility(value.String)
			}
		case profile.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_profile", values[i])
			} else if value.Valid {
				pr.user_profile = new(uuid.UUID)
				*pr.user_profile = *value.S.(*uuid.UUID)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Profile.
// This includes values selected through modifiers, order, etc.
func (pr *Profile) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Profile entity.
func (pr *Profile) QueryUser() *UserQuery {
	return NewProfileClient(pr.config).QueryUser(pr)
}

// Update returns a builder for updating this Profile.
// Note that you need to call Profile.Unwrap() before calling this method if this Profile
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Profile) Update() *ProfileUpdateOne {
	return NewProfileClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Profile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Profile) Unwrap() *Profile {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Profile is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Profile) String() string {
	var builder strings.Builder
	builder.WriteString("Profile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("create_time=")
	builder.WriteString(pr.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(pr.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := pr.Username; v != nil {
		builder.WriteString("username=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pr.FirstName; v != nil {
		builder.WriteString("first_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pr.LastName; v != nil {
		builder.WriteString("last_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pr.Picture; v != nil {
		builder.WriteString("picture=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.CurrencyCode; v != nil {
		builder.WriteString("currency_code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pr.FuelVolumeUnit; v != nil {
		builder.WriteString("fuel_volume_unit=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.DistanceUnit; v != nil {
		builder.WriteString("distance_unit=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.FuelConsumptionUnit; v != nil {
		builder.WriteString("fuel_consumption_unit=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := pr.TemperatureUnit; v != nil {
		builder.WriteString("temperature_unit=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("visibility=")
	builder.WriteString(fmt.Sprintf("%v", pr.Visibility))
	builder.WriteByte(')')
	return builder.String()
}

// Profiles is a parsable slice of Profile.
type Profiles []*Profile
