// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/checkoutsession"
	"github.com/Dan6erbond/revline/ent/subscription"
	"github.com/Dan6erbond/revline/ent/user"
	"github.com/google/uuid"
)

// SubscriptionCreate is the builder for creating a Subscription entity.
type SubscriptionCreate struct {
	config
	mutation *SubscriptionMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (sc *SubscriptionCreate) SetCreateTime(t time.Time) *SubscriptionCreate {
	sc.mutation.SetCreateTime(t)
	return sc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableCreateTime(t *time.Time) *SubscriptionCreate {
	if t != nil {
		sc.SetCreateTime(*t)
	}
	return sc
}

// SetUpdateTime sets the "update_time" field.
func (sc *SubscriptionCreate) SetUpdateTime(t time.Time) *SubscriptionCreate {
	sc.mutation.SetUpdateTime(t)
	return sc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableUpdateTime(t *time.Time) *SubscriptionCreate {
	if t != nil {
		sc.SetUpdateTime(*t)
	}
	return sc
}

// SetStripeSubscriptionID sets the "stripe_subscription_id" field.
func (sc *SubscriptionCreate) SetStripeSubscriptionID(s string) *SubscriptionCreate {
	sc.mutation.SetStripeSubscriptionID(s)
	return sc
}

// SetNillableStripeSubscriptionID sets the "stripe_subscription_id" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableStripeSubscriptionID(s *string) *SubscriptionCreate {
	if s != nil {
		sc.SetStripeSubscriptionID(*s)
	}
	return sc
}

// SetTier sets the "tier" field.
func (sc *SubscriptionCreate) SetTier(s subscription.Tier) *SubscriptionCreate {
	sc.mutation.SetTier(s)
	return sc
}

// SetStatus sets the "status" field.
func (sc *SubscriptionCreate) SetStatus(s subscription.Status) *SubscriptionCreate {
	sc.mutation.SetStatus(s)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableStatus(s *subscription.Status) *SubscriptionCreate {
	if s != nil {
		sc.SetStatus(*s)
	}
	return sc
}

// SetCanceledAt sets the "canceled_at" field.
func (sc *SubscriptionCreate) SetCanceledAt(t time.Time) *SubscriptionCreate {
	sc.mutation.SetCanceledAt(t)
	return sc
}

// SetNillableCanceledAt sets the "canceled_at" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableCanceledAt(t *time.Time) *SubscriptionCreate {
	if t != nil {
		sc.SetCanceledAt(*t)
	}
	return sc
}

// SetCancelAtPeriodEnd sets the "cancel_at_period_end" field.
func (sc *SubscriptionCreate) SetCancelAtPeriodEnd(b bool) *SubscriptionCreate {
	sc.mutation.SetCancelAtPeriodEnd(b)
	return sc
}

// SetNillableCancelAtPeriodEnd sets the "cancel_at_period_end" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableCancelAtPeriodEnd(b *bool) *SubscriptionCreate {
	if b != nil {
		sc.SetCancelAtPeriodEnd(*b)
	}
	return sc
}

// SetTrialEnd sets the "trial_end" field.
func (sc *SubscriptionCreate) SetTrialEnd(t time.Time) *SubscriptionCreate {
	sc.mutation.SetTrialEnd(t)
	return sc
}

// SetNillableTrialEnd sets the "trial_end" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableTrialEnd(t *time.Time) *SubscriptionCreate {
	if t != nil {
		sc.SetTrialEnd(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SubscriptionCreate) SetID(u uuid.UUID) *SubscriptionCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableID(u *uuid.UUID) *SubscriptionCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (sc *SubscriptionCreate) SetUserID(id uuid.UUID) *SubscriptionCreate {
	sc.mutation.SetUserID(id)
	return sc
}

// SetUser sets the "user" edge to the User entity.
func (sc *SubscriptionCreate) SetUser(u *User) *SubscriptionCreate {
	return sc.SetUserID(u.ID)
}

// SetCheckoutSessionID sets the "checkout_session" edge to the CheckoutSession entity by ID.
func (sc *SubscriptionCreate) SetCheckoutSessionID(id uuid.UUID) *SubscriptionCreate {
	sc.mutation.SetCheckoutSessionID(id)
	return sc
}

// SetNillableCheckoutSessionID sets the "checkout_session" edge to the CheckoutSession entity by ID if the given value is not nil.
func (sc *SubscriptionCreate) SetNillableCheckoutSessionID(id *uuid.UUID) *SubscriptionCreate {
	if id != nil {
		sc = sc.SetCheckoutSessionID(*id)
	}
	return sc
}

// SetCheckoutSession sets the "checkout_session" edge to the CheckoutSession entity.
func (sc *SubscriptionCreate) SetCheckoutSession(c *CheckoutSession) *SubscriptionCreate {
	return sc.SetCheckoutSessionID(c.ID)
}

// Mutation returns the SubscriptionMutation object of the builder.
func (sc *SubscriptionCreate) Mutation() *SubscriptionMutation {
	return sc.mutation
}

// Save creates the Subscription in the database.
func (sc *SubscriptionCreate) Save(ctx context.Context) (*Subscription, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SubscriptionCreate) SaveX(ctx context.Context) *Subscription {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SubscriptionCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SubscriptionCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SubscriptionCreate) defaults() {
	if _, ok := sc.mutation.CreateTime(); !ok {
		v := subscription.DefaultCreateTime()
		sc.mutation.SetCreateTime(v)
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		v := subscription.DefaultUpdateTime()
		sc.mutation.SetUpdateTime(v)
	}
	if _, ok := sc.mutation.Status(); !ok {
		v := subscription.DefaultStatus
		sc.mutation.SetStatus(v)
	}
	if _, ok := sc.mutation.CancelAtPeriodEnd(); !ok {
		v := subscription.DefaultCancelAtPeriodEnd
		sc.mutation.SetCancelAtPeriodEnd(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := subscription.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SubscriptionCreate) check() error {
	if _, ok := sc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Subscription.create_time"`)}
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Subscription.update_time"`)}
	}
	if _, ok := sc.mutation.Tier(); !ok {
		return &ValidationError{Name: "tier", err: errors.New(`ent: missing required field "Subscription.tier"`)}
	}
	if v, ok := sc.mutation.Tier(); ok {
		if err := subscription.TierValidator(v); err != nil {
			return &ValidationError{Name: "tier", err: fmt.Errorf(`ent: validator failed for field "Subscription.tier": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Subscription.status"`)}
	}
	if v, ok := sc.mutation.Status(); ok {
		if err := subscription.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Subscription.status": %w`, err)}
		}
	}
	if _, ok := sc.mutation.CancelAtPeriodEnd(); !ok {
		return &ValidationError{Name: "cancel_at_period_end", err: errors.New(`ent: missing required field "Subscription.cancel_at_period_end"`)}
	}
	if len(sc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Subscription.user"`)}
	}
	return nil
}

func (sc *SubscriptionCreate) sqlSave(ctx context.Context) (*Subscription, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SubscriptionCreate) createSpec() (*Subscription, *sqlgraph.CreateSpec) {
	var (
		_node = &Subscription{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(subscription.Table, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.CreateTime(); ok {
		_spec.SetField(subscription.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := sc.mutation.UpdateTime(); ok {
		_spec.SetField(subscription.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := sc.mutation.StripeSubscriptionID(); ok {
		_spec.SetField(subscription.FieldStripeSubscriptionID, field.TypeString, value)
		_node.StripeSubscriptionID = &value
	}
	if value, ok := sc.mutation.Tier(); ok {
		_spec.SetField(subscription.FieldTier, field.TypeEnum, value)
		_node.Tier = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(subscription.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := sc.mutation.CanceledAt(); ok {
		_spec.SetField(subscription.FieldCanceledAt, field.TypeTime, value)
		_node.CanceledAt = &value
	}
	if value, ok := sc.mutation.CancelAtPeriodEnd(); ok {
		_spec.SetField(subscription.FieldCancelAtPeriodEnd, field.TypeBool, value)
		_node.CancelAtPeriodEnd = value
	}
	if value, ok := sc.mutation.TrialEnd(); ok {
		_spec.SetField(subscription.FieldTrialEnd, field.TypeTime, value)
		_node.TrialEnd = &value
	}
	if nodes := sc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.UserTable,
			Columns: []string{subscription.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_subscriptions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.CheckoutSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subscription.CheckoutSessionTable,
			Columns: []string{subscription.CheckoutSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(checkoutsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.checkout_session_subscription = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SubscriptionCreateBulk is the builder for creating many Subscription entities in bulk.
type SubscriptionCreateBulk struct {
	config
	err      error
	builders []*SubscriptionCreate
}

// Save creates the Subscription entities in the database.
func (scb *SubscriptionCreateBulk) Save(ctx context.Context) ([]*Subscription, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Subscription, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SubscriptionCreateBulk) SaveX(ctx context.Context) []*Subscription {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SubscriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SubscriptionCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
