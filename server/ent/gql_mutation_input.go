// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/Dan6erbond/revline/ent/dragresult"
	"github.com/Dan6erbond/revline/ent/expense"
	"github.com/Dan6erbond/revline/ent/fuelup"
	"github.com/Dan6erbond/revline/ent/profile"
	"github.com/Dan6erbond/revline/ent/task"
	"github.com/google/uuid"
)

// CreateAlbumInput represents a mutation input for creating albums.
type CreateAlbumInput struct {
	CreateTime *time.Time
	UpdateTime *time.Time
	Title      string
	CarID      uuid.UUID
	MediumIDs  []uuid.UUID
}

// Mutate applies the CreateAlbumInput on the AlbumMutation builder.
func (i *CreateAlbumInput) Mutate(m *AlbumMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetTitle(i.Title)
	m.SetCarID(i.CarID)
	if v := i.MediumIDs; len(v) > 0 {
		m.AddMediumIDs(v...)
	}
}

// SetInput applies the change-set in the CreateAlbumInput on the AlbumCreate builder.
func (c *AlbumCreate) SetInput(i CreateAlbumInput) *AlbumCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAlbumInput represents a mutation input for updating albums.
type UpdateAlbumInput struct {
	UpdateTime      *time.Time
	Title           *string
	CarID           *uuid.UUID
	ClearMedia      bool
	AddMediumIDs    []uuid.UUID
	RemoveMediumIDs []uuid.UUID
}

// Mutate applies the UpdateAlbumInput on the AlbumMutation builder.
func (i *UpdateAlbumInput) Mutate(m *AlbumMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.CarID; v != nil {
		m.SetCarID(*v)
	}
	if i.ClearMedia {
		m.ClearMedia()
	}
	if v := i.AddMediumIDs; len(v) > 0 {
		m.AddMediumIDs(v...)
	}
	if v := i.RemoveMediumIDs; len(v) > 0 {
		m.RemoveMediumIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateAlbumInput on the AlbumUpdate builder.
func (c *AlbumUpdate) SetInput(i UpdateAlbumInput) *AlbumUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAlbumInput on the AlbumUpdateOne builder.
func (c *AlbumUpdateOne) SetInput(i UpdateAlbumInput) *AlbumUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCarInput represents a mutation input for creating cars.
type CreateCarInput struct {
	CreateTime         *time.Time
	UpdateTime         *time.Time
	Name               string
	Make               *string
	Model              *string
	Type               *string
	Year               *int
	Trim               *string
	OwnerID            *uuid.UUID
	DragSessionIDs     []uuid.UUID
	FuelUpIDs          []uuid.UUID
	OdometerReadingIDs []uuid.UUID
	ServiceItemIDs     []uuid.UUID
	ServiceLogIDs      []uuid.UUID
	ServiceScheduleIDs []uuid.UUID
	MediumIDs          []uuid.UUID
	AlbumIDs           []uuid.UUID
	DocumentIDs        []uuid.UUID
	DynoSessionIDs     []uuid.UUID
	ExpenseIDs         []uuid.UUID
	BannerImageID      *uuid.UUID
	TaskIDs            []uuid.UUID
}

// Mutate applies the CreateCarInput on the CarMutation builder.
func (i *CreateCarInput) Mutate(m *CarMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetName(i.Name)
	if v := i.Make; v != nil {
		m.SetMake(*v)
	}
	if v := i.Model; v != nil {
		m.SetModel(*v)
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if v := i.Year; v != nil {
		m.SetYear(*v)
	}
	if v := i.Trim; v != nil {
		m.SetTrim(*v)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if v := i.DragSessionIDs; len(v) > 0 {
		m.AddDragSessionIDs(v...)
	}
	if v := i.FuelUpIDs; len(v) > 0 {
		m.AddFuelUpIDs(v...)
	}
	if v := i.OdometerReadingIDs; len(v) > 0 {
		m.AddOdometerReadingIDs(v...)
	}
	if v := i.ServiceItemIDs; len(v) > 0 {
		m.AddServiceItemIDs(v...)
	}
	if v := i.ServiceLogIDs; len(v) > 0 {
		m.AddServiceLogIDs(v...)
	}
	if v := i.ServiceScheduleIDs; len(v) > 0 {
		m.AddServiceScheduleIDs(v...)
	}
	if v := i.MediumIDs; len(v) > 0 {
		m.AddMediumIDs(v...)
	}
	if v := i.AlbumIDs; len(v) > 0 {
		m.AddAlbumIDs(v...)
	}
	if v := i.DocumentIDs; len(v) > 0 {
		m.AddDocumentIDs(v...)
	}
	if v := i.DynoSessionIDs; len(v) > 0 {
		m.AddDynoSessionIDs(v...)
	}
	if v := i.ExpenseIDs; len(v) > 0 {
		m.AddExpenseIDs(v...)
	}
	if v := i.BannerImageID; v != nil {
		m.SetBannerImageID(*v)
	}
	if v := i.TaskIDs; len(v) > 0 {
		m.AddTaskIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCarInput on the CarCreate builder.
func (c *CarCreate) SetInput(i CreateCarInput) *CarCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCarInput represents a mutation input for updating cars.
type UpdateCarInput struct {
	UpdateTime               *time.Time
	Name                     *string
	ClearMake                bool
	Make                     *string
	ClearModel               bool
	Model                    *string
	ClearType                bool
	Type                     *string
	ClearYear                bool
	Year                     *int
	ClearTrim                bool
	Trim                     *string
	ClearOwner               bool
	OwnerID                  *uuid.UUID
	ClearDragSessions        bool
	AddDragSessionIDs        []uuid.UUID
	RemoveDragSessionIDs     []uuid.UUID
	ClearFuelUps             bool
	AddFuelUpIDs             []uuid.UUID
	RemoveFuelUpIDs          []uuid.UUID
	ClearOdometerReadings    bool
	AddOdometerReadingIDs    []uuid.UUID
	RemoveOdometerReadingIDs []uuid.UUID
	ClearServiceItems        bool
	AddServiceItemIDs        []uuid.UUID
	RemoveServiceItemIDs     []uuid.UUID
	ClearServiceLogs         bool
	AddServiceLogIDs         []uuid.UUID
	RemoveServiceLogIDs      []uuid.UUID
	ClearServiceSchedules    bool
	AddServiceScheduleIDs    []uuid.UUID
	RemoveServiceScheduleIDs []uuid.UUID
	ClearMedia               bool
	AddMediumIDs             []uuid.UUID
	RemoveMediumIDs          []uuid.UUID
	ClearAlbums              bool
	AddAlbumIDs              []uuid.UUID
	RemoveAlbumIDs           []uuid.UUID
	ClearDocuments           bool
	AddDocumentIDs           []uuid.UUID
	RemoveDocumentIDs        []uuid.UUID
	ClearDynoSessions        bool
	AddDynoSessionIDs        []uuid.UUID
	RemoveDynoSessionIDs     []uuid.UUID
	ClearExpenses            bool
	AddExpenseIDs            []uuid.UUID
	RemoveExpenseIDs         []uuid.UUID
	ClearBannerImage         bool
	BannerImageID            *uuid.UUID
	ClearTasks               bool
	AddTaskIDs               []uuid.UUID
	RemoveTaskIDs            []uuid.UUID
}

// Mutate applies the UpdateCarInput on the CarMutation builder.
func (i *UpdateCarInput) Mutate(m *CarMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearMake {
		m.ClearMake()
	}
	if v := i.Make; v != nil {
		m.SetMake(*v)
	}
	if i.ClearModel {
		m.ClearModel()
	}
	if v := i.Model; v != nil {
		m.SetModel(*v)
	}
	if i.ClearType {
		m.ClearType()
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if i.ClearYear {
		m.ClearYear()
	}
	if v := i.Year; v != nil {
		m.SetYear(*v)
	}
	if i.ClearTrim {
		m.ClearTrim()
	}
	if v := i.Trim; v != nil {
		m.SetTrim(*v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if i.ClearDragSessions {
		m.ClearDragSessions()
	}
	if v := i.AddDragSessionIDs; len(v) > 0 {
		m.AddDragSessionIDs(v...)
	}
	if v := i.RemoveDragSessionIDs; len(v) > 0 {
		m.RemoveDragSessionIDs(v...)
	}
	if i.ClearFuelUps {
		m.ClearFuelUps()
	}
	if v := i.AddFuelUpIDs; len(v) > 0 {
		m.AddFuelUpIDs(v...)
	}
	if v := i.RemoveFuelUpIDs; len(v) > 0 {
		m.RemoveFuelUpIDs(v...)
	}
	if i.ClearOdometerReadings {
		m.ClearOdometerReadings()
	}
	if v := i.AddOdometerReadingIDs; len(v) > 0 {
		m.AddOdometerReadingIDs(v...)
	}
	if v := i.RemoveOdometerReadingIDs; len(v) > 0 {
		m.RemoveOdometerReadingIDs(v...)
	}
	if i.ClearServiceItems {
		m.ClearServiceItems()
	}
	if v := i.AddServiceItemIDs; len(v) > 0 {
		m.AddServiceItemIDs(v...)
	}
	if v := i.RemoveServiceItemIDs; len(v) > 0 {
		m.RemoveServiceItemIDs(v...)
	}
	if i.ClearServiceLogs {
		m.ClearServiceLogs()
	}
	if v := i.AddServiceLogIDs; len(v) > 0 {
		m.AddServiceLogIDs(v...)
	}
	if v := i.RemoveServiceLogIDs; len(v) > 0 {
		m.RemoveServiceLogIDs(v...)
	}
	if i.ClearServiceSchedules {
		m.ClearServiceSchedules()
	}
	if v := i.AddServiceScheduleIDs; len(v) > 0 {
		m.AddServiceScheduleIDs(v...)
	}
	if v := i.RemoveServiceScheduleIDs; len(v) > 0 {
		m.RemoveServiceScheduleIDs(v...)
	}
	if i.ClearMedia {
		m.ClearMedia()
	}
	if v := i.AddMediumIDs; len(v) > 0 {
		m.AddMediumIDs(v...)
	}
	if v := i.RemoveMediumIDs; len(v) > 0 {
		m.RemoveMediumIDs(v...)
	}
	if i.ClearAlbums {
		m.ClearAlbums()
	}
	if v := i.AddAlbumIDs; len(v) > 0 {
		m.AddAlbumIDs(v...)
	}
	if v := i.RemoveAlbumIDs; len(v) > 0 {
		m.RemoveAlbumIDs(v...)
	}
	if i.ClearDocuments {
		m.ClearDocuments()
	}
	if v := i.AddDocumentIDs; len(v) > 0 {
		m.AddDocumentIDs(v...)
	}
	if v := i.RemoveDocumentIDs; len(v) > 0 {
		m.RemoveDocumentIDs(v...)
	}
	if i.ClearDynoSessions {
		m.ClearDynoSessions()
	}
	if v := i.AddDynoSessionIDs; len(v) > 0 {
		m.AddDynoSessionIDs(v...)
	}
	if v := i.RemoveDynoSessionIDs; len(v) > 0 {
		m.RemoveDynoSessionIDs(v...)
	}
	if i.ClearExpenses {
		m.ClearExpenses()
	}
	if v := i.AddExpenseIDs; len(v) > 0 {
		m.AddExpenseIDs(v...)
	}
	if v := i.RemoveExpenseIDs; len(v) > 0 {
		m.RemoveExpenseIDs(v...)
	}
	if i.ClearBannerImage {
		m.ClearBannerImage()
	}
	if v := i.BannerImageID; v != nil {
		m.SetBannerImageID(*v)
	}
	if i.ClearTasks {
		m.ClearTasks()
	}
	if v := i.AddTaskIDs; len(v) > 0 {
		m.AddTaskIDs(v...)
	}
	if v := i.RemoveTaskIDs; len(v) > 0 {
		m.RemoveTaskIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCarInput on the CarUpdate builder.
func (c *CarUpdate) SetInput(i UpdateCarInput) *CarUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCarInput on the CarUpdateOne builder.
func (c *CarUpdateOne) SetInput(i UpdateCarInput) *CarUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateDocumentInput represents a mutation input for creating documents.
type CreateDocumentInput struct {
	CreateTime *time.Time
	UpdateTime *time.Time
	Name       string
	Tags       []string
	CarID      *uuid.UUID
}

// Mutate applies the CreateDocumentInput on the DocumentMutation builder.
func (i *CreateDocumentInput) Mutate(m *DocumentMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetName(i.Name)
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if v := i.CarID; v != nil {
		m.SetCarID(*v)
	}
}

// SetInput applies the change-set in the CreateDocumentInput on the DocumentCreate builder.
func (c *DocumentCreate) SetInput(i CreateDocumentInput) *DocumentCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDocumentInput represents a mutation input for updating documents.
type UpdateDocumentInput struct {
	UpdateTime *time.Time
	Name       *string
	Tags       []string
	AppendTags []string
	ClearCar   bool
	CarID      *uuid.UUID
}

// Mutate applies the UpdateDocumentInput on the DocumentMutation builder.
func (i *UpdateDocumentInput) Mutate(m *DocumentMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if i.ClearCar {
		m.ClearCar()
	}
	if v := i.CarID; v != nil {
		m.SetCarID(*v)
	}
}

// SetInput applies the change-set in the UpdateDocumentInput on the DocumentUpdate builder.
func (c *DocumentUpdate) SetInput(i UpdateDocumentInput) *DocumentUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDocumentInput on the DocumentUpdateOne builder.
func (c *DocumentUpdateOne) SetInput(i UpdateDocumentInput) *DocumentUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateDragResultInput represents a mutation input for creating dragresults.
type CreateDragResultInput struct {
	CreateTime *time.Time
	UpdateTime *time.Time
	Unit       dragresult.Unit
	Value      float64
	Result     float64
	SessionID  uuid.UUID
}

// Mutate applies the CreateDragResultInput on the DragResultMutation builder.
func (i *CreateDragResultInput) Mutate(m *DragResultMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetUnit(i.Unit)
	m.SetValue(i.Value)
	m.SetResult(i.Result)
	m.SetSessionID(i.SessionID)
}

// SetInput applies the change-set in the CreateDragResultInput on the DragResultCreate builder.
func (c *DragResultCreate) SetInput(i CreateDragResultInput) *DragResultCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDragResultInput represents a mutation input for updating dragresults.
type UpdateDragResultInput struct {
	UpdateTime *time.Time
	Unit       *dragresult.Unit
	Value      *float64
	Result     *float64
	SessionID  *uuid.UUID
}

// Mutate applies the UpdateDragResultInput on the DragResultMutation builder.
func (i *UpdateDragResultInput) Mutate(m *DragResultMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Unit; v != nil {
		m.SetUnit(*v)
	}
	if v := i.Value; v != nil {
		m.SetValue(*v)
	}
	if v := i.Result; v != nil {
		m.SetResult(*v)
	}
	if v := i.SessionID; v != nil {
		m.SetSessionID(*v)
	}
}

// SetInput applies the change-set in the UpdateDragResultInput on the DragResultUpdate builder.
func (c *DragResultUpdate) SetInput(i UpdateDragResultInput) *DragResultUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDragResultInput on the DragResultUpdateOne builder.
func (c *DragResultUpdateOne) SetInput(i UpdateDragResultInput) *DragResultUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateDragSessionInput represents a mutation input for creating dragsessions.
type CreateDragSessionInput struct {
	CreateTime *time.Time
	UpdateTime *time.Time
	Title      string
	Notes      *string
	CarID      uuid.UUID
	ResultIDs  []uuid.UUID
}

// Mutate applies the CreateDragSessionInput on the DragSessionMutation builder.
func (i *CreateDragSessionInput) Mutate(m *DragSessionMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetTitle(i.Title)
	if v := i.Notes; v != nil {
		m.SetNotes(*v)
	}
	m.SetCarID(i.CarID)
	if v := i.ResultIDs; len(v) > 0 {
		m.AddResultIDs(v...)
	}
}

// SetInput applies the change-set in the CreateDragSessionInput on the DragSessionCreate builder.
func (c *DragSessionCreate) SetInput(i CreateDragSessionInput) *DragSessionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDragSessionInput represents a mutation input for updating dragsessions.
type UpdateDragSessionInput struct {
	UpdateTime      *time.Time
	Title           *string
	ClearNotes      bool
	Notes           *string
	CarID           *uuid.UUID
	ClearResults    bool
	AddResultIDs    []uuid.UUID
	RemoveResultIDs []uuid.UUID
}

// Mutate applies the UpdateDragSessionInput on the DragSessionMutation builder.
func (i *UpdateDragSessionInput) Mutate(m *DragSessionMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if i.ClearNotes {
		m.ClearNotes()
	}
	if v := i.Notes; v != nil {
		m.SetNotes(*v)
	}
	if v := i.CarID; v != nil {
		m.SetCarID(*v)
	}
	if i.ClearResults {
		m.ClearResults()
	}
	if v := i.AddResultIDs; len(v) > 0 {
		m.AddResultIDs(v...)
	}
	if v := i.RemoveResultIDs; len(v) > 0 {
		m.RemoveResultIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateDragSessionInput on the DragSessionUpdate builder.
func (c *DragSessionUpdate) SetInput(i UpdateDragSessionInput) *DragSessionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDragSessionInput on the DragSessionUpdateOne builder.
func (c *DragSessionUpdateOne) SetInput(i UpdateDragSessionInput) *DragSessionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateDynoResultInput represents a mutation input for creating dynoresults.
type CreateDynoResultInput struct {
	CreateTime *time.Time
	UpdateTime *time.Time
	Rpm        int
	PowerKw    float64
	TorqueNm   float64
	SessionID  uuid.UUID
}

// Mutate applies the CreateDynoResultInput on the DynoResultMutation builder.
func (i *CreateDynoResultInput) Mutate(m *DynoResultMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetRpm(i.Rpm)
	m.SetPowerKw(i.PowerKw)
	m.SetTorqueNm(i.TorqueNm)
	m.SetSessionID(i.SessionID)
}

// SetInput applies the change-set in the CreateDynoResultInput on the DynoResultCreate builder.
func (c *DynoResultCreate) SetInput(i CreateDynoResultInput) *DynoResultCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDynoResultInput represents a mutation input for updating dynoresults.
type UpdateDynoResultInput struct {
	UpdateTime *time.Time
	Rpm        *int
	PowerKw    *float64
	TorqueNm   *float64
	SessionID  *uuid.UUID
}

// Mutate applies the UpdateDynoResultInput on the DynoResultMutation builder.
func (i *UpdateDynoResultInput) Mutate(m *DynoResultMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Rpm; v != nil {
		m.SetRpm(*v)
	}
	if v := i.PowerKw; v != nil {
		m.SetPowerKw(*v)
	}
	if v := i.TorqueNm; v != nil {
		m.SetTorqueNm(*v)
	}
	if v := i.SessionID; v != nil {
		m.SetSessionID(*v)
	}
}

// SetInput applies the change-set in the UpdateDynoResultInput on the DynoResultUpdate builder.
func (c *DynoResultUpdate) SetInput(i UpdateDynoResultInput) *DynoResultUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDynoResultInput on the DynoResultUpdateOne builder.
func (c *DynoResultUpdateOne) SetInput(i UpdateDynoResultInput) *DynoResultUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateDynoSessionInput represents a mutation input for creating dynosessions.
type CreateDynoSessionInput struct {
	CreateTime *time.Time
	UpdateTime *time.Time
	Title      string
	Notes      *string
	CarID      uuid.UUID
	ResultIDs  []uuid.UUID
}

// Mutate applies the CreateDynoSessionInput on the DynoSessionMutation builder.
func (i *CreateDynoSessionInput) Mutate(m *DynoSessionMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetTitle(i.Title)
	if v := i.Notes; v != nil {
		m.SetNotes(*v)
	}
	m.SetCarID(i.CarID)
	if v := i.ResultIDs; len(v) > 0 {
		m.AddResultIDs(v...)
	}
}

// SetInput applies the change-set in the CreateDynoSessionInput on the DynoSessionCreate builder.
func (c *DynoSessionCreate) SetInput(i CreateDynoSessionInput) *DynoSessionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDynoSessionInput represents a mutation input for updating dynosessions.
type UpdateDynoSessionInput struct {
	UpdateTime      *time.Time
	Title           *string
	ClearNotes      bool
	Notes           *string
	CarID           *uuid.UUID
	ClearResults    bool
	AddResultIDs    []uuid.UUID
	RemoveResultIDs []uuid.UUID
}

// Mutate applies the UpdateDynoSessionInput on the DynoSessionMutation builder.
func (i *UpdateDynoSessionInput) Mutate(m *DynoSessionMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if i.ClearNotes {
		m.ClearNotes()
	}
	if v := i.Notes; v != nil {
		m.SetNotes(*v)
	}
	if v := i.CarID; v != nil {
		m.SetCarID(*v)
	}
	if i.ClearResults {
		m.ClearResults()
	}
	if v := i.AddResultIDs; len(v) > 0 {
		m.AddResultIDs(v...)
	}
	if v := i.RemoveResultIDs; len(v) > 0 {
		m.RemoveResultIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateDynoSessionInput on the DynoSessionUpdate builder.
func (c *DynoSessionUpdate) SetInput(i UpdateDynoSessionInput) *DynoSessionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDynoSessionInput on the DynoSessionUpdateOne builder.
func (c *DynoSessionUpdateOne) SetInput(i UpdateDynoSessionInput) *DynoSessionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateExpenseInput represents a mutation input for creating expenses.
type CreateExpenseInput struct {
	CreateTime   *time.Time
	UpdateTime   *time.Time
	OccurredAt   time.Time
	Type         expense.Type
	Amount       float64
	Notes        *string
	CarID        uuid.UUID
	FuelUpID     *uuid.UUID
	ServiceLogID *uuid.UUID
}

// Mutate applies the CreateExpenseInput on the ExpenseMutation builder.
func (i *CreateExpenseInput) Mutate(m *ExpenseMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetOccurredAt(i.OccurredAt)
	m.SetType(i.Type)
	m.SetAmount(i.Amount)
	if v := i.Notes; v != nil {
		m.SetNotes(*v)
	}
	m.SetCarID(i.CarID)
	if v := i.FuelUpID; v != nil {
		m.SetFuelUpID(*v)
	}
	if v := i.ServiceLogID; v != nil {
		m.SetServiceLogID(*v)
	}
}

// SetInput applies the change-set in the CreateExpenseInput on the ExpenseCreate builder.
func (c *ExpenseCreate) SetInput(i CreateExpenseInput) *ExpenseCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateExpenseInput represents a mutation input for updating expenses.
type UpdateExpenseInput struct {
	UpdateTime      *time.Time
	OccurredAt      *time.Time
	Type            *expense.Type
	Amount          *float64
	ClearNotes      bool
	Notes           *string
	CarID           *uuid.UUID
	ClearFuelUp     bool
	FuelUpID        *uuid.UUID
	ClearServiceLog bool
	ServiceLogID    *uuid.UUID
}

// Mutate applies the UpdateExpenseInput on the ExpenseMutation builder.
func (i *UpdateExpenseInput) Mutate(m *ExpenseMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.OccurredAt; v != nil {
		m.SetOccurredAt(*v)
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if v := i.Amount; v != nil {
		m.SetAmount(*v)
	}
	if i.ClearNotes {
		m.ClearNotes()
	}
	if v := i.Notes; v != nil {
		m.SetNotes(*v)
	}
	if v := i.CarID; v != nil {
		m.SetCarID(*v)
	}
	if i.ClearFuelUp {
		m.ClearFuelUp()
	}
	if v := i.FuelUpID; v != nil {
		m.SetFuelUpID(*v)
	}
	if i.ClearServiceLog {
		m.ClearServiceLog()
	}
	if v := i.ServiceLogID; v != nil {
		m.SetServiceLogID(*v)
	}
}

// SetInput applies the change-set in the UpdateExpenseInput on the ExpenseUpdate builder.
func (c *ExpenseUpdate) SetInput(i UpdateExpenseInput) *ExpenseUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateExpenseInput on the ExpenseUpdateOne builder.
func (c *ExpenseUpdateOne) SetInput(i UpdateExpenseInput) *ExpenseUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateFuelUpInput represents a mutation input for creating fuelups.
type CreateFuelUpInput struct {
	CreateTime        *time.Time
	UpdateTime        *time.Time
	OccurredAt        time.Time
	Station           string
	AmountLiters      float64
	FuelCategory      fuelup.FuelCategory
	OctaneRating      *fuelup.OctaneRating
	IsFullTank        *bool
	Notes             *string
	CarID             uuid.UUID
	OdometerReadingID *uuid.UUID
	ExpenseID         *uuid.UUID
}

// Mutate applies the CreateFuelUpInput on the FuelUpMutation builder.
func (i *CreateFuelUpInput) Mutate(m *FuelUpMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetOccurredAt(i.OccurredAt)
	m.SetStation(i.Station)
	m.SetAmountLiters(i.AmountLiters)
	m.SetFuelCategory(i.FuelCategory)
	if v := i.OctaneRating; v != nil {
		m.SetOctaneRating(*v)
	}
	if v := i.IsFullTank; v != nil {
		m.SetIsFullTank(*v)
	}
	if v := i.Notes; v != nil {
		m.SetNotes(*v)
	}
	m.SetCarID(i.CarID)
	if v := i.OdometerReadingID; v != nil {
		m.SetOdometerReadingID(*v)
	}
	if v := i.ExpenseID; v != nil {
		m.SetExpenseID(*v)
	}
}

// SetInput applies the change-set in the CreateFuelUpInput on the FuelUpCreate builder.
func (c *FuelUpCreate) SetInput(i CreateFuelUpInput) *FuelUpCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateFuelUpInput represents a mutation input for updating fuelups.
type UpdateFuelUpInput struct {
	UpdateTime           *time.Time
	OccurredAt           *time.Time
	Station              *string
	AmountLiters         *float64
	FuelCategory         *fuelup.FuelCategory
	ClearOctaneRating    bool
	OctaneRating         *fuelup.OctaneRating
	IsFullTank           *bool
	ClearNotes           bool
	Notes                *string
	CarID                *uuid.UUID
	ClearOdometerReading bool
	OdometerReadingID    *uuid.UUID
	ClearExpense         bool
	ExpenseID            *uuid.UUID
}

// Mutate applies the UpdateFuelUpInput on the FuelUpMutation builder.
func (i *UpdateFuelUpInput) Mutate(m *FuelUpMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.OccurredAt; v != nil {
		m.SetOccurredAt(*v)
	}
	if v := i.Station; v != nil {
		m.SetStation(*v)
	}
	if v := i.AmountLiters; v != nil {
		m.SetAmountLiters(*v)
	}
	if v := i.FuelCategory; v != nil {
		m.SetFuelCategory(*v)
	}
	if i.ClearOctaneRating {
		m.ClearOctaneRating()
	}
	if v := i.OctaneRating; v != nil {
		m.SetOctaneRating(*v)
	}
	if v := i.IsFullTank; v != nil {
		m.SetIsFullTank(*v)
	}
	if i.ClearNotes {
		m.ClearNotes()
	}
	if v := i.Notes; v != nil {
		m.SetNotes(*v)
	}
	if v := i.CarID; v != nil {
		m.SetCarID(*v)
	}
	if i.ClearOdometerReading {
		m.ClearOdometerReading()
	}
	if v := i.OdometerReadingID; v != nil {
		m.SetOdometerReadingID(*v)
	}
	if i.ClearExpense {
		m.ClearExpense()
	}
	if v := i.ExpenseID; v != nil {
		m.SetExpenseID(*v)
	}
}

// SetInput applies the change-set in the UpdateFuelUpInput on the FuelUpUpdate builder.
func (c *FuelUpUpdate) SetInput(i UpdateFuelUpInput) *FuelUpUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateFuelUpInput on the FuelUpUpdateOne builder.
func (c *FuelUpUpdateOne) SetInput(i UpdateFuelUpInput) *FuelUpUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateMediaInput represents a mutation input for creating mediaslice.
type CreateMediaInput struct {
	CreateTime  *time.Time
	UpdateTime  *time.Time
	Title       *string
	Description *string
	CarID       *uuid.UUID
	AlbumIDs    []uuid.UUID
}

// Mutate applies the CreateMediaInput on the MediaMutation builder.
func (i *CreateMediaInput) Mutate(m *MediaMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.CarID; v != nil {
		m.SetCarID(*v)
	}
	if v := i.AlbumIDs; len(v) > 0 {
		m.AddAlbumIDs(v...)
	}
}

// SetInput applies the change-set in the CreateMediaInput on the MediaCreate builder.
func (c *MediaCreate) SetInput(i CreateMediaInput) *MediaCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateMediaInput represents a mutation input for updating mediaslice.
type UpdateMediaInput struct {
	UpdateTime       *time.Time
	ClearTitle       bool
	Title            *string
	ClearDescription bool
	Description      *string
	ClearCar         bool
	CarID            *uuid.UUID
	ClearAlbums      bool
	AddAlbumIDs      []uuid.UUID
	RemoveAlbumIDs   []uuid.UUID
}

// Mutate applies the UpdateMediaInput on the MediaMutation builder.
func (i *UpdateMediaInput) Mutate(m *MediaMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if i.ClearTitle {
		m.ClearTitle()
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearCar {
		m.ClearCar()
	}
	if v := i.CarID; v != nil {
		m.SetCarID(*v)
	}
	if i.ClearAlbums {
		m.ClearAlbums()
	}
	if v := i.AddAlbumIDs; len(v) > 0 {
		m.AddAlbumIDs(v...)
	}
	if v := i.RemoveAlbumIDs; len(v) > 0 {
		m.RemoveAlbumIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateMediaInput on the MediaUpdate builder.
func (c *MediaUpdate) SetInput(i UpdateMediaInput) *MediaUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateMediaInput on the MediaUpdateOne builder.
func (c *MediaUpdateOne) SetInput(i UpdateMediaInput) *MediaUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateOdometerReadingInput represents a mutation input for creating odometerreadings.
type CreateOdometerReadingInput struct {
	CreateTime   *time.Time
	UpdateTime   *time.Time
	ReadingKm    float64
	ReadingTime  time.Time
	Notes        *string
	CarID        uuid.UUID
	FuelUpID     *uuid.UUID
	ServiceLogID *uuid.UUID
}

// Mutate applies the CreateOdometerReadingInput on the OdometerReadingMutation builder.
func (i *CreateOdometerReadingInput) Mutate(m *OdometerReadingMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetReadingKm(i.ReadingKm)
	m.SetReadingTime(i.ReadingTime)
	if v := i.Notes; v != nil {
		m.SetNotes(*v)
	}
	m.SetCarID(i.CarID)
	if v := i.FuelUpID; v != nil {
		m.SetFuelUpID(*v)
	}
	if v := i.ServiceLogID; v != nil {
		m.SetServiceLogID(*v)
	}
}

// SetInput applies the change-set in the CreateOdometerReadingInput on the OdometerReadingCreate builder.
func (c *OdometerReadingCreate) SetInput(i CreateOdometerReadingInput) *OdometerReadingCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOdometerReadingInput represents a mutation input for updating odometerreadings.
type UpdateOdometerReadingInput struct {
	UpdateTime      *time.Time
	ReadingKm       *float64
	ReadingTime     *time.Time
	ClearNotes      bool
	Notes           *string
	CarID           *uuid.UUID
	ClearFuelUp     bool
	FuelUpID        *uuid.UUID
	ClearServiceLog bool
	ServiceLogID    *uuid.UUID
}

// Mutate applies the UpdateOdometerReadingInput on the OdometerReadingMutation builder.
func (i *UpdateOdometerReadingInput) Mutate(m *OdometerReadingMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.ReadingKm; v != nil {
		m.SetReadingKm(*v)
	}
	if v := i.ReadingTime; v != nil {
		m.SetReadingTime(*v)
	}
	if i.ClearNotes {
		m.ClearNotes()
	}
	if v := i.Notes; v != nil {
		m.SetNotes(*v)
	}
	if v := i.CarID; v != nil {
		m.SetCarID(*v)
	}
	if i.ClearFuelUp {
		m.ClearFuelUp()
	}
	if v := i.FuelUpID; v != nil {
		m.SetFuelUpID(*v)
	}
	if i.ClearServiceLog {
		m.ClearServiceLog()
	}
	if v := i.ServiceLogID; v != nil {
		m.SetServiceLogID(*v)
	}
}

// SetInput applies the change-set in the UpdateOdometerReadingInput on the OdometerReadingUpdate builder.
func (c *OdometerReadingUpdate) SetInput(i UpdateOdometerReadingInput) *OdometerReadingUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOdometerReadingInput on the OdometerReadingUpdateOne builder.
func (c *OdometerReadingUpdateOne) SetInput(i UpdateOdometerReadingInput) *OdometerReadingUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProfileInput represents a mutation input for creating profiles.
type CreateProfileInput struct {
	CreateTime          *time.Time
	UpdateTime          *time.Time
	Username            *string
	FirstName           *string
	LastName            *string
	CurrencyCode        *string
	FuelVolumeUnit      *profile.FuelVolumeUnit
	DistanceUnit        *profile.DistanceUnit
	FuelConsumptionUnit *profile.FuelConsumptionUnit
	TemperatureUnit     *profile.TemperatureUnit
	PowerUnit           *profile.PowerUnit
	TorqueUnit          *profile.TorqueUnit
	Visibility          *profile.Visibility
	UserID              uuid.UUID
}

// Mutate applies the CreateProfileInput on the ProfileMutation builder.
func (i *CreateProfileInput) Mutate(m *ProfileMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Username; v != nil {
		m.SetUsername(*v)
	}
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if v := i.CurrencyCode; v != nil {
		m.SetCurrencyCode(*v)
	}
	if v := i.FuelVolumeUnit; v != nil {
		m.SetFuelVolumeUnit(*v)
	}
	if v := i.DistanceUnit; v != nil {
		m.SetDistanceUnit(*v)
	}
	if v := i.FuelConsumptionUnit; v != nil {
		m.SetFuelConsumptionUnit(*v)
	}
	if v := i.TemperatureUnit; v != nil {
		m.SetTemperatureUnit(*v)
	}
	if v := i.PowerUnit; v != nil {
		m.SetPowerUnit(*v)
	}
	if v := i.TorqueUnit; v != nil {
		m.SetTorqueUnit(*v)
	}
	if v := i.Visibility; v != nil {
		m.SetVisibility(*v)
	}
	m.SetUserID(i.UserID)
}

// SetInput applies the change-set in the CreateProfileInput on the ProfileCreate builder.
func (c *ProfileCreate) SetInput(i CreateProfileInput) *ProfileCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProfileInput represents a mutation input for updating profiles.
type UpdateProfileInput struct {
	UpdateTime               *time.Time
	ClearUsername            bool
	Username                 *string
	ClearFirstName           bool
	FirstName                *string
	ClearLastName            bool
	LastName                 *string
	ClearCurrencyCode        bool
	CurrencyCode             *string
	ClearFuelVolumeUnit      bool
	FuelVolumeUnit           *profile.FuelVolumeUnit
	ClearDistanceUnit        bool
	DistanceUnit             *profile.DistanceUnit
	ClearFuelConsumptionUnit bool
	FuelConsumptionUnit      *profile.FuelConsumptionUnit
	ClearTemperatureUnit     bool
	TemperatureUnit          *profile.TemperatureUnit
	ClearPowerUnit           bool
	PowerUnit                *profile.PowerUnit
	ClearTorqueUnit          bool
	TorqueUnit               *profile.TorqueUnit
	Visibility               *profile.Visibility
	UserID                   *uuid.UUID
}

// Mutate applies the UpdateProfileInput on the ProfileMutation builder.
func (i *UpdateProfileInput) Mutate(m *ProfileMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if i.ClearUsername {
		m.ClearUsername()
	}
	if v := i.Username; v != nil {
		m.SetUsername(*v)
	}
	if i.ClearFirstName {
		m.ClearFirstName()
	}
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if i.ClearLastName {
		m.ClearLastName()
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if i.ClearCurrencyCode {
		m.ClearCurrencyCode()
	}
	if v := i.CurrencyCode; v != nil {
		m.SetCurrencyCode(*v)
	}
	if i.ClearFuelVolumeUnit {
		m.ClearFuelVolumeUnit()
	}
	if v := i.FuelVolumeUnit; v != nil {
		m.SetFuelVolumeUnit(*v)
	}
	if i.ClearDistanceUnit {
		m.ClearDistanceUnit()
	}
	if v := i.DistanceUnit; v != nil {
		m.SetDistanceUnit(*v)
	}
	if i.ClearFuelConsumptionUnit {
		m.ClearFuelConsumptionUnit()
	}
	if v := i.FuelConsumptionUnit; v != nil {
		m.SetFuelConsumptionUnit(*v)
	}
	if i.ClearTemperatureUnit {
		m.ClearTemperatureUnit()
	}
	if v := i.TemperatureUnit; v != nil {
		m.SetTemperatureUnit(*v)
	}
	if i.ClearPowerUnit {
		m.ClearPowerUnit()
	}
	if v := i.PowerUnit; v != nil {
		m.SetPowerUnit(*v)
	}
	if i.ClearTorqueUnit {
		m.ClearTorqueUnit()
	}
	if v := i.TorqueUnit; v != nil {
		m.SetTorqueUnit(*v)
	}
	if v := i.Visibility; v != nil {
		m.SetVisibility(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the UpdateProfileInput on the ProfileUpdate builder.
func (c *ProfileUpdate) SetInput(i UpdateProfileInput) *ProfileUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProfileInput on the ProfileUpdateOne builder.
func (c *ProfileUpdateOne) SetInput(i UpdateProfileInput) *ProfileUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateServiceItemInput represents a mutation input for creating serviceitems.
type CreateServiceItemInput struct {
	CreateTime            *time.Time
	UpdateTime            *time.Time
	Label                 string
	EstimatedMinutes      *int
	DefaultIntervalKm     *float64
	DefaultIntervalMonths *int
	Notes                 *string
	Tags                  []string
	CarID                 uuid.UUID
	ScheduleIDs           []uuid.UUID
	LogIDs                []uuid.UUID
}

// Mutate applies the CreateServiceItemInput on the ServiceItemMutation builder.
func (i *CreateServiceItemInput) Mutate(m *ServiceItemMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetLabel(i.Label)
	if v := i.EstimatedMinutes; v != nil {
		m.SetEstimatedMinutes(*v)
	}
	if v := i.DefaultIntervalKm; v != nil {
		m.SetDefaultIntervalKm(*v)
	}
	if v := i.DefaultIntervalMonths; v != nil {
		m.SetDefaultIntervalMonths(*v)
	}
	if v := i.Notes; v != nil {
		m.SetNotes(*v)
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetCarID(i.CarID)
	if v := i.ScheduleIDs; len(v) > 0 {
		m.AddScheduleIDs(v...)
	}
	if v := i.LogIDs; len(v) > 0 {
		m.AddLogIDs(v...)
	}
}

// SetInput applies the change-set in the CreateServiceItemInput on the ServiceItemCreate builder.
func (c *ServiceItemCreate) SetInput(i CreateServiceItemInput) *ServiceItemCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateServiceItemInput represents a mutation input for updating serviceitems.
type UpdateServiceItemInput struct {
	UpdateTime                 *time.Time
	Label                      *string
	ClearEstimatedMinutes      bool
	EstimatedMinutes           *int
	ClearDefaultIntervalKm     bool
	DefaultIntervalKm          *float64
	ClearDefaultIntervalMonths bool
	DefaultIntervalMonths      *int
	ClearNotes                 bool
	Notes                      *string
	Tags                       []string
	AppendTags                 []string
	CarID                      *uuid.UUID
	ClearSchedules             bool
	AddScheduleIDs             []uuid.UUID
	RemoveScheduleIDs          []uuid.UUID
	ClearLogs                  bool
	AddLogIDs                  []uuid.UUID
	RemoveLogIDs               []uuid.UUID
}

// Mutate applies the UpdateServiceItemInput on the ServiceItemMutation builder.
func (i *UpdateServiceItemInput) Mutate(m *ServiceItemMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Label; v != nil {
		m.SetLabel(*v)
	}
	if i.ClearEstimatedMinutes {
		m.ClearEstimatedMinutes()
	}
	if v := i.EstimatedMinutes; v != nil {
		m.SetEstimatedMinutes(*v)
	}
	if i.ClearDefaultIntervalKm {
		m.ClearDefaultIntervalKm()
	}
	if v := i.DefaultIntervalKm; v != nil {
		m.SetDefaultIntervalKm(*v)
	}
	if i.ClearDefaultIntervalMonths {
		m.ClearDefaultIntervalMonths()
	}
	if v := i.DefaultIntervalMonths; v != nil {
		m.SetDefaultIntervalMonths(*v)
	}
	if i.ClearNotes {
		m.ClearNotes()
	}
	if v := i.Notes; v != nil {
		m.SetNotes(*v)
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.CarID; v != nil {
		m.SetCarID(*v)
	}
	if i.ClearSchedules {
		m.ClearSchedules()
	}
	if v := i.AddScheduleIDs; len(v) > 0 {
		m.AddScheduleIDs(v...)
	}
	if v := i.RemoveScheduleIDs; len(v) > 0 {
		m.RemoveScheduleIDs(v...)
	}
	if i.ClearLogs {
		m.ClearLogs()
	}
	if v := i.AddLogIDs; len(v) > 0 {
		m.AddLogIDs(v...)
	}
	if v := i.RemoveLogIDs; len(v) > 0 {
		m.RemoveLogIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateServiceItemInput on the ServiceItemUpdate builder.
func (c *ServiceItemUpdate) SetInput(i UpdateServiceItemInput) *ServiceItemUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateServiceItemInput on the ServiceItemUpdateOne builder.
func (c *ServiceItemUpdateOne) SetInput(i UpdateServiceItemInput) *ServiceItemUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateServiceLogInput represents a mutation input for creating servicelogs.
type CreateServiceLogInput struct {
	CreateTime        *time.Time
	UpdateTime        *time.Time
	DatePerformed     time.Time
	PerformedBy       *string
	Notes             *string
	CarID             uuid.UUID
	ItemIDs           []uuid.UUID
	ScheduleID        *uuid.UUID
	OdometerReadingID *uuid.UUID
	ExpenseID         *uuid.UUID
}

// Mutate applies the CreateServiceLogInput on the ServiceLogMutation builder.
func (i *CreateServiceLogInput) Mutate(m *ServiceLogMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetDatePerformed(i.DatePerformed)
	if v := i.PerformedBy; v != nil {
		m.SetPerformedBy(*v)
	}
	if v := i.Notes; v != nil {
		m.SetNotes(*v)
	}
	m.SetCarID(i.CarID)
	if v := i.ItemIDs; len(v) > 0 {
		m.AddItemIDs(v...)
	}
	if v := i.ScheduleID; v != nil {
		m.SetScheduleID(*v)
	}
	if v := i.OdometerReadingID; v != nil {
		m.SetOdometerReadingID(*v)
	}
	if v := i.ExpenseID; v != nil {
		m.SetExpenseID(*v)
	}
}

// SetInput applies the change-set in the CreateServiceLogInput on the ServiceLogCreate builder.
func (c *ServiceLogCreate) SetInput(i CreateServiceLogInput) *ServiceLogCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateServiceLogInput represents a mutation input for updating servicelogs.
type UpdateServiceLogInput struct {
	UpdateTime           *time.Time
	DatePerformed        *time.Time
	ClearPerformedBy     bool
	PerformedBy          *string
	ClearNotes           bool
	Notes                *string
	CarID                *uuid.UUID
	ClearItems           bool
	AddItemIDs           []uuid.UUID
	RemoveItemIDs        []uuid.UUID
	ClearSchedule        bool
	ScheduleID           *uuid.UUID
	ClearOdometerReading bool
	OdometerReadingID    *uuid.UUID
	ClearExpense         bool
	ExpenseID            *uuid.UUID
}

// Mutate applies the UpdateServiceLogInput on the ServiceLogMutation builder.
func (i *UpdateServiceLogInput) Mutate(m *ServiceLogMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.DatePerformed; v != nil {
		m.SetDatePerformed(*v)
	}
	if i.ClearPerformedBy {
		m.ClearPerformedBy()
	}
	if v := i.PerformedBy; v != nil {
		m.SetPerformedBy(*v)
	}
	if i.ClearNotes {
		m.ClearNotes()
	}
	if v := i.Notes; v != nil {
		m.SetNotes(*v)
	}
	if v := i.CarID; v != nil {
		m.SetCarID(*v)
	}
	if i.ClearItems {
		m.ClearItems()
	}
	if v := i.AddItemIDs; len(v) > 0 {
		m.AddItemIDs(v...)
	}
	if v := i.RemoveItemIDs; len(v) > 0 {
		m.RemoveItemIDs(v...)
	}
	if i.ClearSchedule {
		m.ClearSchedule()
	}
	if v := i.ScheduleID; v != nil {
		m.SetScheduleID(*v)
	}
	if i.ClearOdometerReading {
		m.ClearOdometerReading()
	}
	if v := i.OdometerReadingID; v != nil {
		m.SetOdometerReadingID(*v)
	}
	if i.ClearExpense {
		m.ClearExpense()
	}
	if v := i.ExpenseID; v != nil {
		m.SetExpenseID(*v)
	}
}

// SetInput applies the change-set in the UpdateServiceLogInput on the ServiceLogUpdate builder.
func (c *ServiceLogUpdate) SetInput(i UpdateServiceLogInput) *ServiceLogUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateServiceLogInput on the ServiceLogUpdateOne builder.
func (c *ServiceLogUpdateOne) SetInput(i UpdateServiceLogInput) *ServiceLogUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateServiceScheduleInput represents a mutation input for creating serviceschedules.
type CreateServiceScheduleInput struct {
	CreateTime        *time.Time
	UpdateTime        *time.Time
	Title             string
	RepeatEveryKm     *float64
	StartsAtKm        *float64
	RepeatEveryMonths *int
	StartsAtMonths    *int
	Notes             *string
	Archived          *bool
	CarID             uuid.UUID
	ItemIDs           []uuid.UUID
	LogIDs            []uuid.UUID
}

// Mutate applies the CreateServiceScheduleInput on the ServiceScheduleMutation builder.
func (i *CreateServiceScheduleInput) Mutate(m *ServiceScheduleMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetTitle(i.Title)
	if v := i.RepeatEveryKm; v != nil {
		m.SetRepeatEveryKm(*v)
	}
	if v := i.StartsAtKm; v != nil {
		m.SetStartsAtKm(*v)
	}
	if v := i.RepeatEveryMonths; v != nil {
		m.SetRepeatEveryMonths(*v)
	}
	if v := i.StartsAtMonths; v != nil {
		m.SetStartsAtMonths(*v)
	}
	if v := i.Notes; v != nil {
		m.SetNotes(*v)
	}
	if v := i.Archived; v != nil {
		m.SetArchived(*v)
	}
	m.SetCarID(i.CarID)
	if v := i.ItemIDs; len(v) > 0 {
		m.AddItemIDs(v...)
	}
	if v := i.LogIDs; len(v) > 0 {
		m.AddLogIDs(v...)
	}
}

// SetInput applies the change-set in the CreateServiceScheduleInput on the ServiceScheduleCreate builder.
func (c *ServiceScheduleCreate) SetInput(i CreateServiceScheduleInput) *ServiceScheduleCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateServiceScheduleInput represents a mutation input for updating serviceschedules.
type UpdateServiceScheduleInput struct {
	UpdateTime             *time.Time
	Title                  *string
	ClearRepeatEveryKm     bool
	RepeatEveryKm          *float64
	ClearStartsAtKm        bool
	StartsAtKm             *float64
	ClearRepeatEveryMonths bool
	RepeatEveryMonths      *int
	ClearStartsAtMonths    bool
	StartsAtMonths         *int
	ClearNotes             bool
	Notes                  *string
	Archived               *bool
	CarID                  *uuid.UUID
	ClearItems             bool
	AddItemIDs             []uuid.UUID
	RemoveItemIDs          []uuid.UUID
	ClearLogs              bool
	AddLogIDs              []uuid.UUID
	RemoveLogIDs           []uuid.UUID
}

// Mutate applies the UpdateServiceScheduleInput on the ServiceScheduleMutation builder.
func (i *UpdateServiceScheduleInput) Mutate(m *ServiceScheduleMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if i.ClearRepeatEveryKm {
		m.ClearRepeatEveryKm()
	}
	if v := i.RepeatEveryKm; v != nil {
		m.SetRepeatEveryKm(*v)
	}
	if i.ClearStartsAtKm {
		m.ClearStartsAtKm()
	}
	if v := i.StartsAtKm; v != nil {
		m.SetStartsAtKm(*v)
	}
	if i.ClearRepeatEveryMonths {
		m.ClearRepeatEveryMonths()
	}
	if v := i.RepeatEveryMonths; v != nil {
		m.SetRepeatEveryMonths(*v)
	}
	if i.ClearStartsAtMonths {
		m.ClearStartsAtMonths()
	}
	if v := i.StartsAtMonths; v != nil {
		m.SetStartsAtMonths(*v)
	}
	if i.ClearNotes {
		m.ClearNotes()
	}
	if v := i.Notes; v != nil {
		m.SetNotes(*v)
	}
	if v := i.Archived; v != nil {
		m.SetArchived(*v)
	}
	if v := i.CarID; v != nil {
		m.SetCarID(*v)
	}
	if i.ClearItems {
		m.ClearItems()
	}
	if v := i.AddItemIDs; len(v) > 0 {
		m.AddItemIDs(v...)
	}
	if v := i.RemoveItemIDs; len(v) > 0 {
		m.RemoveItemIDs(v...)
	}
	if i.ClearLogs {
		m.ClearLogs()
	}
	if v := i.AddLogIDs; len(v) > 0 {
		m.AddLogIDs(v...)
	}
	if v := i.RemoveLogIDs; len(v) > 0 {
		m.RemoveLogIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateServiceScheduleInput on the ServiceScheduleUpdate builder.
func (c *ServiceScheduleUpdate) SetInput(i UpdateServiceScheduleInput) *ServiceScheduleUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateServiceScheduleInput on the ServiceScheduleUpdateOne builder.
func (c *ServiceScheduleUpdateOne) SetInput(i UpdateServiceScheduleInput) *ServiceScheduleUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTaskInput represents a mutation input for creating tasks.
type CreateTaskInput struct {
	CreateTime *time.Time
	UpdateTime *time.Time
	Status     task.Status
	Title      string
	Rank       *float64
	CarID      uuid.UUID
}

// Mutate applies the CreateTaskInput on the TaskMutation builder.
func (i *CreateTaskInput) Mutate(m *TaskMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetStatus(i.Status)
	m.SetTitle(i.Title)
	if v := i.Rank; v != nil {
		m.SetRank(*v)
	}
	m.SetCarID(i.CarID)
}

// SetInput applies the change-set in the CreateTaskInput on the TaskCreate builder.
func (c *TaskCreate) SetInput(i CreateTaskInput) *TaskCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTaskInput represents a mutation input for updating tasks.
type UpdateTaskInput struct {
	UpdateTime *time.Time
	Status     *task.Status
	Title      *string
	Rank       *float64
	CarID      *uuid.UUID
}

// Mutate applies the UpdateTaskInput on the TaskMutation builder.
func (i *UpdateTaskInput) Mutate(m *TaskMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Rank; v != nil {
		m.SetRank(*v)
	}
	if v := i.CarID; v != nil {
		m.SetCarID(*v)
	}
}

// SetInput applies the change-set in the UpdateTaskInput on the TaskUpdate builder.
func (c *TaskUpdate) SetInput(i UpdateTaskInput) *TaskUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTaskInput on the TaskUpdateOne builder.
func (c *TaskUpdateOne) SetInput(i UpdateTaskInput) *TaskUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	CreateTime         *time.Time
	UpdateTime         *time.Time
	Email              string
	StripeCustomerID   *string
	CarIDs             []uuid.UUID
	ProfileID          *uuid.UUID
	SubscriptionIDs    []uuid.UUID
	CheckoutSessionIDs []uuid.UUID
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetEmail(i.Email)
	if v := i.StripeCustomerID; v != nil {
		m.SetStripeCustomerID(*v)
	}
	if v := i.CarIDs; len(v) > 0 {
		m.AddCarIDs(v...)
	}
	if v := i.ProfileID; v != nil {
		m.SetProfileID(*v)
	}
	if v := i.SubscriptionIDs; len(v) > 0 {
		m.AddSubscriptionIDs(v...)
	}
	if v := i.CheckoutSessionIDs; len(v) > 0 {
		m.AddCheckoutSessionIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	UpdateTime               *time.Time
	Email                    *string
	ClearStripeCustomerID    bool
	StripeCustomerID         *string
	ClearCars                bool
	AddCarIDs                []uuid.UUID
	RemoveCarIDs             []uuid.UUID
	ClearProfile             bool
	ProfileID                *uuid.UUID
	ClearSubscriptions       bool
	AddSubscriptionIDs       []uuid.UUID
	RemoveSubscriptionIDs    []uuid.UUID
	ClearCheckoutSessions    bool
	AddCheckoutSessionIDs    []uuid.UUID
	RemoveCheckoutSessionIDs []uuid.UUID
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearStripeCustomerID {
		m.ClearStripeCustomerID()
	}
	if v := i.StripeCustomerID; v != nil {
		m.SetStripeCustomerID(*v)
	}
	if i.ClearCars {
		m.ClearCars()
	}
	if v := i.AddCarIDs; len(v) > 0 {
		m.AddCarIDs(v...)
	}
	if v := i.RemoveCarIDs; len(v) > 0 {
		m.RemoveCarIDs(v...)
	}
	if i.ClearProfile {
		m.ClearProfile()
	}
	if v := i.ProfileID; v != nil {
		m.SetProfileID(*v)
	}
	if i.ClearSubscriptions {
		m.ClearSubscriptions()
	}
	if v := i.AddSubscriptionIDs; len(v) > 0 {
		m.AddSubscriptionIDs(v...)
	}
	if v := i.RemoveSubscriptionIDs; len(v) > 0 {
		m.RemoveSubscriptionIDs(v...)
	}
	if i.ClearCheckoutSessions {
		m.ClearCheckoutSessions()
	}
	if v := i.AddCheckoutSessionIDs; len(v) > 0 {
		m.AddCheckoutSessionIDs(v...)
	}
	if v := i.RemoveCheckoutSessionIDs; len(v) > 0 {
		m.RemoveCheckoutSessionIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
