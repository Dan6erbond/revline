// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/album"
	"github.com/Dan6erbond/revline/ent/buildlog"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/media"
	"github.com/Dan6erbond/revline/ent/modproductoption"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/Dan6erbond/revline/ent/user"
	"github.com/google/uuid"
)

// MediaUpdate is the builder for updating Media entities.
type MediaUpdate struct {
	config
	hooks    []Hook
	mutation *MediaMutation
}

// Where appends a list predicates to the MediaUpdate builder.
func (mu *MediaUpdate) Where(ps ...predicate.Media) *MediaUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetTitle sets the "title" field.
func (mu *MediaUpdate) SetTitle(s string) *MediaUpdate {
	mu.mutation.SetTitle(s)
	return mu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableTitle(s *string) *MediaUpdate {
	if s != nil {
		mu.SetTitle(*s)
	}
	return mu
}

// ClearTitle clears the value of the "title" field.
func (mu *MediaUpdate) ClearTitle() *MediaUpdate {
	mu.mutation.ClearTitle()
	return mu
}

// SetDescription sets the "description" field.
func (mu *MediaUpdate) SetDescription(s string) *MediaUpdate {
	mu.mutation.SetDescription(s)
	return mu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableDescription(s *string) *MediaUpdate {
	if s != nil {
		mu.SetDescription(*s)
	}
	return mu
}

// ClearDescription clears the value of the "description" field.
func (mu *MediaUpdate) ClearDescription() *MediaUpdate {
	mu.mutation.ClearDescription()
	return mu
}

// SetUpdateTime sets the "update_time" field.
func (mu *MediaUpdate) SetUpdateTime(t time.Time) *MediaUpdate {
	mu.mutation.SetUpdateTime(t)
	return mu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mu *MediaUpdate) SetUserID(id uuid.UUID) *MediaUpdate {
	mu.mutation.SetUserID(id)
	return mu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (mu *MediaUpdate) SetNillableUserID(id *uuid.UUID) *MediaUpdate {
	if id != nil {
		mu = mu.SetUserID(*id)
	}
	return mu
}

// SetUser sets the "user" edge to the User entity.
func (mu *MediaUpdate) SetUser(u *User) *MediaUpdate {
	return mu.SetUserID(u.ID)
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (mu *MediaUpdate) SetCarID(id uuid.UUID) *MediaUpdate {
	mu.mutation.SetCarID(id)
	return mu
}

// SetNillableCarID sets the "car" edge to the Car entity by ID if the given value is not nil.
func (mu *MediaUpdate) SetNillableCarID(id *uuid.UUID) *MediaUpdate {
	if id != nil {
		mu = mu.SetCarID(*id)
	}
	return mu
}

// SetCar sets the "car" edge to the Car entity.
func (mu *MediaUpdate) SetCar(c *Car) *MediaUpdate {
	return mu.SetCarID(c.ID)
}

// SetModProductOptionID sets the "mod_product_option" edge to the ModProductOption entity by ID.
func (mu *MediaUpdate) SetModProductOptionID(id uuid.UUID) *MediaUpdate {
	mu.mutation.SetModProductOptionID(id)
	return mu
}

// SetNillableModProductOptionID sets the "mod_product_option" edge to the ModProductOption entity by ID if the given value is not nil.
func (mu *MediaUpdate) SetNillableModProductOptionID(id *uuid.UUID) *MediaUpdate {
	if id != nil {
		mu = mu.SetModProductOptionID(*id)
	}
	return mu
}

// SetModProductOption sets the "mod_product_option" edge to the ModProductOption entity.
func (mu *MediaUpdate) SetModProductOption(m *ModProductOption) *MediaUpdate {
	return mu.SetModProductOptionID(m.ID)
}

// AddBuildLogIDs adds the "build_log" edge to the BuildLog entity by IDs.
func (mu *MediaUpdate) AddBuildLogIDs(ids ...uuid.UUID) *MediaUpdate {
	mu.mutation.AddBuildLogIDs(ids...)
	return mu
}

// AddBuildLog adds the "build_log" edges to the BuildLog entity.
func (mu *MediaUpdate) AddBuildLog(b ...*BuildLog) *MediaUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return mu.AddBuildLogIDs(ids...)
}

// AddAlbumIDs adds the "albums" edge to the Album entity by IDs.
func (mu *MediaUpdate) AddAlbumIDs(ids ...uuid.UUID) *MediaUpdate {
	mu.mutation.AddAlbumIDs(ids...)
	return mu
}

// AddAlbums adds the "albums" edges to the Album entity.
func (mu *MediaUpdate) AddAlbums(a ...*Album) *MediaUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mu.AddAlbumIDs(ids...)
}

// Mutation returns the MediaMutation object of the builder.
func (mu *MediaUpdate) Mutation() *MediaMutation {
	return mu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (mu *MediaUpdate) ClearUser() *MediaUpdate {
	mu.mutation.ClearUser()
	return mu
}

// ClearCar clears the "car" edge to the Car entity.
func (mu *MediaUpdate) ClearCar() *MediaUpdate {
	mu.mutation.ClearCar()
	return mu
}

// ClearModProductOption clears the "mod_product_option" edge to the ModProductOption entity.
func (mu *MediaUpdate) ClearModProductOption() *MediaUpdate {
	mu.mutation.ClearModProductOption()
	return mu
}

// ClearBuildLog clears all "build_log" edges to the BuildLog entity.
func (mu *MediaUpdate) ClearBuildLog() *MediaUpdate {
	mu.mutation.ClearBuildLog()
	return mu
}

// RemoveBuildLogIDs removes the "build_log" edge to BuildLog entities by IDs.
func (mu *MediaUpdate) RemoveBuildLogIDs(ids ...uuid.UUID) *MediaUpdate {
	mu.mutation.RemoveBuildLogIDs(ids...)
	return mu
}

// RemoveBuildLog removes "build_log" edges to BuildLog entities.
func (mu *MediaUpdate) RemoveBuildLog(b ...*BuildLog) *MediaUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return mu.RemoveBuildLogIDs(ids...)
}

// ClearAlbums clears all "albums" edges to the Album entity.
func (mu *MediaUpdate) ClearAlbums() *MediaUpdate {
	mu.mutation.ClearAlbums()
	return mu
}

// RemoveAlbumIDs removes the "albums" edge to Album entities by IDs.
func (mu *MediaUpdate) RemoveAlbumIDs(ids ...uuid.UUID) *MediaUpdate {
	mu.mutation.RemoveAlbumIDs(ids...)
	return mu
}

// RemoveAlbums removes "albums" edges to Album entities.
func (mu *MediaUpdate) RemoveAlbums(a ...*Album) *MediaUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return mu.RemoveAlbumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MediaUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MediaUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MediaUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MediaUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MediaUpdate) defaults() {
	if _, ok := mu.mutation.UpdateTime(); !ok {
		v := media.UpdateDefaultUpdateTime()
		mu.mutation.SetUpdateTime(v)
	}
}

func (mu *MediaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(media.Table, media.Columns, sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Title(); ok {
		_spec.SetField(media.FieldTitle, field.TypeString, value)
	}
	if mu.mutation.TitleCleared() {
		_spec.ClearField(media.FieldTitle, field.TypeString)
	}
	if value, ok := mu.mutation.Description(); ok {
		_spec.SetField(media.FieldDescription, field.TypeString, value)
	}
	if mu.mutation.DescriptionCleared() {
		_spec.ClearField(media.FieldDescription, field.TypeString)
	}
	if value, ok := mu.mutation.UpdateTime(); ok {
		_spec.SetField(media.FieldUpdateTime, field.TypeTime, value)
	}
	if mu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   media.UserTable,
			Columns: []string{media.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   media.UserTable,
			Columns: []string{media.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   media.CarTable,
			Columns: []string{media.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   media.CarTable,
			Columns: []string{media.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ModProductOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   media.ModProductOptionTable,
			Columns: []string{media.ModProductOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modproductoption.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ModProductOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   media.ModProductOptionTable,
			Columns: []string{media.ModProductOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modproductoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.BuildLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   media.BuildLogTable,
			Columns: media.BuildLogPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(buildlog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedBuildLogIDs(); len(nodes) > 0 && !mu.mutation.BuildLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   media.BuildLogTable,
			Columns: media.BuildLogPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(buildlog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.BuildLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   media.BuildLogTable,
			Columns: media.BuildLogPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(buildlog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.AlbumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   media.AlbumsTable,
			Columns: media.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(album.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedAlbumsIDs(); len(nodes) > 0 && !mu.mutation.AlbumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   media.AlbumsTable,
			Columns: media.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(album.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.AlbumsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   media.AlbumsTable,
			Columns: media.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(album.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{media.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MediaUpdateOne is the builder for updating a single Media entity.
type MediaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MediaMutation
}

// SetTitle sets the "title" field.
func (muo *MediaUpdateOne) SetTitle(s string) *MediaUpdateOne {
	muo.mutation.SetTitle(s)
	return muo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableTitle(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetTitle(*s)
	}
	return muo
}

// ClearTitle clears the value of the "title" field.
func (muo *MediaUpdateOne) ClearTitle() *MediaUpdateOne {
	muo.mutation.ClearTitle()
	return muo
}

// SetDescription sets the "description" field.
func (muo *MediaUpdateOne) SetDescription(s string) *MediaUpdateOne {
	muo.mutation.SetDescription(s)
	return muo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableDescription(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetDescription(*s)
	}
	return muo
}

// ClearDescription clears the value of the "description" field.
func (muo *MediaUpdateOne) ClearDescription() *MediaUpdateOne {
	muo.mutation.ClearDescription()
	return muo
}

// SetUpdateTime sets the "update_time" field.
func (muo *MediaUpdateOne) SetUpdateTime(t time.Time) *MediaUpdateOne {
	muo.mutation.SetUpdateTime(t)
	return muo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (muo *MediaUpdateOne) SetUserID(id uuid.UUID) *MediaUpdateOne {
	muo.mutation.SetUserID(id)
	return muo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableUserID(id *uuid.UUID) *MediaUpdateOne {
	if id != nil {
		muo = muo.SetUserID(*id)
	}
	return muo
}

// SetUser sets the "user" edge to the User entity.
func (muo *MediaUpdateOne) SetUser(u *User) *MediaUpdateOne {
	return muo.SetUserID(u.ID)
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (muo *MediaUpdateOne) SetCarID(id uuid.UUID) *MediaUpdateOne {
	muo.mutation.SetCarID(id)
	return muo
}

// SetNillableCarID sets the "car" edge to the Car entity by ID if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableCarID(id *uuid.UUID) *MediaUpdateOne {
	if id != nil {
		muo = muo.SetCarID(*id)
	}
	return muo
}

// SetCar sets the "car" edge to the Car entity.
func (muo *MediaUpdateOne) SetCar(c *Car) *MediaUpdateOne {
	return muo.SetCarID(c.ID)
}

// SetModProductOptionID sets the "mod_product_option" edge to the ModProductOption entity by ID.
func (muo *MediaUpdateOne) SetModProductOptionID(id uuid.UUID) *MediaUpdateOne {
	muo.mutation.SetModProductOptionID(id)
	return muo
}

// SetNillableModProductOptionID sets the "mod_product_option" edge to the ModProductOption entity by ID if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableModProductOptionID(id *uuid.UUID) *MediaUpdateOne {
	if id != nil {
		muo = muo.SetModProductOptionID(*id)
	}
	return muo
}

// SetModProductOption sets the "mod_product_option" edge to the ModProductOption entity.
func (muo *MediaUpdateOne) SetModProductOption(m *ModProductOption) *MediaUpdateOne {
	return muo.SetModProductOptionID(m.ID)
}

// AddBuildLogIDs adds the "build_log" edge to the BuildLog entity by IDs.
func (muo *MediaUpdateOne) AddBuildLogIDs(ids ...uuid.UUID) *MediaUpdateOne {
	muo.mutation.AddBuildLogIDs(ids...)
	return muo
}

// AddBuildLog adds the "build_log" edges to the BuildLog entity.
func (muo *MediaUpdateOne) AddBuildLog(b ...*BuildLog) *MediaUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return muo.AddBuildLogIDs(ids...)
}

// AddAlbumIDs adds the "albums" edge to the Album entity by IDs.
func (muo *MediaUpdateOne) AddAlbumIDs(ids ...uuid.UUID) *MediaUpdateOne {
	muo.mutation.AddAlbumIDs(ids...)
	return muo
}

// AddAlbums adds the "albums" edges to the Album entity.
func (muo *MediaUpdateOne) AddAlbums(a ...*Album) *MediaUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return muo.AddAlbumIDs(ids...)
}

// Mutation returns the MediaMutation object of the builder.
func (muo *MediaUpdateOne) Mutation() *MediaMutation {
	return muo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (muo *MediaUpdateOne) ClearUser() *MediaUpdateOne {
	muo.mutation.ClearUser()
	return muo
}

// ClearCar clears the "car" edge to the Car entity.
func (muo *MediaUpdateOne) ClearCar() *MediaUpdateOne {
	muo.mutation.ClearCar()
	return muo
}

// ClearModProductOption clears the "mod_product_option" edge to the ModProductOption entity.
func (muo *MediaUpdateOne) ClearModProductOption() *MediaUpdateOne {
	muo.mutation.ClearModProductOption()
	return muo
}

// ClearBuildLog clears all "build_log" edges to the BuildLog entity.
func (muo *MediaUpdateOne) ClearBuildLog() *MediaUpdateOne {
	muo.mutation.ClearBuildLog()
	return muo
}

// RemoveBuildLogIDs removes the "build_log" edge to BuildLog entities by IDs.
func (muo *MediaUpdateOne) RemoveBuildLogIDs(ids ...uuid.UUID) *MediaUpdateOne {
	muo.mutation.RemoveBuildLogIDs(ids...)
	return muo
}

// RemoveBuildLog removes "build_log" edges to BuildLog entities.
func (muo *MediaUpdateOne) RemoveBuildLog(b ...*BuildLog) *MediaUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return muo.RemoveBuildLogIDs(ids...)
}

// ClearAlbums clears all "albums" edges to the Album entity.
func (muo *MediaUpdateOne) ClearAlbums() *MediaUpdateOne {
	muo.mutation.ClearAlbums()
	return muo
}

// RemoveAlbumIDs removes the "albums" edge to Album entities by IDs.
func (muo *MediaUpdateOne) RemoveAlbumIDs(ids ...uuid.UUID) *MediaUpdateOne {
	muo.mutation.RemoveAlbumIDs(ids...)
	return muo
}

// RemoveAlbums removes "albums" edges to Album entities.
func (muo *MediaUpdateOne) RemoveAlbums(a ...*Album) *MediaUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return muo.RemoveAlbumIDs(ids...)
}

// Where appends a list predicates to the MediaUpdate builder.
func (muo *MediaUpdateOne) Where(ps ...predicate.Media) *MediaUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MediaUpdateOne) Select(field string, fields ...string) *MediaUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Media entity.
func (muo *MediaUpdateOne) Save(ctx context.Context) (*Media, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MediaUpdateOne) SaveX(ctx context.Context) *Media {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MediaUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MediaUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MediaUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdateTime(); !ok {
		v := media.UpdateDefaultUpdateTime()
		muo.mutation.SetUpdateTime(v)
	}
}

func (muo *MediaUpdateOne) sqlSave(ctx context.Context) (_node *Media, err error) {
	_spec := sqlgraph.NewUpdateSpec(media.Table, media.Columns, sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Media.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, media.FieldID)
		for _, f := range fields {
			if !media.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != media.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Title(); ok {
		_spec.SetField(media.FieldTitle, field.TypeString, value)
	}
	if muo.mutation.TitleCleared() {
		_spec.ClearField(media.FieldTitle, field.TypeString)
	}
	if value, ok := muo.mutation.Description(); ok {
		_spec.SetField(media.FieldDescription, field.TypeString, value)
	}
	if muo.mutation.DescriptionCleared() {
		_spec.ClearField(media.FieldDescription, field.TypeString)
	}
	if value, ok := muo.mutation.UpdateTime(); ok {
		_spec.SetField(media.FieldUpdateTime, field.TypeTime, value)
	}
	if muo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   media.UserTable,
			Columns: []string{media.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   media.UserTable,
			Columns: []string{media.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   media.CarTable,
			Columns: []string{media.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   media.CarTable,
			Columns: []string{media.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ModProductOptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   media.ModProductOptionTable,
			Columns: []string{media.ModProductOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modproductoption.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ModProductOptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   media.ModProductOptionTable,
			Columns: []string{media.ModProductOptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modproductoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.BuildLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   media.BuildLogTable,
			Columns: media.BuildLogPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(buildlog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedBuildLogIDs(); len(nodes) > 0 && !muo.mutation.BuildLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   media.BuildLogTable,
			Columns: media.BuildLogPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(buildlog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.BuildLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   media.BuildLogTable,
			Columns: media.BuildLogPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(buildlog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.AlbumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   media.AlbumsTable,
			Columns: media.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(album.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedAlbumsIDs(); len(nodes) > 0 && !muo.mutation.AlbumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   media.AlbumsTable,
			Columns: media.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(album.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.AlbumsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   media.AlbumsTable,
			Columns: media.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(album.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Media{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{media.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
