// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/modidea"
	"github.com/google/uuid"
)

// ModIdea is the model entity for the ModIdea schema.
type ModIdea struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Category holds the value of the "category" field.
	Category modidea.Category `json:"category,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Stage holds the value of the "stage" field.
	Stage *string `json:"stage,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ModIdeaQuery when eager-loading is set.
	Edges         ModIdeaEdges `json:"edges"`
	car_mod_ideas *uuid.UUID
	selectValues  sql.SelectValues
}

// ModIdeaEdges holds the relations/edges for other nodes in the graph.
type ModIdeaEdges struct {
	// Car holds the value of the car edge.
	Car *Car `json:"car,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// ProductOptions holds the value of the product_options edge.
	ProductOptions []*ModProductOption `json:"product_options,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedTasks          map[string][]*Task
	namedProductOptions map[string][]*ModProductOption
}

// CarOrErr returns the Car value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ModIdeaEdges) CarOrErr() (*Car, error) {
	if e.Car != nil {
		return e.Car, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: car.Label}
	}
	return nil, &NotLoadedError{edge: "car"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e ModIdeaEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[1] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// ProductOptionsOrErr returns the ProductOptions value or an error if the edge
// was not loaded in eager-loading.
func (e ModIdeaEdges) ProductOptionsOrErr() ([]*ModProductOption, error) {
	if e.loadedTypes[2] {
		return e.ProductOptions, nil
	}
	return nil, &NotLoadedError{edge: "product_options"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ModIdea) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case modidea.FieldTitle, modidea.FieldCategory, modidea.FieldDescription, modidea.FieldStage:
			values[i] = new(sql.NullString)
		case modidea.FieldCreateTime, modidea.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case modidea.FieldID:
			values[i] = new(uuid.UUID)
		case modidea.ForeignKeys[0]: // car_mod_ideas
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ModIdea fields.
func (mi *ModIdea) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case modidea.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				mi.ID = *value
			}
		case modidea.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				mi.CreateTime = value.Time
			}
		case modidea.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				mi.UpdateTime = value.Time
			}
		case modidea.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				mi.Title = value.String
			}
		case modidea.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				mi.Category = modidea.Category(value.String)
			}
		case modidea.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				mi.Description = new(string)
				*mi.Description = value.String
			}
		case modidea.FieldStage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stage", values[i])
			} else if value.Valid {
				mi.Stage = new(string)
				*mi.Stage = value.String
			}
		case modidea.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field car_mod_ideas", values[i])
			} else if value.Valid {
				mi.car_mod_ideas = new(uuid.UUID)
				*mi.car_mod_ideas = *value.S.(*uuid.UUID)
			}
		default:
			mi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ModIdea.
// This includes values selected through modifiers, order, etc.
func (mi *ModIdea) Value(name string) (ent.Value, error) {
	return mi.selectValues.Get(name)
}

// QueryCar queries the "car" edge of the ModIdea entity.
func (mi *ModIdea) QueryCar() *CarQuery {
	return NewModIdeaClient(mi.config).QueryCar(mi)
}

// QueryTasks queries the "tasks" edge of the ModIdea entity.
func (mi *ModIdea) QueryTasks() *TaskQuery {
	return NewModIdeaClient(mi.config).QueryTasks(mi)
}

// QueryProductOptions queries the "product_options" edge of the ModIdea entity.
func (mi *ModIdea) QueryProductOptions() *ModProductOptionQuery {
	return NewModIdeaClient(mi.config).QueryProductOptions(mi)
}

// Update returns a builder for updating this ModIdea.
// Note that you need to call ModIdea.Unwrap() before calling this method if this ModIdea
// was returned from a transaction, and the transaction was committed or rolled back.
func (mi *ModIdea) Update() *ModIdeaUpdateOne {
	return NewModIdeaClient(mi.config).UpdateOne(mi)
}

// Unwrap unwraps the ModIdea entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mi *ModIdea) Unwrap() *ModIdea {
	_tx, ok := mi.config.driver.(*txDriver)
	if !ok {
		panic("ent: ModIdea is not a transactional entity")
	}
	mi.config.driver = _tx.drv
	return mi
}

// String implements the fmt.Stringer.
func (mi *ModIdea) String() string {
	var builder strings.Builder
	builder.WriteString("ModIdea(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mi.ID))
	builder.WriteString("create_time=")
	builder.WriteString(mi.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(mi.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(mi.Title)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(fmt.Sprintf("%v", mi.Category))
	builder.WriteString(", ")
	if v := mi.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := mi.Stage; v != nil {
		builder.WriteString("stage=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedTasks returns the Tasks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (mi *ModIdea) NamedTasks(name string) ([]*Task, error) {
	if mi.Edges.namedTasks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := mi.Edges.namedTasks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (mi *ModIdea) appendNamedTasks(name string, edges ...*Task) {
	if mi.Edges.namedTasks == nil {
		mi.Edges.namedTasks = make(map[string][]*Task)
	}
	if len(edges) == 0 {
		mi.Edges.namedTasks[name] = []*Task{}
	} else {
		mi.Edges.namedTasks[name] = append(mi.Edges.namedTasks[name], edges...)
	}
}

// NamedProductOptions returns the ProductOptions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (mi *ModIdea) NamedProductOptions(name string) ([]*ModProductOption, error) {
	if mi.Edges.namedProductOptions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := mi.Edges.namedProductOptions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (mi *ModIdea) appendNamedProductOptions(name string, edges ...*ModProductOption) {
	if mi.Edges.namedProductOptions == nil {
		mi.Edges.namedProductOptions = make(map[string][]*ModProductOption)
	}
	if len(edges) == 0 {
		mi.Edges.namedProductOptions[name] = []*ModProductOption{}
	} else {
		mi.Edges.namedProductOptions[name] = append(mi.Edges.namedProductOptions[name], edges...)
	}
}

// ModIdeas is a parsable slice of ModIdea.
type ModIdeas []*ModIdea
