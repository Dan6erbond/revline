// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/document"
	"github.com/Dan6erbond/revline/ent/expense"
	"github.com/Dan6erbond/revline/ent/fuelup"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/Dan6erbond/revline/ent/servicelog"
	"github.com/google/uuid"
)

// DocumentUpdate is the builder for updating Document entities.
type DocumentUpdate struct {
	config
	hooks    []Hook
	mutation *DocumentMutation
}

// Where appends a list predicates to the DocumentUpdate builder.
func (du *DocumentUpdate) Where(ps ...predicate.Document) *DocumentUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetUpdateTime sets the "update_time" field.
func (du *DocumentUpdate) SetUpdateTime(t time.Time) *DocumentUpdate {
	du.mutation.SetUpdateTime(t)
	return du
}

// SetName sets the "name" field.
func (du *DocumentUpdate) SetName(s string) *DocumentUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DocumentUpdate) SetNillableName(s *string) *DocumentUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// SetTags sets the "tags" field.
func (du *DocumentUpdate) SetTags(s []string) *DocumentUpdate {
	du.mutation.SetTags(s)
	return du
}

// AppendTags appends s to the "tags" field.
func (du *DocumentUpdate) AppendTags(s []string) *DocumentUpdate {
	du.mutation.AppendTags(s)
	return du
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (du *DocumentUpdate) SetCarID(id uuid.UUID) *DocumentUpdate {
	du.mutation.SetCarID(id)
	return du
}

// SetNillableCarID sets the "car" edge to the Car entity by ID if the given value is not nil.
func (du *DocumentUpdate) SetNillableCarID(id *uuid.UUID) *DocumentUpdate {
	if id != nil {
		du = du.SetCarID(*id)
	}
	return du
}

// SetCar sets the "car" edge to the Car entity.
func (du *DocumentUpdate) SetCar(c *Car) *DocumentUpdate {
	return du.SetCarID(c.ID)
}

// SetExpenseID sets the "expense" edge to the Expense entity by ID.
func (du *DocumentUpdate) SetExpenseID(id uuid.UUID) *DocumentUpdate {
	du.mutation.SetExpenseID(id)
	return du
}

// SetNillableExpenseID sets the "expense" edge to the Expense entity by ID if the given value is not nil.
func (du *DocumentUpdate) SetNillableExpenseID(id *uuid.UUID) *DocumentUpdate {
	if id != nil {
		du = du.SetExpenseID(*id)
	}
	return du
}

// SetExpense sets the "expense" edge to the Expense entity.
func (du *DocumentUpdate) SetExpense(e *Expense) *DocumentUpdate {
	return du.SetExpenseID(e.ID)
}

// SetFuelUpID sets the "fuel_up" edge to the FuelUp entity by ID.
func (du *DocumentUpdate) SetFuelUpID(id uuid.UUID) *DocumentUpdate {
	du.mutation.SetFuelUpID(id)
	return du
}

// SetNillableFuelUpID sets the "fuel_up" edge to the FuelUp entity by ID if the given value is not nil.
func (du *DocumentUpdate) SetNillableFuelUpID(id *uuid.UUID) *DocumentUpdate {
	if id != nil {
		du = du.SetFuelUpID(*id)
	}
	return du
}

// SetFuelUp sets the "fuel_up" edge to the FuelUp entity.
func (du *DocumentUpdate) SetFuelUp(f *FuelUp) *DocumentUpdate {
	return du.SetFuelUpID(f.ID)
}

// SetServiceLogID sets the "service_log" edge to the ServiceLog entity by ID.
func (du *DocumentUpdate) SetServiceLogID(id uuid.UUID) *DocumentUpdate {
	du.mutation.SetServiceLogID(id)
	return du
}

// SetNillableServiceLogID sets the "service_log" edge to the ServiceLog entity by ID if the given value is not nil.
func (du *DocumentUpdate) SetNillableServiceLogID(id *uuid.UUID) *DocumentUpdate {
	if id != nil {
		du = du.SetServiceLogID(*id)
	}
	return du
}

// SetServiceLog sets the "service_log" edge to the ServiceLog entity.
func (du *DocumentUpdate) SetServiceLog(s *ServiceLog) *DocumentUpdate {
	return du.SetServiceLogID(s.ID)
}

// Mutation returns the DocumentMutation object of the builder.
func (du *DocumentUpdate) Mutation() *DocumentMutation {
	return du.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (du *DocumentUpdate) ClearCar() *DocumentUpdate {
	du.mutation.ClearCar()
	return du
}

// ClearExpense clears the "expense" edge to the Expense entity.
func (du *DocumentUpdate) ClearExpense() *DocumentUpdate {
	du.mutation.ClearExpense()
	return du
}

// ClearFuelUp clears the "fuel_up" edge to the FuelUp entity.
func (du *DocumentUpdate) ClearFuelUp() *DocumentUpdate {
	du.mutation.ClearFuelUp()
	return du
}

// ClearServiceLog clears the "service_log" edge to the ServiceLog entity.
func (du *DocumentUpdate) ClearServiceLog() *DocumentUpdate {
	du.mutation.ClearServiceLog()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DocumentUpdate) Save(ctx context.Context) (int, error) {
	du.defaults()
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DocumentUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DocumentUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DocumentUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DocumentUpdate) defaults() {
	if _, ok := du.mutation.UpdateTime(); !ok {
		v := document.UpdateDefaultUpdateTime()
		du.mutation.SetUpdateTime(v)
	}
}

func (du *DocumentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(document.Table, document.Columns, sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.UpdateTime(); ok {
		_spec.SetField(document.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(document.FieldName, field.TypeString, value)
	}
	if value, ok := du.mutation.Tags(); ok {
		_spec.SetField(document.FieldTags, field.TypeJSON, value)
	}
	if value, ok := du.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, document.FieldTags, value)
		})
	}
	if du.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.CarTable,
			Columns: []string{document.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.CarTable,
			Columns: []string{document.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ExpenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.ExpenseTable,
			Columns: []string{document.ExpenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(expense.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ExpenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.ExpenseTable,
			Columns: []string{document.ExpenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(expense.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.FuelUpCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.FuelUpTable,
			Columns: []string{document.FuelUpColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fuelup.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.FuelUpIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.FuelUpTable,
			Columns: []string{document.FuelUpColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fuelup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ServiceLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.ServiceLogTable,
			Columns: []string{document.ServiceLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ServiceLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.ServiceLogTable,
			Columns: []string{document.ServiceLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{document.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DocumentUpdateOne is the builder for updating a single Document entity.
type DocumentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DocumentMutation
}

// SetUpdateTime sets the "update_time" field.
func (duo *DocumentUpdateOne) SetUpdateTime(t time.Time) *DocumentUpdateOne {
	duo.mutation.SetUpdateTime(t)
	return duo
}

// SetName sets the "name" field.
func (duo *DocumentUpdateOne) SetName(s string) *DocumentUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableName(s *string) *DocumentUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// SetTags sets the "tags" field.
func (duo *DocumentUpdateOne) SetTags(s []string) *DocumentUpdateOne {
	duo.mutation.SetTags(s)
	return duo
}

// AppendTags appends s to the "tags" field.
func (duo *DocumentUpdateOne) AppendTags(s []string) *DocumentUpdateOne {
	duo.mutation.AppendTags(s)
	return duo
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (duo *DocumentUpdateOne) SetCarID(id uuid.UUID) *DocumentUpdateOne {
	duo.mutation.SetCarID(id)
	return duo
}

// SetNillableCarID sets the "car" edge to the Car entity by ID if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableCarID(id *uuid.UUID) *DocumentUpdateOne {
	if id != nil {
		duo = duo.SetCarID(*id)
	}
	return duo
}

// SetCar sets the "car" edge to the Car entity.
func (duo *DocumentUpdateOne) SetCar(c *Car) *DocumentUpdateOne {
	return duo.SetCarID(c.ID)
}

// SetExpenseID sets the "expense" edge to the Expense entity by ID.
func (duo *DocumentUpdateOne) SetExpenseID(id uuid.UUID) *DocumentUpdateOne {
	duo.mutation.SetExpenseID(id)
	return duo
}

// SetNillableExpenseID sets the "expense" edge to the Expense entity by ID if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableExpenseID(id *uuid.UUID) *DocumentUpdateOne {
	if id != nil {
		duo = duo.SetExpenseID(*id)
	}
	return duo
}

// SetExpense sets the "expense" edge to the Expense entity.
func (duo *DocumentUpdateOne) SetExpense(e *Expense) *DocumentUpdateOne {
	return duo.SetExpenseID(e.ID)
}

// SetFuelUpID sets the "fuel_up" edge to the FuelUp entity by ID.
func (duo *DocumentUpdateOne) SetFuelUpID(id uuid.UUID) *DocumentUpdateOne {
	duo.mutation.SetFuelUpID(id)
	return duo
}

// SetNillableFuelUpID sets the "fuel_up" edge to the FuelUp entity by ID if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableFuelUpID(id *uuid.UUID) *DocumentUpdateOne {
	if id != nil {
		duo = duo.SetFuelUpID(*id)
	}
	return duo
}

// SetFuelUp sets the "fuel_up" edge to the FuelUp entity.
func (duo *DocumentUpdateOne) SetFuelUp(f *FuelUp) *DocumentUpdateOne {
	return duo.SetFuelUpID(f.ID)
}

// SetServiceLogID sets the "service_log" edge to the ServiceLog entity by ID.
func (duo *DocumentUpdateOne) SetServiceLogID(id uuid.UUID) *DocumentUpdateOne {
	duo.mutation.SetServiceLogID(id)
	return duo
}

// SetNillableServiceLogID sets the "service_log" edge to the ServiceLog entity by ID if the given value is not nil.
func (duo *DocumentUpdateOne) SetNillableServiceLogID(id *uuid.UUID) *DocumentUpdateOne {
	if id != nil {
		duo = duo.SetServiceLogID(*id)
	}
	return duo
}

// SetServiceLog sets the "service_log" edge to the ServiceLog entity.
func (duo *DocumentUpdateOne) SetServiceLog(s *ServiceLog) *DocumentUpdateOne {
	return duo.SetServiceLogID(s.ID)
}

// Mutation returns the DocumentMutation object of the builder.
func (duo *DocumentUpdateOne) Mutation() *DocumentMutation {
	return duo.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (duo *DocumentUpdateOne) ClearCar() *DocumentUpdateOne {
	duo.mutation.ClearCar()
	return duo
}

// ClearExpense clears the "expense" edge to the Expense entity.
func (duo *DocumentUpdateOne) ClearExpense() *DocumentUpdateOne {
	duo.mutation.ClearExpense()
	return duo
}

// ClearFuelUp clears the "fuel_up" edge to the FuelUp entity.
func (duo *DocumentUpdateOne) ClearFuelUp() *DocumentUpdateOne {
	duo.mutation.ClearFuelUp()
	return duo
}

// ClearServiceLog clears the "service_log" edge to the ServiceLog entity.
func (duo *DocumentUpdateOne) ClearServiceLog() *DocumentUpdateOne {
	duo.mutation.ClearServiceLog()
	return duo
}

// Where appends a list predicates to the DocumentUpdate builder.
func (duo *DocumentUpdateOne) Where(ps ...predicate.Document) *DocumentUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DocumentUpdateOne) Select(field string, fields ...string) *DocumentUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Document entity.
func (duo *DocumentUpdateOne) Save(ctx context.Context) (*Document, error) {
	duo.defaults()
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DocumentUpdateOne) SaveX(ctx context.Context) *Document {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DocumentUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DocumentUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DocumentUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdateTime(); !ok {
		v := document.UpdateDefaultUpdateTime()
		duo.mutation.SetUpdateTime(v)
	}
}

func (duo *DocumentUpdateOne) sqlSave(ctx context.Context) (_node *Document, err error) {
	_spec := sqlgraph.NewUpdateSpec(document.Table, document.Columns, sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Document.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, document.FieldID)
		for _, f := range fields {
			if !document.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != document.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.UpdateTime(); ok {
		_spec.SetField(document.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(document.FieldName, field.TypeString, value)
	}
	if value, ok := duo.mutation.Tags(); ok {
		_spec.SetField(document.FieldTags, field.TypeJSON, value)
	}
	if value, ok := duo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, document.FieldTags, value)
		})
	}
	if duo.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.CarTable,
			Columns: []string{document.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.CarTable,
			Columns: []string{document.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ExpenseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.ExpenseTable,
			Columns: []string{document.ExpenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(expense.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ExpenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.ExpenseTable,
			Columns: []string{document.ExpenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(expense.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.FuelUpCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.FuelUpTable,
			Columns: []string{document.FuelUpColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fuelup.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.FuelUpIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.FuelUpTable,
			Columns: []string{document.FuelUpColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fuelup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ServiceLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.ServiceLogTable,
			Columns: []string{document.ServiceLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ServiceLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   document.ServiceLogTable,
			Columns: []string{document.ServiceLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Document{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{document.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
