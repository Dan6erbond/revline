// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/document"
	"github.com/Dan6erbond/revline/ent/expense"
	"github.com/Dan6erbond/revline/ent/odometerreading"
	"github.com/Dan6erbond/revline/ent/serviceitem"
	"github.com/Dan6erbond/revline/ent/servicelog"
	"github.com/Dan6erbond/revline/ent/serviceschedule"
	"github.com/google/uuid"
)

// ServiceLogCreate is the builder for creating a ServiceLog entity.
type ServiceLogCreate struct {
	config
	mutation *ServiceLogMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (slc *ServiceLogCreate) SetCreateTime(t time.Time) *ServiceLogCreate {
	slc.mutation.SetCreateTime(t)
	return slc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (slc *ServiceLogCreate) SetNillableCreateTime(t *time.Time) *ServiceLogCreate {
	if t != nil {
		slc.SetCreateTime(*t)
	}
	return slc
}

// SetUpdateTime sets the "update_time" field.
func (slc *ServiceLogCreate) SetUpdateTime(t time.Time) *ServiceLogCreate {
	slc.mutation.SetUpdateTime(t)
	return slc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (slc *ServiceLogCreate) SetNillableUpdateTime(t *time.Time) *ServiceLogCreate {
	if t != nil {
		slc.SetUpdateTime(*t)
	}
	return slc
}

// SetDatePerformed sets the "date_performed" field.
func (slc *ServiceLogCreate) SetDatePerformed(t time.Time) *ServiceLogCreate {
	slc.mutation.SetDatePerformed(t)
	return slc
}

// SetPerformedBy sets the "performed_by" field.
func (slc *ServiceLogCreate) SetPerformedBy(s string) *ServiceLogCreate {
	slc.mutation.SetPerformedBy(s)
	return slc
}

// SetNillablePerformedBy sets the "performed_by" field if the given value is not nil.
func (slc *ServiceLogCreate) SetNillablePerformedBy(s *string) *ServiceLogCreate {
	if s != nil {
		slc.SetPerformedBy(*s)
	}
	return slc
}

// SetNotes sets the "notes" field.
func (slc *ServiceLogCreate) SetNotes(s string) *ServiceLogCreate {
	slc.mutation.SetNotes(s)
	return slc
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (slc *ServiceLogCreate) SetNillableNotes(s *string) *ServiceLogCreate {
	if s != nil {
		slc.SetNotes(*s)
	}
	return slc
}

// SetID sets the "id" field.
func (slc *ServiceLogCreate) SetID(u uuid.UUID) *ServiceLogCreate {
	slc.mutation.SetID(u)
	return slc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (slc *ServiceLogCreate) SetNillableID(u *uuid.UUID) *ServiceLogCreate {
	if u != nil {
		slc.SetID(*u)
	}
	return slc
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (slc *ServiceLogCreate) SetCarID(id uuid.UUID) *ServiceLogCreate {
	slc.mutation.SetCarID(id)
	return slc
}

// SetCar sets the "car" edge to the Car entity.
func (slc *ServiceLogCreate) SetCar(c *Car) *ServiceLogCreate {
	return slc.SetCarID(c.ID)
}

// AddItemIDs adds the "items" edge to the ServiceItem entity by IDs.
func (slc *ServiceLogCreate) AddItemIDs(ids ...uuid.UUID) *ServiceLogCreate {
	slc.mutation.AddItemIDs(ids...)
	return slc
}

// AddItems adds the "items" edges to the ServiceItem entity.
func (slc *ServiceLogCreate) AddItems(s ...*ServiceItem) *ServiceLogCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return slc.AddItemIDs(ids...)
}

// SetScheduleID sets the "schedule" edge to the ServiceSchedule entity by ID.
func (slc *ServiceLogCreate) SetScheduleID(id uuid.UUID) *ServiceLogCreate {
	slc.mutation.SetScheduleID(id)
	return slc
}

// SetNillableScheduleID sets the "schedule" edge to the ServiceSchedule entity by ID if the given value is not nil.
func (slc *ServiceLogCreate) SetNillableScheduleID(id *uuid.UUID) *ServiceLogCreate {
	if id != nil {
		slc = slc.SetScheduleID(*id)
	}
	return slc
}

// SetSchedule sets the "schedule" edge to the ServiceSchedule entity.
func (slc *ServiceLogCreate) SetSchedule(s *ServiceSchedule) *ServiceLogCreate {
	return slc.SetScheduleID(s.ID)
}

// SetOdometerReadingID sets the "odometer_reading" edge to the OdometerReading entity by ID.
func (slc *ServiceLogCreate) SetOdometerReadingID(id uuid.UUID) *ServiceLogCreate {
	slc.mutation.SetOdometerReadingID(id)
	return slc
}

// SetNillableOdometerReadingID sets the "odometer_reading" edge to the OdometerReading entity by ID if the given value is not nil.
func (slc *ServiceLogCreate) SetNillableOdometerReadingID(id *uuid.UUID) *ServiceLogCreate {
	if id != nil {
		slc = slc.SetOdometerReadingID(*id)
	}
	return slc
}

// SetOdometerReading sets the "odometer_reading" edge to the OdometerReading entity.
func (slc *ServiceLogCreate) SetOdometerReading(o *OdometerReading) *ServiceLogCreate {
	return slc.SetOdometerReadingID(o.ID)
}

// SetExpenseID sets the "expense" edge to the Expense entity by ID.
func (slc *ServiceLogCreate) SetExpenseID(id uuid.UUID) *ServiceLogCreate {
	slc.mutation.SetExpenseID(id)
	return slc
}

// SetNillableExpenseID sets the "expense" edge to the Expense entity by ID if the given value is not nil.
func (slc *ServiceLogCreate) SetNillableExpenseID(id *uuid.UUID) *ServiceLogCreate {
	if id != nil {
		slc = slc.SetExpenseID(*id)
	}
	return slc
}

// SetExpense sets the "expense" edge to the Expense entity.
func (slc *ServiceLogCreate) SetExpense(e *Expense) *ServiceLogCreate {
	return slc.SetExpenseID(e.ID)
}

// AddDocumentIDs adds the "documents" edge to the Document entity by IDs.
func (slc *ServiceLogCreate) AddDocumentIDs(ids ...uuid.UUID) *ServiceLogCreate {
	slc.mutation.AddDocumentIDs(ids...)
	return slc
}

// AddDocuments adds the "documents" edges to the Document entity.
func (slc *ServiceLogCreate) AddDocuments(d ...*Document) *ServiceLogCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return slc.AddDocumentIDs(ids...)
}

// Mutation returns the ServiceLogMutation object of the builder.
func (slc *ServiceLogCreate) Mutation() *ServiceLogMutation {
	return slc.mutation
}

// Save creates the ServiceLog in the database.
func (slc *ServiceLogCreate) Save(ctx context.Context) (*ServiceLog, error) {
	slc.defaults()
	return withHooks(ctx, slc.sqlSave, slc.mutation, slc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (slc *ServiceLogCreate) SaveX(ctx context.Context) *ServiceLog {
	v, err := slc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slc *ServiceLogCreate) Exec(ctx context.Context) error {
	_, err := slc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slc *ServiceLogCreate) ExecX(ctx context.Context) {
	if err := slc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (slc *ServiceLogCreate) defaults() {
	if _, ok := slc.mutation.CreateTime(); !ok {
		v := servicelog.DefaultCreateTime()
		slc.mutation.SetCreateTime(v)
	}
	if _, ok := slc.mutation.UpdateTime(); !ok {
		v := servicelog.DefaultUpdateTime()
		slc.mutation.SetUpdateTime(v)
	}
	if _, ok := slc.mutation.ID(); !ok {
		v := servicelog.DefaultID()
		slc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slc *ServiceLogCreate) check() error {
	if _, ok := slc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "ServiceLog.create_time"`)}
	}
	if _, ok := slc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "ServiceLog.update_time"`)}
	}
	if _, ok := slc.mutation.DatePerformed(); !ok {
		return &ValidationError{Name: "date_performed", err: errors.New(`ent: missing required field "ServiceLog.date_performed"`)}
	}
	if len(slc.mutation.CarIDs()) == 0 {
		return &ValidationError{Name: "car", err: errors.New(`ent: missing required edge "ServiceLog.car"`)}
	}
	return nil
}

func (slc *ServiceLogCreate) sqlSave(ctx context.Context) (*ServiceLog, error) {
	if err := slc.check(); err != nil {
		return nil, err
	}
	_node, _spec := slc.createSpec()
	if err := sqlgraph.CreateNode(ctx, slc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	slc.mutation.id = &_node.ID
	slc.mutation.done = true
	return _node, nil
}

func (slc *ServiceLogCreate) createSpec() (*ServiceLog, *sqlgraph.CreateSpec) {
	var (
		_node = &ServiceLog{config: slc.config}
		_spec = sqlgraph.NewCreateSpec(servicelog.Table, sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID))
	)
	if id, ok := slc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := slc.mutation.CreateTime(); ok {
		_spec.SetField(servicelog.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := slc.mutation.UpdateTime(); ok {
		_spec.SetField(servicelog.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := slc.mutation.DatePerformed(); ok {
		_spec.SetField(servicelog.FieldDatePerformed, field.TypeTime, value)
		_node.DatePerformed = value
	}
	if value, ok := slc.mutation.PerformedBy(); ok {
		_spec.SetField(servicelog.FieldPerformedBy, field.TypeString, value)
		_node.PerformedBy = &value
	}
	if value, ok := slc.mutation.Notes(); ok {
		_spec.SetField(servicelog.FieldNotes, field.TypeString, value)
		_node.Notes = &value
	}
	if nodes := slc.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicelog.CarTable,
			Columns: []string{servicelog.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.car_service_logs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := slc.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   servicelog.ItemsTable,
			Columns: servicelog.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := slc.mutation.ScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   servicelog.ScheduleTable,
			Columns: []string{servicelog.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceschedule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.service_schedule_logs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := slc.mutation.OdometerReadingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   servicelog.OdometerReadingTable,
			Columns: []string{servicelog.OdometerReadingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(odometerreading.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.odometer_reading_service_log = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := slc.mutation.ExpenseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   servicelog.ExpenseTable,
			Columns: []string{servicelog.ExpenseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(expense.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := slc.mutation.DocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   servicelog.DocumentsTable,
			Columns: []string{servicelog.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ServiceLogCreateBulk is the builder for creating many ServiceLog entities in bulk.
type ServiceLogCreateBulk struct {
	config
	err      error
	builders []*ServiceLogCreate
}

// Save creates the ServiceLog entities in the database.
func (slcb *ServiceLogCreateBulk) Save(ctx context.Context) ([]*ServiceLog, error) {
	if slcb.err != nil {
		return nil, slcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(slcb.builders))
	nodes := make([]*ServiceLog, len(slcb.builders))
	mutators := make([]Mutator, len(slcb.builders))
	for i := range slcb.builders {
		func(i int, root context.Context) {
			builder := slcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, slcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, slcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, slcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (slcb *ServiceLogCreateBulk) SaveX(ctx context.Context) []*ServiceLog {
	v, err := slcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (slcb *ServiceLogCreateBulk) Exec(ctx context.Context) error {
	_, err := slcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slcb *ServiceLogCreateBulk) ExecX(ctx context.Context) {
	if err := slcb.Exec(ctx); err != nil {
		panic(err)
	}
}
