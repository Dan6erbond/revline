// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/dragresult"
	"github.com/Dan6erbond/revline/ent/dragsession"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/google/uuid"
)

// DragResultUpdate is the builder for updating DragResult entities.
type DragResultUpdate struct {
	config
	hooks    []Hook
	mutation *DragResultMutation
}

// Where appends a list predicates to the DragResultUpdate builder.
func (dru *DragResultUpdate) Where(ps ...predicate.DragResult) *DragResultUpdate {
	dru.mutation.Where(ps...)
	return dru
}

// SetUpdateTime sets the "update_time" field.
func (dru *DragResultUpdate) SetUpdateTime(t time.Time) *DragResultUpdate {
	dru.mutation.SetUpdateTime(t)
	return dru
}

// SetUnit sets the "unit" field.
func (dru *DragResultUpdate) SetUnit(d dragresult.Unit) *DragResultUpdate {
	dru.mutation.SetUnit(d)
	return dru
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (dru *DragResultUpdate) SetNillableUnit(d *dragresult.Unit) *DragResultUpdate {
	if d != nil {
		dru.SetUnit(*d)
	}
	return dru
}

// SetValue sets the "value" field.
func (dru *DragResultUpdate) SetValue(f float64) *DragResultUpdate {
	dru.mutation.ResetValue()
	dru.mutation.SetValue(f)
	return dru
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (dru *DragResultUpdate) SetNillableValue(f *float64) *DragResultUpdate {
	if f != nil {
		dru.SetValue(*f)
	}
	return dru
}

// AddValue adds f to the "value" field.
func (dru *DragResultUpdate) AddValue(f float64) *DragResultUpdate {
	dru.mutation.AddValue(f)
	return dru
}

// SetResult sets the "result" field.
func (dru *DragResultUpdate) SetResult(f float64) *DragResultUpdate {
	dru.mutation.ResetResult()
	dru.mutation.SetResult(f)
	return dru
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (dru *DragResultUpdate) SetNillableResult(f *float64) *DragResultUpdate {
	if f != nil {
		dru.SetResult(*f)
	}
	return dru
}

// AddResult adds f to the "result" field.
func (dru *DragResultUpdate) AddResult(f float64) *DragResultUpdate {
	dru.mutation.AddResult(f)
	return dru
}

// SetSessionID sets the "session" edge to the DragSession entity by ID.
func (dru *DragResultUpdate) SetSessionID(id uuid.UUID) *DragResultUpdate {
	dru.mutation.SetSessionID(id)
	return dru
}

// SetSession sets the "session" edge to the DragSession entity.
func (dru *DragResultUpdate) SetSession(d *DragSession) *DragResultUpdate {
	return dru.SetSessionID(d.ID)
}

// Mutation returns the DragResultMutation object of the builder.
func (dru *DragResultUpdate) Mutation() *DragResultMutation {
	return dru.mutation
}

// ClearSession clears the "session" edge to the DragSession entity.
func (dru *DragResultUpdate) ClearSession() *DragResultUpdate {
	dru.mutation.ClearSession()
	return dru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dru *DragResultUpdate) Save(ctx context.Context) (int, error) {
	dru.defaults()
	return withHooks(ctx, dru.sqlSave, dru.mutation, dru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dru *DragResultUpdate) SaveX(ctx context.Context) int {
	affected, err := dru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dru *DragResultUpdate) Exec(ctx context.Context) error {
	_, err := dru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dru *DragResultUpdate) ExecX(ctx context.Context) {
	if err := dru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dru *DragResultUpdate) defaults() {
	if _, ok := dru.mutation.UpdateTime(); !ok {
		v := dragresult.UpdateDefaultUpdateTime()
		dru.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dru *DragResultUpdate) check() error {
	if v, ok := dru.mutation.Unit(); ok {
		if err := dragresult.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf(`ent: validator failed for field "DragResult.unit": %w`, err)}
		}
	}
	if dru.mutation.SessionCleared() && len(dru.mutation.SessionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DragResult.session"`)
	}
	return nil
}

func (dru *DragResultUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(dragresult.Table, dragresult.Columns, sqlgraph.NewFieldSpec(dragresult.FieldID, field.TypeUUID))
	if ps := dru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dru.mutation.UpdateTime(); ok {
		_spec.SetField(dragresult.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := dru.mutation.Unit(); ok {
		_spec.SetField(dragresult.FieldUnit, field.TypeEnum, value)
	}
	if value, ok := dru.mutation.Value(); ok {
		_spec.SetField(dragresult.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := dru.mutation.AddedValue(); ok {
		_spec.AddField(dragresult.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := dru.mutation.Result(); ok {
		_spec.SetField(dragresult.FieldResult, field.TypeFloat64, value)
	}
	if value, ok := dru.mutation.AddedResult(); ok {
		_spec.AddField(dragresult.FieldResult, field.TypeFloat64, value)
	}
	if dru.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dragresult.SessionTable,
			Columns: []string{dragresult.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dragsession.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dru.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dragresult.SessionTable,
			Columns: []string{dragresult.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dragsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dragresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dru.mutation.done = true
	return n, nil
}

// DragResultUpdateOne is the builder for updating a single DragResult entity.
type DragResultUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DragResultMutation
}

// SetUpdateTime sets the "update_time" field.
func (druo *DragResultUpdateOne) SetUpdateTime(t time.Time) *DragResultUpdateOne {
	druo.mutation.SetUpdateTime(t)
	return druo
}

// SetUnit sets the "unit" field.
func (druo *DragResultUpdateOne) SetUnit(d dragresult.Unit) *DragResultUpdateOne {
	druo.mutation.SetUnit(d)
	return druo
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (druo *DragResultUpdateOne) SetNillableUnit(d *dragresult.Unit) *DragResultUpdateOne {
	if d != nil {
		druo.SetUnit(*d)
	}
	return druo
}

// SetValue sets the "value" field.
func (druo *DragResultUpdateOne) SetValue(f float64) *DragResultUpdateOne {
	druo.mutation.ResetValue()
	druo.mutation.SetValue(f)
	return druo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (druo *DragResultUpdateOne) SetNillableValue(f *float64) *DragResultUpdateOne {
	if f != nil {
		druo.SetValue(*f)
	}
	return druo
}

// AddValue adds f to the "value" field.
func (druo *DragResultUpdateOne) AddValue(f float64) *DragResultUpdateOne {
	druo.mutation.AddValue(f)
	return druo
}

// SetResult sets the "result" field.
func (druo *DragResultUpdateOne) SetResult(f float64) *DragResultUpdateOne {
	druo.mutation.ResetResult()
	druo.mutation.SetResult(f)
	return druo
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (druo *DragResultUpdateOne) SetNillableResult(f *float64) *DragResultUpdateOne {
	if f != nil {
		druo.SetResult(*f)
	}
	return druo
}

// AddResult adds f to the "result" field.
func (druo *DragResultUpdateOne) AddResult(f float64) *DragResultUpdateOne {
	druo.mutation.AddResult(f)
	return druo
}

// SetSessionID sets the "session" edge to the DragSession entity by ID.
func (druo *DragResultUpdateOne) SetSessionID(id uuid.UUID) *DragResultUpdateOne {
	druo.mutation.SetSessionID(id)
	return druo
}

// SetSession sets the "session" edge to the DragSession entity.
func (druo *DragResultUpdateOne) SetSession(d *DragSession) *DragResultUpdateOne {
	return druo.SetSessionID(d.ID)
}

// Mutation returns the DragResultMutation object of the builder.
func (druo *DragResultUpdateOne) Mutation() *DragResultMutation {
	return druo.mutation
}

// ClearSession clears the "session" edge to the DragSession entity.
func (druo *DragResultUpdateOne) ClearSession() *DragResultUpdateOne {
	druo.mutation.ClearSession()
	return druo
}

// Where appends a list predicates to the DragResultUpdate builder.
func (druo *DragResultUpdateOne) Where(ps ...predicate.DragResult) *DragResultUpdateOne {
	druo.mutation.Where(ps...)
	return druo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (druo *DragResultUpdateOne) Select(field string, fields ...string) *DragResultUpdateOne {
	druo.fields = append([]string{field}, fields...)
	return druo
}

// Save executes the query and returns the updated DragResult entity.
func (druo *DragResultUpdateOne) Save(ctx context.Context) (*DragResult, error) {
	druo.defaults()
	return withHooks(ctx, druo.sqlSave, druo.mutation, druo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (druo *DragResultUpdateOne) SaveX(ctx context.Context) *DragResult {
	node, err := druo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (druo *DragResultUpdateOne) Exec(ctx context.Context) error {
	_, err := druo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (druo *DragResultUpdateOne) ExecX(ctx context.Context) {
	if err := druo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (druo *DragResultUpdateOne) defaults() {
	if _, ok := druo.mutation.UpdateTime(); !ok {
		v := dragresult.UpdateDefaultUpdateTime()
		druo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (druo *DragResultUpdateOne) check() error {
	if v, ok := druo.mutation.Unit(); ok {
		if err := dragresult.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf(`ent: validator failed for field "DragResult.unit": %w`, err)}
		}
	}
	if druo.mutation.SessionCleared() && len(druo.mutation.SessionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DragResult.session"`)
	}
	return nil
}

func (druo *DragResultUpdateOne) sqlSave(ctx context.Context) (_node *DragResult, err error) {
	if err := druo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dragresult.Table, dragresult.Columns, sqlgraph.NewFieldSpec(dragresult.FieldID, field.TypeUUID))
	id, ok := druo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DragResult.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := druo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dragresult.FieldID)
		for _, f := range fields {
			if !dragresult.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dragresult.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := druo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := druo.mutation.UpdateTime(); ok {
		_spec.SetField(dragresult.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := druo.mutation.Unit(); ok {
		_spec.SetField(dragresult.FieldUnit, field.TypeEnum, value)
	}
	if value, ok := druo.mutation.Value(); ok {
		_spec.SetField(dragresult.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := druo.mutation.AddedValue(); ok {
		_spec.AddField(dragresult.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := druo.mutation.Result(); ok {
		_spec.SetField(dragresult.FieldResult, field.TypeFloat64, value)
	}
	if value, ok := druo.mutation.AddedResult(); ok {
		_spec.AddField(dragresult.FieldResult, field.TypeFloat64, value)
	}
	if druo.mutation.SessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dragresult.SessionTable,
			Columns: []string{dragresult.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dragsession.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := druo.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dragresult.SessionTable,
			Columns: []string{dragresult.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dragsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DragResult{config: druo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, druo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dragresult.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	druo.mutation.done = true
	return _node, nil
}
