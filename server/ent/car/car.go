// Code generated by ent, DO NOT EDIT.

package car

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the car type in the database.
	Label = "car"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldMake holds the string denoting the make field in the database.
	FieldMake = "make"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldYear holds the string denoting the year field in the database.
	FieldYear = "year"
	// FieldTrim holds the string denoting the trim field in the database.
	FieldTrim = "trim"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeDragSessions holds the string denoting the drag_sessions edge name in mutations.
	EdgeDragSessions = "drag_sessions"
	// EdgeFuelUps holds the string denoting the fuel_ups edge name in mutations.
	EdgeFuelUps = "fuel_ups"
	// EdgeOdometerReadings holds the string denoting the odometer_readings edge name in mutations.
	EdgeOdometerReadings = "odometer_readings"
	// EdgeServiceItems holds the string denoting the service_items edge name in mutations.
	EdgeServiceItems = "service_items"
	// EdgeServiceLogs holds the string denoting the service_logs edge name in mutations.
	EdgeServiceLogs = "service_logs"
	// EdgeServiceSchedules holds the string denoting the service_schedules edge name in mutations.
	EdgeServiceSchedules = "service_schedules"
	// EdgeMedia holds the string denoting the media edge name in mutations.
	EdgeMedia = "media"
	// EdgeDocuments holds the string denoting the documents edge name in mutations.
	EdgeDocuments = "documents"
	// EdgeDynoSessions holds the string denoting the dyno_sessions edge name in mutations.
	EdgeDynoSessions = "dyno_sessions"
	// EdgeBannerImage holds the string denoting the banner_image edge name in mutations.
	EdgeBannerImage = "banner_image"
	// Table holds the table name of the car in the database.
	Table = "cars"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "cars"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_cars"
	// DragSessionsTable is the table that holds the drag_sessions relation/edge.
	DragSessionsTable = "drag_sessions"
	// DragSessionsInverseTable is the table name for the DragSession entity.
	// It exists in this package in order to avoid circular dependency with the "dragsession" package.
	DragSessionsInverseTable = "drag_sessions"
	// DragSessionsColumn is the table column denoting the drag_sessions relation/edge.
	DragSessionsColumn = "car_drag_sessions"
	// FuelUpsTable is the table that holds the fuel_ups relation/edge.
	FuelUpsTable = "fuel_ups"
	// FuelUpsInverseTable is the table name for the FuelUp entity.
	// It exists in this package in order to avoid circular dependency with the "fuelup" package.
	FuelUpsInverseTable = "fuel_ups"
	// FuelUpsColumn is the table column denoting the fuel_ups relation/edge.
	FuelUpsColumn = "car_fuel_ups"
	// OdometerReadingsTable is the table that holds the odometer_readings relation/edge.
	OdometerReadingsTable = "odometer_readings"
	// OdometerReadingsInverseTable is the table name for the OdometerReading entity.
	// It exists in this package in order to avoid circular dependency with the "odometerreading" package.
	OdometerReadingsInverseTable = "odometer_readings"
	// OdometerReadingsColumn is the table column denoting the odometer_readings relation/edge.
	OdometerReadingsColumn = "car_odometer_readings"
	// ServiceItemsTable is the table that holds the service_items relation/edge.
	ServiceItemsTable = "service_items"
	// ServiceItemsInverseTable is the table name for the ServiceItem entity.
	// It exists in this package in order to avoid circular dependency with the "serviceitem" package.
	ServiceItemsInverseTable = "service_items"
	// ServiceItemsColumn is the table column denoting the service_items relation/edge.
	ServiceItemsColumn = "car_service_items"
	// ServiceLogsTable is the table that holds the service_logs relation/edge.
	ServiceLogsTable = "service_logs"
	// ServiceLogsInverseTable is the table name for the ServiceLog entity.
	// It exists in this package in order to avoid circular dependency with the "servicelog" package.
	ServiceLogsInverseTable = "service_logs"
	// ServiceLogsColumn is the table column denoting the service_logs relation/edge.
	ServiceLogsColumn = "car_service_logs"
	// ServiceSchedulesTable is the table that holds the service_schedules relation/edge.
	ServiceSchedulesTable = "service_schedules"
	// ServiceSchedulesInverseTable is the table name for the ServiceSchedule entity.
	// It exists in this package in order to avoid circular dependency with the "serviceschedule" package.
	ServiceSchedulesInverseTable = "service_schedules"
	// ServiceSchedulesColumn is the table column denoting the service_schedules relation/edge.
	ServiceSchedulesColumn = "car_service_schedules"
	// MediaTable is the table that holds the media relation/edge.
	MediaTable = "media"
	// MediaInverseTable is the table name for the Media entity.
	// It exists in this package in order to avoid circular dependency with the "media" package.
	MediaInverseTable = "media"
	// MediaColumn is the table column denoting the media relation/edge.
	MediaColumn = "car_media"
	// DocumentsTable is the table that holds the documents relation/edge.
	DocumentsTable = "documents"
	// DocumentsInverseTable is the table name for the Document entity.
	// It exists in this package in order to avoid circular dependency with the "document" package.
	DocumentsInverseTable = "documents"
	// DocumentsColumn is the table column denoting the documents relation/edge.
	DocumentsColumn = "car_documents"
	// DynoSessionsTable is the table that holds the dyno_sessions relation/edge.
	DynoSessionsTable = "dyno_sessions"
	// DynoSessionsInverseTable is the table name for the DynoSession entity.
	// It exists in this package in order to avoid circular dependency with the "dynosession" package.
	DynoSessionsInverseTable = "dyno_sessions"
	// DynoSessionsColumn is the table column denoting the dyno_sessions relation/edge.
	DynoSessionsColumn = "car_dyno_sessions"
	// BannerImageTable is the table that holds the banner_image relation/edge.
	BannerImageTable = "cars"
	// BannerImageInverseTable is the table name for the Media entity.
	// It exists in this package in order to avoid circular dependency with the "media" package.
	BannerImageInverseTable = "media"
	// BannerImageColumn is the table column denoting the banner_image relation/edge.
	BannerImageColumn = "car_banner_image"
)

// Columns holds all SQL columns for car fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldName,
	FieldMake,
	FieldModel,
	FieldType,
	FieldYear,
	FieldTrim,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "cars"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"car_banner_image",
	"user_cars",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Car queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByMake orders the results by the make field.
func ByMake(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMake, opts...).ToFunc()
}

// ByModel orders the results by the model field.
func ByModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModel, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByYear orders the results by the year field.
func ByYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYear, opts...).ToFunc()
}

// ByTrim orders the results by the trim field.
func ByTrim(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrim, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByDragSessionsCount orders the results by drag_sessions count.
func ByDragSessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDragSessionsStep(), opts...)
	}
}

// ByDragSessions orders the results by drag_sessions terms.
func ByDragSessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDragSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFuelUpsCount orders the results by fuel_ups count.
func ByFuelUpsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFuelUpsStep(), opts...)
	}
}

// ByFuelUps orders the results by fuel_ups terms.
func ByFuelUps(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFuelUpsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOdometerReadingsCount orders the results by odometer_readings count.
func ByOdometerReadingsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOdometerReadingsStep(), opts...)
	}
}

// ByOdometerReadings orders the results by odometer_readings terms.
func ByOdometerReadings(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOdometerReadingsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByServiceItemsCount orders the results by service_items count.
func ByServiceItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newServiceItemsStep(), opts...)
	}
}

// ByServiceItems orders the results by service_items terms.
func ByServiceItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByServiceLogsCount orders the results by service_logs count.
func ByServiceLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newServiceLogsStep(), opts...)
	}
}

// ByServiceLogs orders the results by service_logs terms.
func ByServiceLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByServiceSchedulesCount orders the results by service_schedules count.
func ByServiceSchedulesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newServiceSchedulesStep(), opts...)
	}
}

// ByServiceSchedules orders the results by service_schedules terms.
func ByServiceSchedules(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceSchedulesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMediaCount orders the results by media count.
func ByMediaCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMediaStep(), opts...)
	}
}

// ByMedia orders the results by media terms.
func ByMedia(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMediaStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDocumentsCount orders the results by documents count.
func ByDocumentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDocumentsStep(), opts...)
	}
}

// ByDocuments orders the results by documents terms.
func ByDocuments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDocumentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDynoSessionsCount orders the results by dyno_sessions count.
func ByDynoSessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDynoSessionsStep(), opts...)
	}
}

// ByDynoSessions orders the results by dyno_sessions terms.
func ByDynoSessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDynoSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBannerImageField orders the results by banner_image field.
func ByBannerImageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBannerImageStep(), sql.OrderByField(field, opts...))
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newDragSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DragSessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DragSessionsTable, DragSessionsColumn),
	)
}
func newFuelUpsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FuelUpsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FuelUpsTable, FuelUpsColumn),
	)
}
func newOdometerReadingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OdometerReadingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OdometerReadingsTable, OdometerReadingsColumn),
	)
}
func newServiceItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ServiceItemsTable, ServiceItemsColumn),
	)
}
func newServiceLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceLogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ServiceLogsTable, ServiceLogsColumn),
	)
}
func newServiceSchedulesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceSchedulesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ServiceSchedulesTable, ServiceSchedulesColumn),
	)
}
func newMediaStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MediaInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MediaTable, MediaColumn),
	)
}
func newDocumentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DocumentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DocumentsTable, DocumentsColumn),
	)
}
func newDynoSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DynoSessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DynoSessionsTable, DynoSessionsColumn),
	)
}
func newBannerImageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BannerImageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BannerImageTable, BannerImageColumn),
	)
}
