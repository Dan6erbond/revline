// Code generated by ent, DO NOT EDIT.

package car

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldUpdateTime, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldName, v))
}

// Make applies equality check predicate on the "make" field. It's identical to MakeEQ.
func Make(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldMake, v))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldModel, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldType, v))
}

// Year applies equality check predicate on the "year" field. It's identical to YearEQ.
func Year(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldYear, v))
}

// Trim applies equality check predicate on the "trim" field. It's identical to TrimEQ.
func Trim(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldTrim, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldUpdateTime, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldName, v))
}

// MakeEQ applies the EQ predicate on the "make" field.
func MakeEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldMake, v))
}

// MakeNEQ applies the NEQ predicate on the "make" field.
func MakeNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldMake, v))
}

// MakeIn applies the In predicate on the "make" field.
func MakeIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldMake, vs...))
}

// MakeNotIn applies the NotIn predicate on the "make" field.
func MakeNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldMake, vs...))
}

// MakeGT applies the GT predicate on the "make" field.
func MakeGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldMake, v))
}

// MakeGTE applies the GTE predicate on the "make" field.
func MakeGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldMake, v))
}

// MakeLT applies the LT predicate on the "make" field.
func MakeLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldMake, v))
}

// MakeLTE applies the LTE predicate on the "make" field.
func MakeLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldMake, v))
}

// MakeContains applies the Contains predicate on the "make" field.
func MakeContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldMake, v))
}

// MakeHasPrefix applies the HasPrefix predicate on the "make" field.
func MakeHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldMake, v))
}

// MakeHasSuffix applies the HasSuffix predicate on the "make" field.
func MakeHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldMake, v))
}

// MakeIsNil applies the IsNil predicate on the "make" field.
func MakeIsNil() predicate.Car {
	return predicate.Car(sql.FieldIsNull(FieldMake))
}

// MakeNotNil applies the NotNil predicate on the "make" field.
func MakeNotNil() predicate.Car {
	return predicate.Car(sql.FieldNotNull(FieldMake))
}

// MakeEqualFold applies the EqualFold predicate on the "make" field.
func MakeEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldMake, v))
}

// MakeContainsFold applies the ContainsFold predicate on the "make" field.
func MakeContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldMake, v))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldModel, v))
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldModel, vs...))
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldModel, vs...))
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldModel, v))
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldModel, v))
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldModel, v))
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldModel, v))
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldModel, v))
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldModel, v))
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldModel, v))
}

// ModelIsNil applies the IsNil predicate on the "model" field.
func ModelIsNil() predicate.Car {
	return predicate.Car(sql.FieldIsNull(FieldModel))
}

// ModelNotNil applies the NotNil predicate on the "model" field.
func ModelNotNil() predicate.Car {
	return predicate.Car(sql.FieldNotNull(FieldModel))
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldModel, v))
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldModel, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.Car {
	return predicate.Car(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.Car {
	return predicate.Car(sql.FieldNotNull(FieldType))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldType, v))
}

// YearEQ applies the EQ predicate on the "year" field.
func YearEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldYear, v))
}

// YearNEQ applies the NEQ predicate on the "year" field.
func YearNEQ(v int) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldYear, v))
}

// YearIn applies the In predicate on the "year" field.
func YearIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldYear, vs...))
}

// YearNotIn applies the NotIn predicate on the "year" field.
func YearNotIn(vs ...int) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldYear, vs...))
}

// YearGT applies the GT predicate on the "year" field.
func YearGT(v int) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldYear, v))
}

// YearGTE applies the GTE predicate on the "year" field.
func YearGTE(v int) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldYear, v))
}

// YearLT applies the LT predicate on the "year" field.
func YearLT(v int) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldYear, v))
}

// YearLTE applies the LTE predicate on the "year" field.
func YearLTE(v int) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldYear, v))
}

// YearIsNil applies the IsNil predicate on the "year" field.
func YearIsNil() predicate.Car {
	return predicate.Car(sql.FieldIsNull(FieldYear))
}

// YearNotNil applies the NotNil predicate on the "year" field.
func YearNotNil() predicate.Car {
	return predicate.Car(sql.FieldNotNull(FieldYear))
}

// TrimEQ applies the EQ predicate on the "trim" field.
func TrimEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldEQ(FieldTrim, v))
}

// TrimNEQ applies the NEQ predicate on the "trim" field.
func TrimNEQ(v string) predicate.Car {
	return predicate.Car(sql.FieldNEQ(FieldTrim, v))
}

// TrimIn applies the In predicate on the "trim" field.
func TrimIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldIn(FieldTrim, vs...))
}

// TrimNotIn applies the NotIn predicate on the "trim" field.
func TrimNotIn(vs ...string) predicate.Car {
	return predicate.Car(sql.FieldNotIn(FieldTrim, vs...))
}

// TrimGT applies the GT predicate on the "trim" field.
func TrimGT(v string) predicate.Car {
	return predicate.Car(sql.FieldGT(FieldTrim, v))
}

// TrimGTE applies the GTE predicate on the "trim" field.
func TrimGTE(v string) predicate.Car {
	return predicate.Car(sql.FieldGTE(FieldTrim, v))
}

// TrimLT applies the LT predicate on the "trim" field.
func TrimLT(v string) predicate.Car {
	return predicate.Car(sql.FieldLT(FieldTrim, v))
}

// TrimLTE applies the LTE predicate on the "trim" field.
func TrimLTE(v string) predicate.Car {
	return predicate.Car(sql.FieldLTE(FieldTrim, v))
}

// TrimContains applies the Contains predicate on the "trim" field.
func TrimContains(v string) predicate.Car {
	return predicate.Car(sql.FieldContains(FieldTrim, v))
}

// TrimHasPrefix applies the HasPrefix predicate on the "trim" field.
func TrimHasPrefix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasPrefix(FieldTrim, v))
}

// TrimHasSuffix applies the HasSuffix predicate on the "trim" field.
func TrimHasSuffix(v string) predicate.Car {
	return predicate.Car(sql.FieldHasSuffix(FieldTrim, v))
}

// TrimIsNil applies the IsNil predicate on the "trim" field.
func TrimIsNil() predicate.Car {
	return predicate.Car(sql.FieldIsNull(FieldTrim))
}

// TrimNotNil applies the NotNil predicate on the "trim" field.
func TrimNotNil() predicate.Car {
	return predicate.Car(sql.FieldNotNull(FieldTrim))
}

// TrimEqualFold applies the EqualFold predicate on the "trim" field.
func TrimEqualFold(v string) predicate.Car {
	return predicate.Car(sql.FieldEqualFold(FieldTrim, v))
}

// TrimContainsFold applies the ContainsFold predicate on the "trim" field.
func TrimContainsFold(v string) predicate.Car {
	return predicate.Car(sql.FieldContainsFold(FieldTrim, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDragSessions applies the HasEdge predicate on the "drag_sessions" edge.
func HasDragSessions() predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DragSessionsTable, DragSessionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDragSessionsWith applies the HasEdge predicate on the "drag_sessions" edge with a given conditions (other predicates).
func HasDragSessionsWith(preds ...predicate.DragSession) predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := newDragSessionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFuelUps applies the HasEdge predicate on the "fuel_ups" edge.
func HasFuelUps() predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FuelUpsTable, FuelUpsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFuelUpsWith applies the HasEdge predicate on the "fuel_ups" edge with a given conditions (other predicates).
func HasFuelUpsWith(preds ...predicate.FuelUp) predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := newFuelUpsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOdometerReadings applies the HasEdge predicate on the "odometer_readings" edge.
func HasOdometerReadings() predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OdometerReadingsTable, OdometerReadingsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOdometerReadingsWith applies the HasEdge predicate on the "odometer_readings" edge with a given conditions (other predicates).
func HasOdometerReadingsWith(preds ...predicate.OdometerReading) predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := newOdometerReadingsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServiceItems applies the HasEdge predicate on the "service_items" edge.
func HasServiceItems() predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ServiceItemsTable, ServiceItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceItemsWith applies the HasEdge predicate on the "service_items" edge with a given conditions (other predicates).
func HasServiceItemsWith(preds ...predicate.ServiceItem) predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := newServiceItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServiceLogs applies the HasEdge predicate on the "service_logs" edge.
func HasServiceLogs() predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ServiceLogsTable, ServiceLogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceLogsWith applies the HasEdge predicate on the "service_logs" edge with a given conditions (other predicates).
func HasServiceLogsWith(preds ...predicate.ServiceLog) predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := newServiceLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServiceSchedules applies the HasEdge predicate on the "service_schedules" edge.
func HasServiceSchedules() predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ServiceSchedulesTable, ServiceSchedulesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceSchedulesWith applies the HasEdge predicate on the "service_schedules" edge with a given conditions (other predicates).
func HasServiceSchedulesWith(preds ...predicate.ServiceSchedule) predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := newServiceSchedulesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMedia applies the HasEdge predicate on the "media" edge.
func HasMedia() predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MediaTable, MediaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMediaWith applies the HasEdge predicate on the "media" edge with a given conditions (other predicates).
func HasMediaWith(preds ...predicate.Media) predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := newMediaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAlbums applies the HasEdge predicate on the "albums" edge.
func HasAlbums() predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AlbumsTable, AlbumsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAlbumsWith applies the HasEdge predicate on the "albums" edge with a given conditions (other predicates).
func HasAlbumsWith(preds ...predicate.Album) predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := newAlbumsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDocuments applies the HasEdge predicate on the "documents" edge.
func HasDocuments() predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DocumentsTable, DocumentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDocumentsWith applies the HasEdge predicate on the "documents" edge with a given conditions (other predicates).
func HasDocumentsWith(preds ...predicate.Document) predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := newDocumentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDynoSessions applies the HasEdge predicate on the "dyno_sessions" edge.
func HasDynoSessions() predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DynoSessionsTable, DynoSessionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDynoSessionsWith applies the HasEdge predicate on the "dyno_sessions" edge with a given conditions (other predicates).
func HasDynoSessionsWith(preds ...predicate.DynoSession) predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := newDynoSessionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExpenses applies the HasEdge predicate on the "expenses" edge.
func HasExpenses() predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExpensesTable, ExpensesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExpensesWith applies the HasEdge predicate on the "expenses" edge with a given conditions (other predicates).
func HasExpensesWith(preds ...predicate.Expense) predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := newExpensesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBannerImage applies the HasEdge predicate on the "banner_image" edge.
func HasBannerImage() predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BannerImageTable, BannerImageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBannerImageWith applies the HasEdge predicate on the "banner_image" edge with a given conditions (other predicates).
func HasBannerImageWith(preds ...predicate.Media) predicate.Car {
	return predicate.Car(func(s *sql.Selector) {
		step := newBannerImageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Car) predicate.Car {
	return predicate.Car(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Car) predicate.Car {
	return predicate.Car(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Car) predicate.Car {
	return predicate.Car(sql.NotPredicates(p))
}
