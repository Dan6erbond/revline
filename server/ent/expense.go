// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/expense"
	"github.com/Dan6erbond/revline/ent/fuelup"
	"github.com/Dan6erbond/revline/ent/servicelog"
	"github.com/google/uuid"
)

// Expense is the model entity for the Expense schema.
type Expense struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// OccurredAt holds the value of the "occurred_at" field.
	OccurredAt time.Time `json:"occurred_at,omitempty"`
	// Type holds the value of the "type" field.
	Type expense.Type `json:"type,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes map[string]interface{} `json:"notes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExpenseQuery when eager-loading is set.
	Edges               ExpenseEdges `json:"edges"`
	car_expenses        *uuid.UUID
	fuel_up_expense     *uuid.UUID
	service_log_expense *uuid.UUID
	selectValues        sql.SelectValues
}

// ExpenseEdges holds the relations/edges for other nodes in the graph.
type ExpenseEdges struct {
	// Car holds the value of the car edge.
	Car *Car `json:"car,omitempty"`
	// FuelUp holds the value of the fuel_up edge.
	FuelUp *FuelUp `json:"fuel_up,omitempty"`
	// ServiceLog holds the value of the service_log edge.
	ServiceLog *ServiceLog `json:"service_log,omitempty"`
	// Documents holds the value of the documents edge.
	Documents []*Document `json:"documents,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedDocuments map[string][]*Document
}

// CarOrErr returns the Car value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExpenseEdges) CarOrErr() (*Car, error) {
	if e.Car != nil {
		return e.Car, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: car.Label}
	}
	return nil, &NotLoadedError{edge: "car"}
}

// FuelUpOrErr returns the FuelUp value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExpenseEdges) FuelUpOrErr() (*FuelUp, error) {
	if e.FuelUp != nil {
		return e.FuelUp, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: fuelup.Label}
	}
	return nil, &NotLoadedError{edge: "fuel_up"}
}

// ServiceLogOrErr returns the ServiceLog value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExpenseEdges) ServiceLogOrErr() (*ServiceLog, error) {
	if e.ServiceLog != nil {
		return e.ServiceLog, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: servicelog.Label}
	}
	return nil, &NotLoadedError{edge: "service_log"}
}

// DocumentsOrErr returns the Documents value or an error if the edge
// was not loaded in eager-loading.
func (e ExpenseEdges) DocumentsOrErr() ([]*Document, error) {
	if e.loadedTypes[3] {
		return e.Documents, nil
	}
	return nil, &NotLoadedError{edge: "documents"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Expense) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case expense.FieldNotes:
			values[i] = new([]byte)
		case expense.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case expense.FieldType:
			values[i] = new(sql.NullString)
		case expense.FieldCreateTime, expense.FieldUpdateTime, expense.FieldOccurredAt:
			values[i] = new(sql.NullTime)
		case expense.FieldID:
			values[i] = new(uuid.UUID)
		case expense.ForeignKeys[0]: // car_expenses
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case expense.ForeignKeys[1]: // fuel_up_expense
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case expense.ForeignKeys[2]: // service_log_expense
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Expense fields.
func (e *Expense) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case expense.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				e.ID = *value
			}
		case expense.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				e.CreateTime = value.Time
			}
		case expense.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				e.UpdateTime = value.Time
			}
		case expense.FieldOccurredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field occurred_at", values[i])
			} else if value.Valid {
				e.OccurredAt = value.Time
			}
		case expense.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				e.Type = expense.Type(value.String)
			}
		case expense.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				e.Amount = value.Float64
			}
		case expense.FieldNotes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Notes); err != nil {
					return fmt.Errorf("unmarshal field notes: %w", err)
				}
			}
		case expense.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field car_expenses", values[i])
			} else if value.Valid {
				e.car_expenses = new(uuid.UUID)
				*e.car_expenses = *value.S.(*uuid.UUID)
			}
		case expense.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field fuel_up_expense", values[i])
			} else if value.Valid {
				e.fuel_up_expense = new(uuid.UUID)
				*e.fuel_up_expense = *value.S.(*uuid.UUID)
			}
		case expense.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field service_log_expense", values[i])
			} else if value.Valid {
				e.service_log_expense = new(uuid.UUID)
				*e.service_log_expense = *value.S.(*uuid.UUID)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Expense.
// This includes values selected through modifiers, order, etc.
func (e *Expense) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryCar queries the "car" edge of the Expense entity.
func (e *Expense) QueryCar() *CarQuery {
	return NewExpenseClient(e.config).QueryCar(e)
}

// QueryFuelUp queries the "fuel_up" edge of the Expense entity.
func (e *Expense) QueryFuelUp() *FuelUpQuery {
	return NewExpenseClient(e.config).QueryFuelUp(e)
}

// QueryServiceLog queries the "service_log" edge of the Expense entity.
func (e *Expense) QueryServiceLog() *ServiceLogQuery {
	return NewExpenseClient(e.config).QueryServiceLog(e)
}

// QueryDocuments queries the "documents" edge of the Expense entity.
func (e *Expense) QueryDocuments() *DocumentQuery {
	return NewExpenseClient(e.config).QueryDocuments(e)
}

// Update returns a builder for updating this Expense.
// Note that you need to call Expense.Unwrap() before calling this method if this Expense
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Expense) Update() *ExpenseUpdateOne {
	return NewExpenseClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Expense entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Expense) Unwrap() *Expense {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Expense is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Expense) String() string {
	var builder strings.Builder
	builder.WriteString("Expense(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("create_time=")
	builder.WriteString(e.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(e.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("occurred_at=")
	builder.WriteString(e.OccurredAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", e.Type))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", e.Amount))
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(fmt.Sprintf("%v", e.Notes))
	builder.WriteByte(')')
	return builder.String()
}

// NamedDocuments returns the Documents named value or an error if the edge was not
// loaded in eager-loading with this name.
func (e *Expense) NamedDocuments(name string) ([]*Document, error) {
	if e.Edges.namedDocuments == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := e.Edges.namedDocuments[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (e *Expense) appendNamedDocuments(name string, edges ...*Document) {
	if e.Edges.namedDocuments == nil {
		e.Edges.namedDocuments = make(map[string][]*Document)
	}
	if len(edges) == 0 {
		e.Edges.namedDocuments[name] = []*Document{}
	} else {
		e.Edges.namedDocuments[name] = append(e.Edges.namedDocuments[name], edges...)
	}
}

// Expenses is a parsable slice of Expense.
type Expenses []*Expense
