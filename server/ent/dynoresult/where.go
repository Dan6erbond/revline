// Code generated by ent, DO NOT EDIT.

package dynoresult

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldEQ(FieldUpdateTime, v))
}

// Rpm applies equality check predicate on the "rpm" field. It's identical to RpmEQ.
func Rpm(v int) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldEQ(FieldRpm, v))
}

// PowerKw applies equality check predicate on the "power_kw" field. It's identical to PowerKwEQ.
func PowerKw(v float64) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldEQ(FieldPowerKw, v))
}

// TorqueNm applies equality check predicate on the "torque_nm" field. It's identical to TorqueNmEQ.
func TorqueNm(v float64) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldEQ(FieldTorqueNm, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldLTE(FieldUpdateTime, v))
}

// RpmEQ applies the EQ predicate on the "rpm" field.
func RpmEQ(v int) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldEQ(FieldRpm, v))
}

// RpmNEQ applies the NEQ predicate on the "rpm" field.
func RpmNEQ(v int) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldNEQ(FieldRpm, v))
}

// RpmIn applies the In predicate on the "rpm" field.
func RpmIn(vs ...int) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldIn(FieldRpm, vs...))
}

// RpmNotIn applies the NotIn predicate on the "rpm" field.
func RpmNotIn(vs ...int) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldNotIn(FieldRpm, vs...))
}

// RpmGT applies the GT predicate on the "rpm" field.
func RpmGT(v int) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldGT(FieldRpm, v))
}

// RpmGTE applies the GTE predicate on the "rpm" field.
func RpmGTE(v int) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldGTE(FieldRpm, v))
}

// RpmLT applies the LT predicate on the "rpm" field.
func RpmLT(v int) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldLT(FieldRpm, v))
}

// RpmLTE applies the LTE predicate on the "rpm" field.
func RpmLTE(v int) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldLTE(FieldRpm, v))
}

// PowerKwEQ applies the EQ predicate on the "power_kw" field.
func PowerKwEQ(v float64) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldEQ(FieldPowerKw, v))
}

// PowerKwNEQ applies the NEQ predicate on the "power_kw" field.
func PowerKwNEQ(v float64) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldNEQ(FieldPowerKw, v))
}

// PowerKwIn applies the In predicate on the "power_kw" field.
func PowerKwIn(vs ...float64) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldIn(FieldPowerKw, vs...))
}

// PowerKwNotIn applies the NotIn predicate on the "power_kw" field.
func PowerKwNotIn(vs ...float64) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldNotIn(FieldPowerKw, vs...))
}

// PowerKwGT applies the GT predicate on the "power_kw" field.
func PowerKwGT(v float64) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldGT(FieldPowerKw, v))
}

// PowerKwGTE applies the GTE predicate on the "power_kw" field.
func PowerKwGTE(v float64) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldGTE(FieldPowerKw, v))
}

// PowerKwLT applies the LT predicate on the "power_kw" field.
func PowerKwLT(v float64) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldLT(FieldPowerKw, v))
}

// PowerKwLTE applies the LTE predicate on the "power_kw" field.
func PowerKwLTE(v float64) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldLTE(FieldPowerKw, v))
}

// TorqueNmEQ applies the EQ predicate on the "torque_nm" field.
func TorqueNmEQ(v float64) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldEQ(FieldTorqueNm, v))
}

// TorqueNmNEQ applies the NEQ predicate on the "torque_nm" field.
func TorqueNmNEQ(v float64) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldNEQ(FieldTorqueNm, v))
}

// TorqueNmIn applies the In predicate on the "torque_nm" field.
func TorqueNmIn(vs ...float64) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldIn(FieldTorqueNm, vs...))
}

// TorqueNmNotIn applies the NotIn predicate on the "torque_nm" field.
func TorqueNmNotIn(vs ...float64) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldNotIn(FieldTorqueNm, vs...))
}

// TorqueNmGT applies the GT predicate on the "torque_nm" field.
func TorqueNmGT(v float64) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldGT(FieldTorqueNm, v))
}

// TorqueNmGTE applies the GTE predicate on the "torque_nm" field.
func TorqueNmGTE(v float64) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldGTE(FieldTorqueNm, v))
}

// TorqueNmLT applies the LT predicate on the "torque_nm" field.
func TorqueNmLT(v float64) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldLT(FieldTorqueNm, v))
}

// TorqueNmLTE applies the LTE predicate on the "torque_nm" field.
func TorqueNmLTE(v float64) predicate.DynoResult {
	return predicate.DynoResult(sql.FieldLTE(FieldTorqueNm, v))
}

// HasSession applies the HasEdge predicate on the "session" edge.
func HasSession() predicate.DynoResult {
	return predicate.DynoResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SessionTable, SessionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSessionWith applies the HasEdge predicate on the "session" edge with a given conditions (other predicates).
func HasSessionWith(preds ...predicate.DynoSession) predicate.DynoResult {
	return predicate.DynoResult(func(s *sql.Selector) {
		step := newSessionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DynoResult) predicate.DynoResult {
	return predicate.DynoResult(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DynoResult) predicate.DynoResult {
	return predicate.DynoResult(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DynoResult) predicate.DynoResult {
	return predicate.DynoResult(sql.NotPredicates(p))
}
