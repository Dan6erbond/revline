// Code generated by ent, DO NOT EDIT.

package dynoresult

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the dynoresult type in the database.
	Label = "dyno_result"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldRpm holds the string denoting the rpm field in the database.
	FieldRpm = "rpm"
	// FieldPowerKw holds the string denoting the power_kw field in the database.
	FieldPowerKw = "power_kw"
	// FieldTorqueNm holds the string denoting the torque_nm field in the database.
	FieldTorqueNm = "torque_nm"
	// EdgeSession holds the string denoting the session edge name in mutations.
	EdgeSession = "session"
	// Table holds the table name of the dynoresult in the database.
	Table = "dyno_results"
	// SessionTable is the table that holds the session relation/edge.
	SessionTable = "dyno_results"
	// SessionInverseTable is the table name for the DynoSession entity.
	// It exists in this package in order to avoid circular dependency with the "dynosession" package.
	SessionInverseTable = "dyno_sessions"
	// SessionColumn is the table column denoting the session relation/edge.
	SessionColumn = "dyno_session_results"
)

// Columns holds all SQL columns for dynoresult fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldRpm,
	FieldPowerKw,
	FieldTorqueNm,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "dyno_results"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"dyno_session_results",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the DynoResult queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByRpm orders the results by the rpm field.
func ByRpm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRpm, opts...).ToFunc()
}

// ByPowerKw orders the results by the power_kw field.
func ByPowerKw(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPowerKw, opts...).ToFunc()
}

// ByTorqueNm orders the results by the torque_nm field.
func ByTorqueNm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTorqueNm, opts...).ToFunc()
}

// BySessionField orders the results by session field.
func BySessionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionStep(), sql.OrderByField(field, opts...))
	}
}
func newSessionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SessionTable, SessionColumn),
	)
}
