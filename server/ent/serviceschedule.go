// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/serviceschedule"
	"github.com/google/uuid"
)

// ServiceSchedule is the model entity for the ServiceSchedule schema.
type ServiceSchedule struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// RepeatEveryKm holds the value of the "repeat_every_km" field.
	RepeatEveryKm *float64 `json:"repeat_every_km,omitempty"`
	// StartsAtKm holds the value of the "starts_at_km" field.
	StartsAtKm *float64 `json:"starts_at_km,omitempty"`
	// RepeatEveryMonths holds the value of the "repeat_every_months" field.
	RepeatEveryMonths *int `json:"repeat_every_months,omitempty"`
	// StartsAtMonths holds the value of the "starts_at_months" field.
	StartsAtMonths *int `json:"starts_at_months,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes *string `json:"notes,omitempty"`
	// Archived holds the value of the "archived" field.
	Archived bool `json:"archived,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceScheduleQuery when eager-loading is set.
	Edges                 ServiceScheduleEdges `json:"edges"`
	car_service_schedules *uuid.UUID
	selectValues          sql.SelectValues
}

// ServiceScheduleEdges holds the relations/edges for other nodes in the graph.
type ServiceScheduleEdges struct {
	// Car holds the value of the car edge.
	Car *Car `json:"car,omitempty"`
	// Items holds the value of the items edge.
	Items []*ServiceItem `json:"items,omitempty"`
	// Logs holds the value of the logs edge.
	Logs []*ServiceLog `json:"logs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedItems map[string][]*ServiceItem
	namedLogs  map[string][]*ServiceLog
}

// CarOrErr returns the Car value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceScheduleEdges) CarOrErr() (*Car, error) {
	if e.Car != nil {
		return e.Car, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: car.Label}
	}
	return nil, &NotLoadedError{edge: "car"}
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e ServiceScheduleEdges) ItemsOrErr() ([]*ServiceItem, error) {
	if e.loadedTypes[1] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// LogsOrErr returns the Logs value or an error if the edge
// was not loaded in eager-loading.
func (e ServiceScheduleEdges) LogsOrErr() ([]*ServiceLog, error) {
	if e.loadedTypes[2] {
		return e.Logs, nil
	}
	return nil, &NotLoadedError{edge: "logs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceSchedule) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case serviceschedule.FieldArchived:
			values[i] = new(sql.NullBool)
		case serviceschedule.FieldRepeatEveryKm, serviceschedule.FieldStartsAtKm:
			values[i] = new(sql.NullFloat64)
		case serviceschedule.FieldRepeatEveryMonths, serviceschedule.FieldStartsAtMonths:
			values[i] = new(sql.NullInt64)
		case serviceschedule.FieldTitle, serviceschedule.FieldNotes:
			values[i] = new(sql.NullString)
		case serviceschedule.FieldCreateTime, serviceschedule.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case serviceschedule.FieldID:
			values[i] = new(uuid.UUID)
		case serviceschedule.ForeignKeys[0]: // car_service_schedules
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceSchedule fields.
func (ss *ServiceSchedule) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case serviceschedule.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ss.ID = *value
			}
		case serviceschedule.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ss.CreateTime = value.Time
			}
		case serviceschedule.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ss.UpdateTime = value.Time
			}
		case serviceschedule.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ss.Title = value.String
			}
		case serviceschedule.FieldRepeatEveryKm:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field repeat_every_km", values[i])
			} else if value.Valid {
				ss.RepeatEveryKm = new(float64)
				*ss.RepeatEveryKm = value.Float64
			}
		case serviceschedule.FieldStartsAtKm:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field starts_at_km", values[i])
			} else if value.Valid {
				ss.StartsAtKm = new(float64)
				*ss.StartsAtKm = value.Float64
			}
		case serviceschedule.FieldRepeatEveryMonths:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field repeat_every_months", values[i])
			} else if value.Valid {
				ss.RepeatEveryMonths = new(int)
				*ss.RepeatEveryMonths = int(value.Int64)
			}
		case serviceschedule.FieldStartsAtMonths:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field starts_at_months", values[i])
			} else if value.Valid {
				ss.StartsAtMonths = new(int)
				*ss.StartsAtMonths = int(value.Int64)
			}
		case serviceschedule.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				ss.Notes = new(string)
				*ss.Notes = value.String
			}
		case serviceschedule.FieldArchived:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field archived", values[i])
			} else if value.Valid {
				ss.Archived = value.Bool
			}
		case serviceschedule.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field car_service_schedules", values[i])
			} else if value.Valid {
				ss.car_service_schedules = new(uuid.UUID)
				*ss.car_service_schedules = *value.S.(*uuid.UUID)
			}
		default:
			ss.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServiceSchedule.
// This includes values selected through modifiers, order, etc.
func (ss *ServiceSchedule) Value(name string) (ent.Value, error) {
	return ss.selectValues.Get(name)
}

// QueryCar queries the "car" edge of the ServiceSchedule entity.
func (ss *ServiceSchedule) QueryCar() *CarQuery {
	return NewServiceScheduleClient(ss.config).QueryCar(ss)
}

// QueryItems queries the "items" edge of the ServiceSchedule entity.
func (ss *ServiceSchedule) QueryItems() *ServiceItemQuery {
	return NewServiceScheduleClient(ss.config).QueryItems(ss)
}

// QueryLogs queries the "logs" edge of the ServiceSchedule entity.
func (ss *ServiceSchedule) QueryLogs() *ServiceLogQuery {
	return NewServiceScheduleClient(ss.config).QueryLogs(ss)
}

// Update returns a builder for updating this ServiceSchedule.
// Note that you need to call ServiceSchedule.Unwrap() before calling this method if this ServiceSchedule
// was returned from a transaction, and the transaction was committed or rolled back.
func (ss *ServiceSchedule) Update() *ServiceScheduleUpdateOne {
	return NewServiceScheduleClient(ss.config).UpdateOne(ss)
}

// Unwrap unwraps the ServiceSchedule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ss *ServiceSchedule) Unwrap() *ServiceSchedule {
	_tx, ok := ss.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServiceSchedule is not a transactional entity")
	}
	ss.config.driver = _tx.drv
	return ss
}

// String implements the fmt.Stringer.
func (ss *ServiceSchedule) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceSchedule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ss.ID))
	builder.WriteString("create_time=")
	builder.WriteString(ss.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ss.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(ss.Title)
	builder.WriteString(", ")
	if v := ss.RepeatEveryKm; v != nil {
		builder.WriteString("repeat_every_km=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ss.StartsAtKm; v != nil {
		builder.WriteString("starts_at_km=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ss.RepeatEveryMonths; v != nil {
		builder.WriteString("repeat_every_months=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ss.StartsAtMonths; v != nil {
		builder.WriteString("starts_at_months=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := ss.Notes; v != nil {
		builder.WriteString("notes=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("archived=")
	builder.WriteString(fmt.Sprintf("%v", ss.Archived))
	builder.WriteByte(')')
	return builder.String()
}

// NamedItems returns the Items named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ss *ServiceSchedule) NamedItems(name string) ([]*ServiceItem, error) {
	if ss.Edges.namedItems == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ss.Edges.namedItems[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ss *ServiceSchedule) appendNamedItems(name string, edges ...*ServiceItem) {
	if ss.Edges.namedItems == nil {
		ss.Edges.namedItems = make(map[string][]*ServiceItem)
	}
	if len(edges) == 0 {
		ss.Edges.namedItems[name] = []*ServiceItem{}
	} else {
		ss.Edges.namedItems[name] = append(ss.Edges.namedItems[name], edges...)
	}
}

// NamedLogs returns the Logs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ss *ServiceSchedule) NamedLogs(name string) ([]*ServiceLog, error) {
	if ss.Edges.namedLogs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ss.Edges.namedLogs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ss *ServiceSchedule) appendNamedLogs(name string, edges ...*ServiceLog) {
	if ss.Edges.namedLogs == nil {
		ss.Edges.namedLogs = make(map[string][]*ServiceLog)
	}
	if len(edges) == 0 {
		ss.Edges.namedLogs[name] = []*ServiceLog{}
	} else {
		ss.Edges.namedLogs[name] = append(ss.Edges.namedLogs[name], edges...)
	}
}

// ServiceSchedules is a parsable slice of ServiceSchedule.
type ServiceSchedules []*ServiceSchedule
