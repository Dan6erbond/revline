// Code generated by ent, DO NOT EDIT.

package modproductoption

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldEQ(FieldUpdateTime, v))
}

// Vendor applies equality check predicate on the "vendor" field. It's identical to VendorEQ.
func Vendor(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldEQ(FieldVendor, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldEQ(FieldName, v))
}

// Link applies equality check predicate on the "link" field. It's identical to LinkEQ.
func Link(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldEQ(FieldLink, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldEQ(FieldPrice, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldEQ(FieldNotes, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldLTE(FieldUpdateTime, v))
}

// VendorEQ applies the EQ predicate on the "vendor" field.
func VendorEQ(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldEQ(FieldVendor, v))
}

// VendorNEQ applies the NEQ predicate on the "vendor" field.
func VendorNEQ(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldNEQ(FieldVendor, v))
}

// VendorIn applies the In predicate on the "vendor" field.
func VendorIn(vs ...string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldIn(FieldVendor, vs...))
}

// VendorNotIn applies the NotIn predicate on the "vendor" field.
func VendorNotIn(vs ...string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldNotIn(FieldVendor, vs...))
}

// VendorGT applies the GT predicate on the "vendor" field.
func VendorGT(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldGT(FieldVendor, v))
}

// VendorGTE applies the GTE predicate on the "vendor" field.
func VendorGTE(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldGTE(FieldVendor, v))
}

// VendorLT applies the LT predicate on the "vendor" field.
func VendorLT(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldLT(FieldVendor, v))
}

// VendorLTE applies the LTE predicate on the "vendor" field.
func VendorLTE(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldLTE(FieldVendor, v))
}

// VendorContains applies the Contains predicate on the "vendor" field.
func VendorContains(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldContains(FieldVendor, v))
}

// VendorHasPrefix applies the HasPrefix predicate on the "vendor" field.
func VendorHasPrefix(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldHasPrefix(FieldVendor, v))
}

// VendorHasSuffix applies the HasSuffix predicate on the "vendor" field.
func VendorHasSuffix(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldHasSuffix(FieldVendor, v))
}

// VendorIsNil applies the IsNil predicate on the "vendor" field.
func VendorIsNil() predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldIsNull(FieldVendor))
}

// VendorNotNil applies the NotNil predicate on the "vendor" field.
func VendorNotNil() predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldNotNull(FieldVendor))
}

// VendorEqualFold applies the EqualFold predicate on the "vendor" field.
func VendorEqualFold(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldEqualFold(FieldVendor, v))
}

// VendorContainsFold applies the ContainsFold predicate on the "vendor" field.
func VendorContainsFold(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldContainsFold(FieldVendor, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldContainsFold(FieldName, v))
}

// LinkEQ applies the EQ predicate on the "link" field.
func LinkEQ(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldEQ(FieldLink, v))
}

// LinkNEQ applies the NEQ predicate on the "link" field.
func LinkNEQ(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldNEQ(FieldLink, v))
}

// LinkIn applies the In predicate on the "link" field.
func LinkIn(vs ...string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldIn(FieldLink, vs...))
}

// LinkNotIn applies the NotIn predicate on the "link" field.
func LinkNotIn(vs ...string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldNotIn(FieldLink, vs...))
}

// LinkGT applies the GT predicate on the "link" field.
func LinkGT(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldGT(FieldLink, v))
}

// LinkGTE applies the GTE predicate on the "link" field.
func LinkGTE(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldGTE(FieldLink, v))
}

// LinkLT applies the LT predicate on the "link" field.
func LinkLT(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldLT(FieldLink, v))
}

// LinkLTE applies the LTE predicate on the "link" field.
func LinkLTE(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldLTE(FieldLink, v))
}

// LinkContains applies the Contains predicate on the "link" field.
func LinkContains(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldContains(FieldLink, v))
}

// LinkHasPrefix applies the HasPrefix predicate on the "link" field.
func LinkHasPrefix(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldHasPrefix(FieldLink, v))
}

// LinkHasSuffix applies the HasSuffix predicate on the "link" field.
func LinkHasSuffix(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldHasSuffix(FieldLink, v))
}

// LinkIsNil applies the IsNil predicate on the "link" field.
func LinkIsNil() predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldIsNull(FieldLink))
}

// LinkNotNil applies the NotNil predicate on the "link" field.
func LinkNotNil() predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldNotNull(FieldLink))
}

// LinkEqualFold applies the EqualFold predicate on the "link" field.
func LinkEqualFold(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldEqualFold(FieldLink, v))
}

// LinkContainsFold applies the ContainsFold predicate on the "link" field.
func LinkContainsFold(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldContainsFold(FieldLink, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldLTE(FieldPrice, v))
}

// PriceIsNil applies the IsNil predicate on the "price" field.
func PriceIsNil() predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldIsNull(FieldPrice))
}

// PriceNotNil applies the NotNil predicate on the "price" field.
func PriceNotNil() predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldNotNull(FieldPrice))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldContainsFold(FieldNotes, v))
}

// ProsIsNil applies the IsNil predicate on the "pros" field.
func ProsIsNil() predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldIsNull(FieldPros))
}

// ProsNotNil applies the NotNil predicate on the "pros" field.
func ProsNotNil() predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldNotNull(FieldPros))
}

// ConsIsNil applies the IsNil predicate on the "cons" field.
func ConsIsNil() predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldIsNull(FieldCons))
}

// ConsNotNil applies the NotNil predicate on the "cons" field.
func ConsNotNil() predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldNotNull(FieldCons))
}

// SpecsIsNil applies the IsNil predicate on the "specs" field.
func SpecsIsNil() predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldIsNull(FieldSpecs))
}

// SpecsNotNil applies the NotNil predicate on the "specs" field.
func SpecsNotNil() predicate.ModProductOption {
	return predicate.ModProductOption(sql.FieldNotNull(FieldSpecs))
}

// HasMod applies the HasEdge predicate on the "mod" edge.
func HasMod() predicate.ModProductOption {
	return predicate.ModProductOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ModTable, ModColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModWith applies the HasEdge predicate on the "mod" edge with a given conditions (other predicates).
func HasModWith(preds ...predicate.Mod) predicate.ModProductOption {
	return predicate.ModProductOption(func(s *sql.Selector) {
		step := newModStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMedia applies the HasEdge predicate on the "media" edge.
func HasMedia() predicate.ModProductOption {
	return predicate.ModProductOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MediaTable, MediaColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMediaWith applies the HasEdge predicate on the "media" edge with a given conditions (other predicates).
func HasMediaWith(preds ...predicate.Media) predicate.ModProductOption {
	return predicate.ModProductOption(func(s *sql.Selector) {
		step := newMediaStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPreviews applies the HasEdge predicate on the "previews" edge.
func HasPreviews() predicate.ModProductOption {
	return predicate.ModProductOption(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PreviewsTable, PreviewsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPreviewsWith applies the HasEdge predicate on the "previews" edge with a given conditions (other predicates).
func HasPreviewsWith(preds ...predicate.ModProductOptionPreview) predicate.ModProductOption {
	return predicate.ModProductOption(func(s *sql.Selector) {
		step := newPreviewsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ModProductOption) predicate.ModProductOption {
	return predicate.ModProductOption(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ModProductOption) predicate.ModProductOption {
	return predicate.ModProductOption(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ModProductOption) predicate.ModProductOption {
	return predicate.ModProductOption(sql.NotPredicates(p))
}
