// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/document"
	"github.com/Dan6erbond/revline/ent/expense"
	"github.com/Dan6erbond/revline/ent/fuelup"
	"github.com/Dan6erbond/revline/ent/servicelog"
	"github.com/google/uuid"
)

// Document is the model entity for the Document schema.
type Document struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags []string `json:"tags,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DocumentQuery when eager-loading is set.
	Edges                 DocumentEdges `json:"edges"`
	car_documents         *uuid.UUID
	expense_documents     *uuid.UUID
	fuel_up_documents     *uuid.UUID
	service_log_documents *uuid.UUID
	selectValues          sql.SelectValues
}

// DocumentEdges holds the relations/edges for other nodes in the graph.
type DocumentEdges struct {
	// Car holds the value of the car edge.
	Car *Car `json:"car,omitempty"`
	// Expense holds the value of the expense edge.
	Expense *Expense `json:"expense,omitempty"`
	// FuelUp holds the value of the fuel_up edge.
	FuelUp *FuelUp `json:"fuel_up,omitempty"`
	// ServiceLog holds the value of the service_log edge.
	ServiceLog *ServiceLog `json:"service_log,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int
}

// CarOrErr returns the Car value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DocumentEdges) CarOrErr() (*Car, error) {
	if e.Car != nil {
		return e.Car, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: car.Label}
	}
	return nil, &NotLoadedError{edge: "car"}
}

// ExpenseOrErr returns the Expense value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DocumentEdges) ExpenseOrErr() (*Expense, error) {
	if e.Expense != nil {
		return e.Expense, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: expense.Label}
	}
	return nil, &NotLoadedError{edge: "expense"}
}

// FuelUpOrErr returns the FuelUp value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DocumentEdges) FuelUpOrErr() (*FuelUp, error) {
	if e.FuelUp != nil {
		return e.FuelUp, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: fuelup.Label}
	}
	return nil, &NotLoadedError{edge: "fuel_up"}
}

// ServiceLogOrErr returns the ServiceLog value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DocumentEdges) ServiceLogOrErr() (*ServiceLog, error) {
	if e.ServiceLog != nil {
		return e.ServiceLog, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: servicelog.Label}
	}
	return nil, &NotLoadedError{edge: "service_log"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Document) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case document.FieldTags:
			values[i] = new([]byte)
		case document.FieldName:
			values[i] = new(sql.NullString)
		case document.FieldCreateTime, document.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case document.FieldID:
			values[i] = new(uuid.UUID)
		case document.ForeignKeys[0]: // car_documents
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case document.ForeignKeys[1]: // expense_documents
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case document.ForeignKeys[2]: // fuel_up_documents
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case document.ForeignKeys[3]: // service_log_documents
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Document fields.
func (d *Document) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case document.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case document.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				d.CreateTime = value.Time
			}
		case document.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				d.UpdateTime = value.Time
			}
		case document.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case document.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case document.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field car_documents", values[i])
			} else if value.Valid {
				d.car_documents = new(uuid.UUID)
				*d.car_documents = *value.S.(*uuid.UUID)
			}
		case document.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field expense_documents", values[i])
			} else if value.Valid {
				d.expense_documents = new(uuid.UUID)
				*d.expense_documents = *value.S.(*uuid.UUID)
			}
		case document.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field fuel_up_documents", values[i])
			} else if value.Valid {
				d.fuel_up_documents = new(uuid.UUID)
				*d.fuel_up_documents = *value.S.(*uuid.UUID)
			}
		case document.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field service_log_documents", values[i])
			} else if value.Valid {
				d.service_log_documents = new(uuid.UUID)
				*d.service_log_documents = *value.S.(*uuid.UUID)
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Document.
// This includes values selected through modifiers, order, etc.
func (d *Document) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryCar queries the "car" edge of the Document entity.
func (d *Document) QueryCar() *CarQuery {
	return NewDocumentClient(d.config).QueryCar(d)
}

// QueryExpense queries the "expense" edge of the Document entity.
func (d *Document) QueryExpense() *ExpenseQuery {
	return NewDocumentClient(d.config).QueryExpense(d)
}

// QueryFuelUp queries the "fuel_up" edge of the Document entity.
func (d *Document) QueryFuelUp() *FuelUpQuery {
	return NewDocumentClient(d.config).QueryFuelUp(d)
}

// QueryServiceLog queries the "service_log" edge of the Document entity.
func (d *Document) QueryServiceLog() *ServiceLogQuery {
	return NewDocumentClient(d.config).QueryServiceLog(d)
}

// Update returns a builder for updating this Document.
// Note that you need to call Document.Unwrap() before calling this method if this Document
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Document) Update() *DocumentUpdateOne {
	return NewDocumentClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Document entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Document) Unwrap() *Document {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Document is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Document) String() string {
	var builder strings.Builder
	builder.WriteString("Document(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("create_time=")
	builder.WriteString(d.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(d.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", d.Tags))
	builder.WriteByte(')')
	return builder.String()
}

// Documents is a parsable slice of Document.
type Documents []*Document
