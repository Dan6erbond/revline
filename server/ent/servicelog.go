// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/odometerreading"
	"github.com/Dan6erbond/revline/ent/servicelog"
	"github.com/Dan6erbond/revline/ent/serviceschedule"
	"github.com/google/uuid"
)

// ServiceLog is the model entity for the ServiceLog schema.
type ServiceLog struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// DatePerformed holds the value of the "date_performed" field.
	DatePerformed time.Time `json:"date_performed,omitempty"`
	// PerformedBy holds the value of the "performed_by" field.
	PerformedBy *string `json:"performed_by,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes *string `json:"notes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceLogQuery when eager-loading is set.
	Edges                        ServiceLogEdges `json:"edges"`
	car_service_logs             *uuid.UUID
	odometer_reading_service_log *uuid.UUID
	service_schedule_logs        *uuid.UUID
	selectValues                 sql.SelectValues
}

// ServiceLogEdges holds the relations/edges for other nodes in the graph.
type ServiceLogEdges struct {
	// Car holds the value of the car edge.
	Car *Car `json:"car,omitempty"`
	// Items holds the value of the items edge.
	Items []*ServiceItem `json:"items,omitempty"`
	// Schedule holds the value of the schedule edge.
	Schedule *ServiceSchedule `json:"schedule,omitempty"`
	// OdometerReading holds the value of the odometer_reading edge.
	OdometerReading *OdometerReading `json:"odometer_reading,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedItems map[string][]*ServiceItem
}

// CarOrErr returns the Car value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceLogEdges) CarOrErr() (*Car, error) {
	if e.Car != nil {
		return e.Car, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: car.Label}
	}
	return nil, &NotLoadedError{edge: "car"}
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e ServiceLogEdges) ItemsOrErr() ([]*ServiceItem, error) {
	if e.loadedTypes[1] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// ScheduleOrErr returns the Schedule value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceLogEdges) ScheduleOrErr() (*ServiceSchedule, error) {
	if e.Schedule != nil {
		return e.Schedule, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: serviceschedule.Label}
	}
	return nil, &NotLoadedError{edge: "schedule"}
}

// OdometerReadingOrErr returns the OdometerReading value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceLogEdges) OdometerReadingOrErr() (*OdometerReading, error) {
	if e.OdometerReading != nil {
		return e.OdometerReading, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: odometerreading.Label}
	}
	return nil, &NotLoadedError{edge: "odometer_reading"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServiceLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case servicelog.FieldPerformedBy, servicelog.FieldNotes:
			values[i] = new(sql.NullString)
		case servicelog.FieldCreateTime, servicelog.FieldUpdateTime, servicelog.FieldDatePerformed:
			values[i] = new(sql.NullTime)
		case servicelog.FieldID:
			values[i] = new(uuid.UUID)
		case servicelog.ForeignKeys[0]: // car_service_logs
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case servicelog.ForeignKeys[1]: // odometer_reading_service_log
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case servicelog.ForeignKeys[2]: // service_schedule_logs
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServiceLog fields.
func (sl *ServiceLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case servicelog.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sl.ID = *value
			}
		case servicelog.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				sl.CreateTime = value.Time
			}
		case servicelog.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				sl.UpdateTime = value.Time
			}
		case servicelog.FieldDatePerformed:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_performed", values[i])
			} else if value.Valid {
				sl.DatePerformed = value.Time
			}
		case servicelog.FieldPerformedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field performed_by", values[i])
			} else if value.Valid {
				sl.PerformedBy = new(string)
				*sl.PerformedBy = value.String
			}
		case servicelog.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				sl.Notes = new(string)
				*sl.Notes = value.String
			}
		case servicelog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field car_service_logs", values[i])
			} else if value.Valid {
				sl.car_service_logs = new(uuid.UUID)
				*sl.car_service_logs = *value.S.(*uuid.UUID)
			}
		case servicelog.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field odometer_reading_service_log", values[i])
			} else if value.Valid {
				sl.odometer_reading_service_log = new(uuid.UUID)
				*sl.odometer_reading_service_log = *value.S.(*uuid.UUID)
			}
		case servicelog.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field service_schedule_logs", values[i])
			} else if value.Valid {
				sl.service_schedule_logs = new(uuid.UUID)
				*sl.service_schedule_logs = *value.S.(*uuid.UUID)
			}
		default:
			sl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServiceLog.
// This includes values selected through modifiers, order, etc.
func (sl *ServiceLog) Value(name string) (ent.Value, error) {
	return sl.selectValues.Get(name)
}

// QueryCar queries the "car" edge of the ServiceLog entity.
func (sl *ServiceLog) QueryCar() *CarQuery {
	return NewServiceLogClient(sl.config).QueryCar(sl)
}

// QueryItems queries the "items" edge of the ServiceLog entity.
func (sl *ServiceLog) QueryItems() *ServiceItemQuery {
	return NewServiceLogClient(sl.config).QueryItems(sl)
}

// QuerySchedule queries the "schedule" edge of the ServiceLog entity.
func (sl *ServiceLog) QuerySchedule() *ServiceScheduleQuery {
	return NewServiceLogClient(sl.config).QuerySchedule(sl)
}

// QueryOdometerReading queries the "odometer_reading" edge of the ServiceLog entity.
func (sl *ServiceLog) QueryOdometerReading() *OdometerReadingQuery {
	return NewServiceLogClient(sl.config).QueryOdometerReading(sl)
}

// Update returns a builder for updating this ServiceLog.
// Note that you need to call ServiceLog.Unwrap() before calling this method if this ServiceLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (sl *ServiceLog) Update() *ServiceLogUpdateOne {
	return NewServiceLogClient(sl.config).UpdateOne(sl)
}

// Unwrap unwraps the ServiceLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sl *ServiceLog) Unwrap() *ServiceLog {
	_tx, ok := sl.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServiceLog is not a transactional entity")
	}
	sl.config.driver = _tx.drv
	return sl
}

// String implements the fmt.Stringer.
func (sl *ServiceLog) String() string {
	var builder strings.Builder
	builder.WriteString("ServiceLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sl.ID))
	builder.WriteString("create_time=")
	builder.WriteString(sl.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(sl.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("date_performed=")
	builder.WriteString(sl.DatePerformed.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := sl.PerformedBy; v != nil {
		builder.WriteString("performed_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sl.Notes; v != nil {
		builder.WriteString("notes=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedItems returns the Items named value or an error if the edge was not
// loaded in eager-loading with this name.
func (sl *ServiceLog) NamedItems(name string) ([]*ServiceItem, error) {
	if sl.Edges.namedItems == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := sl.Edges.namedItems[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (sl *ServiceLog) appendNamedItems(name string, edges ...*ServiceItem) {
	if sl.Edges.namedItems == nil {
		sl.Edges.namedItems = make(map[string][]*ServiceItem)
	}
	if len(edges) == 0 {
		sl.Edges.namedItems[name] = []*ServiceItem{}
	} else {
		sl.Edges.namedItems[name] = append(sl.Edges.namedItems[name], edges...)
	}
}

// ServiceLogs is a parsable slice of ServiceLog.
type ServiceLogs []*ServiceLog
