// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/serviceitem"
	"github.com/Dan6erbond/revline/ent/servicelog"
	"github.com/Dan6erbond/revline/ent/serviceschedule"
	"github.com/google/uuid"
)

// ServiceItemCreate is the builder for creating a ServiceItem entity.
type ServiceItemCreate struct {
	config
	mutation *ServiceItemMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (sic *ServiceItemCreate) SetCreateTime(t time.Time) *ServiceItemCreate {
	sic.mutation.SetCreateTime(t)
	return sic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sic *ServiceItemCreate) SetNillableCreateTime(t *time.Time) *ServiceItemCreate {
	if t != nil {
		sic.SetCreateTime(*t)
	}
	return sic
}

// SetUpdateTime sets the "update_time" field.
func (sic *ServiceItemCreate) SetUpdateTime(t time.Time) *ServiceItemCreate {
	sic.mutation.SetUpdateTime(t)
	return sic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sic *ServiceItemCreate) SetNillableUpdateTime(t *time.Time) *ServiceItemCreate {
	if t != nil {
		sic.SetUpdateTime(*t)
	}
	return sic
}

// SetLabel sets the "label" field.
func (sic *ServiceItemCreate) SetLabel(s string) *ServiceItemCreate {
	sic.mutation.SetLabel(s)
	return sic
}

// SetEstimatedMinutes sets the "estimated_minutes" field.
func (sic *ServiceItemCreate) SetEstimatedMinutes(i int) *ServiceItemCreate {
	sic.mutation.SetEstimatedMinutes(i)
	return sic
}

// SetNillableEstimatedMinutes sets the "estimated_minutes" field if the given value is not nil.
func (sic *ServiceItemCreate) SetNillableEstimatedMinutes(i *int) *ServiceItemCreate {
	if i != nil {
		sic.SetEstimatedMinutes(*i)
	}
	return sic
}

// SetDefaultIntervalKm sets the "default_interval_km" field.
func (sic *ServiceItemCreate) SetDefaultIntervalKm(f float64) *ServiceItemCreate {
	sic.mutation.SetDefaultIntervalKm(f)
	return sic
}

// SetNillableDefaultIntervalKm sets the "default_interval_km" field if the given value is not nil.
func (sic *ServiceItemCreate) SetNillableDefaultIntervalKm(f *float64) *ServiceItemCreate {
	if f != nil {
		sic.SetDefaultIntervalKm(*f)
	}
	return sic
}

// SetDefaultIntervalMonths sets the "default_interval_months" field.
func (sic *ServiceItemCreate) SetDefaultIntervalMonths(i int) *ServiceItemCreate {
	sic.mutation.SetDefaultIntervalMonths(i)
	return sic
}

// SetNillableDefaultIntervalMonths sets the "default_interval_months" field if the given value is not nil.
func (sic *ServiceItemCreate) SetNillableDefaultIntervalMonths(i *int) *ServiceItemCreate {
	if i != nil {
		sic.SetDefaultIntervalMonths(*i)
	}
	return sic
}

// SetNotes sets the "notes" field.
func (sic *ServiceItemCreate) SetNotes(s string) *ServiceItemCreate {
	sic.mutation.SetNotes(s)
	return sic
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (sic *ServiceItemCreate) SetNillableNotes(s *string) *ServiceItemCreate {
	if s != nil {
		sic.SetNotes(*s)
	}
	return sic
}

// SetTags sets the "tags" field.
func (sic *ServiceItemCreate) SetTags(s []string) *ServiceItemCreate {
	sic.mutation.SetTags(s)
	return sic
}

// SetID sets the "id" field.
func (sic *ServiceItemCreate) SetID(u uuid.UUID) *ServiceItemCreate {
	sic.mutation.SetID(u)
	return sic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sic *ServiceItemCreate) SetNillableID(u *uuid.UUID) *ServiceItemCreate {
	if u != nil {
		sic.SetID(*u)
	}
	return sic
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (sic *ServiceItemCreate) SetCarID(id uuid.UUID) *ServiceItemCreate {
	sic.mutation.SetCarID(id)
	return sic
}

// SetCar sets the "car" edge to the Car entity.
func (sic *ServiceItemCreate) SetCar(c *Car) *ServiceItemCreate {
	return sic.SetCarID(c.ID)
}

// AddScheduleIDs adds the "schedules" edge to the ServiceSchedule entity by IDs.
func (sic *ServiceItemCreate) AddScheduleIDs(ids ...uuid.UUID) *ServiceItemCreate {
	sic.mutation.AddScheduleIDs(ids...)
	return sic
}

// AddSchedules adds the "schedules" edges to the ServiceSchedule entity.
func (sic *ServiceItemCreate) AddSchedules(s ...*ServiceSchedule) *ServiceItemCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sic.AddScheduleIDs(ids...)
}

// AddLogIDs adds the "logs" edge to the ServiceLog entity by IDs.
func (sic *ServiceItemCreate) AddLogIDs(ids ...uuid.UUID) *ServiceItemCreate {
	sic.mutation.AddLogIDs(ids...)
	return sic
}

// AddLogs adds the "logs" edges to the ServiceLog entity.
func (sic *ServiceItemCreate) AddLogs(s ...*ServiceLog) *ServiceItemCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sic.AddLogIDs(ids...)
}

// Mutation returns the ServiceItemMutation object of the builder.
func (sic *ServiceItemCreate) Mutation() *ServiceItemMutation {
	return sic.mutation
}

// Save creates the ServiceItem in the database.
func (sic *ServiceItemCreate) Save(ctx context.Context) (*ServiceItem, error) {
	sic.defaults()
	return withHooks(ctx, sic.sqlSave, sic.mutation, sic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sic *ServiceItemCreate) SaveX(ctx context.Context) *ServiceItem {
	v, err := sic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sic *ServiceItemCreate) Exec(ctx context.Context) error {
	_, err := sic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sic *ServiceItemCreate) ExecX(ctx context.Context) {
	if err := sic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sic *ServiceItemCreate) defaults() {
	if _, ok := sic.mutation.CreateTime(); !ok {
		v := serviceitem.DefaultCreateTime()
		sic.mutation.SetCreateTime(v)
	}
	if _, ok := sic.mutation.UpdateTime(); !ok {
		v := serviceitem.DefaultUpdateTime()
		sic.mutation.SetUpdateTime(v)
	}
	if _, ok := sic.mutation.Tags(); !ok {
		v := serviceitem.DefaultTags
		sic.mutation.SetTags(v)
	}
	if _, ok := sic.mutation.ID(); !ok {
		v := serviceitem.DefaultID()
		sic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sic *ServiceItemCreate) check() error {
	if _, ok := sic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "ServiceItem.create_time"`)}
	}
	if _, ok := sic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "ServiceItem.update_time"`)}
	}
	if _, ok := sic.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "ServiceItem.label"`)}
	}
	if _, ok := sic.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "ServiceItem.tags"`)}
	}
	if len(sic.mutation.CarIDs()) == 0 {
		return &ValidationError{Name: "car", err: errors.New(`ent: missing required edge "ServiceItem.car"`)}
	}
	return nil
}

func (sic *ServiceItemCreate) sqlSave(ctx context.Context) (*ServiceItem, error) {
	if err := sic.check(); err != nil {
		return nil, err
	}
	_node, _spec := sic.createSpec()
	if err := sqlgraph.CreateNode(ctx, sic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sic.mutation.id = &_node.ID
	sic.mutation.done = true
	return _node, nil
}

func (sic *ServiceItemCreate) createSpec() (*ServiceItem, *sqlgraph.CreateSpec) {
	var (
		_node = &ServiceItem{config: sic.config}
		_spec = sqlgraph.NewCreateSpec(serviceitem.Table, sqlgraph.NewFieldSpec(serviceitem.FieldID, field.TypeUUID))
	)
	if id, ok := sic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sic.mutation.CreateTime(); ok {
		_spec.SetField(serviceitem.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := sic.mutation.UpdateTime(); ok {
		_spec.SetField(serviceitem.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := sic.mutation.Label(); ok {
		_spec.SetField(serviceitem.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := sic.mutation.EstimatedMinutes(); ok {
		_spec.SetField(serviceitem.FieldEstimatedMinutes, field.TypeInt, value)
		_node.EstimatedMinutes = &value
	}
	if value, ok := sic.mutation.DefaultIntervalKm(); ok {
		_spec.SetField(serviceitem.FieldDefaultIntervalKm, field.TypeFloat64, value)
		_node.DefaultIntervalKm = &value
	}
	if value, ok := sic.mutation.DefaultIntervalMonths(); ok {
		_spec.SetField(serviceitem.FieldDefaultIntervalMonths, field.TypeInt, value)
		_node.DefaultIntervalMonths = &value
	}
	if value, ok := sic.mutation.Notes(); ok {
		_spec.SetField(serviceitem.FieldNotes, field.TypeString, value)
		_node.Notes = &value
	}
	if value, ok := sic.mutation.Tags(); ok {
		_spec.SetField(serviceitem.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if nodes := sic.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceitem.CarTable,
			Columns: []string{serviceitem.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.car_service_items = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sic.mutation.SchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   serviceitem.SchedulesTable,
			Columns: serviceitem.SchedulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceschedule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sic.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   serviceitem.LogsTable,
			Columns: serviceitem.LogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ServiceItemCreateBulk is the builder for creating many ServiceItem entities in bulk.
type ServiceItemCreateBulk struct {
	config
	err      error
	builders []*ServiceItemCreate
}

// Save creates the ServiceItem entities in the database.
func (sicb *ServiceItemCreateBulk) Save(ctx context.Context) ([]*ServiceItem, error) {
	if sicb.err != nil {
		return nil, sicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sicb.builders))
	nodes := make([]*ServiceItem, len(sicb.builders))
	mutators := make([]Mutator, len(sicb.builders))
	for i := range sicb.builders {
		func(i int, root context.Context) {
			builder := sicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServiceItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sicb *ServiceItemCreateBulk) SaveX(ctx context.Context) []*ServiceItem {
	v, err := sicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sicb *ServiceItemCreateBulk) Exec(ctx context.Context) error {
	_, err := sicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sicb *ServiceItemCreateBulk) ExecX(ctx context.Context) {
	if err := sicb.Exec(ctx); err != nil {
		panic(err)
	}
}
