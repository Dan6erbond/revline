// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/checkoutsession"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/Dan6erbond/revline/ent/subscription"
	"github.com/Dan6erbond/revline/ent/user"
	"github.com/google/uuid"
)

// SubscriptionUpdate is the builder for updating Subscription entities.
type SubscriptionUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionMutation
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (su *SubscriptionUpdate) Where(ps ...predicate.Subscription) *SubscriptionUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdateTime sets the "update_time" field.
func (su *SubscriptionUpdate) SetUpdateTime(t time.Time) *SubscriptionUpdate {
	su.mutation.SetUpdateTime(t)
	return su
}

// SetStripeSubscriptionID sets the "stripe_subscription_id" field.
func (su *SubscriptionUpdate) SetStripeSubscriptionID(s string) *SubscriptionUpdate {
	su.mutation.SetStripeSubscriptionID(s)
	return su
}

// SetNillableStripeSubscriptionID sets the "stripe_subscription_id" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableStripeSubscriptionID(s *string) *SubscriptionUpdate {
	if s != nil {
		su.SetStripeSubscriptionID(*s)
	}
	return su
}

// ClearStripeSubscriptionID clears the value of the "stripe_subscription_id" field.
func (su *SubscriptionUpdate) ClearStripeSubscriptionID() *SubscriptionUpdate {
	su.mutation.ClearStripeSubscriptionID()
	return su
}

// SetTier sets the "tier" field.
func (su *SubscriptionUpdate) SetTier(s subscription.Tier) *SubscriptionUpdate {
	su.mutation.SetTier(s)
	return su
}

// SetNillableTier sets the "tier" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableTier(s *subscription.Tier) *SubscriptionUpdate {
	if s != nil {
		su.SetTier(*s)
	}
	return su
}

// SetStatus sets the "status" field.
func (su *SubscriptionUpdate) SetStatus(s subscription.Status) *SubscriptionUpdate {
	su.mutation.SetStatus(s)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableStatus(s *subscription.Status) *SubscriptionUpdate {
	if s != nil {
		su.SetStatus(*s)
	}
	return su
}

// SetCanceledAt sets the "canceled_at" field.
func (su *SubscriptionUpdate) SetCanceledAt(t time.Time) *SubscriptionUpdate {
	su.mutation.SetCanceledAt(t)
	return su
}

// SetNillableCanceledAt sets the "canceled_at" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableCanceledAt(t *time.Time) *SubscriptionUpdate {
	if t != nil {
		su.SetCanceledAt(*t)
	}
	return su
}

// ClearCanceledAt clears the value of the "canceled_at" field.
func (su *SubscriptionUpdate) ClearCanceledAt() *SubscriptionUpdate {
	su.mutation.ClearCanceledAt()
	return su
}

// SetCancelAtPeriodEnd sets the "cancel_at_period_end" field.
func (su *SubscriptionUpdate) SetCancelAtPeriodEnd(b bool) *SubscriptionUpdate {
	su.mutation.SetCancelAtPeriodEnd(b)
	return su
}

// SetNillableCancelAtPeriodEnd sets the "cancel_at_period_end" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableCancelAtPeriodEnd(b *bool) *SubscriptionUpdate {
	if b != nil {
		su.SetCancelAtPeriodEnd(*b)
	}
	return su
}

// SetTrialEnd sets the "trial_end" field.
func (su *SubscriptionUpdate) SetTrialEnd(t time.Time) *SubscriptionUpdate {
	su.mutation.SetTrialEnd(t)
	return su
}

// SetNillableTrialEnd sets the "trial_end" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableTrialEnd(t *time.Time) *SubscriptionUpdate {
	if t != nil {
		su.SetTrialEnd(*t)
	}
	return su
}

// ClearTrialEnd clears the value of the "trial_end" field.
func (su *SubscriptionUpdate) ClearTrialEnd() *SubscriptionUpdate {
	su.mutation.ClearTrialEnd()
	return su
}

// SetAffiliate6moCode sets the "affiliate_6mo_code" field.
func (su *SubscriptionUpdate) SetAffiliate6moCode(s string) *SubscriptionUpdate {
	su.mutation.SetAffiliate6moCode(s)
	return su
}

// SetNillableAffiliate6moCode sets the "affiliate_6mo_code" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableAffiliate6moCode(s *string) *SubscriptionUpdate {
	if s != nil {
		su.SetAffiliate6moCode(*s)
	}
	return su
}

// ClearAffiliate6moCode clears the value of the "affiliate_6mo_code" field.
func (su *SubscriptionUpdate) ClearAffiliate6moCode() *SubscriptionUpdate {
	su.mutation.ClearAffiliate6moCode()
	return su
}

// SetAffiliate12moCode sets the "affiliate_12mo_code" field.
func (su *SubscriptionUpdate) SetAffiliate12moCode(s string) *SubscriptionUpdate {
	su.mutation.SetAffiliate12moCode(s)
	return su
}

// SetNillableAffiliate12moCode sets the "affiliate_12mo_code" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableAffiliate12moCode(s *string) *SubscriptionUpdate {
	if s != nil {
		su.SetAffiliate12moCode(*s)
	}
	return su
}

// ClearAffiliate12moCode clears the value of the "affiliate_12mo_code" field.
func (su *SubscriptionUpdate) ClearAffiliate12moCode() *SubscriptionUpdate {
	su.mutation.ClearAffiliate12moCode()
	return su
}

// SetUserID sets the "user" edge to the User entity by ID.
func (su *SubscriptionUpdate) SetUserID(id uuid.UUID) *SubscriptionUpdate {
	su.mutation.SetUserID(id)
	return su
}

// SetUser sets the "user" edge to the User entity.
func (su *SubscriptionUpdate) SetUser(u *User) *SubscriptionUpdate {
	return su.SetUserID(u.ID)
}

// SetCheckoutSessionID sets the "checkout_session" edge to the CheckoutSession entity by ID.
func (su *SubscriptionUpdate) SetCheckoutSessionID(id uuid.UUID) *SubscriptionUpdate {
	su.mutation.SetCheckoutSessionID(id)
	return su
}

// SetNillableCheckoutSessionID sets the "checkout_session" edge to the CheckoutSession entity by ID if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableCheckoutSessionID(id *uuid.UUID) *SubscriptionUpdate {
	if id != nil {
		su = su.SetCheckoutSessionID(*id)
	}
	return su
}

// SetCheckoutSession sets the "checkout_session" edge to the CheckoutSession entity.
func (su *SubscriptionUpdate) SetCheckoutSession(c *CheckoutSession) *SubscriptionUpdate {
	return su.SetCheckoutSessionID(c.ID)
}

// Mutation returns the SubscriptionMutation object of the builder.
func (su *SubscriptionUpdate) Mutation() *SubscriptionMutation {
	return su.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (su *SubscriptionUpdate) ClearUser() *SubscriptionUpdate {
	su.mutation.ClearUser()
	return su
}

// ClearCheckoutSession clears the "checkout_session" edge to the CheckoutSession entity.
func (su *SubscriptionUpdate) ClearCheckoutSession() *SubscriptionUpdate {
	su.mutation.ClearCheckoutSession()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubscriptionUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubscriptionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SubscriptionUpdate) defaults() {
	if _, ok := su.mutation.UpdateTime(); !ok {
		v := subscription.UpdateDefaultUpdateTime()
		su.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SubscriptionUpdate) check() error {
	if v, ok := su.mutation.Tier(); ok {
		if err := subscription.TierValidator(v); err != nil {
			return &ValidationError{Name: "tier", err: fmt.Errorf(`ent: validator failed for field "Subscription.tier": %w`, err)}
		}
	}
	if v, ok := su.mutation.Status(); ok {
		if err := subscription.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Subscription.status": %w`, err)}
		}
	}
	if su.mutation.UserCleared() && len(su.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Subscription.user"`)
	}
	return nil
}

func (su *SubscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscription.Table, subscription.Columns, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdateTime(); ok {
		_spec.SetField(subscription.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.StripeSubscriptionID(); ok {
		_spec.SetField(subscription.FieldStripeSubscriptionID, field.TypeString, value)
	}
	if su.mutation.StripeSubscriptionIDCleared() {
		_spec.ClearField(subscription.FieldStripeSubscriptionID, field.TypeString)
	}
	if value, ok := su.mutation.Tier(); ok {
		_spec.SetField(subscription.FieldTier, field.TypeEnum, value)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(subscription.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := su.mutation.CanceledAt(); ok {
		_spec.SetField(subscription.FieldCanceledAt, field.TypeTime, value)
	}
	if su.mutation.CanceledAtCleared() {
		_spec.ClearField(subscription.FieldCanceledAt, field.TypeTime)
	}
	if value, ok := su.mutation.CancelAtPeriodEnd(); ok {
		_spec.SetField(subscription.FieldCancelAtPeriodEnd, field.TypeBool, value)
	}
	if value, ok := su.mutation.TrialEnd(); ok {
		_spec.SetField(subscription.FieldTrialEnd, field.TypeTime, value)
	}
	if su.mutation.TrialEndCleared() {
		_spec.ClearField(subscription.FieldTrialEnd, field.TypeTime)
	}
	if value, ok := su.mutation.Affiliate6moCode(); ok {
		_spec.SetField(subscription.FieldAffiliate6moCode, field.TypeString, value)
	}
	if su.mutation.Affiliate6moCodeCleared() {
		_spec.ClearField(subscription.FieldAffiliate6moCode, field.TypeString)
	}
	if value, ok := su.mutation.Affiliate12moCode(); ok {
		_spec.SetField(subscription.FieldAffiliate12moCode, field.TypeString, value)
	}
	if su.mutation.Affiliate12moCodeCleared() {
		_spec.ClearField(subscription.FieldAffiliate12moCode, field.TypeString)
	}
	if su.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.UserTable,
			Columns: []string{subscription.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.UserTable,
			Columns: []string{subscription.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.CheckoutSessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subscription.CheckoutSessionTable,
			Columns: []string{subscription.CheckoutSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(checkoutsession.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CheckoutSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subscription.CheckoutSessionTable,
			Columns: []string{subscription.CheckoutSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(checkoutsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubscriptionUpdateOne is the builder for updating a single Subscription entity.
type SubscriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionMutation
}

// SetUpdateTime sets the "update_time" field.
func (suo *SubscriptionUpdateOne) SetUpdateTime(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetUpdateTime(t)
	return suo
}

// SetStripeSubscriptionID sets the "stripe_subscription_id" field.
func (suo *SubscriptionUpdateOne) SetStripeSubscriptionID(s string) *SubscriptionUpdateOne {
	suo.mutation.SetStripeSubscriptionID(s)
	return suo
}

// SetNillableStripeSubscriptionID sets the "stripe_subscription_id" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableStripeSubscriptionID(s *string) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetStripeSubscriptionID(*s)
	}
	return suo
}

// ClearStripeSubscriptionID clears the value of the "stripe_subscription_id" field.
func (suo *SubscriptionUpdateOne) ClearStripeSubscriptionID() *SubscriptionUpdateOne {
	suo.mutation.ClearStripeSubscriptionID()
	return suo
}

// SetTier sets the "tier" field.
func (suo *SubscriptionUpdateOne) SetTier(s subscription.Tier) *SubscriptionUpdateOne {
	suo.mutation.SetTier(s)
	return suo
}

// SetNillableTier sets the "tier" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableTier(s *subscription.Tier) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetTier(*s)
	}
	return suo
}

// SetStatus sets the "status" field.
func (suo *SubscriptionUpdateOne) SetStatus(s subscription.Status) *SubscriptionUpdateOne {
	suo.mutation.SetStatus(s)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableStatus(s *subscription.Status) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetStatus(*s)
	}
	return suo
}

// SetCanceledAt sets the "canceled_at" field.
func (suo *SubscriptionUpdateOne) SetCanceledAt(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetCanceledAt(t)
	return suo
}

// SetNillableCanceledAt sets the "canceled_at" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableCanceledAt(t *time.Time) *SubscriptionUpdateOne {
	if t != nil {
		suo.SetCanceledAt(*t)
	}
	return suo
}

// ClearCanceledAt clears the value of the "canceled_at" field.
func (suo *SubscriptionUpdateOne) ClearCanceledAt() *SubscriptionUpdateOne {
	suo.mutation.ClearCanceledAt()
	return suo
}

// SetCancelAtPeriodEnd sets the "cancel_at_period_end" field.
func (suo *SubscriptionUpdateOne) SetCancelAtPeriodEnd(b bool) *SubscriptionUpdateOne {
	suo.mutation.SetCancelAtPeriodEnd(b)
	return suo
}

// SetNillableCancelAtPeriodEnd sets the "cancel_at_period_end" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableCancelAtPeriodEnd(b *bool) *SubscriptionUpdateOne {
	if b != nil {
		suo.SetCancelAtPeriodEnd(*b)
	}
	return suo
}

// SetTrialEnd sets the "trial_end" field.
func (suo *SubscriptionUpdateOne) SetTrialEnd(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetTrialEnd(t)
	return suo
}

// SetNillableTrialEnd sets the "trial_end" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableTrialEnd(t *time.Time) *SubscriptionUpdateOne {
	if t != nil {
		suo.SetTrialEnd(*t)
	}
	return suo
}

// ClearTrialEnd clears the value of the "trial_end" field.
func (suo *SubscriptionUpdateOne) ClearTrialEnd() *SubscriptionUpdateOne {
	suo.mutation.ClearTrialEnd()
	return suo
}

// SetAffiliate6moCode sets the "affiliate_6mo_code" field.
func (suo *SubscriptionUpdateOne) SetAffiliate6moCode(s string) *SubscriptionUpdateOne {
	suo.mutation.SetAffiliate6moCode(s)
	return suo
}

// SetNillableAffiliate6moCode sets the "affiliate_6mo_code" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableAffiliate6moCode(s *string) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetAffiliate6moCode(*s)
	}
	return suo
}

// ClearAffiliate6moCode clears the value of the "affiliate_6mo_code" field.
func (suo *SubscriptionUpdateOne) ClearAffiliate6moCode() *SubscriptionUpdateOne {
	suo.mutation.ClearAffiliate6moCode()
	return suo
}

// SetAffiliate12moCode sets the "affiliate_12mo_code" field.
func (suo *SubscriptionUpdateOne) SetAffiliate12moCode(s string) *SubscriptionUpdateOne {
	suo.mutation.SetAffiliate12moCode(s)
	return suo
}

// SetNillableAffiliate12moCode sets the "affiliate_12mo_code" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableAffiliate12moCode(s *string) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetAffiliate12moCode(*s)
	}
	return suo
}

// ClearAffiliate12moCode clears the value of the "affiliate_12mo_code" field.
func (suo *SubscriptionUpdateOne) ClearAffiliate12moCode() *SubscriptionUpdateOne {
	suo.mutation.ClearAffiliate12moCode()
	return suo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (suo *SubscriptionUpdateOne) SetUserID(id uuid.UUID) *SubscriptionUpdateOne {
	suo.mutation.SetUserID(id)
	return suo
}

// SetUser sets the "user" edge to the User entity.
func (suo *SubscriptionUpdateOne) SetUser(u *User) *SubscriptionUpdateOne {
	return suo.SetUserID(u.ID)
}

// SetCheckoutSessionID sets the "checkout_session" edge to the CheckoutSession entity by ID.
func (suo *SubscriptionUpdateOne) SetCheckoutSessionID(id uuid.UUID) *SubscriptionUpdateOne {
	suo.mutation.SetCheckoutSessionID(id)
	return suo
}

// SetNillableCheckoutSessionID sets the "checkout_session" edge to the CheckoutSession entity by ID if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableCheckoutSessionID(id *uuid.UUID) *SubscriptionUpdateOne {
	if id != nil {
		suo = suo.SetCheckoutSessionID(*id)
	}
	return suo
}

// SetCheckoutSession sets the "checkout_session" edge to the CheckoutSession entity.
func (suo *SubscriptionUpdateOne) SetCheckoutSession(c *CheckoutSession) *SubscriptionUpdateOne {
	return suo.SetCheckoutSessionID(c.ID)
}

// Mutation returns the SubscriptionMutation object of the builder.
func (suo *SubscriptionUpdateOne) Mutation() *SubscriptionMutation {
	return suo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (suo *SubscriptionUpdateOne) ClearUser() *SubscriptionUpdateOne {
	suo.mutation.ClearUser()
	return suo
}

// ClearCheckoutSession clears the "checkout_session" edge to the CheckoutSession entity.
func (suo *SubscriptionUpdateOne) ClearCheckoutSession() *SubscriptionUpdateOne {
	suo.mutation.ClearCheckoutSession()
	return suo
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (suo *SubscriptionUpdateOne) Where(ps ...predicate.Subscription) *SubscriptionUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubscriptionUpdateOne) Select(field string, fields ...string) *SubscriptionUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subscription entity.
func (suo *SubscriptionUpdateOne) Save(ctx context.Context) (*Subscription, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubscriptionUpdateOne) SaveX(ctx context.Context) *Subscription {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SubscriptionUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdateTime(); !ok {
		v := subscription.UpdateDefaultUpdateTime()
		suo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SubscriptionUpdateOne) check() error {
	if v, ok := suo.mutation.Tier(); ok {
		if err := subscription.TierValidator(v); err != nil {
			return &ValidationError{Name: "tier", err: fmt.Errorf(`ent: validator failed for field "Subscription.tier": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Status(); ok {
		if err := subscription.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Subscription.status": %w`, err)}
		}
	}
	if suo.mutation.UserCleared() && len(suo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Subscription.user"`)
	}
	return nil
}

func (suo *SubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *Subscription, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscription.Table, subscription.Columns, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Subscription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscription.FieldID)
		for _, f := range fields {
			if !subscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdateTime(); ok {
		_spec.SetField(subscription.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.StripeSubscriptionID(); ok {
		_spec.SetField(subscription.FieldStripeSubscriptionID, field.TypeString, value)
	}
	if suo.mutation.StripeSubscriptionIDCleared() {
		_spec.ClearField(subscription.FieldStripeSubscriptionID, field.TypeString)
	}
	if value, ok := suo.mutation.Tier(); ok {
		_spec.SetField(subscription.FieldTier, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(subscription.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.CanceledAt(); ok {
		_spec.SetField(subscription.FieldCanceledAt, field.TypeTime, value)
	}
	if suo.mutation.CanceledAtCleared() {
		_spec.ClearField(subscription.FieldCanceledAt, field.TypeTime)
	}
	if value, ok := suo.mutation.CancelAtPeriodEnd(); ok {
		_spec.SetField(subscription.FieldCancelAtPeriodEnd, field.TypeBool, value)
	}
	if value, ok := suo.mutation.TrialEnd(); ok {
		_spec.SetField(subscription.FieldTrialEnd, field.TypeTime, value)
	}
	if suo.mutation.TrialEndCleared() {
		_spec.ClearField(subscription.FieldTrialEnd, field.TypeTime)
	}
	if value, ok := suo.mutation.Affiliate6moCode(); ok {
		_spec.SetField(subscription.FieldAffiliate6moCode, field.TypeString, value)
	}
	if suo.mutation.Affiliate6moCodeCleared() {
		_spec.ClearField(subscription.FieldAffiliate6moCode, field.TypeString)
	}
	if value, ok := suo.mutation.Affiliate12moCode(); ok {
		_spec.SetField(subscription.FieldAffiliate12moCode, field.TypeString, value)
	}
	if suo.mutation.Affiliate12moCodeCleared() {
		_spec.ClearField(subscription.FieldAffiliate12moCode, field.TypeString)
	}
	if suo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.UserTable,
			Columns: []string{subscription.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscription.UserTable,
			Columns: []string{subscription.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.CheckoutSessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subscription.CheckoutSessionTable,
			Columns: []string{subscription.CheckoutSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(checkoutsession.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CheckoutSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subscription.CheckoutSessionTable,
			Columns: []string{subscription.CheckoutSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(checkoutsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Subscription{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
