// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/fuelup"
	"github.com/Dan6erbond/revline/ent/odometerreading"
	"github.com/Dan6erbond/revline/ent/servicelog"
	"github.com/google/uuid"
)

// OdometerReadingCreate is the builder for creating a OdometerReading entity.
type OdometerReadingCreate struct {
	config
	mutation *OdometerReadingMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (orc *OdometerReadingCreate) SetCreateTime(t time.Time) *OdometerReadingCreate {
	orc.mutation.SetCreateTime(t)
	return orc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (orc *OdometerReadingCreate) SetNillableCreateTime(t *time.Time) *OdometerReadingCreate {
	if t != nil {
		orc.SetCreateTime(*t)
	}
	return orc
}

// SetUpdateTime sets the "update_time" field.
func (orc *OdometerReadingCreate) SetUpdateTime(t time.Time) *OdometerReadingCreate {
	orc.mutation.SetUpdateTime(t)
	return orc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (orc *OdometerReadingCreate) SetNillableUpdateTime(t *time.Time) *OdometerReadingCreate {
	if t != nil {
		orc.SetUpdateTime(*t)
	}
	return orc
}

// SetReadingKm sets the "reading_km" field.
func (orc *OdometerReadingCreate) SetReadingKm(f float64) *OdometerReadingCreate {
	orc.mutation.SetReadingKm(f)
	return orc
}

// SetNotes sets the "notes" field.
func (orc *OdometerReadingCreate) SetNotes(s string) *OdometerReadingCreate {
	orc.mutation.SetNotes(s)
	return orc
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (orc *OdometerReadingCreate) SetNillableNotes(s *string) *OdometerReadingCreate {
	if s != nil {
		orc.SetNotes(*s)
	}
	return orc
}

// SetID sets the "id" field.
func (orc *OdometerReadingCreate) SetID(u uuid.UUID) *OdometerReadingCreate {
	orc.mutation.SetID(u)
	return orc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (orc *OdometerReadingCreate) SetNillableID(u *uuid.UUID) *OdometerReadingCreate {
	if u != nil {
		orc.SetID(*u)
	}
	return orc
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (orc *OdometerReadingCreate) SetCarID(id uuid.UUID) *OdometerReadingCreate {
	orc.mutation.SetCarID(id)
	return orc
}

// SetCar sets the "car" edge to the Car entity.
func (orc *OdometerReadingCreate) SetCar(c *Car) *OdometerReadingCreate {
	return orc.SetCarID(c.ID)
}

// SetFuelUpID sets the "fuel_up" edge to the FuelUp entity by ID.
func (orc *OdometerReadingCreate) SetFuelUpID(id uuid.UUID) *OdometerReadingCreate {
	orc.mutation.SetFuelUpID(id)
	return orc
}

// SetNillableFuelUpID sets the "fuel_up" edge to the FuelUp entity by ID if the given value is not nil.
func (orc *OdometerReadingCreate) SetNillableFuelUpID(id *uuid.UUID) *OdometerReadingCreate {
	if id != nil {
		orc = orc.SetFuelUpID(*id)
	}
	return orc
}

// SetFuelUp sets the "fuel_up" edge to the FuelUp entity.
func (orc *OdometerReadingCreate) SetFuelUp(f *FuelUp) *OdometerReadingCreate {
	return orc.SetFuelUpID(f.ID)
}

// SetServiceLogID sets the "service_log" edge to the ServiceLog entity by ID.
func (orc *OdometerReadingCreate) SetServiceLogID(id uuid.UUID) *OdometerReadingCreate {
	orc.mutation.SetServiceLogID(id)
	return orc
}

// SetNillableServiceLogID sets the "service_log" edge to the ServiceLog entity by ID if the given value is not nil.
func (orc *OdometerReadingCreate) SetNillableServiceLogID(id *uuid.UUID) *OdometerReadingCreate {
	if id != nil {
		orc = orc.SetServiceLogID(*id)
	}
	return orc
}

// SetServiceLog sets the "service_log" edge to the ServiceLog entity.
func (orc *OdometerReadingCreate) SetServiceLog(s *ServiceLog) *OdometerReadingCreate {
	return orc.SetServiceLogID(s.ID)
}

// Mutation returns the OdometerReadingMutation object of the builder.
func (orc *OdometerReadingCreate) Mutation() *OdometerReadingMutation {
	return orc.mutation
}

// Save creates the OdometerReading in the database.
func (orc *OdometerReadingCreate) Save(ctx context.Context) (*OdometerReading, error) {
	orc.defaults()
	return withHooks(ctx, orc.sqlSave, orc.mutation, orc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (orc *OdometerReadingCreate) SaveX(ctx context.Context) *OdometerReading {
	v, err := orc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (orc *OdometerReadingCreate) Exec(ctx context.Context) error {
	_, err := orc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (orc *OdometerReadingCreate) ExecX(ctx context.Context) {
	if err := orc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (orc *OdometerReadingCreate) defaults() {
	if _, ok := orc.mutation.CreateTime(); !ok {
		v := odometerreading.DefaultCreateTime()
		orc.mutation.SetCreateTime(v)
	}
	if _, ok := orc.mutation.UpdateTime(); !ok {
		v := odometerreading.DefaultUpdateTime()
		orc.mutation.SetUpdateTime(v)
	}
	if _, ok := orc.mutation.ID(); !ok {
		v := odometerreading.DefaultID()
		orc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (orc *OdometerReadingCreate) check() error {
	if _, ok := orc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "OdometerReading.create_time"`)}
	}
	if _, ok := orc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "OdometerReading.update_time"`)}
	}
	if _, ok := orc.mutation.ReadingKm(); !ok {
		return &ValidationError{Name: "reading_km", err: errors.New(`ent: missing required field "OdometerReading.reading_km"`)}
	}
	if len(orc.mutation.CarIDs()) == 0 {
		return &ValidationError{Name: "car", err: errors.New(`ent: missing required edge "OdometerReading.car"`)}
	}
	return nil
}

func (orc *OdometerReadingCreate) sqlSave(ctx context.Context) (*OdometerReading, error) {
	if err := orc.check(); err != nil {
		return nil, err
	}
	_node, _spec := orc.createSpec()
	if err := sqlgraph.CreateNode(ctx, orc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	orc.mutation.id = &_node.ID
	orc.mutation.done = true
	return _node, nil
}

func (orc *OdometerReadingCreate) createSpec() (*OdometerReading, *sqlgraph.CreateSpec) {
	var (
		_node = &OdometerReading{config: orc.config}
		_spec = sqlgraph.NewCreateSpec(odometerreading.Table, sqlgraph.NewFieldSpec(odometerreading.FieldID, field.TypeUUID))
	)
	if id, ok := orc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := orc.mutation.CreateTime(); ok {
		_spec.SetField(odometerreading.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := orc.mutation.UpdateTime(); ok {
		_spec.SetField(odometerreading.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := orc.mutation.ReadingKm(); ok {
		_spec.SetField(odometerreading.FieldReadingKm, field.TypeFloat64, value)
		_node.ReadingKm = value
	}
	if value, ok := orc.mutation.Notes(); ok {
		_spec.SetField(odometerreading.FieldNotes, field.TypeString, value)
		_node.Notes = &value
	}
	if nodes := orc.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   odometerreading.CarTable,
			Columns: []string{odometerreading.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.car_odometer_readings = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := orc.mutation.FuelUpIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   odometerreading.FuelUpTable,
			Columns: []string{odometerreading.FuelUpColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fuelup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := orc.mutation.ServiceLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   odometerreading.ServiceLogTable,
			Columns: []string{odometerreading.ServiceLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OdometerReadingCreateBulk is the builder for creating many OdometerReading entities in bulk.
type OdometerReadingCreateBulk struct {
	config
	err      error
	builders []*OdometerReadingCreate
}

// Save creates the OdometerReading entities in the database.
func (orcb *OdometerReadingCreateBulk) Save(ctx context.Context) ([]*OdometerReading, error) {
	if orcb.err != nil {
		return nil, orcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(orcb.builders))
	nodes := make([]*OdometerReading, len(orcb.builders))
	mutators := make([]Mutator, len(orcb.builders))
	for i := range orcb.builders {
		func(i int, root context.Context) {
			builder := orcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OdometerReadingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, orcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, orcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, orcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (orcb *OdometerReadingCreateBulk) SaveX(ctx context.Context) []*OdometerReading {
	v, err := orcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (orcb *OdometerReadingCreateBulk) Exec(ctx context.Context) error {
	_, err := orcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (orcb *OdometerReadingCreateBulk) ExecX(ctx context.Context) {
	if err := orcb.Exec(ctx); err != nil {
		panic(err)
	}
}
