// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/document"
	"github.com/Dan6erbond/revline/ent/expense"
	"github.com/Dan6erbond/revline/ent/fuelup"
	"github.com/Dan6erbond/revline/ent/odometerreading"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/google/uuid"
)

// FuelUpQuery is the builder for querying FuelUp entities.
type FuelUpQuery struct {
	config
	ctx                 *QueryContext
	order               []fuelup.OrderOption
	inters              []Interceptor
	predicates          []predicate.FuelUp
	withCar             *CarQuery
	withOdometerReading *OdometerReadingQuery
	withExpense         *ExpenseQuery
	withDocuments       *DocumentQuery
	withFKs             bool
	modifiers           []func(*sql.Selector)
	loadTotal           []func(context.Context, []*FuelUp) error
	withNamedDocuments  map[string]*DocumentQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FuelUpQuery builder.
func (fuq *FuelUpQuery) Where(ps ...predicate.FuelUp) *FuelUpQuery {
	fuq.predicates = append(fuq.predicates, ps...)
	return fuq
}

// Limit the number of records to be returned by this query.
func (fuq *FuelUpQuery) Limit(limit int) *FuelUpQuery {
	fuq.ctx.Limit = &limit
	return fuq
}

// Offset to start from.
func (fuq *FuelUpQuery) Offset(offset int) *FuelUpQuery {
	fuq.ctx.Offset = &offset
	return fuq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fuq *FuelUpQuery) Unique(unique bool) *FuelUpQuery {
	fuq.ctx.Unique = &unique
	return fuq
}

// Order specifies how the records should be ordered.
func (fuq *FuelUpQuery) Order(o ...fuelup.OrderOption) *FuelUpQuery {
	fuq.order = append(fuq.order, o...)
	return fuq
}

// QueryCar chains the current query on the "car" edge.
func (fuq *FuelUpQuery) QueryCar() *CarQuery {
	query := (&CarClient{config: fuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(fuelup.Table, fuelup.FieldID, selector),
			sqlgraph.To(car.Table, car.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fuelup.CarTable, fuelup.CarColumn),
		)
		fromU = sqlgraph.SetNeighbors(fuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOdometerReading chains the current query on the "odometer_reading" edge.
func (fuq *FuelUpQuery) QueryOdometerReading() *OdometerReadingQuery {
	query := (&OdometerReadingClient{config: fuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(fuelup.Table, fuelup.FieldID, selector),
			sqlgraph.To(odometerreading.Table, odometerreading.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, fuelup.OdometerReadingTable, fuelup.OdometerReadingColumn),
		)
		fromU = sqlgraph.SetNeighbors(fuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryExpense chains the current query on the "expense" edge.
func (fuq *FuelUpQuery) QueryExpense() *ExpenseQuery {
	query := (&ExpenseClient{config: fuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(fuelup.Table, fuelup.FieldID, selector),
			sqlgraph.To(expense.Table, expense.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, fuelup.ExpenseTable, fuelup.ExpenseColumn),
		)
		fromU = sqlgraph.SetNeighbors(fuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDocuments chains the current query on the "documents" edge.
func (fuq *FuelUpQuery) QueryDocuments() *DocumentQuery {
	query := (&DocumentClient{config: fuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(fuelup.Table, fuelup.FieldID, selector),
			sqlgraph.To(document.Table, document.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, fuelup.DocumentsTable, fuelup.DocumentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(fuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FuelUp entity from the query.
// Returns a *NotFoundError when no FuelUp was found.
func (fuq *FuelUpQuery) First(ctx context.Context) (*FuelUp, error) {
	nodes, err := fuq.Limit(1).All(setContextOp(ctx, fuq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{fuelup.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fuq *FuelUpQuery) FirstX(ctx context.Context) *FuelUp {
	node, err := fuq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FuelUp ID from the query.
// Returns a *NotFoundError when no FuelUp ID was found.
func (fuq *FuelUpQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = fuq.Limit(1).IDs(setContextOp(ctx, fuq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{fuelup.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fuq *FuelUpQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := fuq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FuelUp entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FuelUp entity is found.
// Returns a *NotFoundError when no FuelUp entities are found.
func (fuq *FuelUpQuery) Only(ctx context.Context) (*FuelUp, error) {
	nodes, err := fuq.Limit(2).All(setContextOp(ctx, fuq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{fuelup.Label}
	default:
		return nil, &NotSingularError{fuelup.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fuq *FuelUpQuery) OnlyX(ctx context.Context) *FuelUp {
	node, err := fuq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FuelUp ID in the query.
// Returns a *NotSingularError when more than one FuelUp ID is found.
// Returns a *NotFoundError when no entities are found.
func (fuq *FuelUpQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = fuq.Limit(2).IDs(setContextOp(ctx, fuq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{fuelup.Label}
	default:
		err = &NotSingularError{fuelup.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fuq *FuelUpQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := fuq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FuelUps.
func (fuq *FuelUpQuery) All(ctx context.Context) ([]*FuelUp, error) {
	ctx = setContextOp(ctx, fuq.ctx, ent.OpQueryAll)
	if err := fuq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*FuelUp, *FuelUpQuery]()
	return withInterceptors[[]*FuelUp](ctx, fuq, qr, fuq.inters)
}

// AllX is like All, but panics if an error occurs.
func (fuq *FuelUpQuery) AllX(ctx context.Context) []*FuelUp {
	nodes, err := fuq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FuelUp IDs.
func (fuq *FuelUpQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if fuq.ctx.Unique == nil && fuq.path != nil {
		fuq.Unique(true)
	}
	ctx = setContextOp(ctx, fuq.ctx, ent.OpQueryIDs)
	if err = fuq.Select(fuelup.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fuq *FuelUpQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := fuq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fuq *FuelUpQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, fuq.ctx, ent.OpQueryCount)
	if err := fuq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, fuq, querierCount[*FuelUpQuery](), fuq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (fuq *FuelUpQuery) CountX(ctx context.Context) int {
	count, err := fuq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fuq *FuelUpQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, fuq.ctx, ent.OpQueryExist)
	switch _, err := fuq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (fuq *FuelUpQuery) ExistX(ctx context.Context) bool {
	exist, err := fuq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FuelUpQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fuq *FuelUpQuery) Clone() *FuelUpQuery {
	if fuq == nil {
		return nil
	}
	return &FuelUpQuery{
		config:              fuq.config,
		ctx:                 fuq.ctx.Clone(),
		order:               append([]fuelup.OrderOption{}, fuq.order...),
		inters:              append([]Interceptor{}, fuq.inters...),
		predicates:          append([]predicate.FuelUp{}, fuq.predicates...),
		withCar:             fuq.withCar.Clone(),
		withOdometerReading: fuq.withOdometerReading.Clone(),
		withExpense:         fuq.withExpense.Clone(),
		withDocuments:       fuq.withDocuments.Clone(),
		// clone intermediate query.
		sql:  fuq.sql.Clone(),
		path: fuq.path,
	}
}

// WithCar tells the query-builder to eager-load the nodes that are connected to
// the "car" edge. The optional arguments are used to configure the query builder of the edge.
func (fuq *FuelUpQuery) WithCar(opts ...func(*CarQuery)) *FuelUpQuery {
	query := (&CarClient{config: fuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fuq.withCar = query
	return fuq
}

// WithOdometerReading tells the query-builder to eager-load the nodes that are connected to
// the "odometer_reading" edge. The optional arguments are used to configure the query builder of the edge.
func (fuq *FuelUpQuery) WithOdometerReading(opts ...func(*OdometerReadingQuery)) *FuelUpQuery {
	query := (&OdometerReadingClient{config: fuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fuq.withOdometerReading = query
	return fuq
}

// WithExpense tells the query-builder to eager-load the nodes that are connected to
// the "expense" edge. The optional arguments are used to configure the query builder of the edge.
func (fuq *FuelUpQuery) WithExpense(opts ...func(*ExpenseQuery)) *FuelUpQuery {
	query := (&ExpenseClient{config: fuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fuq.withExpense = query
	return fuq
}

// WithDocuments tells the query-builder to eager-load the nodes that are connected to
// the "documents" edge. The optional arguments are used to configure the query builder of the edge.
func (fuq *FuelUpQuery) WithDocuments(opts ...func(*DocumentQuery)) *FuelUpQuery {
	query := (&DocumentClient{config: fuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fuq.withDocuments = query
	return fuq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FuelUp.Query().
//		GroupBy(fuelup.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (fuq *FuelUpQuery) GroupBy(field string, fields ...string) *FuelUpGroupBy {
	fuq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FuelUpGroupBy{build: fuq}
	grbuild.flds = &fuq.ctx.Fields
	grbuild.label = fuelup.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.FuelUp.Query().
//		Select(fuelup.FieldCreateTime).
//		Scan(ctx, &v)
func (fuq *FuelUpQuery) Select(fields ...string) *FuelUpSelect {
	fuq.ctx.Fields = append(fuq.ctx.Fields, fields...)
	sbuild := &FuelUpSelect{FuelUpQuery: fuq}
	sbuild.label = fuelup.Label
	sbuild.flds, sbuild.scan = &fuq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FuelUpSelect configured with the given aggregations.
func (fuq *FuelUpQuery) Aggregate(fns ...AggregateFunc) *FuelUpSelect {
	return fuq.Select().Aggregate(fns...)
}

func (fuq *FuelUpQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range fuq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, fuq); err != nil {
				return err
			}
		}
	}
	for _, f := range fuq.ctx.Fields {
		if !fuelup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if fuq.path != nil {
		prev, err := fuq.path(ctx)
		if err != nil {
			return err
		}
		fuq.sql = prev
	}
	return nil
}

func (fuq *FuelUpQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*FuelUp, error) {
	var (
		nodes       = []*FuelUp{}
		withFKs     = fuq.withFKs
		_spec       = fuq.querySpec()
		loadedTypes = [4]bool{
			fuq.withCar != nil,
			fuq.withOdometerReading != nil,
			fuq.withExpense != nil,
			fuq.withDocuments != nil,
		}
	)
	if fuq.withCar != nil || fuq.withOdometerReading != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, fuelup.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*FuelUp).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &FuelUp{config: fuq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(fuq.modifiers) > 0 {
		_spec.Modifiers = fuq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, fuq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := fuq.withCar; query != nil {
		if err := fuq.loadCar(ctx, query, nodes, nil,
			func(n *FuelUp, e *Car) { n.Edges.Car = e }); err != nil {
			return nil, err
		}
	}
	if query := fuq.withOdometerReading; query != nil {
		if err := fuq.loadOdometerReading(ctx, query, nodes, nil,
			func(n *FuelUp, e *OdometerReading) { n.Edges.OdometerReading = e }); err != nil {
			return nil, err
		}
	}
	if query := fuq.withExpense; query != nil {
		if err := fuq.loadExpense(ctx, query, nodes, nil,
			func(n *FuelUp, e *Expense) { n.Edges.Expense = e }); err != nil {
			return nil, err
		}
	}
	if query := fuq.withDocuments; query != nil {
		if err := fuq.loadDocuments(ctx, query, nodes,
			func(n *FuelUp) { n.Edges.Documents = []*Document{} },
			func(n *FuelUp, e *Document) { n.Edges.Documents = append(n.Edges.Documents, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range fuq.withNamedDocuments {
		if err := fuq.loadDocuments(ctx, query, nodes,
			func(n *FuelUp) { n.appendNamedDocuments(name) },
			func(n *FuelUp, e *Document) { n.appendNamedDocuments(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range fuq.loadTotal {
		if err := fuq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (fuq *FuelUpQuery) loadCar(ctx context.Context, query *CarQuery, nodes []*FuelUp, init func(*FuelUp), assign func(*FuelUp, *Car)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*FuelUp)
	for i := range nodes {
		if nodes[i].car_fuel_ups == nil {
			continue
		}
		fk := *nodes[i].car_fuel_ups
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(car.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "car_fuel_ups" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (fuq *FuelUpQuery) loadOdometerReading(ctx context.Context, query *OdometerReadingQuery, nodes []*FuelUp, init func(*FuelUp), assign func(*FuelUp, *OdometerReading)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*FuelUp)
	for i := range nodes {
		if nodes[i].odometer_reading_fuel_up == nil {
			continue
		}
		fk := *nodes[i].odometer_reading_fuel_up
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(odometerreading.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "odometer_reading_fuel_up" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (fuq *FuelUpQuery) loadExpense(ctx context.Context, query *ExpenseQuery, nodes []*FuelUp, init func(*FuelUp), assign func(*FuelUp, *Expense)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*FuelUp)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Expense(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(fuelup.ExpenseColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.fuel_up_expense
		if fk == nil {
			return fmt.Errorf(`foreign-key "fuel_up_expense" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "fuel_up_expense" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (fuq *FuelUpQuery) loadDocuments(ctx context.Context, query *DocumentQuery, nodes []*FuelUp, init func(*FuelUp), assign func(*FuelUp, *Document)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*FuelUp)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Document(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(fuelup.DocumentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.fuel_up_documents
		if fk == nil {
			return fmt.Errorf(`foreign-key "fuel_up_documents" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "fuel_up_documents" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (fuq *FuelUpQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fuq.querySpec()
	if len(fuq.modifiers) > 0 {
		_spec.Modifiers = fuq.modifiers
	}
	_spec.Node.Columns = fuq.ctx.Fields
	if len(fuq.ctx.Fields) > 0 {
		_spec.Unique = fuq.ctx.Unique != nil && *fuq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, fuq.driver, _spec)
}

func (fuq *FuelUpQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(fuelup.Table, fuelup.Columns, sqlgraph.NewFieldSpec(fuelup.FieldID, field.TypeUUID))
	_spec.From = fuq.sql
	if unique := fuq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if fuq.path != nil {
		_spec.Unique = true
	}
	if fields := fuq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fuelup.FieldID)
		for i := range fields {
			if fields[i] != fuelup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := fuq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fuq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fuq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fuq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fuq *FuelUpQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fuq.driver.Dialect())
	t1 := builder.Table(fuelup.Table)
	columns := fuq.ctx.Fields
	if len(columns) == 0 {
		columns = fuelup.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fuq.sql != nil {
		selector = fuq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if fuq.ctx.Unique != nil && *fuq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range fuq.predicates {
		p(selector)
	}
	for _, p := range fuq.order {
		p(selector)
	}
	if offset := fuq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fuq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedDocuments tells the query-builder to eager-load the nodes that are connected to the "documents"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (fuq *FuelUpQuery) WithNamedDocuments(name string, opts ...func(*DocumentQuery)) *FuelUpQuery {
	query := (&DocumentClient{config: fuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if fuq.withNamedDocuments == nil {
		fuq.withNamedDocuments = make(map[string]*DocumentQuery)
	}
	fuq.withNamedDocuments[name] = query
	return fuq
}

// FuelUpGroupBy is the group-by builder for FuelUp entities.
type FuelUpGroupBy struct {
	selector
	build *FuelUpQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fugb *FuelUpGroupBy) Aggregate(fns ...AggregateFunc) *FuelUpGroupBy {
	fugb.fns = append(fugb.fns, fns...)
	return fugb
}

// Scan applies the selector query and scans the result into the given value.
func (fugb *FuelUpGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fugb.build.ctx, ent.OpQueryGroupBy)
	if err := fugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FuelUpQuery, *FuelUpGroupBy](ctx, fugb.build, fugb, fugb.build.inters, v)
}

func (fugb *FuelUpGroupBy) sqlScan(ctx context.Context, root *FuelUpQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(fugb.fns))
	for _, fn := range fugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*fugb.flds)+len(fugb.fns))
		for _, f := range *fugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*fugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FuelUpSelect is the builder for selecting fields of FuelUp entities.
type FuelUpSelect struct {
	*FuelUpQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fus *FuelUpSelect) Aggregate(fns ...AggregateFunc) *FuelUpSelect {
	fus.fns = append(fus.fns, fns...)
	return fus
}

// Scan applies the selector query and scans the result into the given value.
func (fus *FuelUpSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fus.ctx, ent.OpQuerySelect)
	if err := fus.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FuelUpQuery, *FuelUpSelect](ctx, fus.FuelUpQuery, fus, fus.inters, v)
}

func (fus *FuelUpSelect) sqlScan(ctx context.Context, root *FuelUpQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fus.fns))
	for _, fn := range fus.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fus.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
