// Code generated by ent, DO NOT EDIT.

package subscription

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the subscription type in the database.
	Label = "subscription"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStripeSubscriptionID holds the string denoting the stripe_subscription_id field in the database.
	FieldStripeSubscriptionID = "stripe_subscription_id"
	// FieldTier holds the string denoting the tier field in the database.
	FieldTier = "tier"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCanceledAt holds the string denoting the canceled_at field in the database.
	FieldCanceledAt = "canceled_at"
	// FieldCancelAtPeriodEnd holds the string denoting the cancel_at_period_end field in the database.
	FieldCancelAtPeriodEnd = "cancel_at_period_end"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeCheckoutSession holds the string denoting the checkout_session edge name in mutations.
	EdgeCheckoutSession = "checkout_session"
	// Table holds the table name of the subscription in the database.
	Table = "subscriptions"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "subscriptions"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_subscriptions"
	// CheckoutSessionTable is the table that holds the checkout_session relation/edge.
	CheckoutSessionTable = "subscriptions"
	// CheckoutSessionInverseTable is the table name for the CheckoutSession entity.
	// It exists in this package in order to avoid circular dependency with the "checkoutsession" package.
	CheckoutSessionInverseTable = "checkout_sessions"
	// CheckoutSessionColumn is the table column denoting the checkout_session relation/edge.
	CheckoutSessionColumn = "checkout_session_subscription"
)

// Columns holds all SQL columns for subscription fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStripeSubscriptionID,
	FieldTier,
	FieldStatus,
	FieldCanceledAt,
	FieldCancelAtPeriodEnd,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "subscriptions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"checkout_session_subscription",
	"user_subscriptions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// StripeSubscriptionIDValidator is a validator for the "stripe_subscription_id" field. It is called by the builders before save.
	StripeSubscriptionIDValidator func(string) error
	// DefaultCancelAtPeriodEnd holds the default value on creation for the "cancel_at_period_end" field.
	DefaultCancelAtPeriodEnd bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Tier defines the type for the "tier" enum field.
type Tier string

// Tier values.
const (
	TierDiy        Tier = "diy"
	TierEnthusiast Tier = "enthusiast"
)

func (t Tier) String() string {
	return string(t)
}

// TierValidator is a validator for the "tier" field enum values. It is called by the builders before save.
func TierValidator(t Tier) error {
	switch t {
	case TierDiy, TierEnthusiast:
		return nil
	default:
		return fmt.Errorf("subscription: invalid enum value for tier field: %q", t)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusIncomplete is the default value of the Status enum.
const DefaultStatus = StatusIncomplete

// Status values.
const (
	StatusActive            Status = "active"
	StatusTrialing          Status = "trialing"
	StatusCanceled          Status = "canceled"
	StatusIncomplete        Status = "incomplete"
	StatusIncompleteExpired Status = "incomplete_expired"
	StatusPastDue           Status = "past_due"
	StatusUnpaid            Status = "unpaid"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActive, StatusTrialing, StatusCanceled, StatusIncomplete, StatusIncompleteExpired, StatusPastDue, StatusUnpaid:
		return nil
	default:
		return fmt.Errorf("subscription: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Subscription queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByStripeSubscriptionID orders the results by the stripe_subscription_id field.
func ByStripeSubscriptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStripeSubscriptionID, opts...).ToFunc()
}

// ByTier orders the results by the tier field.
func ByTier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTier, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCanceledAt orders the results by the canceled_at field.
func ByCanceledAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCanceledAt, opts...).ToFunc()
}

// ByCancelAtPeriodEnd orders the results by the cancel_at_period_end field.
func ByCancelAtPeriodEnd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCancelAtPeriodEnd, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByCheckoutSessionField orders the results by checkout_session field.
func ByCheckoutSessionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCheckoutSessionStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newCheckoutSessionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CheckoutSessionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, CheckoutSessionTable, CheckoutSessionColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Tier) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Tier) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Tier(str)
	if err := TierValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Tier", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
