// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/album"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/document"
	"github.com/Dan6erbond/revline/ent/dragsession"
	"github.com/Dan6erbond/revline/ent/dynosession"
	"github.com/Dan6erbond/revline/ent/expense"
	"github.com/Dan6erbond/revline/ent/fuelup"
	"github.com/Dan6erbond/revline/ent/media"
	"github.com/Dan6erbond/revline/ent/odometerreading"
	"github.com/Dan6erbond/revline/ent/serviceitem"
	"github.com/Dan6erbond/revline/ent/servicelog"
	"github.com/Dan6erbond/revline/ent/serviceschedule"
	"github.com/Dan6erbond/revline/ent/task"
	"github.com/Dan6erbond/revline/ent/user"
	"github.com/google/uuid"
)

// CarCreate is the builder for creating a Car entity.
type CarCreate struct {
	config
	mutation *CarMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (cc *CarCreate) SetCreateTime(t time.Time) *CarCreate {
	cc.mutation.SetCreateTime(t)
	return cc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cc *CarCreate) SetNillableCreateTime(t *time.Time) *CarCreate {
	if t != nil {
		cc.SetCreateTime(*t)
	}
	return cc
}

// SetUpdateTime sets the "update_time" field.
func (cc *CarCreate) SetUpdateTime(t time.Time) *CarCreate {
	cc.mutation.SetUpdateTime(t)
	return cc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cc *CarCreate) SetNillableUpdateTime(t *time.Time) *CarCreate {
	if t != nil {
		cc.SetUpdateTime(*t)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *CarCreate) SetName(s string) *CarCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetMake sets the "make" field.
func (cc *CarCreate) SetMake(s string) *CarCreate {
	cc.mutation.SetMake(s)
	return cc
}

// SetNillableMake sets the "make" field if the given value is not nil.
func (cc *CarCreate) SetNillableMake(s *string) *CarCreate {
	if s != nil {
		cc.SetMake(*s)
	}
	return cc
}

// SetModel sets the "model" field.
func (cc *CarCreate) SetModel(s string) *CarCreate {
	cc.mutation.SetModel(s)
	return cc
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (cc *CarCreate) SetNillableModel(s *string) *CarCreate {
	if s != nil {
		cc.SetModel(*s)
	}
	return cc
}

// SetType sets the "type" field.
func (cc *CarCreate) SetType(s string) *CarCreate {
	cc.mutation.SetType(s)
	return cc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cc *CarCreate) SetNillableType(s *string) *CarCreate {
	if s != nil {
		cc.SetType(*s)
	}
	return cc
}

// SetYear sets the "year" field.
func (cc *CarCreate) SetYear(i int) *CarCreate {
	cc.mutation.SetYear(i)
	return cc
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (cc *CarCreate) SetNillableYear(i *int) *CarCreate {
	if i != nil {
		cc.SetYear(*i)
	}
	return cc
}

// SetTrim sets the "trim" field.
func (cc *CarCreate) SetTrim(s string) *CarCreate {
	cc.mutation.SetTrim(s)
	return cc
}

// SetNillableTrim sets the "trim" field if the given value is not nil.
func (cc *CarCreate) SetNillableTrim(s *string) *CarCreate {
	if s != nil {
		cc.SetTrim(*s)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CarCreate) SetID(u uuid.UUID) *CarCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CarCreate) SetNillableID(u *uuid.UUID) *CarCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cc *CarCreate) SetOwnerID(id uuid.UUID) *CarCreate {
	cc.mutation.SetOwnerID(id)
	return cc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (cc *CarCreate) SetNillableOwnerID(id *uuid.UUID) *CarCreate {
	if id != nil {
		cc = cc.SetOwnerID(*id)
	}
	return cc
}

// SetOwner sets the "owner" edge to the User entity.
func (cc *CarCreate) SetOwner(u *User) *CarCreate {
	return cc.SetOwnerID(u.ID)
}

// AddDragSessionIDs adds the "drag_sessions" edge to the DragSession entity by IDs.
func (cc *CarCreate) AddDragSessionIDs(ids ...uuid.UUID) *CarCreate {
	cc.mutation.AddDragSessionIDs(ids...)
	return cc
}

// AddDragSessions adds the "drag_sessions" edges to the DragSession entity.
func (cc *CarCreate) AddDragSessions(d ...*DragSession) *CarCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cc.AddDragSessionIDs(ids...)
}

// AddFuelUpIDs adds the "fuel_ups" edge to the FuelUp entity by IDs.
func (cc *CarCreate) AddFuelUpIDs(ids ...uuid.UUID) *CarCreate {
	cc.mutation.AddFuelUpIDs(ids...)
	return cc
}

// AddFuelUps adds the "fuel_ups" edges to the FuelUp entity.
func (cc *CarCreate) AddFuelUps(f ...*FuelUp) *CarCreate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cc.AddFuelUpIDs(ids...)
}

// AddOdometerReadingIDs adds the "odometer_readings" edge to the OdometerReading entity by IDs.
func (cc *CarCreate) AddOdometerReadingIDs(ids ...uuid.UUID) *CarCreate {
	cc.mutation.AddOdometerReadingIDs(ids...)
	return cc
}

// AddOdometerReadings adds the "odometer_readings" edges to the OdometerReading entity.
func (cc *CarCreate) AddOdometerReadings(o ...*OdometerReading) *CarCreate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cc.AddOdometerReadingIDs(ids...)
}

// AddServiceItemIDs adds the "service_items" edge to the ServiceItem entity by IDs.
func (cc *CarCreate) AddServiceItemIDs(ids ...uuid.UUID) *CarCreate {
	cc.mutation.AddServiceItemIDs(ids...)
	return cc
}

// AddServiceItems adds the "service_items" edges to the ServiceItem entity.
func (cc *CarCreate) AddServiceItems(s ...*ServiceItem) *CarCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cc.AddServiceItemIDs(ids...)
}

// AddServiceLogIDs adds the "service_logs" edge to the ServiceLog entity by IDs.
func (cc *CarCreate) AddServiceLogIDs(ids ...uuid.UUID) *CarCreate {
	cc.mutation.AddServiceLogIDs(ids...)
	return cc
}

// AddServiceLogs adds the "service_logs" edges to the ServiceLog entity.
func (cc *CarCreate) AddServiceLogs(s ...*ServiceLog) *CarCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cc.AddServiceLogIDs(ids...)
}

// AddServiceScheduleIDs adds the "service_schedules" edge to the ServiceSchedule entity by IDs.
func (cc *CarCreate) AddServiceScheduleIDs(ids ...uuid.UUID) *CarCreate {
	cc.mutation.AddServiceScheduleIDs(ids...)
	return cc
}

// AddServiceSchedules adds the "service_schedules" edges to the ServiceSchedule entity.
func (cc *CarCreate) AddServiceSchedules(s ...*ServiceSchedule) *CarCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cc.AddServiceScheduleIDs(ids...)
}

// AddMediumIDs adds the "media" edge to the Media entity by IDs.
func (cc *CarCreate) AddMediumIDs(ids ...uuid.UUID) *CarCreate {
	cc.mutation.AddMediumIDs(ids...)
	return cc
}

// AddMedia adds the "media" edges to the Media entity.
func (cc *CarCreate) AddMedia(m ...*Media) *CarCreate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cc.AddMediumIDs(ids...)
}

// AddAlbumIDs adds the "albums" edge to the Album entity by IDs.
func (cc *CarCreate) AddAlbumIDs(ids ...uuid.UUID) *CarCreate {
	cc.mutation.AddAlbumIDs(ids...)
	return cc
}

// AddAlbums adds the "albums" edges to the Album entity.
func (cc *CarCreate) AddAlbums(a ...*Album) *CarCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cc.AddAlbumIDs(ids...)
}

// AddDocumentIDs adds the "documents" edge to the Document entity by IDs.
func (cc *CarCreate) AddDocumentIDs(ids ...uuid.UUID) *CarCreate {
	cc.mutation.AddDocumentIDs(ids...)
	return cc
}

// AddDocuments adds the "documents" edges to the Document entity.
func (cc *CarCreate) AddDocuments(d ...*Document) *CarCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cc.AddDocumentIDs(ids...)
}

// AddDynoSessionIDs adds the "dyno_sessions" edge to the DynoSession entity by IDs.
func (cc *CarCreate) AddDynoSessionIDs(ids ...uuid.UUID) *CarCreate {
	cc.mutation.AddDynoSessionIDs(ids...)
	return cc
}

// AddDynoSessions adds the "dyno_sessions" edges to the DynoSession entity.
func (cc *CarCreate) AddDynoSessions(d ...*DynoSession) *CarCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cc.AddDynoSessionIDs(ids...)
}

// AddExpenseIDs adds the "expenses" edge to the Expense entity by IDs.
func (cc *CarCreate) AddExpenseIDs(ids ...uuid.UUID) *CarCreate {
	cc.mutation.AddExpenseIDs(ids...)
	return cc
}

// AddExpenses adds the "expenses" edges to the Expense entity.
func (cc *CarCreate) AddExpenses(e ...*Expense) *CarCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cc.AddExpenseIDs(ids...)
}

// SetBannerImageID sets the "banner_image" edge to the Media entity by ID.
func (cc *CarCreate) SetBannerImageID(id uuid.UUID) *CarCreate {
	cc.mutation.SetBannerImageID(id)
	return cc
}

// SetNillableBannerImageID sets the "banner_image" edge to the Media entity by ID if the given value is not nil.
func (cc *CarCreate) SetNillableBannerImageID(id *uuid.UUID) *CarCreate {
	if id != nil {
		cc = cc.SetBannerImageID(*id)
	}
	return cc
}

// SetBannerImage sets the "banner_image" edge to the Media entity.
func (cc *CarCreate) SetBannerImage(m *Media) *CarCreate {
	return cc.SetBannerImageID(m.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (cc *CarCreate) AddTaskIDs(ids ...uuid.UUID) *CarCreate {
	cc.mutation.AddTaskIDs(ids...)
	return cc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (cc *CarCreate) AddTasks(t ...*Task) *CarCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cc.AddTaskIDs(ids...)
}

// Mutation returns the CarMutation object of the builder.
func (cc *CarCreate) Mutation() *CarMutation {
	return cc.mutation
}

// Save creates the Car in the database.
func (cc *CarCreate) Save(ctx context.Context) (*Car, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CarCreate) SaveX(ctx context.Context) *Car {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CarCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CarCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CarCreate) defaults() {
	if _, ok := cc.mutation.CreateTime(); !ok {
		v := car.DefaultCreateTime()
		cc.mutation.SetCreateTime(v)
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		v := car.DefaultUpdateTime()
		cc.mutation.SetUpdateTime(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := car.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CarCreate) check() error {
	if _, ok := cc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Car.create_time"`)}
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Car.update_time"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Car.name"`)}
	}
	return nil
}

func (cc *CarCreate) sqlSave(ctx context.Context) (*Car, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CarCreate) createSpec() (*Car, *sqlgraph.CreateSpec) {
	var (
		_node = &Car{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(car.Table, sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.SetField(car.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cc.mutation.UpdateTime(); ok {
		_spec.SetField(car.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(car.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Make(); ok {
		_spec.SetField(car.FieldMake, field.TypeString, value)
		_node.Make = &value
	}
	if value, ok := cc.mutation.Model(); ok {
		_spec.SetField(car.FieldModel, field.TypeString, value)
		_node.Model = &value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(car.FieldType, field.TypeString, value)
		_node.Type = &value
	}
	if value, ok := cc.mutation.Year(); ok {
		_spec.SetField(car.FieldYear, field.TypeInt, value)
		_node.Year = &value
	}
	if value, ok := cc.mutation.Trim(); ok {
		_spec.SetField(car.FieldTrim, field.TypeString, value)
		_node.Trim = &value
	}
	if nodes := cc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.OwnerTable,
			Columns: []string{car.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_cars = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DragSessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.DragSessionsTable,
			Columns: []string{car.DragSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dragsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.FuelUpsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.FuelUpsTable,
			Columns: []string{car.FuelUpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fuelup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.OdometerReadingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.OdometerReadingsTable,
			Columns: []string{car.OdometerReadingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(odometerreading.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ServiceItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ServiceItemsTable,
			Columns: []string{car.ServiceItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ServiceLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ServiceLogsTable,
			Columns: []string{car.ServiceLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ServiceSchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ServiceSchedulesTable,
			Columns: []string{car.ServiceSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceschedule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.MediaTable,
			Columns: []string{car.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.AlbumsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.AlbumsTable,
			Columns: []string{car.AlbumsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(album.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.DocumentsTable,
			Columns: []string{car.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DynoSessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.DynoSessionsTable,
			Columns: []string{car.DynoSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dynosession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ExpensesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ExpensesTable,
			Columns: []string{car.ExpensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(expense.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.BannerImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   car.BannerImageTable,
			Columns: []string{car.BannerImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.car_banner_image = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.TasksTable,
			Columns: []string{car.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CarCreateBulk is the builder for creating many Car entities in bulk.
type CarCreateBulk struct {
	config
	err      error
	builders []*CarCreate
}

// Save creates the Car entities in the database.
func (ccb *CarCreateBulk) Save(ctx context.Context) ([]*Car, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Car, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CarMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CarCreateBulk) SaveX(ctx context.Context) []*Car {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CarCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CarCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
