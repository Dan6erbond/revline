// Code generated by ent, DO NOT EDIT.

package expense

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Expense {
	return predicate.Expense(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Expense {
	return predicate.Expense(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Expense {
	return predicate.Expense(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Expense {
	return predicate.Expense(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Expense {
	return predicate.Expense(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Expense {
	return predicate.Expense(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Expense {
	return predicate.Expense(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Expense {
	return predicate.Expense(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Expense {
	return predicate.Expense(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldEQ(FieldUpdateTime, v))
}

// OccurredAt applies equality check predicate on the "occurred_at" field. It's identical to OccurredAtEQ.
func OccurredAt(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldEQ(FieldOccurredAt, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.Expense {
	return predicate.Expense(sql.FieldEQ(FieldAmount, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldLTE(FieldUpdateTime, v))
}

// OccurredAtEQ applies the EQ predicate on the "occurred_at" field.
func OccurredAtEQ(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldEQ(FieldOccurredAt, v))
}

// OccurredAtNEQ applies the NEQ predicate on the "occurred_at" field.
func OccurredAtNEQ(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldNEQ(FieldOccurredAt, v))
}

// OccurredAtIn applies the In predicate on the "occurred_at" field.
func OccurredAtIn(vs ...time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldIn(FieldOccurredAt, vs...))
}

// OccurredAtNotIn applies the NotIn predicate on the "occurred_at" field.
func OccurredAtNotIn(vs ...time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldNotIn(FieldOccurredAt, vs...))
}

// OccurredAtGT applies the GT predicate on the "occurred_at" field.
func OccurredAtGT(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldGT(FieldOccurredAt, v))
}

// OccurredAtGTE applies the GTE predicate on the "occurred_at" field.
func OccurredAtGTE(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldGTE(FieldOccurredAt, v))
}

// OccurredAtLT applies the LT predicate on the "occurred_at" field.
func OccurredAtLT(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldLT(FieldOccurredAt, v))
}

// OccurredAtLTE applies the LTE predicate on the "occurred_at" field.
func OccurredAtLTE(v time.Time) predicate.Expense {
	return predicate.Expense(sql.FieldLTE(FieldOccurredAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Expense {
	return predicate.Expense(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Expense {
	return predicate.Expense(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Expense {
	return predicate.Expense(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Expense {
	return predicate.Expense(sql.FieldNotIn(FieldType, vs...))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.Expense {
	return predicate.Expense(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.Expense {
	return predicate.Expense(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.Expense {
	return predicate.Expense(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.Expense {
	return predicate.Expense(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.Expense {
	return predicate.Expense(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.Expense {
	return predicate.Expense(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.Expense {
	return predicate.Expense(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.Expense {
	return predicate.Expense(sql.FieldLTE(FieldAmount, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.Expense {
	return predicate.Expense(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.Expense {
	return predicate.Expense(sql.FieldNotNull(FieldNotes))
}

// HasCar applies the HasEdge predicate on the "car" edge.
func HasCar() predicate.Expense {
	return predicate.Expense(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CarTable, CarColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarWith applies the HasEdge predicate on the "car" edge with a given conditions (other predicates).
func HasCarWith(preds ...predicate.Car) predicate.Expense {
	return predicate.Expense(func(s *sql.Selector) {
		step := newCarStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFuelUp applies the HasEdge predicate on the "fuel_up" edge.
func HasFuelUp() predicate.Expense {
	return predicate.Expense(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, FuelUpTable, FuelUpColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFuelUpWith applies the HasEdge predicate on the "fuel_up" edge with a given conditions (other predicates).
func HasFuelUpWith(preds ...predicate.FuelUp) predicate.Expense {
	return predicate.Expense(func(s *sql.Selector) {
		step := newFuelUpStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasServiceLog applies the HasEdge predicate on the "service_log" edge.
func HasServiceLog() predicate.Expense {
	return predicate.Expense(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ServiceLogTable, ServiceLogColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceLogWith applies the HasEdge predicate on the "service_log" edge with a given conditions (other predicates).
func HasServiceLogWith(preds ...predicate.ServiceLog) predicate.Expense {
	return predicate.Expense(func(s *sql.Selector) {
		step := newServiceLogStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDocuments applies the HasEdge predicate on the "documents" edge.
func HasDocuments() predicate.Expense {
	return predicate.Expense(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DocumentsTable, DocumentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDocumentsWith applies the HasEdge predicate on the "documents" edge with a given conditions (other predicates).
func HasDocumentsWith(preds ...predicate.Document) predicate.Expense {
	return predicate.Expense(func(s *sql.Selector) {
		step := newDocumentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Expense) predicate.Expense {
	return predicate.Expense(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Expense) predicate.Expense {
	return predicate.Expense(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Expense) predicate.Expense {
	return predicate.Expense(sql.NotPredicates(p))
}
