// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/checkoutsession"
	"github.com/Dan6erbond/revline/ent/subscription"
	"github.com/Dan6erbond/revline/ent/user"
	"github.com/google/uuid"
)

// CheckoutSessionCreate is the builder for creating a CheckoutSession entity.
type CheckoutSessionCreate struct {
	config
	mutation *CheckoutSessionMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (csc *CheckoutSessionCreate) SetCreateTime(t time.Time) *CheckoutSessionCreate {
	csc.mutation.SetCreateTime(t)
	return csc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (csc *CheckoutSessionCreate) SetNillableCreateTime(t *time.Time) *CheckoutSessionCreate {
	if t != nil {
		csc.SetCreateTime(*t)
	}
	return csc
}

// SetUpdateTime sets the "update_time" field.
func (csc *CheckoutSessionCreate) SetUpdateTime(t time.Time) *CheckoutSessionCreate {
	csc.mutation.SetUpdateTime(t)
	return csc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (csc *CheckoutSessionCreate) SetNillableUpdateTime(t *time.Time) *CheckoutSessionCreate {
	if t != nil {
		csc.SetUpdateTime(*t)
	}
	return csc
}

// SetStripeSessionID sets the "stripe_session_id" field.
func (csc *CheckoutSessionCreate) SetStripeSessionID(s string) *CheckoutSessionCreate {
	csc.mutation.SetStripeSessionID(s)
	return csc
}

// SetNillableStripeSessionID sets the "stripe_session_id" field if the given value is not nil.
func (csc *CheckoutSessionCreate) SetNillableStripeSessionID(s *string) *CheckoutSessionCreate {
	if s != nil {
		csc.SetStripeSessionID(*s)
	}
	return csc
}

// SetStripePriceID sets the "stripe_price_id" field.
func (csc *CheckoutSessionCreate) SetStripePriceID(s string) *CheckoutSessionCreate {
	csc.mutation.SetStripePriceID(s)
	return csc
}

// SetMode sets the "mode" field.
func (csc *CheckoutSessionCreate) SetMode(c checkoutsession.Mode) *CheckoutSessionCreate {
	csc.mutation.SetMode(c)
	return csc
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (csc *CheckoutSessionCreate) SetNillableMode(c *checkoutsession.Mode) *CheckoutSessionCreate {
	if c != nil {
		csc.SetMode(*c)
	}
	return csc
}

// SetCompleted sets the "completed" field.
func (csc *CheckoutSessionCreate) SetCompleted(b bool) *CheckoutSessionCreate {
	csc.mutation.SetCompleted(b)
	return csc
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (csc *CheckoutSessionCreate) SetNillableCompleted(b *bool) *CheckoutSessionCreate {
	if b != nil {
		csc.SetCompleted(*b)
	}
	return csc
}

// SetCompletedAt sets the "completed_at" field.
func (csc *CheckoutSessionCreate) SetCompletedAt(t time.Time) *CheckoutSessionCreate {
	csc.mutation.SetCompletedAt(t)
	return csc
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (csc *CheckoutSessionCreate) SetNillableCompletedAt(t *time.Time) *CheckoutSessionCreate {
	if t != nil {
		csc.SetCompletedAt(*t)
	}
	return csc
}

// SetAffiliate6moCode sets the "affiliate_6mo_code" field.
func (csc *CheckoutSessionCreate) SetAffiliate6moCode(s string) *CheckoutSessionCreate {
	csc.mutation.SetAffiliate6moCode(s)
	return csc
}

// SetNillableAffiliate6moCode sets the "affiliate_6mo_code" field if the given value is not nil.
func (csc *CheckoutSessionCreate) SetNillableAffiliate6moCode(s *string) *CheckoutSessionCreate {
	if s != nil {
		csc.SetAffiliate6moCode(*s)
	}
	return csc
}

// SetAffiliate12moCode sets the "affiliate_12mo_code" field.
func (csc *CheckoutSessionCreate) SetAffiliate12moCode(s string) *CheckoutSessionCreate {
	csc.mutation.SetAffiliate12moCode(s)
	return csc
}

// SetNillableAffiliate12moCode sets the "affiliate_12mo_code" field if the given value is not nil.
func (csc *CheckoutSessionCreate) SetNillableAffiliate12moCode(s *string) *CheckoutSessionCreate {
	if s != nil {
		csc.SetAffiliate12moCode(*s)
	}
	return csc
}

// SetID sets the "id" field.
func (csc *CheckoutSessionCreate) SetID(u uuid.UUID) *CheckoutSessionCreate {
	csc.mutation.SetID(u)
	return csc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (csc *CheckoutSessionCreate) SetNillableID(u *uuid.UUID) *CheckoutSessionCreate {
	if u != nil {
		csc.SetID(*u)
	}
	return csc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (csc *CheckoutSessionCreate) SetUserID(id uuid.UUID) *CheckoutSessionCreate {
	csc.mutation.SetUserID(id)
	return csc
}

// SetUser sets the "user" edge to the User entity.
func (csc *CheckoutSessionCreate) SetUser(u *User) *CheckoutSessionCreate {
	return csc.SetUserID(u.ID)
}

// SetSubscriptionID sets the "subscription" edge to the Subscription entity by ID.
func (csc *CheckoutSessionCreate) SetSubscriptionID(id uuid.UUID) *CheckoutSessionCreate {
	csc.mutation.SetSubscriptionID(id)
	return csc
}

// SetNillableSubscriptionID sets the "subscription" edge to the Subscription entity by ID if the given value is not nil.
func (csc *CheckoutSessionCreate) SetNillableSubscriptionID(id *uuid.UUID) *CheckoutSessionCreate {
	if id != nil {
		csc = csc.SetSubscriptionID(*id)
	}
	return csc
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (csc *CheckoutSessionCreate) SetSubscription(s *Subscription) *CheckoutSessionCreate {
	return csc.SetSubscriptionID(s.ID)
}

// Mutation returns the CheckoutSessionMutation object of the builder.
func (csc *CheckoutSessionCreate) Mutation() *CheckoutSessionMutation {
	return csc.mutation
}

// Save creates the CheckoutSession in the database.
func (csc *CheckoutSessionCreate) Save(ctx context.Context) (*CheckoutSession, error) {
	csc.defaults()
	return withHooks(ctx, csc.sqlSave, csc.mutation, csc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csc *CheckoutSessionCreate) SaveX(ctx context.Context) *CheckoutSession {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *CheckoutSessionCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *CheckoutSessionCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csc *CheckoutSessionCreate) defaults() {
	if _, ok := csc.mutation.CreateTime(); !ok {
		v := checkoutsession.DefaultCreateTime()
		csc.mutation.SetCreateTime(v)
	}
	if _, ok := csc.mutation.UpdateTime(); !ok {
		v := checkoutsession.DefaultUpdateTime()
		csc.mutation.SetUpdateTime(v)
	}
	if _, ok := csc.mutation.Mode(); !ok {
		v := checkoutsession.DefaultMode
		csc.mutation.SetMode(v)
	}
	if _, ok := csc.mutation.Completed(); !ok {
		v := checkoutsession.DefaultCompleted
		csc.mutation.SetCompleted(v)
	}
	if _, ok := csc.mutation.ID(); !ok {
		v := checkoutsession.DefaultID()
		csc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csc *CheckoutSessionCreate) check() error {
	if _, ok := csc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "CheckoutSession.create_time"`)}
	}
	if _, ok := csc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "CheckoutSession.update_time"`)}
	}
	if _, ok := csc.mutation.StripePriceID(); !ok {
		return &ValidationError{Name: "stripe_price_id", err: errors.New(`ent: missing required field "CheckoutSession.stripe_price_id"`)}
	}
	if v, ok := csc.mutation.StripePriceID(); ok {
		if err := checkoutsession.StripePriceIDValidator(v); err != nil {
			return &ValidationError{Name: "stripe_price_id", err: fmt.Errorf(`ent: validator failed for field "CheckoutSession.stripe_price_id": %w`, err)}
		}
	}
	if _, ok := csc.mutation.Mode(); !ok {
		return &ValidationError{Name: "mode", err: errors.New(`ent: missing required field "CheckoutSession.mode"`)}
	}
	if v, ok := csc.mutation.Mode(); ok {
		if err := checkoutsession.ModeValidator(v); err != nil {
			return &ValidationError{Name: "mode", err: fmt.Errorf(`ent: validator failed for field "CheckoutSession.mode": %w`, err)}
		}
	}
	if _, ok := csc.mutation.Completed(); !ok {
		return &ValidationError{Name: "completed", err: errors.New(`ent: missing required field "CheckoutSession.completed"`)}
	}
	if len(csc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "CheckoutSession.user"`)}
	}
	return nil
}

func (csc *CheckoutSessionCreate) sqlSave(ctx context.Context) (*CheckoutSession, error) {
	if err := csc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	csc.mutation.id = &_node.ID
	csc.mutation.done = true
	return _node, nil
}

func (csc *CheckoutSessionCreate) createSpec() (*CheckoutSession, *sqlgraph.CreateSpec) {
	var (
		_node = &CheckoutSession{config: csc.config}
		_spec = sqlgraph.NewCreateSpec(checkoutsession.Table, sqlgraph.NewFieldSpec(checkoutsession.FieldID, field.TypeUUID))
	)
	if id, ok := csc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := csc.mutation.CreateTime(); ok {
		_spec.SetField(checkoutsession.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := csc.mutation.UpdateTime(); ok {
		_spec.SetField(checkoutsession.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := csc.mutation.StripeSessionID(); ok {
		_spec.SetField(checkoutsession.FieldStripeSessionID, field.TypeString, value)
		_node.StripeSessionID = &value
	}
	if value, ok := csc.mutation.StripePriceID(); ok {
		_spec.SetField(checkoutsession.FieldStripePriceID, field.TypeString, value)
		_node.StripePriceID = value
	}
	if value, ok := csc.mutation.Mode(); ok {
		_spec.SetField(checkoutsession.FieldMode, field.TypeEnum, value)
		_node.Mode = value
	}
	if value, ok := csc.mutation.Completed(); ok {
		_spec.SetField(checkoutsession.FieldCompleted, field.TypeBool, value)
		_node.Completed = value
	}
	if value, ok := csc.mutation.CompletedAt(); ok {
		_spec.SetField(checkoutsession.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = &value
	}
	if value, ok := csc.mutation.Affiliate6moCode(); ok {
		_spec.SetField(checkoutsession.FieldAffiliate6moCode, field.TypeString, value)
		_node.Affiliate6moCode = &value
	}
	if value, ok := csc.mutation.Affiliate12moCode(); ok {
		_spec.SetField(checkoutsession.FieldAffiliate12moCode, field.TypeString, value)
		_node.Affiliate12moCode = &value
	}
	if nodes := csc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkoutsession.UserTable,
			Columns: []string{checkoutsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_checkout_sessions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   checkoutsession.SubscriptionTable,
			Columns: []string{checkoutsession.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CheckoutSessionCreateBulk is the builder for creating many CheckoutSession entities in bulk.
type CheckoutSessionCreateBulk struct {
	config
	err      error
	builders []*CheckoutSessionCreate
}

// Save creates the CheckoutSession entities in the database.
func (cscb *CheckoutSessionCreateBulk) Save(ctx context.Context) ([]*CheckoutSession, error) {
	if cscb.err != nil {
		return nil, cscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*CheckoutSession, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CheckoutSessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *CheckoutSessionCreateBulk) SaveX(ctx context.Context) []*CheckoutSession {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *CheckoutSessionCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *CheckoutSessionCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}
