// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/album"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/document"
	"github.com/Dan6erbond/revline/ent/dragsession"
	"github.com/Dan6erbond/revline/ent/dynosession"
	"github.com/Dan6erbond/revline/ent/expense"
	"github.com/Dan6erbond/revline/ent/fuelup"
	"github.com/Dan6erbond/revline/ent/media"
	"github.com/Dan6erbond/revline/ent/odometerreading"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/Dan6erbond/revline/ent/serviceitem"
	"github.com/Dan6erbond/revline/ent/servicelog"
	"github.com/Dan6erbond/revline/ent/serviceschedule"
	"github.com/Dan6erbond/revline/ent/user"
	"github.com/google/uuid"
)

// CarUpdate is the builder for updating Car entities.
type CarUpdate struct {
	config
	hooks    []Hook
	mutation *CarMutation
}

// Where appends a list predicates to the CarUpdate builder.
func (cu *CarUpdate) Where(ps ...predicate.Car) *CarUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdateTime sets the "update_time" field.
func (cu *CarUpdate) SetUpdateTime(t time.Time) *CarUpdate {
	cu.mutation.SetUpdateTime(t)
	return cu
}

// SetName sets the "name" field.
func (cu *CarUpdate) SetName(s string) *CarUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CarUpdate) SetNillableName(s *string) *CarUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetMake sets the "make" field.
func (cu *CarUpdate) SetMake(s string) *CarUpdate {
	cu.mutation.SetMake(s)
	return cu
}

// SetNillableMake sets the "make" field if the given value is not nil.
func (cu *CarUpdate) SetNillableMake(s *string) *CarUpdate {
	if s != nil {
		cu.SetMake(*s)
	}
	return cu
}

// ClearMake clears the value of the "make" field.
func (cu *CarUpdate) ClearMake() *CarUpdate {
	cu.mutation.ClearMake()
	return cu
}

// SetModel sets the "model" field.
func (cu *CarUpdate) SetModel(s string) *CarUpdate {
	cu.mutation.SetModel(s)
	return cu
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (cu *CarUpdate) SetNillableModel(s *string) *CarUpdate {
	if s != nil {
		cu.SetModel(*s)
	}
	return cu
}

// ClearModel clears the value of the "model" field.
func (cu *CarUpdate) ClearModel() *CarUpdate {
	cu.mutation.ClearModel()
	return cu
}

// SetType sets the "type" field.
func (cu *CarUpdate) SetType(s string) *CarUpdate {
	cu.mutation.SetType(s)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *CarUpdate) SetNillableType(s *string) *CarUpdate {
	if s != nil {
		cu.SetType(*s)
	}
	return cu
}

// ClearType clears the value of the "type" field.
func (cu *CarUpdate) ClearType() *CarUpdate {
	cu.mutation.ClearType()
	return cu
}

// SetYear sets the "year" field.
func (cu *CarUpdate) SetYear(i int) *CarUpdate {
	cu.mutation.ResetYear()
	cu.mutation.SetYear(i)
	return cu
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (cu *CarUpdate) SetNillableYear(i *int) *CarUpdate {
	if i != nil {
		cu.SetYear(*i)
	}
	return cu
}

// AddYear adds i to the "year" field.
func (cu *CarUpdate) AddYear(i int) *CarUpdate {
	cu.mutation.AddYear(i)
	return cu
}

// ClearYear clears the value of the "year" field.
func (cu *CarUpdate) ClearYear() *CarUpdate {
	cu.mutation.ClearYear()
	return cu
}

// SetTrim sets the "trim" field.
func (cu *CarUpdate) SetTrim(s string) *CarUpdate {
	cu.mutation.SetTrim(s)
	return cu
}

// SetNillableTrim sets the "trim" field if the given value is not nil.
func (cu *CarUpdate) SetNillableTrim(s *string) *CarUpdate {
	if s != nil {
		cu.SetTrim(*s)
	}
	return cu
}

// ClearTrim clears the value of the "trim" field.
func (cu *CarUpdate) ClearTrim() *CarUpdate {
	cu.mutation.ClearTrim()
	return cu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cu *CarUpdate) SetOwnerID(id uuid.UUID) *CarUpdate {
	cu.mutation.SetOwnerID(id)
	return cu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (cu *CarUpdate) SetNillableOwnerID(id *uuid.UUID) *CarUpdate {
	if id != nil {
		cu = cu.SetOwnerID(*id)
	}
	return cu
}

// SetOwner sets the "owner" edge to the User entity.
func (cu *CarUpdate) SetOwner(u *User) *CarUpdate {
	return cu.SetOwnerID(u.ID)
}

// AddDragSessionIDs adds the "drag_sessions" edge to the DragSession entity by IDs.
func (cu *CarUpdate) AddDragSessionIDs(ids ...uuid.UUID) *CarUpdate {
	cu.mutation.AddDragSessionIDs(ids...)
	return cu
}

// AddDragSessions adds the "drag_sessions" edges to the DragSession entity.
func (cu *CarUpdate) AddDragSessions(d ...*DragSession) *CarUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.AddDragSessionIDs(ids...)
}

// AddFuelUpIDs adds the "fuel_ups" edge to the FuelUp entity by IDs.
func (cu *CarUpdate) AddFuelUpIDs(ids ...uuid.UUID) *CarUpdate {
	cu.mutation.AddFuelUpIDs(ids...)
	return cu
}

// AddFuelUps adds the "fuel_ups" edges to the FuelUp entity.
func (cu *CarUpdate) AddFuelUps(f ...*FuelUp) *CarUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cu.AddFuelUpIDs(ids...)
}

// AddOdometerReadingIDs adds the "odometer_readings" edge to the OdometerReading entity by IDs.
func (cu *CarUpdate) AddOdometerReadingIDs(ids ...uuid.UUID) *CarUpdate {
	cu.mutation.AddOdometerReadingIDs(ids...)
	return cu
}

// AddOdometerReadings adds the "odometer_readings" edges to the OdometerReading entity.
func (cu *CarUpdate) AddOdometerReadings(o ...*OdometerReading) *CarUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.AddOdometerReadingIDs(ids...)
}

// AddServiceItemIDs adds the "service_items" edge to the ServiceItem entity by IDs.
func (cu *CarUpdate) AddServiceItemIDs(ids ...uuid.UUID) *CarUpdate {
	cu.mutation.AddServiceItemIDs(ids...)
	return cu
}

// AddServiceItems adds the "service_items" edges to the ServiceItem entity.
func (cu *CarUpdate) AddServiceItems(s ...*ServiceItem) *CarUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddServiceItemIDs(ids...)
}

// AddServiceLogIDs adds the "service_logs" edge to the ServiceLog entity by IDs.
func (cu *CarUpdate) AddServiceLogIDs(ids ...uuid.UUID) *CarUpdate {
	cu.mutation.AddServiceLogIDs(ids...)
	return cu
}

// AddServiceLogs adds the "service_logs" edges to the ServiceLog entity.
func (cu *CarUpdate) AddServiceLogs(s ...*ServiceLog) *CarUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddServiceLogIDs(ids...)
}

// AddServiceScheduleIDs adds the "service_schedules" edge to the ServiceSchedule entity by IDs.
func (cu *CarUpdate) AddServiceScheduleIDs(ids ...uuid.UUID) *CarUpdate {
	cu.mutation.AddServiceScheduleIDs(ids...)
	return cu
}

// AddServiceSchedules adds the "service_schedules" edges to the ServiceSchedule entity.
func (cu *CarUpdate) AddServiceSchedules(s ...*ServiceSchedule) *CarUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.AddServiceScheduleIDs(ids...)
}

// AddMediumIDs adds the "media" edge to the Media entity by IDs.
func (cu *CarUpdate) AddMediumIDs(ids ...uuid.UUID) *CarUpdate {
	cu.mutation.AddMediumIDs(ids...)
	return cu
}

// AddMedia adds the "media" edges to the Media entity.
func (cu *CarUpdate) AddMedia(m ...*Media) *CarUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cu.AddMediumIDs(ids...)
}

// AddAlbumIDs adds the "albums" edge to the Album entity by IDs.
func (cu *CarUpdate) AddAlbumIDs(ids ...uuid.UUID) *CarUpdate {
	cu.mutation.AddAlbumIDs(ids...)
	return cu
}

// AddAlbums adds the "albums" edges to the Album entity.
func (cu *CarUpdate) AddAlbums(a ...*Album) *CarUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddAlbumIDs(ids...)
}

// AddDocumentIDs adds the "documents" edge to the Document entity by IDs.
func (cu *CarUpdate) AddDocumentIDs(ids ...uuid.UUID) *CarUpdate {
	cu.mutation.AddDocumentIDs(ids...)
	return cu
}

// AddDocuments adds the "documents" edges to the Document entity.
func (cu *CarUpdate) AddDocuments(d ...*Document) *CarUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.AddDocumentIDs(ids...)
}

// AddDynoSessionIDs adds the "dyno_sessions" edge to the DynoSession entity by IDs.
func (cu *CarUpdate) AddDynoSessionIDs(ids ...uuid.UUID) *CarUpdate {
	cu.mutation.AddDynoSessionIDs(ids...)
	return cu
}

// AddDynoSessions adds the "dyno_sessions" edges to the DynoSession entity.
func (cu *CarUpdate) AddDynoSessions(d ...*DynoSession) *CarUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.AddDynoSessionIDs(ids...)
}

// AddExpenseIDs adds the "expenses" edge to the Expense entity by IDs.
func (cu *CarUpdate) AddExpenseIDs(ids ...uuid.UUID) *CarUpdate {
	cu.mutation.AddExpenseIDs(ids...)
	return cu
}

// AddExpenses adds the "expenses" edges to the Expense entity.
func (cu *CarUpdate) AddExpenses(e ...*Expense) *CarUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.AddExpenseIDs(ids...)
}

// SetBannerImageID sets the "banner_image" edge to the Media entity by ID.
func (cu *CarUpdate) SetBannerImageID(id uuid.UUID) *CarUpdate {
	cu.mutation.SetBannerImageID(id)
	return cu
}

// SetNillableBannerImageID sets the "banner_image" edge to the Media entity by ID if the given value is not nil.
func (cu *CarUpdate) SetNillableBannerImageID(id *uuid.UUID) *CarUpdate {
	if id != nil {
		cu = cu.SetBannerImageID(*id)
	}
	return cu
}

// SetBannerImage sets the "banner_image" edge to the Media entity.
func (cu *CarUpdate) SetBannerImage(m *Media) *CarUpdate {
	return cu.SetBannerImageID(m.ID)
}

// Mutation returns the CarMutation object of the builder.
func (cu *CarUpdate) Mutation() *CarMutation {
	return cu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (cu *CarUpdate) ClearOwner() *CarUpdate {
	cu.mutation.ClearOwner()
	return cu
}

// ClearDragSessions clears all "drag_sessions" edges to the DragSession entity.
func (cu *CarUpdate) ClearDragSessions() *CarUpdate {
	cu.mutation.ClearDragSessions()
	return cu
}

// RemoveDragSessionIDs removes the "drag_sessions" edge to DragSession entities by IDs.
func (cu *CarUpdate) RemoveDragSessionIDs(ids ...uuid.UUID) *CarUpdate {
	cu.mutation.RemoveDragSessionIDs(ids...)
	return cu
}

// RemoveDragSessions removes "drag_sessions" edges to DragSession entities.
func (cu *CarUpdate) RemoveDragSessions(d ...*DragSession) *CarUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.RemoveDragSessionIDs(ids...)
}

// ClearFuelUps clears all "fuel_ups" edges to the FuelUp entity.
func (cu *CarUpdate) ClearFuelUps() *CarUpdate {
	cu.mutation.ClearFuelUps()
	return cu
}

// RemoveFuelUpIDs removes the "fuel_ups" edge to FuelUp entities by IDs.
func (cu *CarUpdate) RemoveFuelUpIDs(ids ...uuid.UUID) *CarUpdate {
	cu.mutation.RemoveFuelUpIDs(ids...)
	return cu
}

// RemoveFuelUps removes "fuel_ups" edges to FuelUp entities.
func (cu *CarUpdate) RemoveFuelUps(f ...*FuelUp) *CarUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cu.RemoveFuelUpIDs(ids...)
}

// ClearOdometerReadings clears all "odometer_readings" edges to the OdometerReading entity.
func (cu *CarUpdate) ClearOdometerReadings() *CarUpdate {
	cu.mutation.ClearOdometerReadings()
	return cu
}

// RemoveOdometerReadingIDs removes the "odometer_readings" edge to OdometerReading entities by IDs.
func (cu *CarUpdate) RemoveOdometerReadingIDs(ids ...uuid.UUID) *CarUpdate {
	cu.mutation.RemoveOdometerReadingIDs(ids...)
	return cu
}

// RemoveOdometerReadings removes "odometer_readings" edges to OdometerReading entities.
func (cu *CarUpdate) RemoveOdometerReadings(o ...*OdometerReading) *CarUpdate {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cu.RemoveOdometerReadingIDs(ids...)
}

// ClearServiceItems clears all "service_items" edges to the ServiceItem entity.
func (cu *CarUpdate) ClearServiceItems() *CarUpdate {
	cu.mutation.ClearServiceItems()
	return cu
}

// RemoveServiceItemIDs removes the "service_items" edge to ServiceItem entities by IDs.
func (cu *CarUpdate) RemoveServiceItemIDs(ids ...uuid.UUID) *CarUpdate {
	cu.mutation.RemoveServiceItemIDs(ids...)
	return cu
}

// RemoveServiceItems removes "service_items" edges to ServiceItem entities.
func (cu *CarUpdate) RemoveServiceItems(s ...*ServiceItem) *CarUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveServiceItemIDs(ids...)
}

// ClearServiceLogs clears all "service_logs" edges to the ServiceLog entity.
func (cu *CarUpdate) ClearServiceLogs() *CarUpdate {
	cu.mutation.ClearServiceLogs()
	return cu
}

// RemoveServiceLogIDs removes the "service_logs" edge to ServiceLog entities by IDs.
func (cu *CarUpdate) RemoveServiceLogIDs(ids ...uuid.UUID) *CarUpdate {
	cu.mutation.RemoveServiceLogIDs(ids...)
	return cu
}

// RemoveServiceLogs removes "service_logs" edges to ServiceLog entities.
func (cu *CarUpdate) RemoveServiceLogs(s ...*ServiceLog) *CarUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveServiceLogIDs(ids...)
}

// ClearServiceSchedules clears all "service_schedules" edges to the ServiceSchedule entity.
func (cu *CarUpdate) ClearServiceSchedules() *CarUpdate {
	cu.mutation.ClearServiceSchedules()
	return cu
}

// RemoveServiceScheduleIDs removes the "service_schedules" edge to ServiceSchedule entities by IDs.
func (cu *CarUpdate) RemoveServiceScheduleIDs(ids ...uuid.UUID) *CarUpdate {
	cu.mutation.RemoveServiceScheduleIDs(ids...)
	return cu
}

// RemoveServiceSchedules removes "service_schedules" edges to ServiceSchedule entities.
func (cu *CarUpdate) RemoveServiceSchedules(s ...*ServiceSchedule) *CarUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cu.RemoveServiceScheduleIDs(ids...)
}

// ClearMedia clears all "media" edges to the Media entity.
func (cu *CarUpdate) ClearMedia() *CarUpdate {
	cu.mutation.ClearMedia()
	return cu
}

// RemoveMediumIDs removes the "media" edge to Media entities by IDs.
func (cu *CarUpdate) RemoveMediumIDs(ids ...uuid.UUID) *CarUpdate {
	cu.mutation.RemoveMediumIDs(ids...)
	return cu
}

// RemoveMedia removes "media" edges to Media entities.
func (cu *CarUpdate) RemoveMedia(m ...*Media) *CarUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cu.RemoveMediumIDs(ids...)
}

// ClearAlbums clears all "albums" edges to the Album entity.
func (cu *CarUpdate) ClearAlbums() *CarUpdate {
	cu.mutation.ClearAlbums()
	return cu
}

// RemoveAlbumIDs removes the "albums" edge to Album entities by IDs.
func (cu *CarUpdate) RemoveAlbumIDs(ids ...uuid.UUID) *CarUpdate {
	cu.mutation.RemoveAlbumIDs(ids...)
	return cu
}

// RemoveAlbums removes "albums" edges to Album entities.
func (cu *CarUpdate) RemoveAlbums(a ...*Album) *CarUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveAlbumIDs(ids...)
}

// ClearDocuments clears all "documents" edges to the Document entity.
func (cu *CarUpdate) ClearDocuments() *CarUpdate {
	cu.mutation.ClearDocuments()
	return cu
}

// RemoveDocumentIDs removes the "documents" edge to Document entities by IDs.
func (cu *CarUpdate) RemoveDocumentIDs(ids ...uuid.UUID) *CarUpdate {
	cu.mutation.RemoveDocumentIDs(ids...)
	return cu
}

// RemoveDocuments removes "documents" edges to Document entities.
func (cu *CarUpdate) RemoveDocuments(d ...*Document) *CarUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.RemoveDocumentIDs(ids...)
}

// ClearDynoSessions clears all "dyno_sessions" edges to the DynoSession entity.
func (cu *CarUpdate) ClearDynoSessions() *CarUpdate {
	cu.mutation.ClearDynoSessions()
	return cu
}

// RemoveDynoSessionIDs removes the "dyno_sessions" edge to DynoSession entities by IDs.
func (cu *CarUpdate) RemoveDynoSessionIDs(ids ...uuid.UUID) *CarUpdate {
	cu.mutation.RemoveDynoSessionIDs(ids...)
	return cu
}

// RemoveDynoSessions removes "dyno_sessions" edges to DynoSession entities.
func (cu *CarUpdate) RemoveDynoSessions(d ...*DynoSession) *CarUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.RemoveDynoSessionIDs(ids...)
}

// ClearExpenses clears all "expenses" edges to the Expense entity.
func (cu *CarUpdate) ClearExpenses() *CarUpdate {
	cu.mutation.ClearExpenses()
	return cu
}

// RemoveExpenseIDs removes the "expenses" edge to Expense entities by IDs.
func (cu *CarUpdate) RemoveExpenseIDs(ids ...uuid.UUID) *CarUpdate {
	cu.mutation.RemoveExpenseIDs(ids...)
	return cu
}

// RemoveExpenses removes "expenses" edges to Expense entities.
func (cu *CarUpdate) RemoveExpenses(e ...*Expense) *CarUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.RemoveExpenseIDs(ids...)
}

// ClearBannerImage clears the "banner_image" edge to the Media entity.
func (cu *CarUpdate) ClearBannerImage() *CarUpdate {
	cu.mutation.ClearBannerImage()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CarUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CarUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CarUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CarUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CarUpdate) defaults() {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		v := car.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
}

func (cu *CarUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(car.Table, car.Columns, sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.SetField(car.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(car.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Make(); ok {
		_spec.SetField(car.FieldMake, field.TypeString, value)
	}
	if cu.mutation.MakeCleared() {
		_spec.ClearField(car.FieldMake, field.TypeString)
	}
	if value, ok := cu.mutation.Model(); ok {
		_spec.SetField(car.FieldModel, field.TypeString, value)
	}
	if cu.mutation.ModelCleared() {
		_spec.ClearField(car.FieldModel, field.TypeString)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(car.FieldType, field.TypeString, value)
	}
	if cu.mutation.TypeCleared() {
		_spec.ClearField(car.FieldType, field.TypeString)
	}
	if value, ok := cu.mutation.Year(); ok {
		_spec.SetField(car.FieldYear, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedYear(); ok {
		_spec.AddField(car.FieldYear, field.TypeInt, value)
	}
	if cu.mutation.YearCleared() {
		_spec.ClearField(car.FieldYear, field.TypeInt)
	}
	if value, ok := cu.mutation.Trim(); ok {
		_spec.SetField(car.FieldTrim, field.TypeString, value)
	}
	if cu.mutation.TrimCleared() {
		_spec.ClearField(car.FieldTrim, field.TypeString)
	}
	if cu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.OwnerTable,
			Columns: []string{car.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.OwnerTable,
			Columns: []string{car.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DragSessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.DragSessionsTable,
			Columns: []string{car.DragSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dragsession.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedDragSessionsIDs(); len(nodes) > 0 && !cu.mutation.DragSessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.DragSessionsTable,
			Columns: []string{car.DragSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dragsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DragSessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.DragSessionsTable,
			Columns: []string{car.DragSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dragsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.FuelUpsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.FuelUpsTable,
			Columns: []string{car.FuelUpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fuelup.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedFuelUpsIDs(); len(nodes) > 0 && !cu.mutation.FuelUpsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.FuelUpsTable,
			Columns: []string{car.FuelUpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fuelup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.FuelUpsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.FuelUpsTable,
			Columns: []string{car.FuelUpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fuelup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.OdometerReadingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.OdometerReadingsTable,
			Columns: []string{car.OdometerReadingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(odometerreading.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedOdometerReadingsIDs(); len(nodes) > 0 && !cu.mutation.OdometerReadingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.OdometerReadingsTable,
			Columns: []string{car.OdometerReadingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(odometerreading.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OdometerReadingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.OdometerReadingsTable,
			Columns: []string{car.OdometerReadingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(odometerreading.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ServiceItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ServiceItemsTable,
			Columns: []string{car.ServiceItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedServiceItemsIDs(); len(nodes) > 0 && !cu.mutation.ServiceItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ServiceItemsTable,
			Columns: []string{car.ServiceItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ServiceItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ServiceItemsTable,
			Columns: []string{car.ServiceItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ServiceLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ServiceLogsTable,
			Columns: []string{car.ServiceLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedServiceLogsIDs(); len(nodes) > 0 && !cu.mutation.ServiceLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ServiceLogsTable,
			Columns: []string{car.ServiceLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ServiceLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ServiceLogsTable,
			Columns: []string{car.ServiceLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ServiceSchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ServiceSchedulesTable,
			Columns: []string{car.ServiceSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceschedule.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedServiceSchedulesIDs(); len(nodes) > 0 && !cu.mutation.ServiceSchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ServiceSchedulesTable,
			Columns: []string{car.ServiceSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceschedule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ServiceSchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ServiceSchedulesTable,
			Columns: []string{car.ServiceSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceschedule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.MediaTable,
			Columns: []string{car.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedMediaIDs(); len(nodes) > 0 && !cu.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.MediaTable,
			Columns: []string{car.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.MediaTable,
			Columns: []string{car.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.AlbumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.AlbumsTable,
			Columns: []string{car.AlbumsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(album.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedAlbumsIDs(); len(nodes) > 0 && !cu.mutation.AlbumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.AlbumsTable,
			Columns: []string{car.AlbumsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(album.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AlbumsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.AlbumsTable,
			Columns: []string{car.AlbumsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(album.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.DocumentsTable,
			Columns: []string{car.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedDocumentsIDs(); len(nodes) > 0 && !cu.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.DocumentsTable,
			Columns: []string{car.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.DocumentsTable,
			Columns: []string{car.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.DynoSessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.DynoSessionsTable,
			Columns: []string{car.DynoSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dynosession.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedDynoSessionsIDs(); len(nodes) > 0 && !cu.mutation.DynoSessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.DynoSessionsTable,
			Columns: []string{car.DynoSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dynosession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DynoSessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.DynoSessionsTable,
			Columns: []string{car.DynoSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dynosession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ExpensesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ExpensesTable,
			Columns: []string{car.ExpensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(expense.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedExpensesIDs(); len(nodes) > 0 && !cu.mutation.ExpensesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ExpensesTable,
			Columns: []string{car.ExpensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(expense.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ExpensesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ExpensesTable,
			Columns: []string{car.ExpensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(expense.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.BannerImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   car.BannerImageTable,
			Columns: []string{car.BannerImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.BannerImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   car.BannerImageTable,
			Columns: []string{car.BannerImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{car.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CarUpdateOne is the builder for updating a single Car entity.
type CarUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarMutation
}

// SetUpdateTime sets the "update_time" field.
func (cuo *CarUpdateOne) SetUpdateTime(t time.Time) *CarUpdateOne {
	cuo.mutation.SetUpdateTime(t)
	return cuo
}

// SetName sets the "name" field.
func (cuo *CarUpdateOne) SetName(s string) *CarUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableName(s *string) *CarUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetMake sets the "make" field.
func (cuo *CarUpdateOne) SetMake(s string) *CarUpdateOne {
	cuo.mutation.SetMake(s)
	return cuo
}

// SetNillableMake sets the "make" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableMake(s *string) *CarUpdateOne {
	if s != nil {
		cuo.SetMake(*s)
	}
	return cuo
}

// ClearMake clears the value of the "make" field.
func (cuo *CarUpdateOne) ClearMake() *CarUpdateOne {
	cuo.mutation.ClearMake()
	return cuo
}

// SetModel sets the "model" field.
func (cuo *CarUpdateOne) SetModel(s string) *CarUpdateOne {
	cuo.mutation.SetModel(s)
	return cuo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableModel(s *string) *CarUpdateOne {
	if s != nil {
		cuo.SetModel(*s)
	}
	return cuo
}

// ClearModel clears the value of the "model" field.
func (cuo *CarUpdateOne) ClearModel() *CarUpdateOne {
	cuo.mutation.ClearModel()
	return cuo
}

// SetType sets the "type" field.
func (cuo *CarUpdateOne) SetType(s string) *CarUpdateOne {
	cuo.mutation.SetType(s)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableType(s *string) *CarUpdateOne {
	if s != nil {
		cuo.SetType(*s)
	}
	return cuo
}

// ClearType clears the value of the "type" field.
func (cuo *CarUpdateOne) ClearType() *CarUpdateOne {
	cuo.mutation.ClearType()
	return cuo
}

// SetYear sets the "year" field.
func (cuo *CarUpdateOne) SetYear(i int) *CarUpdateOne {
	cuo.mutation.ResetYear()
	cuo.mutation.SetYear(i)
	return cuo
}

// SetNillableYear sets the "year" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableYear(i *int) *CarUpdateOne {
	if i != nil {
		cuo.SetYear(*i)
	}
	return cuo
}

// AddYear adds i to the "year" field.
func (cuo *CarUpdateOne) AddYear(i int) *CarUpdateOne {
	cuo.mutation.AddYear(i)
	return cuo
}

// ClearYear clears the value of the "year" field.
func (cuo *CarUpdateOne) ClearYear() *CarUpdateOne {
	cuo.mutation.ClearYear()
	return cuo
}

// SetTrim sets the "trim" field.
func (cuo *CarUpdateOne) SetTrim(s string) *CarUpdateOne {
	cuo.mutation.SetTrim(s)
	return cuo
}

// SetNillableTrim sets the "trim" field if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableTrim(s *string) *CarUpdateOne {
	if s != nil {
		cuo.SetTrim(*s)
	}
	return cuo
}

// ClearTrim clears the value of the "trim" field.
func (cuo *CarUpdateOne) ClearTrim() *CarUpdateOne {
	cuo.mutation.ClearTrim()
	return cuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cuo *CarUpdateOne) SetOwnerID(id uuid.UUID) *CarUpdateOne {
	cuo.mutation.SetOwnerID(id)
	return cuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableOwnerID(id *uuid.UUID) *CarUpdateOne {
	if id != nil {
		cuo = cuo.SetOwnerID(*id)
	}
	return cuo
}

// SetOwner sets the "owner" edge to the User entity.
func (cuo *CarUpdateOne) SetOwner(u *User) *CarUpdateOne {
	return cuo.SetOwnerID(u.ID)
}

// AddDragSessionIDs adds the "drag_sessions" edge to the DragSession entity by IDs.
func (cuo *CarUpdateOne) AddDragSessionIDs(ids ...uuid.UUID) *CarUpdateOne {
	cuo.mutation.AddDragSessionIDs(ids...)
	return cuo
}

// AddDragSessions adds the "drag_sessions" edges to the DragSession entity.
func (cuo *CarUpdateOne) AddDragSessions(d ...*DragSession) *CarUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.AddDragSessionIDs(ids...)
}

// AddFuelUpIDs adds the "fuel_ups" edge to the FuelUp entity by IDs.
func (cuo *CarUpdateOne) AddFuelUpIDs(ids ...uuid.UUID) *CarUpdateOne {
	cuo.mutation.AddFuelUpIDs(ids...)
	return cuo
}

// AddFuelUps adds the "fuel_ups" edges to the FuelUp entity.
func (cuo *CarUpdateOne) AddFuelUps(f ...*FuelUp) *CarUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cuo.AddFuelUpIDs(ids...)
}

// AddOdometerReadingIDs adds the "odometer_readings" edge to the OdometerReading entity by IDs.
func (cuo *CarUpdateOne) AddOdometerReadingIDs(ids ...uuid.UUID) *CarUpdateOne {
	cuo.mutation.AddOdometerReadingIDs(ids...)
	return cuo
}

// AddOdometerReadings adds the "odometer_readings" edges to the OdometerReading entity.
func (cuo *CarUpdateOne) AddOdometerReadings(o ...*OdometerReading) *CarUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.AddOdometerReadingIDs(ids...)
}

// AddServiceItemIDs adds the "service_items" edge to the ServiceItem entity by IDs.
func (cuo *CarUpdateOne) AddServiceItemIDs(ids ...uuid.UUID) *CarUpdateOne {
	cuo.mutation.AddServiceItemIDs(ids...)
	return cuo
}

// AddServiceItems adds the "service_items" edges to the ServiceItem entity.
func (cuo *CarUpdateOne) AddServiceItems(s ...*ServiceItem) *CarUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddServiceItemIDs(ids...)
}

// AddServiceLogIDs adds the "service_logs" edge to the ServiceLog entity by IDs.
func (cuo *CarUpdateOne) AddServiceLogIDs(ids ...uuid.UUID) *CarUpdateOne {
	cuo.mutation.AddServiceLogIDs(ids...)
	return cuo
}

// AddServiceLogs adds the "service_logs" edges to the ServiceLog entity.
func (cuo *CarUpdateOne) AddServiceLogs(s ...*ServiceLog) *CarUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddServiceLogIDs(ids...)
}

// AddServiceScheduleIDs adds the "service_schedules" edge to the ServiceSchedule entity by IDs.
func (cuo *CarUpdateOne) AddServiceScheduleIDs(ids ...uuid.UUID) *CarUpdateOne {
	cuo.mutation.AddServiceScheduleIDs(ids...)
	return cuo
}

// AddServiceSchedules adds the "service_schedules" edges to the ServiceSchedule entity.
func (cuo *CarUpdateOne) AddServiceSchedules(s ...*ServiceSchedule) *CarUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.AddServiceScheduleIDs(ids...)
}

// AddMediumIDs adds the "media" edge to the Media entity by IDs.
func (cuo *CarUpdateOne) AddMediumIDs(ids ...uuid.UUID) *CarUpdateOne {
	cuo.mutation.AddMediumIDs(ids...)
	return cuo
}

// AddMedia adds the "media" edges to the Media entity.
func (cuo *CarUpdateOne) AddMedia(m ...*Media) *CarUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cuo.AddMediumIDs(ids...)
}

// AddAlbumIDs adds the "albums" edge to the Album entity by IDs.
func (cuo *CarUpdateOne) AddAlbumIDs(ids ...uuid.UUID) *CarUpdateOne {
	cuo.mutation.AddAlbumIDs(ids...)
	return cuo
}

// AddAlbums adds the "albums" edges to the Album entity.
func (cuo *CarUpdateOne) AddAlbums(a ...*Album) *CarUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddAlbumIDs(ids...)
}

// AddDocumentIDs adds the "documents" edge to the Document entity by IDs.
func (cuo *CarUpdateOne) AddDocumentIDs(ids ...uuid.UUID) *CarUpdateOne {
	cuo.mutation.AddDocumentIDs(ids...)
	return cuo
}

// AddDocuments adds the "documents" edges to the Document entity.
func (cuo *CarUpdateOne) AddDocuments(d ...*Document) *CarUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.AddDocumentIDs(ids...)
}

// AddDynoSessionIDs adds the "dyno_sessions" edge to the DynoSession entity by IDs.
func (cuo *CarUpdateOne) AddDynoSessionIDs(ids ...uuid.UUID) *CarUpdateOne {
	cuo.mutation.AddDynoSessionIDs(ids...)
	return cuo
}

// AddDynoSessions adds the "dyno_sessions" edges to the DynoSession entity.
func (cuo *CarUpdateOne) AddDynoSessions(d ...*DynoSession) *CarUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.AddDynoSessionIDs(ids...)
}

// AddExpenseIDs adds the "expenses" edge to the Expense entity by IDs.
func (cuo *CarUpdateOne) AddExpenseIDs(ids ...uuid.UUID) *CarUpdateOne {
	cuo.mutation.AddExpenseIDs(ids...)
	return cuo
}

// AddExpenses adds the "expenses" edges to the Expense entity.
func (cuo *CarUpdateOne) AddExpenses(e ...*Expense) *CarUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.AddExpenseIDs(ids...)
}

// SetBannerImageID sets the "banner_image" edge to the Media entity by ID.
func (cuo *CarUpdateOne) SetBannerImageID(id uuid.UUID) *CarUpdateOne {
	cuo.mutation.SetBannerImageID(id)
	return cuo
}

// SetNillableBannerImageID sets the "banner_image" edge to the Media entity by ID if the given value is not nil.
func (cuo *CarUpdateOne) SetNillableBannerImageID(id *uuid.UUID) *CarUpdateOne {
	if id != nil {
		cuo = cuo.SetBannerImageID(*id)
	}
	return cuo
}

// SetBannerImage sets the "banner_image" edge to the Media entity.
func (cuo *CarUpdateOne) SetBannerImage(m *Media) *CarUpdateOne {
	return cuo.SetBannerImageID(m.ID)
}

// Mutation returns the CarMutation object of the builder.
func (cuo *CarUpdateOne) Mutation() *CarMutation {
	return cuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (cuo *CarUpdateOne) ClearOwner() *CarUpdateOne {
	cuo.mutation.ClearOwner()
	return cuo
}

// ClearDragSessions clears all "drag_sessions" edges to the DragSession entity.
func (cuo *CarUpdateOne) ClearDragSessions() *CarUpdateOne {
	cuo.mutation.ClearDragSessions()
	return cuo
}

// RemoveDragSessionIDs removes the "drag_sessions" edge to DragSession entities by IDs.
func (cuo *CarUpdateOne) RemoveDragSessionIDs(ids ...uuid.UUID) *CarUpdateOne {
	cuo.mutation.RemoveDragSessionIDs(ids...)
	return cuo
}

// RemoveDragSessions removes "drag_sessions" edges to DragSession entities.
func (cuo *CarUpdateOne) RemoveDragSessions(d ...*DragSession) *CarUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.RemoveDragSessionIDs(ids...)
}

// ClearFuelUps clears all "fuel_ups" edges to the FuelUp entity.
func (cuo *CarUpdateOne) ClearFuelUps() *CarUpdateOne {
	cuo.mutation.ClearFuelUps()
	return cuo
}

// RemoveFuelUpIDs removes the "fuel_ups" edge to FuelUp entities by IDs.
func (cuo *CarUpdateOne) RemoveFuelUpIDs(ids ...uuid.UUID) *CarUpdateOne {
	cuo.mutation.RemoveFuelUpIDs(ids...)
	return cuo
}

// RemoveFuelUps removes "fuel_ups" edges to FuelUp entities.
func (cuo *CarUpdateOne) RemoveFuelUps(f ...*FuelUp) *CarUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return cuo.RemoveFuelUpIDs(ids...)
}

// ClearOdometerReadings clears all "odometer_readings" edges to the OdometerReading entity.
func (cuo *CarUpdateOne) ClearOdometerReadings() *CarUpdateOne {
	cuo.mutation.ClearOdometerReadings()
	return cuo
}

// RemoveOdometerReadingIDs removes the "odometer_readings" edge to OdometerReading entities by IDs.
func (cuo *CarUpdateOne) RemoveOdometerReadingIDs(ids ...uuid.UUID) *CarUpdateOne {
	cuo.mutation.RemoveOdometerReadingIDs(ids...)
	return cuo
}

// RemoveOdometerReadings removes "odometer_readings" edges to OdometerReading entities.
func (cuo *CarUpdateOne) RemoveOdometerReadings(o ...*OdometerReading) *CarUpdateOne {
	ids := make([]uuid.UUID, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return cuo.RemoveOdometerReadingIDs(ids...)
}

// ClearServiceItems clears all "service_items" edges to the ServiceItem entity.
func (cuo *CarUpdateOne) ClearServiceItems() *CarUpdateOne {
	cuo.mutation.ClearServiceItems()
	return cuo
}

// RemoveServiceItemIDs removes the "service_items" edge to ServiceItem entities by IDs.
func (cuo *CarUpdateOne) RemoveServiceItemIDs(ids ...uuid.UUID) *CarUpdateOne {
	cuo.mutation.RemoveServiceItemIDs(ids...)
	return cuo
}

// RemoveServiceItems removes "service_items" edges to ServiceItem entities.
func (cuo *CarUpdateOne) RemoveServiceItems(s ...*ServiceItem) *CarUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveServiceItemIDs(ids...)
}

// ClearServiceLogs clears all "service_logs" edges to the ServiceLog entity.
func (cuo *CarUpdateOne) ClearServiceLogs() *CarUpdateOne {
	cuo.mutation.ClearServiceLogs()
	return cuo
}

// RemoveServiceLogIDs removes the "service_logs" edge to ServiceLog entities by IDs.
func (cuo *CarUpdateOne) RemoveServiceLogIDs(ids ...uuid.UUID) *CarUpdateOne {
	cuo.mutation.RemoveServiceLogIDs(ids...)
	return cuo
}

// RemoveServiceLogs removes "service_logs" edges to ServiceLog entities.
func (cuo *CarUpdateOne) RemoveServiceLogs(s ...*ServiceLog) *CarUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveServiceLogIDs(ids...)
}

// ClearServiceSchedules clears all "service_schedules" edges to the ServiceSchedule entity.
func (cuo *CarUpdateOne) ClearServiceSchedules() *CarUpdateOne {
	cuo.mutation.ClearServiceSchedules()
	return cuo
}

// RemoveServiceScheduleIDs removes the "service_schedules" edge to ServiceSchedule entities by IDs.
func (cuo *CarUpdateOne) RemoveServiceScheduleIDs(ids ...uuid.UUID) *CarUpdateOne {
	cuo.mutation.RemoveServiceScheduleIDs(ids...)
	return cuo
}

// RemoveServiceSchedules removes "service_schedules" edges to ServiceSchedule entities.
func (cuo *CarUpdateOne) RemoveServiceSchedules(s ...*ServiceSchedule) *CarUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return cuo.RemoveServiceScheduleIDs(ids...)
}

// ClearMedia clears all "media" edges to the Media entity.
func (cuo *CarUpdateOne) ClearMedia() *CarUpdateOne {
	cuo.mutation.ClearMedia()
	return cuo
}

// RemoveMediumIDs removes the "media" edge to Media entities by IDs.
func (cuo *CarUpdateOne) RemoveMediumIDs(ids ...uuid.UUID) *CarUpdateOne {
	cuo.mutation.RemoveMediumIDs(ids...)
	return cuo
}

// RemoveMedia removes "media" edges to Media entities.
func (cuo *CarUpdateOne) RemoveMedia(m ...*Media) *CarUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cuo.RemoveMediumIDs(ids...)
}

// ClearAlbums clears all "albums" edges to the Album entity.
func (cuo *CarUpdateOne) ClearAlbums() *CarUpdateOne {
	cuo.mutation.ClearAlbums()
	return cuo
}

// RemoveAlbumIDs removes the "albums" edge to Album entities by IDs.
func (cuo *CarUpdateOne) RemoveAlbumIDs(ids ...uuid.UUID) *CarUpdateOne {
	cuo.mutation.RemoveAlbumIDs(ids...)
	return cuo
}

// RemoveAlbums removes "albums" edges to Album entities.
func (cuo *CarUpdateOne) RemoveAlbums(a ...*Album) *CarUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveAlbumIDs(ids...)
}

// ClearDocuments clears all "documents" edges to the Document entity.
func (cuo *CarUpdateOne) ClearDocuments() *CarUpdateOne {
	cuo.mutation.ClearDocuments()
	return cuo
}

// RemoveDocumentIDs removes the "documents" edge to Document entities by IDs.
func (cuo *CarUpdateOne) RemoveDocumentIDs(ids ...uuid.UUID) *CarUpdateOne {
	cuo.mutation.RemoveDocumentIDs(ids...)
	return cuo
}

// RemoveDocuments removes "documents" edges to Document entities.
func (cuo *CarUpdateOne) RemoveDocuments(d ...*Document) *CarUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.RemoveDocumentIDs(ids...)
}

// ClearDynoSessions clears all "dyno_sessions" edges to the DynoSession entity.
func (cuo *CarUpdateOne) ClearDynoSessions() *CarUpdateOne {
	cuo.mutation.ClearDynoSessions()
	return cuo
}

// RemoveDynoSessionIDs removes the "dyno_sessions" edge to DynoSession entities by IDs.
func (cuo *CarUpdateOne) RemoveDynoSessionIDs(ids ...uuid.UUID) *CarUpdateOne {
	cuo.mutation.RemoveDynoSessionIDs(ids...)
	return cuo
}

// RemoveDynoSessions removes "dyno_sessions" edges to DynoSession entities.
func (cuo *CarUpdateOne) RemoveDynoSessions(d ...*DynoSession) *CarUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.RemoveDynoSessionIDs(ids...)
}

// ClearExpenses clears all "expenses" edges to the Expense entity.
func (cuo *CarUpdateOne) ClearExpenses() *CarUpdateOne {
	cuo.mutation.ClearExpenses()
	return cuo
}

// RemoveExpenseIDs removes the "expenses" edge to Expense entities by IDs.
func (cuo *CarUpdateOne) RemoveExpenseIDs(ids ...uuid.UUID) *CarUpdateOne {
	cuo.mutation.RemoveExpenseIDs(ids...)
	return cuo
}

// RemoveExpenses removes "expenses" edges to Expense entities.
func (cuo *CarUpdateOne) RemoveExpenses(e ...*Expense) *CarUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.RemoveExpenseIDs(ids...)
}

// ClearBannerImage clears the "banner_image" edge to the Media entity.
func (cuo *CarUpdateOne) ClearBannerImage() *CarUpdateOne {
	cuo.mutation.ClearBannerImage()
	return cuo
}

// Where appends a list predicates to the CarUpdate builder.
func (cuo *CarUpdateOne) Where(ps ...predicate.Car) *CarUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CarUpdateOne) Select(field string, fields ...string) *CarUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Car entity.
func (cuo *CarUpdateOne) Save(ctx context.Context) (*Car, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CarUpdateOne) SaveX(ctx context.Context) *Car {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CarUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CarUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CarUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		v := car.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
}

func (cuo *CarUpdateOne) sqlSave(ctx context.Context) (_node *Car, err error) {
	_spec := sqlgraph.NewUpdateSpec(car.Table, car.Columns, sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Car.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, car.FieldID)
		for _, f := range fields {
			if !car.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != car.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.SetField(car.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(car.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Make(); ok {
		_spec.SetField(car.FieldMake, field.TypeString, value)
	}
	if cuo.mutation.MakeCleared() {
		_spec.ClearField(car.FieldMake, field.TypeString)
	}
	if value, ok := cuo.mutation.Model(); ok {
		_spec.SetField(car.FieldModel, field.TypeString, value)
	}
	if cuo.mutation.ModelCleared() {
		_spec.ClearField(car.FieldModel, field.TypeString)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(car.FieldType, field.TypeString, value)
	}
	if cuo.mutation.TypeCleared() {
		_spec.ClearField(car.FieldType, field.TypeString)
	}
	if value, ok := cuo.mutation.Year(); ok {
		_spec.SetField(car.FieldYear, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedYear(); ok {
		_spec.AddField(car.FieldYear, field.TypeInt, value)
	}
	if cuo.mutation.YearCleared() {
		_spec.ClearField(car.FieldYear, field.TypeInt)
	}
	if value, ok := cuo.mutation.Trim(); ok {
		_spec.SetField(car.FieldTrim, field.TypeString, value)
	}
	if cuo.mutation.TrimCleared() {
		_spec.ClearField(car.FieldTrim, field.TypeString)
	}
	if cuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.OwnerTable,
			Columns: []string{car.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   car.OwnerTable,
			Columns: []string{car.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DragSessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.DragSessionsTable,
			Columns: []string{car.DragSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dragsession.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedDragSessionsIDs(); len(nodes) > 0 && !cuo.mutation.DragSessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.DragSessionsTable,
			Columns: []string{car.DragSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dragsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DragSessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.DragSessionsTable,
			Columns: []string{car.DragSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dragsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.FuelUpsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.FuelUpsTable,
			Columns: []string{car.FuelUpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fuelup.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedFuelUpsIDs(); len(nodes) > 0 && !cuo.mutation.FuelUpsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.FuelUpsTable,
			Columns: []string{car.FuelUpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fuelup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.FuelUpsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.FuelUpsTable,
			Columns: []string{car.FuelUpsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fuelup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.OdometerReadingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.OdometerReadingsTable,
			Columns: []string{car.OdometerReadingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(odometerreading.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedOdometerReadingsIDs(); len(nodes) > 0 && !cuo.mutation.OdometerReadingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.OdometerReadingsTable,
			Columns: []string{car.OdometerReadingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(odometerreading.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OdometerReadingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.OdometerReadingsTable,
			Columns: []string{car.OdometerReadingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(odometerreading.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ServiceItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ServiceItemsTable,
			Columns: []string{car.ServiceItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedServiceItemsIDs(); len(nodes) > 0 && !cuo.mutation.ServiceItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ServiceItemsTable,
			Columns: []string{car.ServiceItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ServiceItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ServiceItemsTable,
			Columns: []string{car.ServiceItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ServiceLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ServiceLogsTable,
			Columns: []string{car.ServiceLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedServiceLogsIDs(); len(nodes) > 0 && !cuo.mutation.ServiceLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ServiceLogsTable,
			Columns: []string{car.ServiceLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ServiceLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ServiceLogsTable,
			Columns: []string{car.ServiceLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ServiceSchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ServiceSchedulesTable,
			Columns: []string{car.ServiceSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceschedule.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedServiceSchedulesIDs(); len(nodes) > 0 && !cuo.mutation.ServiceSchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ServiceSchedulesTable,
			Columns: []string{car.ServiceSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceschedule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ServiceSchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ServiceSchedulesTable,
			Columns: []string{car.ServiceSchedulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceschedule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.MediaTable,
			Columns: []string{car.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedMediaIDs(); len(nodes) > 0 && !cuo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.MediaTable,
			Columns: []string{car.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.MediaTable,
			Columns: []string{car.MediaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.AlbumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.AlbumsTable,
			Columns: []string{car.AlbumsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(album.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedAlbumsIDs(); len(nodes) > 0 && !cuo.mutation.AlbumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.AlbumsTable,
			Columns: []string{car.AlbumsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(album.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AlbumsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.AlbumsTable,
			Columns: []string{car.AlbumsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(album.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.DocumentsTable,
			Columns: []string{car.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedDocumentsIDs(); len(nodes) > 0 && !cuo.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.DocumentsTable,
			Columns: []string{car.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.DocumentsTable,
			Columns: []string{car.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.DynoSessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.DynoSessionsTable,
			Columns: []string{car.DynoSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dynosession.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedDynoSessionsIDs(); len(nodes) > 0 && !cuo.mutation.DynoSessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.DynoSessionsTable,
			Columns: []string{car.DynoSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dynosession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DynoSessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.DynoSessionsTable,
			Columns: []string{car.DynoSessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dynosession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ExpensesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ExpensesTable,
			Columns: []string{car.ExpensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(expense.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedExpensesIDs(); len(nodes) > 0 && !cuo.mutation.ExpensesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ExpensesTable,
			Columns: []string{car.ExpensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(expense.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ExpensesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   car.ExpensesTable,
			Columns: []string{car.ExpensesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(expense.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.BannerImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   car.BannerImageTable,
			Columns: []string{car.BannerImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.BannerImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   car.BannerImageTable,
			Columns: []string{car.BannerImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Car{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{car.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
