// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/mod"
	"github.com/Dan6erbond/revline/ent/modproductoption"
	"github.com/Dan6erbond/revline/ent/task"
	"github.com/google/uuid"
)

// ModCreate is the builder for creating a Mod entity.
type ModCreate struct {
	config
	mutation *ModMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (mc *ModCreate) SetCreateTime(t time.Time) *ModCreate {
	mc.mutation.SetCreateTime(t)
	return mc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (mc *ModCreate) SetNillableCreateTime(t *time.Time) *ModCreate {
	if t != nil {
		mc.SetCreateTime(*t)
	}
	return mc
}

// SetUpdateTime sets the "update_time" field.
func (mc *ModCreate) SetUpdateTime(t time.Time) *ModCreate {
	mc.mutation.SetUpdateTime(t)
	return mc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (mc *ModCreate) SetNillableUpdateTime(t *time.Time) *ModCreate {
	if t != nil {
		mc.SetUpdateTime(*t)
	}
	return mc
}

// SetTitle sets the "title" field.
func (mc *ModCreate) SetTitle(s string) *ModCreate {
	mc.mutation.SetTitle(s)
	return mc
}

// SetCategory sets the "category" field.
func (mc *ModCreate) SetCategory(m mod.Category) *ModCreate {
	mc.mutation.SetCategory(m)
	return mc
}

// SetStatus sets the "status" field.
func (mc *ModCreate) SetStatus(m mod.Status) *ModCreate {
	mc.mutation.SetStatus(m)
	return mc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mc *ModCreate) SetNillableStatus(m *mod.Status) *ModCreate {
	if m != nil {
		mc.SetStatus(*m)
	}
	return mc
}

// SetDescription sets the "description" field.
func (mc *ModCreate) SetDescription(s string) *ModCreate {
	mc.mutation.SetDescription(s)
	return mc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mc *ModCreate) SetNillableDescription(s *string) *ModCreate {
	if s != nil {
		mc.SetDescription(*s)
	}
	return mc
}

// SetStage sets the "stage" field.
func (mc *ModCreate) SetStage(s string) *ModCreate {
	mc.mutation.SetStage(s)
	return mc
}

// SetNillableStage sets the "stage" field if the given value is not nil.
func (mc *ModCreate) SetNillableStage(s *string) *ModCreate {
	if s != nil {
		mc.SetStage(*s)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *ModCreate) SetID(u uuid.UUID) *ModCreate {
	mc.mutation.SetID(u)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *ModCreate) SetNillableID(u *uuid.UUID) *ModCreate {
	if u != nil {
		mc.SetID(*u)
	}
	return mc
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (mc *ModCreate) SetCarID(id uuid.UUID) *ModCreate {
	mc.mutation.SetCarID(id)
	return mc
}

// SetCar sets the "car" edge to the Car entity.
func (mc *ModCreate) SetCar(c *Car) *ModCreate {
	return mc.SetCarID(c.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (mc *ModCreate) AddTaskIDs(ids ...uuid.UUID) *ModCreate {
	mc.mutation.AddTaskIDs(ids...)
	return mc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (mc *ModCreate) AddTasks(t ...*Task) *ModCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mc.AddTaskIDs(ids...)
}

// AddProductOptionIDs adds the "product_options" edge to the ModProductOption entity by IDs.
func (mc *ModCreate) AddProductOptionIDs(ids ...uuid.UUID) *ModCreate {
	mc.mutation.AddProductOptionIDs(ids...)
	return mc
}

// AddProductOptions adds the "product_options" edges to the ModProductOption entity.
func (mc *ModCreate) AddProductOptions(m ...*ModProductOption) *ModCreate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddProductOptionIDs(ids...)
}

// Mutation returns the ModMutation object of the builder.
func (mc *ModCreate) Mutation() *ModMutation {
	return mc.mutation
}

// Save creates the Mod in the database.
func (mc *ModCreate) Save(ctx context.Context) (*Mod, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *ModCreate) SaveX(ctx context.Context) *Mod {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *ModCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *ModCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *ModCreate) defaults() {
	if _, ok := mc.mutation.CreateTime(); !ok {
		v := mod.DefaultCreateTime()
		mc.mutation.SetCreateTime(v)
	}
	if _, ok := mc.mutation.UpdateTime(); !ok {
		v := mod.DefaultUpdateTime()
		mc.mutation.SetUpdateTime(v)
	}
	if _, ok := mc.mutation.Status(); !ok {
		v := mod.DefaultStatus
		mc.mutation.SetStatus(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		v := mod.DefaultID()
		mc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *ModCreate) check() error {
	if _, ok := mc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Mod.create_time"`)}
	}
	if _, ok := mc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Mod.update_time"`)}
	}
	if _, ok := mc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Mod.title"`)}
	}
	if _, ok := mc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "Mod.category"`)}
	}
	if v, ok := mc.mutation.Category(); ok {
		if err := mod.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Mod.category": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Mod.status"`)}
	}
	if v, ok := mc.mutation.Status(); ok {
		if err := mod.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Mod.status": %w`, err)}
		}
	}
	if len(mc.mutation.CarIDs()) == 0 {
		return &ValidationError{Name: "car", err: errors.New(`ent: missing required edge "Mod.car"`)}
	}
	return nil
}

func (mc *ModCreate) sqlSave(ctx context.Context) (*Mod, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *ModCreate) createSpec() (*Mod, *sqlgraph.CreateSpec) {
	var (
		_node = &Mod{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(mod.Table, sqlgraph.NewFieldSpec(mod.FieldID, field.TypeUUID))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mc.mutation.CreateTime(); ok {
		_spec.SetField(mod.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := mc.mutation.UpdateTime(); ok {
		_spec.SetField(mod.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := mc.mutation.Title(); ok {
		_spec.SetField(mod.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := mc.mutation.Category(); ok {
		_spec.SetField(mod.FieldCategory, field.TypeEnum, value)
		_node.Category = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(mod.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := mc.mutation.Description(); ok {
		_spec.SetField(mod.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := mc.mutation.Stage(); ok {
		_spec.SetField(mod.FieldStage, field.TypeString, value)
		_node.Stage = &value
	}
	if nodes := mc.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mod.CarTable,
			Columns: []string{mod.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.car_mods = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mod.TasksTable,
			Columns: mod.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ProductOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mod.ProductOptionsTable,
			Columns: []string{mod.ProductOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modproductoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ModCreateBulk is the builder for creating many Mod entities in bulk.
type ModCreateBulk struct {
	config
	err      error
	builders []*ModCreate
}

// Save creates the Mod entities in the database.
func (mcb *ModCreateBulk) Save(ctx context.Context) ([]*Mod, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Mod, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ModMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *ModCreateBulk) SaveX(ctx context.Context) []*Mod {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *ModCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *ModCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
