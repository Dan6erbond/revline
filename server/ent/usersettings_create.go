// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/user"
	"github.com/Dan6erbond/revline/ent/usersettings"
	"github.com/google/uuid"
)

// UserSettingsCreate is the builder for creating a UserSettings entity.
type UserSettingsCreate struct {
	config
	mutation *UserSettingsMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (usc *UserSettingsCreate) SetCreateTime(t time.Time) *UserSettingsCreate {
	usc.mutation.SetCreateTime(t)
	return usc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (usc *UserSettingsCreate) SetNillableCreateTime(t *time.Time) *UserSettingsCreate {
	if t != nil {
		usc.SetCreateTime(*t)
	}
	return usc
}

// SetUpdateTime sets the "update_time" field.
func (usc *UserSettingsCreate) SetUpdateTime(t time.Time) *UserSettingsCreate {
	usc.mutation.SetUpdateTime(t)
	return usc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (usc *UserSettingsCreate) SetNillableUpdateTime(t *time.Time) *UserSettingsCreate {
	if t != nil {
		usc.SetUpdateTime(*t)
	}
	return usc
}

// SetCurrencyCode sets the "currency_code" field.
func (usc *UserSettingsCreate) SetCurrencyCode(s string) *UserSettingsCreate {
	usc.mutation.SetCurrencyCode(s)
	return usc
}

// SetNillableCurrencyCode sets the "currency_code" field if the given value is not nil.
func (usc *UserSettingsCreate) SetNillableCurrencyCode(s *string) *UserSettingsCreate {
	if s != nil {
		usc.SetCurrencyCode(*s)
	}
	return usc
}

// SetFuelVolumeUnit sets the "fuel_volume_unit" field.
func (usc *UserSettingsCreate) SetFuelVolumeUnit(uvu usersettings.FuelVolumeUnit) *UserSettingsCreate {
	usc.mutation.SetFuelVolumeUnit(uvu)
	return usc
}

// SetNillableFuelVolumeUnit sets the "fuel_volume_unit" field if the given value is not nil.
func (usc *UserSettingsCreate) SetNillableFuelVolumeUnit(uvu *usersettings.FuelVolumeUnit) *UserSettingsCreate {
	if uvu != nil {
		usc.SetFuelVolumeUnit(*uvu)
	}
	return usc
}

// SetDistanceUnit sets the "distance_unit" field.
func (usc *UserSettingsCreate) SetDistanceUnit(uu usersettings.DistanceUnit) *UserSettingsCreate {
	usc.mutation.SetDistanceUnit(uu)
	return usc
}

// SetNillableDistanceUnit sets the "distance_unit" field if the given value is not nil.
func (usc *UserSettingsCreate) SetNillableDistanceUnit(uu *usersettings.DistanceUnit) *UserSettingsCreate {
	if uu != nil {
		usc.SetDistanceUnit(*uu)
	}
	return usc
}

// SetFuelConsumptionUnit sets the "fuel_consumption_unit" field.
func (usc *UserSettingsCreate) SetFuelConsumptionUnit(ucu usersettings.FuelConsumptionUnit) *UserSettingsCreate {
	usc.mutation.SetFuelConsumptionUnit(ucu)
	return usc
}

// SetNillableFuelConsumptionUnit sets the "fuel_consumption_unit" field if the given value is not nil.
func (usc *UserSettingsCreate) SetNillableFuelConsumptionUnit(ucu *usersettings.FuelConsumptionUnit) *UserSettingsCreate {
	if ucu != nil {
		usc.SetFuelConsumptionUnit(*ucu)
	}
	return usc
}

// SetTemperatureUnit sets the "temperature_unit" field.
func (usc *UserSettingsCreate) SetTemperatureUnit(uu usersettings.TemperatureUnit) *UserSettingsCreate {
	usc.mutation.SetTemperatureUnit(uu)
	return usc
}

// SetNillableTemperatureUnit sets the "temperature_unit" field if the given value is not nil.
func (usc *UserSettingsCreate) SetNillableTemperatureUnit(uu *usersettings.TemperatureUnit) *UserSettingsCreate {
	if uu != nil {
		usc.SetTemperatureUnit(*uu)
	}
	return usc
}

// SetPowerUnit sets the "power_unit" field.
func (usc *UserSettingsCreate) SetPowerUnit(uu usersettings.PowerUnit) *UserSettingsCreate {
	usc.mutation.SetPowerUnit(uu)
	return usc
}

// SetNillablePowerUnit sets the "power_unit" field if the given value is not nil.
func (usc *UserSettingsCreate) SetNillablePowerUnit(uu *usersettings.PowerUnit) *UserSettingsCreate {
	if uu != nil {
		usc.SetPowerUnit(*uu)
	}
	return usc
}

// SetTorqueUnit sets the "torque_unit" field.
func (usc *UserSettingsCreate) SetTorqueUnit(uu usersettings.TorqueUnit) *UserSettingsCreate {
	usc.mutation.SetTorqueUnit(uu)
	return usc
}

// SetNillableTorqueUnit sets the "torque_unit" field if the given value is not nil.
func (usc *UserSettingsCreate) SetNillableTorqueUnit(uu *usersettings.TorqueUnit) *UserSettingsCreate {
	if uu != nil {
		usc.SetTorqueUnit(*uu)
	}
	return usc
}

// SetID sets the "id" field.
func (usc *UserSettingsCreate) SetID(u uuid.UUID) *UserSettingsCreate {
	usc.mutation.SetID(u)
	return usc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (usc *UserSettingsCreate) SetNillableID(u *uuid.UUID) *UserSettingsCreate {
	if u != nil {
		usc.SetID(*u)
	}
	return usc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (usc *UserSettingsCreate) SetUserID(id uuid.UUID) *UserSettingsCreate {
	usc.mutation.SetUserID(id)
	return usc
}

// SetUser sets the "user" edge to the User entity.
func (usc *UserSettingsCreate) SetUser(u *User) *UserSettingsCreate {
	return usc.SetUserID(u.ID)
}

// Mutation returns the UserSettingsMutation object of the builder.
func (usc *UserSettingsCreate) Mutation() *UserSettingsMutation {
	return usc.mutation
}

// Save creates the UserSettings in the database.
func (usc *UserSettingsCreate) Save(ctx context.Context) (*UserSettings, error) {
	usc.defaults()
	return withHooks(ctx, usc.sqlSave, usc.mutation, usc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (usc *UserSettingsCreate) SaveX(ctx context.Context) *UserSettings {
	v, err := usc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usc *UserSettingsCreate) Exec(ctx context.Context) error {
	_, err := usc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usc *UserSettingsCreate) ExecX(ctx context.Context) {
	if err := usc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usc *UserSettingsCreate) defaults() {
	if _, ok := usc.mutation.CreateTime(); !ok {
		v := usersettings.DefaultCreateTime()
		usc.mutation.SetCreateTime(v)
	}
	if _, ok := usc.mutation.UpdateTime(); !ok {
		v := usersettings.DefaultUpdateTime()
		usc.mutation.SetUpdateTime(v)
	}
	if _, ok := usc.mutation.ID(); !ok {
		v := usersettings.DefaultID()
		usc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usc *UserSettingsCreate) check() error {
	if _, ok := usc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "UserSettings.create_time"`)}
	}
	if _, ok := usc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "UserSettings.update_time"`)}
	}
	if v, ok := usc.mutation.FuelVolumeUnit(); ok {
		if err := usersettings.FuelVolumeUnitValidator(v); err != nil {
			return &ValidationError{Name: "fuel_volume_unit", err: fmt.Errorf(`ent: validator failed for field "UserSettings.fuel_volume_unit": %w`, err)}
		}
	}
	if v, ok := usc.mutation.DistanceUnit(); ok {
		if err := usersettings.DistanceUnitValidator(v); err != nil {
			return &ValidationError{Name: "distance_unit", err: fmt.Errorf(`ent: validator failed for field "UserSettings.distance_unit": %w`, err)}
		}
	}
	if v, ok := usc.mutation.FuelConsumptionUnit(); ok {
		if err := usersettings.FuelConsumptionUnitValidator(v); err != nil {
			return &ValidationError{Name: "fuel_consumption_unit", err: fmt.Errorf(`ent: validator failed for field "UserSettings.fuel_consumption_unit": %w`, err)}
		}
	}
	if v, ok := usc.mutation.TemperatureUnit(); ok {
		if err := usersettings.TemperatureUnitValidator(v); err != nil {
			return &ValidationError{Name: "temperature_unit", err: fmt.Errorf(`ent: validator failed for field "UserSettings.temperature_unit": %w`, err)}
		}
	}
	if v, ok := usc.mutation.PowerUnit(); ok {
		if err := usersettings.PowerUnitValidator(v); err != nil {
			return &ValidationError{Name: "power_unit", err: fmt.Errorf(`ent: validator failed for field "UserSettings.power_unit": %w`, err)}
		}
	}
	if v, ok := usc.mutation.TorqueUnit(); ok {
		if err := usersettings.TorqueUnitValidator(v); err != nil {
			return &ValidationError{Name: "torque_unit", err: fmt.Errorf(`ent: validator failed for field "UserSettings.torque_unit": %w`, err)}
		}
	}
	if len(usc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserSettings.user"`)}
	}
	return nil
}

func (usc *UserSettingsCreate) sqlSave(ctx context.Context) (*UserSettings, error) {
	if err := usc.check(); err != nil {
		return nil, err
	}
	_node, _spec := usc.createSpec()
	if err := sqlgraph.CreateNode(ctx, usc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	usc.mutation.id = &_node.ID
	usc.mutation.done = true
	return _node, nil
}

func (usc *UserSettingsCreate) createSpec() (*UserSettings, *sqlgraph.CreateSpec) {
	var (
		_node = &UserSettings{config: usc.config}
		_spec = sqlgraph.NewCreateSpec(usersettings.Table, sqlgraph.NewFieldSpec(usersettings.FieldID, field.TypeUUID))
	)
	if id, ok := usc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := usc.mutation.CreateTime(); ok {
		_spec.SetField(usersettings.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := usc.mutation.UpdateTime(); ok {
		_spec.SetField(usersettings.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := usc.mutation.CurrencyCode(); ok {
		_spec.SetField(usersettings.FieldCurrencyCode, field.TypeString, value)
		_node.CurrencyCode = &value
	}
	if value, ok := usc.mutation.FuelVolumeUnit(); ok {
		_spec.SetField(usersettings.FieldFuelVolumeUnit, field.TypeEnum, value)
		_node.FuelVolumeUnit = &value
	}
	if value, ok := usc.mutation.DistanceUnit(); ok {
		_spec.SetField(usersettings.FieldDistanceUnit, field.TypeEnum, value)
		_node.DistanceUnit = &value
	}
	if value, ok := usc.mutation.FuelConsumptionUnit(); ok {
		_spec.SetField(usersettings.FieldFuelConsumptionUnit, field.TypeEnum, value)
		_node.FuelConsumptionUnit = &value
	}
	if value, ok := usc.mutation.TemperatureUnit(); ok {
		_spec.SetField(usersettings.FieldTemperatureUnit, field.TypeEnum, value)
		_node.TemperatureUnit = &value
	}
	if value, ok := usc.mutation.PowerUnit(); ok {
		_spec.SetField(usersettings.FieldPowerUnit, field.TypeEnum, value)
		_node.PowerUnit = &value
	}
	if value, ok := usc.mutation.TorqueUnit(); ok {
		_spec.SetField(usersettings.FieldTorqueUnit, field.TypeEnum, value)
		_node.TorqueUnit = &value
	}
	if nodes := usc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usersettings.UserTable,
			Columns: []string{usersettings.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_settings = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserSettingsCreateBulk is the builder for creating many UserSettings entities in bulk.
type UserSettingsCreateBulk struct {
	config
	err      error
	builders []*UserSettingsCreate
}

// Save creates the UserSettings entities in the database.
func (uscb *UserSettingsCreateBulk) Save(ctx context.Context) ([]*UserSettings, error) {
	if uscb.err != nil {
		return nil, uscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uscb.builders))
	nodes := make([]*UserSettings, len(uscb.builders))
	mutators := make([]Mutator, len(uscb.builders))
	for i := range uscb.builders {
		func(i int, root context.Context) {
			builder := uscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserSettingsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uscb *UserSettingsCreateBulk) SaveX(ctx context.Context) []*UserSettings {
	v, err := uscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uscb *UserSettingsCreateBulk) Exec(ctx context.Context) error {
	_, err := uscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uscb *UserSettingsCreateBulk) ExecX(ctx context.Context) {
	if err := uscb.Exec(ctx); err != nil {
		panic(err)
	}
}
