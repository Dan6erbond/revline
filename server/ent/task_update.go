// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/Dan6erbond/revline/ent/task"
	"github.com/google/uuid"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdateTime sets the "update_time" field.
func (tu *TaskUpdate) SetUpdateTime(t time.Time) *TaskUpdate {
	tu.mutation.SetUpdateTime(t)
	return tu
}

// SetStatus sets the "status" field.
func (tu *TaskUpdate) SetStatus(t task.Status) *TaskUpdate {
	tu.mutation.SetStatus(t)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableStatus(t *task.Status) *TaskUpdate {
	if t != nil {
		tu.SetStatus(*t)
	}
	return tu
}

// SetTitle sets the "title" field.
func (tu *TaskUpdate) SetTitle(s string) *TaskUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTitle(s *string) *TaskUpdate {
	if s != nil {
		tu.SetTitle(*s)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *TaskUpdate) SetDescription(s string) *TaskUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDescription(s *string) *TaskUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// ClearDescription clears the value of the "description" field.
func (tu *TaskUpdate) ClearDescription() *TaskUpdate {
	tu.mutation.ClearDescription()
	return tu
}

// SetRank sets the "rank" field.
func (tu *TaskUpdate) SetRank(f float64) *TaskUpdate {
	tu.mutation.ResetRank()
	tu.mutation.SetRank(f)
	return tu
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableRank(f *float64) *TaskUpdate {
	if f != nil {
		tu.SetRank(*f)
	}
	return tu
}

// AddRank adds f to the "rank" field.
func (tu *TaskUpdate) AddRank(f float64) *TaskUpdate {
	tu.mutation.AddRank(f)
	return tu
}

// SetEstimate sets the "estimate" field.
func (tu *TaskUpdate) SetEstimate(f float64) *TaskUpdate {
	tu.mutation.ResetEstimate()
	tu.mutation.SetEstimate(f)
	return tu
}

// SetNillableEstimate sets the "estimate" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableEstimate(f *float64) *TaskUpdate {
	if f != nil {
		tu.SetEstimate(*f)
	}
	return tu
}

// AddEstimate adds f to the "estimate" field.
func (tu *TaskUpdate) AddEstimate(f float64) *TaskUpdate {
	tu.mutation.AddEstimate(f)
	return tu
}

// ClearEstimate clears the value of the "estimate" field.
func (tu *TaskUpdate) ClearEstimate() *TaskUpdate {
	tu.mutation.ClearEstimate()
	return tu
}

// SetPriority sets the "priority" field.
func (tu *TaskUpdate) SetPriority(t task.Priority) *TaskUpdate {
	tu.mutation.SetPriority(t)
	return tu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tu *TaskUpdate) SetNillablePriority(t *task.Priority) *TaskUpdate {
	if t != nil {
		tu.SetPriority(*t)
	}
	return tu
}

// ClearPriority clears the value of the "priority" field.
func (tu *TaskUpdate) ClearPriority() *TaskUpdate {
	tu.mutation.ClearPriority()
	return tu
}

// SetEffort sets the "effort" field.
func (tu *TaskUpdate) SetEffort(t task.Effort) *TaskUpdate {
	tu.mutation.SetEffort(t)
	return tu
}

// SetNillableEffort sets the "effort" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableEffort(t *task.Effort) *TaskUpdate {
	if t != nil {
		tu.SetEffort(*t)
	}
	return tu
}

// ClearEffort clears the value of the "effort" field.
func (tu *TaskUpdate) ClearEffort() *TaskUpdate {
	tu.mutation.ClearEffort()
	return tu
}

// SetDifficulty sets the "difficulty" field.
func (tu *TaskUpdate) SetDifficulty(t task.Difficulty) *TaskUpdate {
	tu.mutation.SetDifficulty(t)
	return tu
}

// SetNillableDifficulty sets the "difficulty" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDifficulty(t *task.Difficulty) *TaskUpdate {
	if t != nil {
		tu.SetDifficulty(*t)
	}
	return tu
}

// ClearDifficulty clears the value of the "difficulty" field.
func (tu *TaskUpdate) ClearDifficulty() *TaskUpdate {
	tu.mutation.ClearDifficulty()
	return tu
}

// SetCategory sets the "category" field.
func (tu *TaskUpdate) SetCategory(t task.Category) *TaskUpdate {
	tu.mutation.SetCategory(t)
	return tu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCategory(t *task.Category) *TaskUpdate {
	if t != nil {
		tu.SetCategory(*t)
	}
	return tu
}

// ClearCategory clears the value of the "category" field.
func (tu *TaskUpdate) ClearCategory() *TaskUpdate {
	tu.mutation.ClearCategory()
	return tu
}

// SetBudget sets the "budget" field.
func (tu *TaskUpdate) SetBudget(f float64) *TaskUpdate {
	tu.mutation.ResetBudget()
	tu.mutation.SetBudget(f)
	return tu
}

// SetNillableBudget sets the "budget" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableBudget(f *float64) *TaskUpdate {
	if f != nil {
		tu.SetBudget(*f)
	}
	return tu
}

// AddBudget adds f to the "budget" field.
func (tu *TaskUpdate) AddBudget(f float64) *TaskUpdate {
	tu.mutation.AddBudget(f)
	return tu
}

// ClearBudget clears the value of the "budget" field.
func (tu *TaskUpdate) ClearBudget() *TaskUpdate {
	tu.mutation.ClearBudget()
	return tu
}

// SetPartsNeeded sets the "parts_needed" field.
func (tu *TaskUpdate) SetPartsNeeded(s string) *TaskUpdate {
	tu.mutation.SetPartsNeeded(s)
	return tu
}

// SetNillablePartsNeeded sets the "parts_needed" field if the given value is not nil.
func (tu *TaskUpdate) SetNillablePartsNeeded(s *string) *TaskUpdate {
	if s != nil {
		tu.SetPartsNeeded(*s)
	}
	return tu
}

// ClearPartsNeeded clears the value of the "parts_needed" field.
func (tu *TaskUpdate) ClearPartsNeeded() *TaskUpdate {
	tu.mutation.ClearPartsNeeded()
	return tu
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (tu *TaskUpdate) SetCarID(id uuid.UUID) *TaskUpdate {
	tu.mutation.SetCarID(id)
	return tu
}

// SetCar sets the "car" edge to the Car entity.
func (tu *TaskUpdate) SetCar(c *Car) *TaskUpdate {
	return tu.SetCarID(c.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (tu *TaskUpdate) ClearCar() *TaskUpdate {
	tu.mutation.ClearCar()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TaskUpdate) defaults() {
	if _, ok := tu.mutation.UpdateTime(); !ok {
		v := task.UpdateDefaultUpdateTime()
		tu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TaskUpdate) check() error {
	if v, ok := tu.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Task.status": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Title(); ok {
		if err := task.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Task.title": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Priority(); ok {
		if err := task.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "Task.priority": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Effort(); ok {
		if err := task.EffortValidator(v); err != nil {
			return &ValidationError{Name: "effort", err: fmt.Errorf(`ent: validator failed for field "Task.effort": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Difficulty(); ok {
		if err := task.DifficultyValidator(v); err != nil {
			return &ValidationError{Name: "difficulty", err: fmt.Errorf(`ent: validator failed for field "Task.difficulty": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Category(); ok {
		if err := task.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Task.category": %w`, err)}
		}
	}
	if tu.mutation.CarCleared() && len(tu.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Task.car"`)
	}
	return nil
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdateTime(); ok {
		_spec.SetField(task.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if tu.mutation.DescriptionCleared() {
		_spec.ClearField(task.FieldDescription, field.TypeString)
	}
	if value, ok := tu.mutation.Rank(); ok {
		_spec.SetField(task.FieldRank, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedRank(); ok {
		_spec.AddField(task.FieldRank, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.Estimate(); ok {
		_spec.SetField(task.FieldEstimate, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedEstimate(); ok {
		_spec.AddField(task.FieldEstimate, field.TypeFloat64, value)
	}
	if tu.mutation.EstimateCleared() {
		_spec.ClearField(task.FieldEstimate, field.TypeFloat64)
	}
	if value, ok := tu.mutation.Priority(); ok {
		_spec.SetField(task.FieldPriority, field.TypeEnum, value)
	}
	if tu.mutation.PriorityCleared() {
		_spec.ClearField(task.FieldPriority, field.TypeEnum)
	}
	if value, ok := tu.mutation.Effort(); ok {
		_spec.SetField(task.FieldEffort, field.TypeEnum, value)
	}
	if tu.mutation.EffortCleared() {
		_spec.ClearField(task.FieldEffort, field.TypeEnum)
	}
	if value, ok := tu.mutation.Difficulty(); ok {
		_spec.SetField(task.FieldDifficulty, field.TypeEnum, value)
	}
	if tu.mutation.DifficultyCleared() {
		_spec.ClearField(task.FieldDifficulty, field.TypeEnum)
	}
	if value, ok := tu.mutation.Category(); ok {
		_spec.SetField(task.FieldCategory, field.TypeEnum, value)
	}
	if tu.mutation.CategoryCleared() {
		_spec.ClearField(task.FieldCategory, field.TypeEnum)
	}
	if value, ok := tu.mutation.Budget(); ok {
		_spec.SetField(task.FieldBudget, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedBudget(); ok {
		_spec.AddField(task.FieldBudget, field.TypeFloat64, value)
	}
	if tu.mutation.BudgetCleared() {
		_spec.ClearField(task.FieldBudget, field.TypeFloat64)
	}
	if value, ok := tu.mutation.PartsNeeded(); ok {
		_spec.SetField(task.FieldPartsNeeded, field.TypeString, value)
	}
	if tu.mutation.PartsNeededCleared() {
		_spec.ClearField(task.FieldPartsNeeded, field.TypeString)
	}
	if tu.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.CarTable,
			Columns: []string{task.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.CarTable,
			Columns: []string{task.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetUpdateTime sets the "update_time" field.
func (tuo *TaskUpdateOne) SetUpdateTime(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetUpdateTime(t)
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TaskUpdateOne) SetStatus(t task.Status) *TaskUpdateOne {
	tuo.mutation.SetStatus(t)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableStatus(t *task.Status) *TaskUpdateOne {
	if t != nil {
		tuo.SetStatus(*t)
	}
	return tuo
}

// SetTitle sets the "title" field.
func (tuo *TaskUpdateOne) SetTitle(s string) *TaskUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTitle(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetTitle(*s)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TaskUpdateOne) SetDescription(s string) *TaskUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDescription(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// ClearDescription clears the value of the "description" field.
func (tuo *TaskUpdateOne) ClearDescription() *TaskUpdateOne {
	tuo.mutation.ClearDescription()
	return tuo
}

// SetRank sets the "rank" field.
func (tuo *TaskUpdateOne) SetRank(f float64) *TaskUpdateOne {
	tuo.mutation.ResetRank()
	tuo.mutation.SetRank(f)
	return tuo
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableRank(f *float64) *TaskUpdateOne {
	if f != nil {
		tuo.SetRank(*f)
	}
	return tuo
}

// AddRank adds f to the "rank" field.
func (tuo *TaskUpdateOne) AddRank(f float64) *TaskUpdateOne {
	tuo.mutation.AddRank(f)
	return tuo
}

// SetEstimate sets the "estimate" field.
func (tuo *TaskUpdateOne) SetEstimate(f float64) *TaskUpdateOne {
	tuo.mutation.ResetEstimate()
	tuo.mutation.SetEstimate(f)
	return tuo
}

// SetNillableEstimate sets the "estimate" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableEstimate(f *float64) *TaskUpdateOne {
	if f != nil {
		tuo.SetEstimate(*f)
	}
	return tuo
}

// AddEstimate adds f to the "estimate" field.
func (tuo *TaskUpdateOne) AddEstimate(f float64) *TaskUpdateOne {
	tuo.mutation.AddEstimate(f)
	return tuo
}

// ClearEstimate clears the value of the "estimate" field.
func (tuo *TaskUpdateOne) ClearEstimate() *TaskUpdateOne {
	tuo.mutation.ClearEstimate()
	return tuo
}

// SetPriority sets the "priority" field.
func (tuo *TaskUpdateOne) SetPriority(t task.Priority) *TaskUpdateOne {
	tuo.mutation.SetPriority(t)
	return tuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillablePriority(t *task.Priority) *TaskUpdateOne {
	if t != nil {
		tuo.SetPriority(*t)
	}
	return tuo
}

// ClearPriority clears the value of the "priority" field.
func (tuo *TaskUpdateOne) ClearPriority() *TaskUpdateOne {
	tuo.mutation.ClearPriority()
	return tuo
}

// SetEffort sets the "effort" field.
func (tuo *TaskUpdateOne) SetEffort(t task.Effort) *TaskUpdateOne {
	tuo.mutation.SetEffort(t)
	return tuo
}

// SetNillableEffort sets the "effort" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableEffort(t *task.Effort) *TaskUpdateOne {
	if t != nil {
		tuo.SetEffort(*t)
	}
	return tuo
}

// ClearEffort clears the value of the "effort" field.
func (tuo *TaskUpdateOne) ClearEffort() *TaskUpdateOne {
	tuo.mutation.ClearEffort()
	return tuo
}

// SetDifficulty sets the "difficulty" field.
func (tuo *TaskUpdateOne) SetDifficulty(t task.Difficulty) *TaskUpdateOne {
	tuo.mutation.SetDifficulty(t)
	return tuo
}

// SetNillableDifficulty sets the "difficulty" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDifficulty(t *task.Difficulty) *TaskUpdateOne {
	if t != nil {
		tuo.SetDifficulty(*t)
	}
	return tuo
}

// ClearDifficulty clears the value of the "difficulty" field.
func (tuo *TaskUpdateOne) ClearDifficulty() *TaskUpdateOne {
	tuo.mutation.ClearDifficulty()
	return tuo
}

// SetCategory sets the "category" field.
func (tuo *TaskUpdateOne) SetCategory(t task.Category) *TaskUpdateOne {
	tuo.mutation.SetCategory(t)
	return tuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCategory(t *task.Category) *TaskUpdateOne {
	if t != nil {
		tuo.SetCategory(*t)
	}
	return tuo
}

// ClearCategory clears the value of the "category" field.
func (tuo *TaskUpdateOne) ClearCategory() *TaskUpdateOne {
	tuo.mutation.ClearCategory()
	return tuo
}

// SetBudget sets the "budget" field.
func (tuo *TaskUpdateOne) SetBudget(f float64) *TaskUpdateOne {
	tuo.mutation.ResetBudget()
	tuo.mutation.SetBudget(f)
	return tuo
}

// SetNillableBudget sets the "budget" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableBudget(f *float64) *TaskUpdateOne {
	if f != nil {
		tuo.SetBudget(*f)
	}
	return tuo
}

// AddBudget adds f to the "budget" field.
func (tuo *TaskUpdateOne) AddBudget(f float64) *TaskUpdateOne {
	tuo.mutation.AddBudget(f)
	return tuo
}

// ClearBudget clears the value of the "budget" field.
func (tuo *TaskUpdateOne) ClearBudget() *TaskUpdateOne {
	tuo.mutation.ClearBudget()
	return tuo
}

// SetPartsNeeded sets the "parts_needed" field.
func (tuo *TaskUpdateOne) SetPartsNeeded(s string) *TaskUpdateOne {
	tuo.mutation.SetPartsNeeded(s)
	return tuo
}

// SetNillablePartsNeeded sets the "parts_needed" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillablePartsNeeded(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetPartsNeeded(*s)
	}
	return tuo
}

// ClearPartsNeeded clears the value of the "parts_needed" field.
func (tuo *TaskUpdateOne) ClearPartsNeeded() *TaskUpdateOne {
	tuo.mutation.ClearPartsNeeded()
	return tuo
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (tuo *TaskUpdateOne) SetCarID(id uuid.UUID) *TaskUpdateOne {
	tuo.mutation.SetCarID(id)
	return tuo
}

// SetCar sets the "car" edge to the Car entity.
func (tuo *TaskUpdateOne) SetCar(c *Car) *TaskUpdateOne {
	return tuo.SetCarID(c.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (tuo *TaskUpdateOne) ClearCar() *TaskUpdateOne {
	tuo.mutation.ClearCar()
	return tuo
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TaskUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdateTime(); !ok {
		v := task.UpdateDefaultUpdateTime()
		tuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TaskUpdateOne) check() error {
	if v, ok := tuo.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Task.status": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Title(); ok {
		if err := task.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Task.title": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Priority(); ok {
		if err := task.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "Task.priority": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Effort(); ok {
		if err := task.EffortValidator(v); err != nil {
			return &ValidationError{Name: "effort", err: fmt.Errorf(`ent: validator failed for field "Task.effort": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Difficulty(); ok {
		if err := task.DifficultyValidator(v); err != nil {
			return &ValidationError{Name: "difficulty", err: fmt.Errorf(`ent: validator failed for field "Task.difficulty": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Category(); ok {
		if err := task.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Task.category": %w`, err)}
		}
	}
	if tuo.mutation.CarCleared() && len(tuo.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Task.car"`)
	}
	return nil
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdateTime(); ok {
		_spec.SetField(task.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if tuo.mutation.DescriptionCleared() {
		_spec.ClearField(task.FieldDescription, field.TypeString)
	}
	if value, ok := tuo.mutation.Rank(); ok {
		_spec.SetField(task.FieldRank, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedRank(); ok {
		_spec.AddField(task.FieldRank, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.Estimate(); ok {
		_spec.SetField(task.FieldEstimate, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedEstimate(); ok {
		_spec.AddField(task.FieldEstimate, field.TypeFloat64, value)
	}
	if tuo.mutation.EstimateCleared() {
		_spec.ClearField(task.FieldEstimate, field.TypeFloat64)
	}
	if value, ok := tuo.mutation.Priority(); ok {
		_spec.SetField(task.FieldPriority, field.TypeEnum, value)
	}
	if tuo.mutation.PriorityCleared() {
		_spec.ClearField(task.FieldPriority, field.TypeEnum)
	}
	if value, ok := tuo.mutation.Effort(); ok {
		_spec.SetField(task.FieldEffort, field.TypeEnum, value)
	}
	if tuo.mutation.EffortCleared() {
		_spec.ClearField(task.FieldEffort, field.TypeEnum)
	}
	if value, ok := tuo.mutation.Difficulty(); ok {
		_spec.SetField(task.FieldDifficulty, field.TypeEnum, value)
	}
	if tuo.mutation.DifficultyCleared() {
		_spec.ClearField(task.FieldDifficulty, field.TypeEnum)
	}
	if value, ok := tuo.mutation.Category(); ok {
		_spec.SetField(task.FieldCategory, field.TypeEnum, value)
	}
	if tuo.mutation.CategoryCleared() {
		_spec.ClearField(task.FieldCategory, field.TypeEnum)
	}
	if value, ok := tuo.mutation.Budget(); ok {
		_spec.SetField(task.FieldBudget, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedBudget(); ok {
		_spec.AddField(task.FieldBudget, field.TypeFloat64, value)
	}
	if tuo.mutation.BudgetCleared() {
		_spec.ClearField(task.FieldBudget, field.TypeFloat64)
	}
	if value, ok := tuo.mutation.PartsNeeded(); ok {
		_spec.SetField(task.FieldPartsNeeded, field.TypeString, value)
	}
	if tuo.mutation.PartsNeededCleared() {
		_spec.ClearField(task.FieldPartsNeeded, field.TypeString)
	}
	if tuo.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.CarTable,
			Columns: []string{task.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.CarTable,
			Columns: []string{task.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
