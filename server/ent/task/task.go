// Code generated by ent, DO NOT EDIT.

package task

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the task type in the database.
	Label = "task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldRank holds the string denoting the rank field in the database.
	FieldRank = "rank"
	// FieldEstimate holds the string denoting the estimate field in the database.
	FieldEstimate = "estimate"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// FieldEffort holds the string denoting the effort field in the database.
	FieldEffort = "effort"
	// FieldDifficulty holds the string denoting the difficulty field in the database.
	FieldDifficulty = "difficulty"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldBudget holds the string denoting the budget field in the database.
	FieldBudget = "budget"
	// FieldPartsNeeded holds the string denoting the parts_needed field in the database.
	FieldPartsNeeded = "parts_needed"
	// EdgeCar holds the string denoting the car edge name in mutations.
	EdgeCar = "car"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeSubtasks holds the string denoting the subtasks edge name in mutations.
	EdgeSubtasks = "subtasks"
	// EdgeMods holds the string denoting the mods edge name in mutations.
	EdgeMods = "mods"
	// Table holds the table name of the task in the database.
	Table = "tasks"
	// CarTable is the table that holds the car relation/edge.
	CarTable = "tasks"
	// CarInverseTable is the table name for the Car entity.
	// It exists in this package in order to avoid circular dependency with the "car" package.
	CarInverseTable = "cars"
	// CarColumn is the table column denoting the car relation/edge.
	CarColumn = "car_tasks"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "tasks"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "task_subtasks"
	// SubtasksTable is the table that holds the subtasks relation/edge.
	SubtasksTable = "tasks"
	// SubtasksColumn is the table column denoting the subtasks relation/edge.
	SubtasksColumn = "task_subtasks"
	// ModsTable is the table that holds the mods relation/edge. The primary key declared below.
	ModsTable = "task_mods"
	// ModsInverseTable is the table name for the Mod entity.
	// It exists in this package in order to avoid circular dependency with the "mod" package.
	ModsInverseTable = "mods"
)

// Columns holds all SQL columns for task fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldStatus,
	FieldTitle,
	FieldDescription,
	FieldRank,
	FieldEstimate,
	FieldPriority,
	FieldEffort,
	FieldDifficulty,
	FieldCategory,
	FieldBudget,
	FieldPartsNeeded,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tasks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"car_tasks",
	"task_subtasks",
}

var (
	// ModsPrimaryKey and ModsColumn2 are the table columns denoting the
	// primary key for the mods relation (M2M).
	ModsPrimaryKey = []string{"task_id", "mod_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultRank holds the default value on creation for the "rank" field.
	DefaultRank float64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusBacklog    Status = "backlog"
	StatusToDo       Status = "todo"
	StatusInProgress Status = "in_progress"
	StatusBlocked    Status = "blocked"
	StatusCompleted  Status = "completed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusBacklog, StatusToDo, StatusInProgress, StatusBlocked, StatusCompleted:
		return nil
	default:
		return fmt.Errorf("task: invalid enum value for status field: %q", s)
	}
}

// Priority defines the type for the "priority" enum field.
type Priority string

// Priority values.
const (
	PriorityLow    Priority = "low"
	PriorityMedium Priority = "mid"
	PriorityHigh   Priority = "high"
	PriorityUrgent Priority = "urgent"
)

func (pr Priority) String() string {
	return string(pr)
}

// PriorityValidator is a validator for the "priority" field enum values. It is called by the builders before save.
func PriorityValidator(pr Priority) error {
	switch pr {
	case PriorityLow, PriorityMedium, PriorityHigh, PriorityUrgent:
		return nil
	default:
		return fmt.Errorf("task: invalid enum value for priority field: %q", pr)
	}
}

// Effort defines the type for the "effort" enum field.
type Effort string

// Effort values.
const (
	EffortTrivial  Effort = "trivial"
	EffortEasy     Effort = "easy"
	EffortModerate Effort = "moderate"
	EffortHard     Effort = "hard"
	EffortExtreme  Effort = "extreme"
)

func (e Effort) String() string {
	return string(e)
}

// EffortValidator is a validator for the "effort" field enum values. It is called by the builders before save.
func EffortValidator(e Effort) error {
	switch e {
	case EffortTrivial, EffortEasy, EffortModerate, EffortHard, EffortExtreme:
		return nil
	default:
		return fmt.Errorf("task: invalid enum value for effort field: %q", e)
	}
}

// Difficulty defines the type for the "difficulty" enum field.
type Difficulty string

// Difficulty values.
const (
	DifficultyBeginner     Difficulty = "beginner"
	DifficultyIntermediate Difficulty = "intermediate"
	DifficultyAdvanced     Difficulty = "advanced"
	DifficultyExpert       Difficulty = "expert"
)

func (d Difficulty) String() string {
	return string(d)
}

// DifficultyValidator is a validator for the "difficulty" field enum values. It is called by the builders before save.
func DifficultyValidator(d Difficulty) error {
	switch d {
	case DifficultyBeginner, DifficultyIntermediate, DifficultyAdvanced, DifficultyExpert:
		return nil
	default:
		return fmt.Errorf("task: invalid enum value for difficulty field: %q", d)
	}
}

// Category defines the type for the "category" enum field.
type Category string

// Category values.
const (
	CategoryMaintenance  Category = "maintenance"
	CategoryService      Category = "service"
	CategoryRepair       Category = "repair"
	CategoryModification Category = "modification"
	CategoryCosmetic     Category = "cosmetic"
	CategoryCleaning     Category = "cleaning"
	CategoryDetailing    Category = "detailing"
	CategoryInspection   Category = "inspection"
	CategoryRegistration Category = "registration"
	CategoryInsurance    Category = "insurance"
	CategoryAccessory    Category = "accessory"
	CategoryDiagnostics  Category = "diagnostics"
	CategoryOther        Category = "other"
)

func (c Category) String() string {
	return string(c)
}

// CategoryValidator is a validator for the "category" field enum values. It is called by the builders before save.
func CategoryValidator(c Category) error {
	switch c {
	case CategoryMaintenance, CategoryService, CategoryRepair, CategoryModification, CategoryCosmetic, CategoryCleaning, CategoryDetailing, CategoryInspection, CategoryRegistration, CategoryInsurance, CategoryAccessory, CategoryDiagnostics, CategoryOther:
		return nil
	default:
		return fmt.Errorf("task: invalid enum value for category field: %q", c)
	}
}

// OrderOption defines the ordering options for the Task queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByRank orders the results by the rank field.
func ByRank(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRank, opts...).ToFunc()
}

// ByEstimate orders the results by the estimate field.
func ByEstimate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEstimate, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}

// ByEffort orders the results by the effort field.
func ByEffort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEffort, opts...).ToFunc()
}

// ByDifficulty orders the results by the difficulty field.
func ByDifficulty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDifficulty, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByBudget orders the results by the budget field.
func ByBudget(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBudget, opts...).ToFunc()
}

// ByPartsNeeded orders the results by the parts_needed field.
func ByPartsNeeded(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPartsNeeded, opts...).ToFunc()
}

// ByCarField orders the results by car field.
func ByCarField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarStep(), sql.OrderByField(field, opts...))
	}
}

// ByParentField orders the results by parent field.
func ByParentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentStep(), sql.OrderByField(field, opts...))
	}
}

// BySubtasksCount orders the results by subtasks count.
func BySubtasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubtasksStep(), opts...)
	}
}

// BySubtasks orders the results by subtasks terms.
func BySubtasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubtasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByModsCount orders the results by mods count.
func ByModsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newModsStep(), opts...)
	}
}

// ByMods orders the results by mods terms.
func ByMods(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCarStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CarTable, CarColumn),
	)
}
func newParentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
	)
}
func newSubtasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SubtasksTable, SubtasksColumn),
	)
}
func newModsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ModsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ModsTable, ModsPrimaryKey...),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Priority) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Priority) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Priority(str)
	if err := PriorityValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Priority", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Effort) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Effort) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Effort(str)
	if err := EffortValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Effort", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Difficulty) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Difficulty) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Difficulty(str)
	if err := DifficultyValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Difficulty", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Category) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Category) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Category(str)
	if err := CategoryValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Category", str)
	}
	return nil
}
