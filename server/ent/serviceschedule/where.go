// Code generated by ent, DO NOT EDIT.

package serviceschedule

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldEQ(FieldUpdateTime, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldEQ(FieldTitle, v))
}

// RepeatEveryKm applies equality check predicate on the "repeat_every_km" field. It's identical to RepeatEveryKmEQ.
func RepeatEveryKm(v float64) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldEQ(FieldRepeatEveryKm, v))
}

// StartsAtKm applies equality check predicate on the "starts_at_km" field. It's identical to StartsAtKmEQ.
func StartsAtKm(v float64) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldEQ(FieldStartsAtKm, v))
}

// RepeatEveryMonths applies equality check predicate on the "repeat_every_months" field. It's identical to RepeatEveryMonthsEQ.
func RepeatEveryMonths(v int) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldEQ(FieldRepeatEveryMonths, v))
}

// StartsAtMonths applies equality check predicate on the "starts_at_months" field. It's identical to StartsAtMonthsEQ.
func StartsAtMonths(v int) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldEQ(FieldStartsAtMonths, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldEQ(FieldNotes, v))
}

// Archived applies equality check predicate on the "archived" field. It's identical to ArchivedEQ.
func Archived(v bool) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldEQ(FieldArchived, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldLTE(FieldUpdateTime, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldContainsFold(FieldTitle, v))
}

// RepeatEveryKmEQ applies the EQ predicate on the "repeat_every_km" field.
func RepeatEveryKmEQ(v float64) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldEQ(FieldRepeatEveryKm, v))
}

// RepeatEveryKmNEQ applies the NEQ predicate on the "repeat_every_km" field.
func RepeatEveryKmNEQ(v float64) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldNEQ(FieldRepeatEveryKm, v))
}

// RepeatEveryKmIn applies the In predicate on the "repeat_every_km" field.
func RepeatEveryKmIn(vs ...float64) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldIn(FieldRepeatEveryKm, vs...))
}

// RepeatEveryKmNotIn applies the NotIn predicate on the "repeat_every_km" field.
func RepeatEveryKmNotIn(vs ...float64) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldNotIn(FieldRepeatEveryKm, vs...))
}

// RepeatEveryKmGT applies the GT predicate on the "repeat_every_km" field.
func RepeatEveryKmGT(v float64) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldGT(FieldRepeatEveryKm, v))
}

// RepeatEveryKmGTE applies the GTE predicate on the "repeat_every_km" field.
func RepeatEveryKmGTE(v float64) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldGTE(FieldRepeatEveryKm, v))
}

// RepeatEveryKmLT applies the LT predicate on the "repeat_every_km" field.
func RepeatEveryKmLT(v float64) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldLT(FieldRepeatEveryKm, v))
}

// RepeatEveryKmLTE applies the LTE predicate on the "repeat_every_km" field.
func RepeatEveryKmLTE(v float64) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldLTE(FieldRepeatEveryKm, v))
}

// RepeatEveryKmIsNil applies the IsNil predicate on the "repeat_every_km" field.
func RepeatEveryKmIsNil() predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldIsNull(FieldRepeatEveryKm))
}

// RepeatEveryKmNotNil applies the NotNil predicate on the "repeat_every_km" field.
func RepeatEveryKmNotNil() predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldNotNull(FieldRepeatEveryKm))
}

// StartsAtKmEQ applies the EQ predicate on the "starts_at_km" field.
func StartsAtKmEQ(v float64) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldEQ(FieldStartsAtKm, v))
}

// StartsAtKmNEQ applies the NEQ predicate on the "starts_at_km" field.
func StartsAtKmNEQ(v float64) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldNEQ(FieldStartsAtKm, v))
}

// StartsAtKmIn applies the In predicate on the "starts_at_km" field.
func StartsAtKmIn(vs ...float64) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldIn(FieldStartsAtKm, vs...))
}

// StartsAtKmNotIn applies the NotIn predicate on the "starts_at_km" field.
func StartsAtKmNotIn(vs ...float64) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldNotIn(FieldStartsAtKm, vs...))
}

// StartsAtKmGT applies the GT predicate on the "starts_at_km" field.
func StartsAtKmGT(v float64) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldGT(FieldStartsAtKm, v))
}

// StartsAtKmGTE applies the GTE predicate on the "starts_at_km" field.
func StartsAtKmGTE(v float64) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldGTE(FieldStartsAtKm, v))
}

// StartsAtKmLT applies the LT predicate on the "starts_at_km" field.
func StartsAtKmLT(v float64) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldLT(FieldStartsAtKm, v))
}

// StartsAtKmLTE applies the LTE predicate on the "starts_at_km" field.
func StartsAtKmLTE(v float64) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldLTE(FieldStartsAtKm, v))
}

// StartsAtKmIsNil applies the IsNil predicate on the "starts_at_km" field.
func StartsAtKmIsNil() predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldIsNull(FieldStartsAtKm))
}

// StartsAtKmNotNil applies the NotNil predicate on the "starts_at_km" field.
func StartsAtKmNotNil() predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldNotNull(FieldStartsAtKm))
}

// RepeatEveryMonthsEQ applies the EQ predicate on the "repeat_every_months" field.
func RepeatEveryMonthsEQ(v int) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldEQ(FieldRepeatEveryMonths, v))
}

// RepeatEveryMonthsNEQ applies the NEQ predicate on the "repeat_every_months" field.
func RepeatEveryMonthsNEQ(v int) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldNEQ(FieldRepeatEveryMonths, v))
}

// RepeatEveryMonthsIn applies the In predicate on the "repeat_every_months" field.
func RepeatEveryMonthsIn(vs ...int) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldIn(FieldRepeatEveryMonths, vs...))
}

// RepeatEveryMonthsNotIn applies the NotIn predicate on the "repeat_every_months" field.
func RepeatEveryMonthsNotIn(vs ...int) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldNotIn(FieldRepeatEveryMonths, vs...))
}

// RepeatEveryMonthsGT applies the GT predicate on the "repeat_every_months" field.
func RepeatEveryMonthsGT(v int) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldGT(FieldRepeatEveryMonths, v))
}

// RepeatEveryMonthsGTE applies the GTE predicate on the "repeat_every_months" field.
func RepeatEveryMonthsGTE(v int) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldGTE(FieldRepeatEveryMonths, v))
}

// RepeatEveryMonthsLT applies the LT predicate on the "repeat_every_months" field.
func RepeatEveryMonthsLT(v int) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldLT(FieldRepeatEveryMonths, v))
}

// RepeatEveryMonthsLTE applies the LTE predicate on the "repeat_every_months" field.
func RepeatEveryMonthsLTE(v int) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldLTE(FieldRepeatEveryMonths, v))
}

// RepeatEveryMonthsIsNil applies the IsNil predicate on the "repeat_every_months" field.
func RepeatEveryMonthsIsNil() predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldIsNull(FieldRepeatEveryMonths))
}

// RepeatEveryMonthsNotNil applies the NotNil predicate on the "repeat_every_months" field.
func RepeatEveryMonthsNotNil() predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldNotNull(FieldRepeatEveryMonths))
}

// StartsAtMonthsEQ applies the EQ predicate on the "starts_at_months" field.
func StartsAtMonthsEQ(v int) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldEQ(FieldStartsAtMonths, v))
}

// StartsAtMonthsNEQ applies the NEQ predicate on the "starts_at_months" field.
func StartsAtMonthsNEQ(v int) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldNEQ(FieldStartsAtMonths, v))
}

// StartsAtMonthsIn applies the In predicate on the "starts_at_months" field.
func StartsAtMonthsIn(vs ...int) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldIn(FieldStartsAtMonths, vs...))
}

// StartsAtMonthsNotIn applies the NotIn predicate on the "starts_at_months" field.
func StartsAtMonthsNotIn(vs ...int) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldNotIn(FieldStartsAtMonths, vs...))
}

// StartsAtMonthsGT applies the GT predicate on the "starts_at_months" field.
func StartsAtMonthsGT(v int) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldGT(FieldStartsAtMonths, v))
}

// StartsAtMonthsGTE applies the GTE predicate on the "starts_at_months" field.
func StartsAtMonthsGTE(v int) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldGTE(FieldStartsAtMonths, v))
}

// StartsAtMonthsLT applies the LT predicate on the "starts_at_months" field.
func StartsAtMonthsLT(v int) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldLT(FieldStartsAtMonths, v))
}

// StartsAtMonthsLTE applies the LTE predicate on the "starts_at_months" field.
func StartsAtMonthsLTE(v int) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldLTE(FieldStartsAtMonths, v))
}

// StartsAtMonthsIsNil applies the IsNil predicate on the "starts_at_months" field.
func StartsAtMonthsIsNil() predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldIsNull(FieldStartsAtMonths))
}

// StartsAtMonthsNotNil applies the NotNil predicate on the "starts_at_months" field.
func StartsAtMonthsNotNil() predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldNotNull(FieldStartsAtMonths))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldContainsFold(FieldNotes, v))
}

// ArchivedEQ applies the EQ predicate on the "archived" field.
func ArchivedEQ(v bool) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldEQ(FieldArchived, v))
}

// ArchivedNEQ applies the NEQ predicate on the "archived" field.
func ArchivedNEQ(v bool) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.FieldNEQ(FieldArchived, v))
}

// HasCar applies the HasEdge predicate on the "car" edge.
func HasCar() predicate.ServiceSchedule {
	return predicate.ServiceSchedule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CarTable, CarColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarWith applies the HasEdge predicate on the "car" edge with a given conditions (other predicates).
func HasCarWith(preds ...predicate.Car) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(func(s *sql.Selector) {
		step := newCarStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasItems applies the HasEdge predicate on the "items" edge.
func HasItems() predicate.ServiceSchedule {
	return predicate.ServiceSchedule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ItemsTable, ItemsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemsWith applies the HasEdge predicate on the "items" edge with a given conditions (other predicates).
func HasItemsWith(preds ...predicate.ServiceItem) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(func(s *sql.Selector) {
		step := newItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLogs applies the HasEdge predicate on the "logs" edge.
func HasLogs() predicate.ServiceSchedule {
	return predicate.ServiceSchedule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, LogsTable, LogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLogsWith applies the HasEdge predicate on the "logs" edge with a given conditions (other predicates).
func HasLogsWith(preds ...predicate.ServiceLog) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(func(s *sql.Selector) {
		step := newLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ServiceSchedule) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ServiceSchedule) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ServiceSchedule) predicate.ServiceSchedule {
	return predicate.ServiceSchedule(sql.NotPredicates(p))
}
