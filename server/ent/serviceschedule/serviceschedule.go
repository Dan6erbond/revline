// Code generated by ent, DO NOT EDIT.

package serviceschedule

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the serviceschedule type in the database.
	Label = "service_schedule"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldRepeatEveryKm holds the string denoting the repeat_every_km field in the database.
	FieldRepeatEveryKm = "repeat_every_km"
	// FieldStartsAtKm holds the string denoting the starts_at_km field in the database.
	FieldStartsAtKm = "starts_at_km"
	// FieldRepeatEveryMonths holds the string denoting the repeat_every_months field in the database.
	FieldRepeatEveryMonths = "repeat_every_months"
	// FieldStartsAtMonths holds the string denoting the starts_at_months field in the database.
	FieldStartsAtMonths = "starts_at_months"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldArchived holds the string denoting the archived field in the database.
	FieldArchived = "archived"
	// EdgeCar holds the string denoting the car edge name in mutations.
	EdgeCar = "car"
	// EdgeItems holds the string denoting the items edge name in mutations.
	EdgeItems = "items"
	// EdgeLogs holds the string denoting the logs edge name in mutations.
	EdgeLogs = "logs"
	// Table holds the table name of the serviceschedule in the database.
	Table = "service_schedules"
	// CarTable is the table that holds the car relation/edge.
	CarTable = "service_schedules"
	// CarInverseTable is the table name for the Car entity.
	// It exists in this package in order to avoid circular dependency with the "car" package.
	CarInverseTable = "cars"
	// CarColumn is the table column denoting the car relation/edge.
	CarColumn = "car_service_schedules"
	// ItemsTable is the table that holds the items relation/edge. The primary key declared below.
	ItemsTable = "service_schedule_items"
	// ItemsInverseTable is the table name for the ServiceItem entity.
	// It exists in this package in order to avoid circular dependency with the "serviceitem" package.
	ItemsInverseTable = "service_items"
	// LogsTable is the table that holds the logs relation/edge.
	LogsTable = "service_logs"
	// LogsInverseTable is the table name for the ServiceLog entity.
	// It exists in this package in order to avoid circular dependency with the "servicelog" package.
	LogsInverseTable = "service_logs"
	// LogsColumn is the table column denoting the logs relation/edge.
	LogsColumn = "service_schedule_logs"
)

// Columns holds all SQL columns for serviceschedule fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldTitle,
	FieldRepeatEveryKm,
	FieldStartsAtKm,
	FieldRepeatEveryMonths,
	FieldStartsAtMonths,
	FieldNotes,
	FieldArchived,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "service_schedules"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"car_service_schedules",
}

var (
	// ItemsPrimaryKey and ItemsColumn2 are the table columns denoting the
	// primary key for the items relation (M2M).
	ItemsPrimaryKey = []string{"service_schedule_id", "service_item_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultArchived holds the default value on creation for the "archived" field.
	DefaultArchived bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ServiceSchedule queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByRepeatEveryKm orders the results by the repeat_every_km field.
func ByRepeatEveryKm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepeatEveryKm, opts...).ToFunc()
}

// ByStartsAtKm orders the results by the starts_at_km field.
func ByStartsAtKm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartsAtKm, opts...).ToFunc()
}

// ByRepeatEveryMonths orders the results by the repeat_every_months field.
func ByRepeatEveryMonths(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepeatEveryMonths, opts...).ToFunc()
}

// ByStartsAtMonths orders the results by the starts_at_months field.
func ByStartsAtMonths(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartsAtMonths, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByArchived orders the results by the archived field.
func ByArchived(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArchived, opts...).ToFunc()
}

// ByCarField orders the results by car field.
func ByCarField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarStep(), sql.OrderByField(field, opts...))
	}
}

// ByItemsCount orders the results by items count.
func ByItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newItemsStep(), opts...)
	}
}

// ByItems orders the results by items terms.
func ByItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLogsCount orders the results by logs count.
func ByLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLogsStep(), opts...)
	}
}

// ByLogs orders the results by logs terms.
func ByLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCarStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CarTable, CarColumn),
	)
}
func newItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ItemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ItemsTable, ItemsPrimaryKey...),
	)
}
func newLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LogsTable, LogsColumn),
	)
}
