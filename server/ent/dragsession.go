// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/dragsession"
	"github.com/google/uuid"
)

// DragSession is the model entity for the DragSession schema.
type DragSession struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes *string `json:"notes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DragSessionQuery when eager-loading is set.
	Edges             DragSessionEdges `json:"edges"`
	car_drag_sessions *uuid.UUID
	selectValues      sql.SelectValues
}

// DragSessionEdges holds the relations/edges for other nodes in the graph.
type DragSessionEdges struct {
	// Car holds the value of the car edge.
	Car *Car `json:"car,omitempty"`
	// Results holds the value of the results edge.
	Results []*DragResult `json:"results,omitempty"`
	// Documents holds the value of the documents edge.
	Documents []*Document `json:"documents,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedResults   map[string][]*DragResult
	namedDocuments map[string][]*Document
}

// CarOrErr returns the Car value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DragSessionEdges) CarOrErr() (*Car, error) {
	if e.Car != nil {
		return e.Car, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: car.Label}
	}
	return nil, &NotLoadedError{edge: "car"}
}

// ResultsOrErr returns the Results value or an error if the edge
// was not loaded in eager-loading.
func (e DragSessionEdges) ResultsOrErr() ([]*DragResult, error) {
	if e.loadedTypes[1] {
		return e.Results, nil
	}
	return nil, &NotLoadedError{edge: "results"}
}

// DocumentsOrErr returns the Documents value or an error if the edge
// was not loaded in eager-loading.
func (e DragSessionEdges) DocumentsOrErr() ([]*Document, error) {
	if e.loadedTypes[2] {
		return e.Documents, nil
	}
	return nil, &NotLoadedError{edge: "documents"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DragSession) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dragsession.FieldTitle, dragsession.FieldNotes:
			values[i] = new(sql.NullString)
		case dragsession.FieldCreateTime, dragsession.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case dragsession.FieldID:
			values[i] = new(uuid.UUID)
		case dragsession.ForeignKeys[0]: // car_drag_sessions
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DragSession fields.
func (ds *DragSession) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dragsession.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ds.ID = *value
			}
		case dragsession.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ds.CreateTime = value.Time
			}
		case dragsession.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ds.UpdateTime = value.Time
			}
		case dragsession.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ds.Title = value.String
			}
		case dragsession.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				ds.Notes = new(string)
				*ds.Notes = value.String
			}
		case dragsession.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field car_drag_sessions", values[i])
			} else if value.Valid {
				ds.car_drag_sessions = new(uuid.UUID)
				*ds.car_drag_sessions = *value.S.(*uuid.UUID)
			}
		default:
			ds.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DragSession.
// This includes values selected through modifiers, order, etc.
func (ds *DragSession) Value(name string) (ent.Value, error) {
	return ds.selectValues.Get(name)
}

// QueryCar queries the "car" edge of the DragSession entity.
func (ds *DragSession) QueryCar() *CarQuery {
	return NewDragSessionClient(ds.config).QueryCar(ds)
}

// QueryResults queries the "results" edge of the DragSession entity.
func (ds *DragSession) QueryResults() *DragResultQuery {
	return NewDragSessionClient(ds.config).QueryResults(ds)
}

// QueryDocuments queries the "documents" edge of the DragSession entity.
func (ds *DragSession) QueryDocuments() *DocumentQuery {
	return NewDragSessionClient(ds.config).QueryDocuments(ds)
}

// Update returns a builder for updating this DragSession.
// Note that you need to call DragSession.Unwrap() before calling this method if this DragSession
// was returned from a transaction, and the transaction was committed or rolled back.
func (ds *DragSession) Update() *DragSessionUpdateOne {
	return NewDragSessionClient(ds.config).UpdateOne(ds)
}

// Unwrap unwraps the DragSession entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ds *DragSession) Unwrap() *DragSession {
	_tx, ok := ds.config.driver.(*txDriver)
	if !ok {
		panic("ent: DragSession is not a transactional entity")
	}
	ds.config.driver = _tx.drv
	return ds
}

// String implements the fmt.Stringer.
func (ds *DragSession) String() string {
	var builder strings.Builder
	builder.WriteString("DragSession(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ds.ID))
	builder.WriteString("create_time=")
	builder.WriteString(ds.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ds.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(ds.Title)
	builder.WriteString(", ")
	if v := ds.Notes; v != nil {
		builder.WriteString("notes=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedResults returns the Results named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ds *DragSession) NamedResults(name string) ([]*DragResult, error) {
	if ds.Edges.namedResults == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ds.Edges.namedResults[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ds *DragSession) appendNamedResults(name string, edges ...*DragResult) {
	if ds.Edges.namedResults == nil {
		ds.Edges.namedResults = make(map[string][]*DragResult)
	}
	if len(edges) == 0 {
		ds.Edges.namedResults[name] = []*DragResult{}
	} else {
		ds.Edges.namedResults[name] = append(ds.Edges.namedResults[name], edges...)
	}
}

// NamedDocuments returns the Documents named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ds *DragSession) NamedDocuments(name string) ([]*Document, error) {
	if ds.Edges.namedDocuments == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ds.Edges.namedDocuments[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ds *DragSession) appendNamedDocuments(name string, edges ...*Document) {
	if ds.Edges.namedDocuments == nil {
		ds.Edges.namedDocuments = make(map[string][]*Document)
	}
	if len(edges) == 0 {
		ds.Edges.namedDocuments[name] = []*Document{}
	} else {
		ds.Edges.namedDocuments[name] = append(ds.Edges.namedDocuments[name], edges...)
	}
}

// DragSessions is a parsable slice of DragSession.
type DragSessions []*DragSession
