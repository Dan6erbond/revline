// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/Dan6erbond/revline/ent/serviceitem"
	"github.com/Dan6erbond/revline/ent/servicelog"
	"github.com/Dan6erbond/revline/ent/serviceschedule"
	"github.com/google/uuid"
)

// ServiceItemUpdate is the builder for updating ServiceItem entities.
type ServiceItemUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceItemMutation
}

// Where appends a list predicates to the ServiceItemUpdate builder.
func (siu *ServiceItemUpdate) Where(ps ...predicate.ServiceItem) *ServiceItemUpdate {
	siu.mutation.Where(ps...)
	return siu
}

// SetUpdateTime sets the "update_time" field.
func (siu *ServiceItemUpdate) SetUpdateTime(t time.Time) *ServiceItemUpdate {
	siu.mutation.SetUpdateTime(t)
	return siu
}

// SetLabel sets the "label" field.
func (siu *ServiceItemUpdate) SetLabel(s string) *ServiceItemUpdate {
	siu.mutation.SetLabel(s)
	return siu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (siu *ServiceItemUpdate) SetNillableLabel(s *string) *ServiceItemUpdate {
	if s != nil {
		siu.SetLabel(*s)
	}
	return siu
}

// SetEstimatedMinutes sets the "estimated_minutes" field.
func (siu *ServiceItemUpdate) SetEstimatedMinutes(i int) *ServiceItemUpdate {
	siu.mutation.ResetEstimatedMinutes()
	siu.mutation.SetEstimatedMinutes(i)
	return siu
}

// SetNillableEstimatedMinutes sets the "estimated_minutes" field if the given value is not nil.
func (siu *ServiceItemUpdate) SetNillableEstimatedMinutes(i *int) *ServiceItemUpdate {
	if i != nil {
		siu.SetEstimatedMinutes(*i)
	}
	return siu
}

// AddEstimatedMinutes adds i to the "estimated_minutes" field.
func (siu *ServiceItemUpdate) AddEstimatedMinutes(i int) *ServiceItemUpdate {
	siu.mutation.AddEstimatedMinutes(i)
	return siu
}

// ClearEstimatedMinutes clears the value of the "estimated_minutes" field.
func (siu *ServiceItemUpdate) ClearEstimatedMinutes() *ServiceItemUpdate {
	siu.mutation.ClearEstimatedMinutes()
	return siu
}

// SetDefaultIntervalKm sets the "default_interval_km" field.
func (siu *ServiceItemUpdate) SetDefaultIntervalKm(f float64) *ServiceItemUpdate {
	siu.mutation.ResetDefaultIntervalKm()
	siu.mutation.SetDefaultIntervalKm(f)
	return siu
}

// SetNillableDefaultIntervalKm sets the "default_interval_km" field if the given value is not nil.
func (siu *ServiceItemUpdate) SetNillableDefaultIntervalKm(f *float64) *ServiceItemUpdate {
	if f != nil {
		siu.SetDefaultIntervalKm(*f)
	}
	return siu
}

// AddDefaultIntervalKm adds f to the "default_interval_km" field.
func (siu *ServiceItemUpdate) AddDefaultIntervalKm(f float64) *ServiceItemUpdate {
	siu.mutation.AddDefaultIntervalKm(f)
	return siu
}

// ClearDefaultIntervalKm clears the value of the "default_interval_km" field.
func (siu *ServiceItemUpdate) ClearDefaultIntervalKm() *ServiceItemUpdate {
	siu.mutation.ClearDefaultIntervalKm()
	return siu
}

// SetDefaultIntervalMonths sets the "default_interval_months" field.
func (siu *ServiceItemUpdate) SetDefaultIntervalMonths(i int) *ServiceItemUpdate {
	siu.mutation.ResetDefaultIntervalMonths()
	siu.mutation.SetDefaultIntervalMonths(i)
	return siu
}

// SetNillableDefaultIntervalMonths sets the "default_interval_months" field if the given value is not nil.
func (siu *ServiceItemUpdate) SetNillableDefaultIntervalMonths(i *int) *ServiceItemUpdate {
	if i != nil {
		siu.SetDefaultIntervalMonths(*i)
	}
	return siu
}

// AddDefaultIntervalMonths adds i to the "default_interval_months" field.
func (siu *ServiceItemUpdate) AddDefaultIntervalMonths(i int) *ServiceItemUpdate {
	siu.mutation.AddDefaultIntervalMonths(i)
	return siu
}

// ClearDefaultIntervalMonths clears the value of the "default_interval_months" field.
func (siu *ServiceItemUpdate) ClearDefaultIntervalMonths() *ServiceItemUpdate {
	siu.mutation.ClearDefaultIntervalMonths()
	return siu
}

// SetNotes sets the "notes" field.
func (siu *ServiceItemUpdate) SetNotes(s string) *ServiceItemUpdate {
	siu.mutation.SetNotes(s)
	return siu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (siu *ServiceItemUpdate) SetNillableNotes(s *string) *ServiceItemUpdate {
	if s != nil {
		siu.SetNotes(*s)
	}
	return siu
}

// ClearNotes clears the value of the "notes" field.
func (siu *ServiceItemUpdate) ClearNotes() *ServiceItemUpdate {
	siu.mutation.ClearNotes()
	return siu
}

// SetTags sets the "tags" field.
func (siu *ServiceItemUpdate) SetTags(s []string) *ServiceItemUpdate {
	siu.mutation.SetTags(s)
	return siu
}

// AppendTags appends s to the "tags" field.
func (siu *ServiceItemUpdate) AppendTags(s []string) *ServiceItemUpdate {
	siu.mutation.AppendTags(s)
	return siu
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (siu *ServiceItemUpdate) SetCarID(id uuid.UUID) *ServiceItemUpdate {
	siu.mutation.SetCarID(id)
	return siu
}

// SetCar sets the "car" edge to the Car entity.
func (siu *ServiceItemUpdate) SetCar(c *Car) *ServiceItemUpdate {
	return siu.SetCarID(c.ID)
}

// AddScheduleIDs adds the "schedules" edge to the ServiceSchedule entity by IDs.
func (siu *ServiceItemUpdate) AddScheduleIDs(ids ...uuid.UUID) *ServiceItemUpdate {
	siu.mutation.AddScheduleIDs(ids...)
	return siu
}

// AddSchedules adds the "schedules" edges to the ServiceSchedule entity.
func (siu *ServiceItemUpdate) AddSchedules(s ...*ServiceSchedule) *ServiceItemUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siu.AddScheduleIDs(ids...)
}

// AddLogIDs adds the "logs" edge to the ServiceLog entity by IDs.
func (siu *ServiceItemUpdate) AddLogIDs(ids ...uuid.UUID) *ServiceItemUpdate {
	siu.mutation.AddLogIDs(ids...)
	return siu
}

// AddLogs adds the "logs" edges to the ServiceLog entity.
func (siu *ServiceItemUpdate) AddLogs(s ...*ServiceLog) *ServiceItemUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siu.AddLogIDs(ids...)
}

// Mutation returns the ServiceItemMutation object of the builder.
func (siu *ServiceItemUpdate) Mutation() *ServiceItemMutation {
	return siu.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (siu *ServiceItemUpdate) ClearCar() *ServiceItemUpdate {
	siu.mutation.ClearCar()
	return siu
}

// ClearSchedules clears all "schedules" edges to the ServiceSchedule entity.
func (siu *ServiceItemUpdate) ClearSchedules() *ServiceItemUpdate {
	siu.mutation.ClearSchedules()
	return siu
}

// RemoveScheduleIDs removes the "schedules" edge to ServiceSchedule entities by IDs.
func (siu *ServiceItemUpdate) RemoveScheduleIDs(ids ...uuid.UUID) *ServiceItemUpdate {
	siu.mutation.RemoveScheduleIDs(ids...)
	return siu
}

// RemoveSchedules removes "schedules" edges to ServiceSchedule entities.
func (siu *ServiceItemUpdate) RemoveSchedules(s ...*ServiceSchedule) *ServiceItemUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siu.RemoveScheduleIDs(ids...)
}

// ClearLogs clears all "logs" edges to the ServiceLog entity.
func (siu *ServiceItemUpdate) ClearLogs() *ServiceItemUpdate {
	siu.mutation.ClearLogs()
	return siu
}

// RemoveLogIDs removes the "logs" edge to ServiceLog entities by IDs.
func (siu *ServiceItemUpdate) RemoveLogIDs(ids ...uuid.UUID) *ServiceItemUpdate {
	siu.mutation.RemoveLogIDs(ids...)
	return siu
}

// RemoveLogs removes "logs" edges to ServiceLog entities.
func (siu *ServiceItemUpdate) RemoveLogs(s ...*ServiceLog) *ServiceItemUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siu.RemoveLogIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (siu *ServiceItemUpdate) Save(ctx context.Context) (int, error) {
	siu.defaults()
	return withHooks(ctx, siu.sqlSave, siu.mutation, siu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (siu *ServiceItemUpdate) SaveX(ctx context.Context) int {
	affected, err := siu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (siu *ServiceItemUpdate) Exec(ctx context.Context) error {
	_, err := siu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siu *ServiceItemUpdate) ExecX(ctx context.Context) {
	if err := siu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (siu *ServiceItemUpdate) defaults() {
	if _, ok := siu.mutation.UpdateTime(); !ok {
		v := serviceitem.UpdateDefaultUpdateTime()
		siu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (siu *ServiceItemUpdate) check() error {
	if siu.mutation.CarCleared() && len(siu.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ServiceItem.car"`)
	}
	return nil
}

func (siu *ServiceItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := siu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(serviceitem.Table, serviceitem.Columns, sqlgraph.NewFieldSpec(serviceitem.FieldID, field.TypeUUID))
	if ps := siu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siu.mutation.UpdateTime(); ok {
		_spec.SetField(serviceitem.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := siu.mutation.Label(); ok {
		_spec.SetField(serviceitem.FieldLabel, field.TypeString, value)
	}
	if value, ok := siu.mutation.EstimatedMinutes(); ok {
		_spec.SetField(serviceitem.FieldEstimatedMinutes, field.TypeInt, value)
	}
	if value, ok := siu.mutation.AddedEstimatedMinutes(); ok {
		_spec.AddField(serviceitem.FieldEstimatedMinutes, field.TypeInt, value)
	}
	if siu.mutation.EstimatedMinutesCleared() {
		_spec.ClearField(serviceitem.FieldEstimatedMinutes, field.TypeInt)
	}
	if value, ok := siu.mutation.DefaultIntervalKm(); ok {
		_spec.SetField(serviceitem.FieldDefaultIntervalKm, field.TypeFloat64, value)
	}
	if value, ok := siu.mutation.AddedDefaultIntervalKm(); ok {
		_spec.AddField(serviceitem.FieldDefaultIntervalKm, field.TypeFloat64, value)
	}
	if siu.mutation.DefaultIntervalKmCleared() {
		_spec.ClearField(serviceitem.FieldDefaultIntervalKm, field.TypeFloat64)
	}
	if value, ok := siu.mutation.DefaultIntervalMonths(); ok {
		_spec.SetField(serviceitem.FieldDefaultIntervalMonths, field.TypeInt, value)
	}
	if value, ok := siu.mutation.AddedDefaultIntervalMonths(); ok {
		_spec.AddField(serviceitem.FieldDefaultIntervalMonths, field.TypeInt, value)
	}
	if siu.mutation.DefaultIntervalMonthsCleared() {
		_spec.ClearField(serviceitem.FieldDefaultIntervalMonths, field.TypeInt)
	}
	if value, ok := siu.mutation.Notes(); ok {
		_spec.SetField(serviceitem.FieldNotes, field.TypeString, value)
	}
	if siu.mutation.NotesCleared() {
		_spec.ClearField(serviceitem.FieldNotes, field.TypeString)
	}
	if value, ok := siu.mutation.Tags(); ok {
		_spec.SetField(serviceitem.FieldTags, field.TypeJSON, value)
	}
	if value, ok := siu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, serviceitem.FieldTags, value)
		})
	}
	if siu.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceitem.CarTable,
			Columns: []string{serviceitem.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceitem.CarTable,
			Columns: []string{serviceitem.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.SchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   serviceitem.SchedulesTable,
			Columns: serviceitem.SchedulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceschedule.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedSchedulesIDs(); len(nodes) > 0 && !siu.mutation.SchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   serviceitem.SchedulesTable,
			Columns: serviceitem.SchedulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceschedule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.SchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   serviceitem.SchedulesTable,
			Columns: serviceitem.SchedulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceschedule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siu.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   serviceitem.LogsTable,
			Columns: serviceitem.LogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.RemovedLogsIDs(); len(nodes) > 0 && !siu.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   serviceitem.LogsTable,
			Columns: serviceitem.LogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siu.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   serviceitem.LogsTable,
			Columns: serviceitem.LogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, siu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	siu.mutation.done = true
	return n, nil
}

// ServiceItemUpdateOne is the builder for updating a single ServiceItem entity.
type ServiceItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceItemMutation
}

// SetUpdateTime sets the "update_time" field.
func (siuo *ServiceItemUpdateOne) SetUpdateTime(t time.Time) *ServiceItemUpdateOne {
	siuo.mutation.SetUpdateTime(t)
	return siuo
}

// SetLabel sets the "label" field.
func (siuo *ServiceItemUpdateOne) SetLabel(s string) *ServiceItemUpdateOne {
	siuo.mutation.SetLabel(s)
	return siuo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (siuo *ServiceItemUpdateOne) SetNillableLabel(s *string) *ServiceItemUpdateOne {
	if s != nil {
		siuo.SetLabel(*s)
	}
	return siuo
}

// SetEstimatedMinutes sets the "estimated_minutes" field.
func (siuo *ServiceItemUpdateOne) SetEstimatedMinutes(i int) *ServiceItemUpdateOne {
	siuo.mutation.ResetEstimatedMinutes()
	siuo.mutation.SetEstimatedMinutes(i)
	return siuo
}

// SetNillableEstimatedMinutes sets the "estimated_minutes" field if the given value is not nil.
func (siuo *ServiceItemUpdateOne) SetNillableEstimatedMinutes(i *int) *ServiceItemUpdateOne {
	if i != nil {
		siuo.SetEstimatedMinutes(*i)
	}
	return siuo
}

// AddEstimatedMinutes adds i to the "estimated_minutes" field.
func (siuo *ServiceItemUpdateOne) AddEstimatedMinutes(i int) *ServiceItemUpdateOne {
	siuo.mutation.AddEstimatedMinutes(i)
	return siuo
}

// ClearEstimatedMinutes clears the value of the "estimated_minutes" field.
func (siuo *ServiceItemUpdateOne) ClearEstimatedMinutes() *ServiceItemUpdateOne {
	siuo.mutation.ClearEstimatedMinutes()
	return siuo
}

// SetDefaultIntervalKm sets the "default_interval_km" field.
func (siuo *ServiceItemUpdateOne) SetDefaultIntervalKm(f float64) *ServiceItemUpdateOne {
	siuo.mutation.ResetDefaultIntervalKm()
	siuo.mutation.SetDefaultIntervalKm(f)
	return siuo
}

// SetNillableDefaultIntervalKm sets the "default_interval_km" field if the given value is not nil.
func (siuo *ServiceItemUpdateOne) SetNillableDefaultIntervalKm(f *float64) *ServiceItemUpdateOne {
	if f != nil {
		siuo.SetDefaultIntervalKm(*f)
	}
	return siuo
}

// AddDefaultIntervalKm adds f to the "default_interval_km" field.
func (siuo *ServiceItemUpdateOne) AddDefaultIntervalKm(f float64) *ServiceItemUpdateOne {
	siuo.mutation.AddDefaultIntervalKm(f)
	return siuo
}

// ClearDefaultIntervalKm clears the value of the "default_interval_km" field.
func (siuo *ServiceItemUpdateOne) ClearDefaultIntervalKm() *ServiceItemUpdateOne {
	siuo.mutation.ClearDefaultIntervalKm()
	return siuo
}

// SetDefaultIntervalMonths sets the "default_interval_months" field.
func (siuo *ServiceItemUpdateOne) SetDefaultIntervalMonths(i int) *ServiceItemUpdateOne {
	siuo.mutation.ResetDefaultIntervalMonths()
	siuo.mutation.SetDefaultIntervalMonths(i)
	return siuo
}

// SetNillableDefaultIntervalMonths sets the "default_interval_months" field if the given value is not nil.
func (siuo *ServiceItemUpdateOne) SetNillableDefaultIntervalMonths(i *int) *ServiceItemUpdateOne {
	if i != nil {
		siuo.SetDefaultIntervalMonths(*i)
	}
	return siuo
}

// AddDefaultIntervalMonths adds i to the "default_interval_months" field.
func (siuo *ServiceItemUpdateOne) AddDefaultIntervalMonths(i int) *ServiceItemUpdateOne {
	siuo.mutation.AddDefaultIntervalMonths(i)
	return siuo
}

// ClearDefaultIntervalMonths clears the value of the "default_interval_months" field.
func (siuo *ServiceItemUpdateOne) ClearDefaultIntervalMonths() *ServiceItemUpdateOne {
	siuo.mutation.ClearDefaultIntervalMonths()
	return siuo
}

// SetNotes sets the "notes" field.
func (siuo *ServiceItemUpdateOne) SetNotes(s string) *ServiceItemUpdateOne {
	siuo.mutation.SetNotes(s)
	return siuo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (siuo *ServiceItemUpdateOne) SetNillableNotes(s *string) *ServiceItemUpdateOne {
	if s != nil {
		siuo.SetNotes(*s)
	}
	return siuo
}

// ClearNotes clears the value of the "notes" field.
func (siuo *ServiceItemUpdateOne) ClearNotes() *ServiceItemUpdateOne {
	siuo.mutation.ClearNotes()
	return siuo
}

// SetTags sets the "tags" field.
func (siuo *ServiceItemUpdateOne) SetTags(s []string) *ServiceItemUpdateOne {
	siuo.mutation.SetTags(s)
	return siuo
}

// AppendTags appends s to the "tags" field.
func (siuo *ServiceItemUpdateOne) AppendTags(s []string) *ServiceItemUpdateOne {
	siuo.mutation.AppendTags(s)
	return siuo
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (siuo *ServiceItemUpdateOne) SetCarID(id uuid.UUID) *ServiceItemUpdateOne {
	siuo.mutation.SetCarID(id)
	return siuo
}

// SetCar sets the "car" edge to the Car entity.
func (siuo *ServiceItemUpdateOne) SetCar(c *Car) *ServiceItemUpdateOne {
	return siuo.SetCarID(c.ID)
}

// AddScheduleIDs adds the "schedules" edge to the ServiceSchedule entity by IDs.
func (siuo *ServiceItemUpdateOne) AddScheduleIDs(ids ...uuid.UUID) *ServiceItemUpdateOne {
	siuo.mutation.AddScheduleIDs(ids...)
	return siuo
}

// AddSchedules adds the "schedules" edges to the ServiceSchedule entity.
func (siuo *ServiceItemUpdateOne) AddSchedules(s ...*ServiceSchedule) *ServiceItemUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siuo.AddScheduleIDs(ids...)
}

// AddLogIDs adds the "logs" edge to the ServiceLog entity by IDs.
func (siuo *ServiceItemUpdateOne) AddLogIDs(ids ...uuid.UUID) *ServiceItemUpdateOne {
	siuo.mutation.AddLogIDs(ids...)
	return siuo
}

// AddLogs adds the "logs" edges to the ServiceLog entity.
func (siuo *ServiceItemUpdateOne) AddLogs(s ...*ServiceLog) *ServiceItemUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siuo.AddLogIDs(ids...)
}

// Mutation returns the ServiceItemMutation object of the builder.
func (siuo *ServiceItemUpdateOne) Mutation() *ServiceItemMutation {
	return siuo.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (siuo *ServiceItemUpdateOne) ClearCar() *ServiceItemUpdateOne {
	siuo.mutation.ClearCar()
	return siuo
}

// ClearSchedules clears all "schedules" edges to the ServiceSchedule entity.
func (siuo *ServiceItemUpdateOne) ClearSchedules() *ServiceItemUpdateOne {
	siuo.mutation.ClearSchedules()
	return siuo
}

// RemoveScheduleIDs removes the "schedules" edge to ServiceSchedule entities by IDs.
func (siuo *ServiceItemUpdateOne) RemoveScheduleIDs(ids ...uuid.UUID) *ServiceItemUpdateOne {
	siuo.mutation.RemoveScheduleIDs(ids...)
	return siuo
}

// RemoveSchedules removes "schedules" edges to ServiceSchedule entities.
func (siuo *ServiceItemUpdateOne) RemoveSchedules(s ...*ServiceSchedule) *ServiceItemUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siuo.RemoveScheduleIDs(ids...)
}

// ClearLogs clears all "logs" edges to the ServiceLog entity.
func (siuo *ServiceItemUpdateOne) ClearLogs() *ServiceItemUpdateOne {
	siuo.mutation.ClearLogs()
	return siuo
}

// RemoveLogIDs removes the "logs" edge to ServiceLog entities by IDs.
func (siuo *ServiceItemUpdateOne) RemoveLogIDs(ids ...uuid.UUID) *ServiceItemUpdateOne {
	siuo.mutation.RemoveLogIDs(ids...)
	return siuo
}

// RemoveLogs removes "logs" edges to ServiceLog entities.
func (siuo *ServiceItemUpdateOne) RemoveLogs(s ...*ServiceLog) *ServiceItemUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return siuo.RemoveLogIDs(ids...)
}

// Where appends a list predicates to the ServiceItemUpdate builder.
func (siuo *ServiceItemUpdateOne) Where(ps ...predicate.ServiceItem) *ServiceItemUpdateOne {
	siuo.mutation.Where(ps...)
	return siuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (siuo *ServiceItemUpdateOne) Select(field string, fields ...string) *ServiceItemUpdateOne {
	siuo.fields = append([]string{field}, fields...)
	return siuo
}

// Save executes the query and returns the updated ServiceItem entity.
func (siuo *ServiceItemUpdateOne) Save(ctx context.Context) (*ServiceItem, error) {
	siuo.defaults()
	return withHooks(ctx, siuo.sqlSave, siuo.mutation, siuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (siuo *ServiceItemUpdateOne) SaveX(ctx context.Context) *ServiceItem {
	node, err := siuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (siuo *ServiceItemUpdateOne) Exec(ctx context.Context) error {
	_, err := siuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (siuo *ServiceItemUpdateOne) ExecX(ctx context.Context) {
	if err := siuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (siuo *ServiceItemUpdateOne) defaults() {
	if _, ok := siuo.mutation.UpdateTime(); !ok {
		v := serviceitem.UpdateDefaultUpdateTime()
		siuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (siuo *ServiceItemUpdateOne) check() error {
	if siuo.mutation.CarCleared() && len(siuo.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ServiceItem.car"`)
	}
	return nil
}

func (siuo *ServiceItemUpdateOne) sqlSave(ctx context.Context) (_node *ServiceItem, err error) {
	if err := siuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(serviceitem.Table, serviceitem.Columns, sqlgraph.NewFieldSpec(serviceitem.FieldID, field.TypeUUID))
	id, ok := siuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ServiceItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := siuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serviceitem.FieldID)
		for _, f := range fields {
			if !serviceitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != serviceitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := siuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := siuo.mutation.UpdateTime(); ok {
		_spec.SetField(serviceitem.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := siuo.mutation.Label(); ok {
		_spec.SetField(serviceitem.FieldLabel, field.TypeString, value)
	}
	if value, ok := siuo.mutation.EstimatedMinutes(); ok {
		_spec.SetField(serviceitem.FieldEstimatedMinutes, field.TypeInt, value)
	}
	if value, ok := siuo.mutation.AddedEstimatedMinutes(); ok {
		_spec.AddField(serviceitem.FieldEstimatedMinutes, field.TypeInt, value)
	}
	if siuo.mutation.EstimatedMinutesCleared() {
		_spec.ClearField(serviceitem.FieldEstimatedMinutes, field.TypeInt)
	}
	if value, ok := siuo.mutation.DefaultIntervalKm(); ok {
		_spec.SetField(serviceitem.FieldDefaultIntervalKm, field.TypeFloat64, value)
	}
	if value, ok := siuo.mutation.AddedDefaultIntervalKm(); ok {
		_spec.AddField(serviceitem.FieldDefaultIntervalKm, field.TypeFloat64, value)
	}
	if siuo.mutation.DefaultIntervalKmCleared() {
		_spec.ClearField(serviceitem.FieldDefaultIntervalKm, field.TypeFloat64)
	}
	if value, ok := siuo.mutation.DefaultIntervalMonths(); ok {
		_spec.SetField(serviceitem.FieldDefaultIntervalMonths, field.TypeInt, value)
	}
	if value, ok := siuo.mutation.AddedDefaultIntervalMonths(); ok {
		_spec.AddField(serviceitem.FieldDefaultIntervalMonths, field.TypeInt, value)
	}
	if siuo.mutation.DefaultIntervalMonthsCleared() {
		_spec.ClearField(serviceitem.FieldDefaultIntervalMonths, field.TypeInt)
	}
	if value, ok := siuo.mutation.Notes(); ok {
		_spec.SetField(serviceitem.FieldNotes, field.TypeString, value)
	}
	if siuo.mutation.NotesCleared() {
		_spec.ClearField(serviceitem.FieldNotes, field.TypeString)
	}
	if value, ok := siuo.mutation.Tags(); ok {
		_spec.SetField(serviceitem.FieldTags, field.TypeJSON, value)
	}
	if value, ok := siuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, serviceitem.FieldTags, value)
		})
	}
	if siuo.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceitem.CarTable,
			Columns: []string{serviceitem.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceitem.CarTable,
			Columns: []string{serviceitem.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.SchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   serviceitem.SchedulesTable,
			Columns: serviceitem.SchedulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceschedule.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedSchedulesIDs(); len(nodes) > 0 && !siuo.mutation.SchedulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   serviceitem.SchedulesTable,
			Columns: serviceitem.SchedulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceschedule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.SchedulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   serviceitem.SchedulesTable,
			Columns: serviceitem.SchedulesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceschedule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if siuo.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   serviceitem.LogsTable,
			Columns: serviceitem.LogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.RemovedLogsIDs(); len(nodes) > 0 && !siuo.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   serviceitem.LogsTable,
			Columns: serviceitem.LogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := siuo.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   serviceitem.LogsTable,
			Columns: serviceitem.LogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServiceItem{config: siuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, siuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	siuo.mutation.done = true
	return _node, nil
}
