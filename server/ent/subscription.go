// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Dan6erbond/revline/ent/checkoutsession"
	"github.com/Dan6erbond/revline/ent/subscription"
	"github.com/Dan6erbond/revline/ent/user"
	"github.com/google/uuid"
)

// Subscription is the model entity for the Subscription schema.
type Subscription struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StripeSubscriptionID holds the value of the "stripe_subscription_id" field.
	StripeSubscriptionID *string `json:"stripe_subscription_id,omitempty"`
	// Tier holds the value of the "tier" field.
	Tier subscription.Tier `json:"tier,omitempty"`
	// Status holds the value of the "status" field.
	Status subscription.Status `json:"status,omitempty"`
	// CanceledAt holds the value of the "canceled_at" field.
	CanceledAt *time.Time `json:"canceled_at,omitempty"`
	// CancelAtPeriodEnd holds the value of the "cancel_at_period_end" field.
	CancelAtPeriodEnd bool `json:"cancel_at_period_end,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscriptionQuery when eager-loading is set.
	Edges                         SubscriptionEdges `json:"edges"`
	checkout_session_subscription *uuid.UUID
	user_subscriptions            *uuid.UUID
	selectValues                  sql.SelectValues
}

// SubscriptionEdges holds the relations/edges for other nodes in the graph.
type SubscriptionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// CheckoutSession holds the value of the checkout_session edge.
	CheckoutSession *CheckoutSession `json:"checkout_session,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscriptionEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CheckoutSessionOrErr returns the CheckoutSession value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscriptionEdges) CheckoutSessionOrErr() (*CheckoutSession, error) {
	if e.CheckoutSession != nil {
		return e.CheckoutSession, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: checkoutsession.Label}
	}
	return nil, &NotLoadedError{edge: "checkout_session"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Subscription) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscription.FieldCancelAtPeriodEnd:
			values[i] = new(sql.NullBool)
		case subscription.FieldStripeSubscriptionID, subscription.FieldTier, subscription.FieldStatus:
			values[i] = new(sql.NullString)
		case subscription.FieldCreateTime, subscription.FieldUpdateTime, subscription.FieldCanceledAt:
			values[i] = new(sql.NullTime)
		case subscription.FieldID:
			values[i] = new(uuid.UUID)
		case subscription.ForeignKeys[0]: // checkout_session_subscription
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case subscription.ForeignKeys[1]: // user_subscriptions
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Subscription fields.
func (s *Subscription) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscription.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case subscription.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				s.CreateTime = value.Time
			}
		case subscription.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				s.UpdateTime = value.Time
			}
		case subscription.FieldStripeSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_subscription_id", values[i])
			} else if value.Valid {
				s.StripeSubscriptionID = new(string)
				*s.StripeSubscriptionID = value.String
			}
		case subscription.FieldTier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tier", values[i])
			} else if value.Valid {
				s.Tier = subscription.Tier(value.String)
			}
		case subscription.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = subscription.Status(value.String)
			}
		case subscription.FieldCanceledAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field canceled_at", values[i])
			} else if value.Valid {
				s.CanceledAt = new(time.Time)
				*s.CanceledAt = value.Time
			}
		case subscription.FieldCancelAtPeriodEnd:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field cancel_at_period_end", values[i])
			} else if value.Valid {
				s.CancelAtPeriodEnd = value.Bool
			}
		case subscription.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field checkout_session_subscription", values[i])
			} else if value.Valid {
				s.checkout_session_subscription = new(uuid.UUID)
				*s.checkout_session_subscription = *value.S.(*uuid.UUID)
			}
		case subscription.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_subscriptions", values[i])
			} else if value.Valid {
				s.user_subscriptions = new(uuid.UUID)
				*s.user_subscriptions = *value.S.(*uuid.UUID)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Subscription.
// This includes values selected through modifiers, order, etc.
func (s *Subscription) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Subscription entity.
func (s *Subscription) QueryUser() *UserQuery {
	return NewSubscriptionClient(s.config).QueryUser(s)
}

// QueryCheckoutSession queries the "checkout_session" edge of the Subscription entity.
func (s *Subscription) QueryCheckoutSession() *CheckoutSessionQuery {
	return NewSubscriptionClient(s.config).QueryCheckoutSession(s)
}

// Update returns a builder for updating this Subscription.
// Note that you need to call Subscription.Unwrap() before calling this method if this Subscription
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Subscription) Update() *SubscriptionUpdateOne {
	return NewSubscriptionClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Subscription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Subscription) Unwrap() *Subscription {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Subscription is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Subscription) String() string {
	var builder strings.Builder
	builder.WriteString("Subscription(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("create_time=")
	builder.WriteString(s.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(s.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := s.StripeSubscriptionID; v != nil {
		builder.WriteString("stripe_subscription_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("tier=")
	builder.WriteString(fmt.Sprintf("%v", s.Tier))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", s.Status))
	builder.WriteString(", ")
	if v := s.CanceledAt; v != nil {
		builder.WriteString("canceled_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("cancel_at_period_end=")
	builder.WriteString(fmt.Sprintf("%v", s.CancelAtPeriodEnd))
	builder.WriteByte(')')
	return builder.String()
}

// Subscriptions is a parsable slice of Subscription.
type Subscriptions []*Subscription
