// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Dan6erbond/revline/ent/user"
	"github.com/Dan6erbond/revline/ent/usersettings"
	"github.com/google/uuid"
)

// UserSettings is the model entity for the UserSettings schema.
type UserSettings struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// CurrencyCode holds the value of the "currency_code" field.
	CurrencyCode *string `json:"currency_code,omitempty"`
	// FuelVolumeUnit holds the value of the "fuel_volume_unit" field.
	FuelVolumeUnit *usersettings.FuelVolumeUnit `json:"fuel_volume_unit,omitempty"`
	// DistanceUnit holds the value of the "distance_unit" field.
	DistanceUnit *usersettings.DistanceUnit `json:"distance_unit,omitempty"`
	// FuelConsumptionUnit holds the value of the "fuel_consumption_unit" field.
	FuelConsumptionUnit *usersettings.FuelConsumptionUnit `json:"fuel_consumption_unit,omitempty"`
	// TemperatureUnit holds the value of the "temperature_unit" field.
	TemperatureUnit *usersettings.TemperatureUnit `json:"temperature_unit,omitempty"`
	// PowerUnit holds the value of the "power_unit" field.
	PowerUnit *usersettings.PowerUnit `json:"power_unit,omitempty"`
	// TorqueUnit holds the value of the "torque_unit" field.
	TorqueUnit *usersettings.TorqueUnit `json:"torque_unit,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserSettingsQuery when eager-loading is set.
	Edges         UserSettingsEdges `json:"edges"`
	user_settings *uuid.UUID
	selectValues  sql.SelectValues
}

// UserSettingsEdges holds the relations/edges for other nodes in the graph.
type UserSettingsEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserSettingsEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserSettings) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usersettings.FieldCurrencyCode, usersettings.FieldFuelVolumeUnit, usersettings.FieldDistanceUnit, usersettings.FieldFuelConsumptionUnit, usersettings.FieldTemperatureUnit, usersettings.FieldPowerUnit, usersettings.FieldTorqueUnit:
			values[i] = new(sql.NullString)
		case usersettings.FieldCreateTime, usersettings.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case usersettings.FieldID:
			values[i] = new(uuid.UUID)
		case usersettings.ForeignKeys[0]: // user_settings
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserSettings fields.
func (us *UserSettings) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usersettings.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				us.ID = *value
			}
		case usersettings.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				us.CreateTime = value.Time
			}
		case usersettings.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				us.UpdateTime = value.Time
			}
		case usersettings.FieldCurrencyCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field currency_code", values[i])
			} else if value.Valid {
				us.CurrencyCode = new(string)
				*us.CurrencyCode = value.String
			}
		case usersettings.FieldFuelVolumeUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fuel_volume_unit", values[i])
			} else if value.Valid {
				us.FuelVolumeUnit = new(usersettings.FuelVolumeUnit)
				*us.FuelVolumeUnit = usersettings.FuelVolumeUnit(value.String)
			}
		case usersettings.FieldDistanceUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field distance_unit", values[i])
			} else if value.Valid {
				us.DistanceUnit = new(usersettings.DistanceUnit)
				*us.DistanceUnit = usersettings.DistanceUnit(value.String)
			}
		case usersettings.FieldFuelConsumptionUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fuel_consumption_unit", values[i])
			} else if value.Valid {
				us.FuelConsumptionUnit = new(usersettings.FuelConsumptionUnit)
				*us.FuelConsumptionUnit = usersettings.FuelConsumptionUnit(value.String)
			}
		case usersettings.FieldTemperatureUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field temperature_unit", values[i])
			} else if value.Valid {
				us.TemperatureUnit = new(usersettings.TemperatureUnit)
				*us.TemperatureUnit = usersettings.TemperatureUnit(value.String)
			}
		case usersettings.FieldPowerUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field power_unit", values[i])
			} else if value.Valid {
				us.PowerUnit = new(usersettings.PowerUnit)
				*us.PowerUnit = usersettings.PowerUnit(value.String)
			}
		case usersettings.FieldTorqueUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field torque_unit", values[i])
			} else if value.Valid {
				us.TorqueUnit = new(usersettings.TorqueUnit)
				*us.TorqueUnit = usersettings.TorqueUnit(value.String)
			}
		case usersettings.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_settings", values[i])
			} else if value.Valid {
				us.user_settings = new(uuid.UUID)
				*us.user_settings = *value.S.(*uuid.UUID)
			}
		default:
			us.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserSettings.
// This includes values selected through modifiers, order, etc.
func (us *UserSettings) Value(name string) (ent.Value, error) {
	return us.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserSettings entity.
func (us *UserSettings) QueryUser() *UserQuery {
	return NewUserSettingsClient(us.config).QueryUser(us)
}

// Update returns a builder for updating this UserSettings.
// Note that you need to call UserSettings.Unwrap() before calling this method if this UserSettings
// was returned from a transaction, and the transaction was committed or rolled back.
func (us *UserSettings) Update() *UserSettingsUpdateOne {
	return NewUserSettingsClient(us.config).UpdateOne(us)
}

// Unwrap unwraps the UserSettings entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (us *UserSettings) Unwrap() *UserSettings {
	_tx, ok := us.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserSettings is not a transactional entity")
	}
	us.config.driver = _tx.drv
	return us
}

// String implements the fmt.Stringer.
func (us *UserSettings) String() string {
	var builder strings.Builder
	builder.WriteString("UserSettings(")
	builder.WriteString(fmt.Sprintf("id=%v, ", us.ID))
	builder.WriteString("create_time=")
	builder.WriteString(us.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(us.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := us.CurrencyCode; v != nil {
		builder.WriteString("currency_code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := us.FuelVolumeUnit; v != nil {
		builder.WriteString("fuel_volume_unit=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := us.DistanceUnit; v != nil {
		builder.WriteString("distance_unit=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := us.FuelConsumptionUnit; v != nil {
		builder.WriteString("fuel_consumption_unit=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := us.TemperatureUnit; v != nil {
		builder.WriteString("temperature_unit=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := us.PowerUnit; v != nil {
		builder.WriteString("power_unit=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := us.TorqueUnit; v != nil {
		builder.WriteString("torque_unit=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// UserSettingsSlice is a parsable slice of UserSettings.
type UserSettingsSlice []*UserSettings
