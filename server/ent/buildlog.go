// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Dan6erbond/revline/ent/buildlog"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/google/uuid"
)

// BuildLog is the model entity for the BuildLog schema.
type BuildLog struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes map[string]interface{} `json:"notes,omitempty"`
	// LogTime holds the value of the "log_time" field.
	LogTime time.Time `json:"log_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BuildLogQuery when eager-loading is set.
	Edges          BuildLogEdges `json:"edges"`
	car_build_logs *uuid.UUID
	selectValues   sql.SelectValues
}

// BuildLogEdges holds the relations/edges for other nodes in the graph.
type BuildLogEdges struct {
	// Car holds the value of the car edge.
	Car *Car `json:"car,omitempty"`
	// Mods holds the value of the mods edge.
	Mods []*Mod `json:"mods,omitempty"`
	// Media holds the value of the media edge.
	Media []*Media `json:"media,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedMods  map[string][]*Mod
	namedMedia map[string][]*Media
}

// CarOrErr returns the Car value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BuildLogEdges) CarOrErr() (*Car, error) {
	if e.Car != nil {
		return e.Car, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: car.Label}
	}
	return nil, &NotLoadedError{edge: "car"}
}

// ModsOrErr returns the Mods value or an error if the edge
// was not loaded in eager-loading.
func (e BuildLogEdges) ModsOrErr() ([]*Mod, error) {
	if e.loadedTypes[1] {
		return e.Mods, nil
	}
	return nil, &NotLoadedError{edge: "mods"}
}

// MediaOrErr returns the Media value or an error if the edge
// was not loaded in eager-loading.
func (e BuildLogEdges) MediaOrErr() ([]*Media, error) {
	if e.loadedTypes[2] {
		return e.Media, nil
	}
	return nil, &NotLoadedError{edge: "media"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BuildLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case buildlog.FieldNotes:
			values[i] = new([]byte)
		case buildlog.FieldTitle:
			values[i] = new(sql.NullString)
		case buildlog.FieldCreateTime, buildlog.FieldUpdateTime, buildlog.FieldLogTime:
			values[i] = new(sql.NullTime)
		case buildlog.FieldID:
			values[i] = new(uuid.UUID)
		case buildlog.ForeignKeys[0]: // car_build_logs
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BuildLog fields.
func (bl *BuildLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case buildlog.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				bl.ID = *value
			}
		case buildlog.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				bl.CreateTime = value.Time
			}
		case buildlog.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				bl.UpdateTime = value.Time
			}
		case buildlog.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				bl.Title = value.String
			}
		case buildlog.FieldNotes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &bl.Notes); err != nil {
					return fmt.Errorf("unmarshal field notes: %w", err)
				}
			}
		case buildlog.FieldLogTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field log_time", values[i])
			} else if value.Valid {
				bl.LogTime = value.Time
			}
		case buildlog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field car_build_logs", values[i])
			} else if value.Valid {
				bl.car_build_logs = new(uuid.UUID)
				*bl.car_build_logs = *value.S.(*uuid.UUID)
			}
		default:
			bl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BuildLog.
// This includes values selected through modifiers, order, etc.
func (bl *BuildLog) Value(name string) (ent.Value, error) {
	return bl.selectValues.Get(name)
}

// QueryCar queries the "car" edge of the BuildLog entity.
func (bl *BuildLog) QueryCar() *CarQuery {
	return NewBuildLogClient(bl.config).QueryCar(bl)
}

// QueryMods queries the "mods" edge of the BuildLog entity.
func (bl *BuildLog) QueryMods() *ModQuery {
	return NewBuildLogClient(bl.config).QueryMods(bl)
}

// QueryMedia queries the "media" edge of the BuildLog entity.
func (bl *BuildLog) QueryMedia() *MediaQuery {
	return NewBuildLogClient(bl.config).QueryMedia(bl)
}

// Update returns a builder for updating this BuildLog.
// Note that you need to call BuildLog.Unwrap() before calling this method if this BuildLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (bl *BuildLog) Update() *BuildLogUpdateOne {
	return NewBuildLogClient(bl.config).UpdateOne(bl)
}

// Unwrap unwraps the BuildLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bl *BuildLog) Unwrap() *BuildLog {
	_tx, ok := bl.config.driver.(*txDriver)
	if !ok {
		panic("ent: BuildLog is not a transactional entity")
	}
	bl.config.driver = _tx.drv
	return bl
}

// String implements the fmt.Stringer.
func (bl *BuildLog) String() string {
	var builder strings.Builder
	builder.WriteString("BuildLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bl.ID))
	builder.WriteString("create_time=")
	builder.WriteString(bl.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(bl.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(bl.Title)
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(fmt.Sprintf("%v", bl.Notes))
	builder.WriteString(", ")
	builder.WriteString("log_time=")
	builder.WriteString(bl.LogTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedMods returns the Mods named value or an error if the edge was not
// loaded in eager-loading with this name.
func (bl *BuildLog) NamedMods(name string) ([]*Mod, error) {
	if bl.Edges.namedMods == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := bl.Edges.namedMods[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (bl *BuildLog) appendNamedMods(name string, edges ...*Mod) {
	if bl.Edges.namedMods == nil {
		bl.Edges.namedMods = make(map[string][]*Mod)
	}
	if len(edges) == 0 {
		bl.Edges.namedMods[name] = []*Mod{}
	} else {
		bl.Edges.namedMods[name] = append(bl.Edges.namedMods[name], edges...)
	}
}

// NamedMedia returns the Media named value or an error if the edge was not
// loaded in eager-loading with this name.
func (bl *BuildLog) NamedMedia(name string) ([]*Media, error) {
	if bl.Edges.namedMedia == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := bl.Edges.namedMedia[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (bl *BuildLog) appendNamedMedia(name string, edges ...*Media) {
	if bl.Edges.namedMedia == nil {
		bl.Edges.namedMedia = make(map[string][]*Media)
	}
	if len(edges) == 0 {
		bl.Edges.namedMedia[name] = []*Media{}
	} else {
		bl.Edges.namedMedia[name] = append(bl.Edges.namedMedia[name], edges...)
	}
}

// BuildLogs is a parsable slice of BuildLog.
type BuildLogs []*BuildLog
