// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/buildlog"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/media"
	"github.com/Dan6erbond/revline/ent/mod"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/google/uuid"
)

// BuildLogUpdate is the builder for updating BuildLog entities.
type BuildLogUpdate struct {
	config
	hooks    []Hook
	mutation *BuildLogMutation
}

// Where appends a list predicates to the BuildLogUpdate builder.
func (blu *BuildLogUpdate) Where(ps ...predicate.BuildLog) *BuildLogUpdate {
	blu.mutation.Where(ps...)
	return blu
}

// SetUpdateTime sets the "update_time" field.
func (blu *BuildLogUpdate) SetUpdateTime(t time.Time) *BuildLogUpdate {
	blu.mutation.SetUpdateTime(t)
	return blu
}

// SetTitle sets the "title" field.
func (blu *BuildLogUpdate) SetTitle(s string) *BuildLogUpdate {
	blu.mutation.SetTitle(s)
	return blu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (blu *BuildLogUpdate) SetNillableTitle(s *string) *BuildLogUpdate {
	if s != nil {
		blu.SetTitle(*s)
	}
	return blu
}

// SetNotes sets the "notes" field.
func (blu *BuildLogUpdate) SetNotes(m map[string]interface{}) *BuildLogUpdate {
	blu.mutation.SetNotes(m)
	return blu
}

// ClearNotes clears the value of the "notes" field.
func (blu *BuildLogUpdate) ClearNotes() *BuildLogUpdate {
	blu.mutation.ClearNotes()
	return blu
}

// SetLogTime sets the "log_time" field.
func (blu *BuildLogUpdate) SetLogTime(t time.Time) *BuildLogUpdate {
	blu.mutation.SetLogTime(t)
	return blu
}

// SetNillableLogTime sets the "log_time" field if the given value is not nil.
func (blu *BuildLogUpdate) SetNillableLogTime(t *time.Time) *BuildLogUpdate {
	if t != nil {
		blu.SetLogTime(*t)
	}
	return blu
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (blu *BuildLogUpdate) SetCarID(id uuid.UUID) *BuildLogUpdate {
	blu.mutation.SetCarID(id)
	return blu
}

// SetCar sets the "car" edge to the Car entity.
func (blu *BuildLogUpdate) SetCar(c *Car) *BuildLogUpdate {
	return blu.SetCarID(c.ID)
}

// AddModIDs adds the "mods" edge to the Mod entity by IDs.
func (blu *BuildLogUpdate) AddModIDs(ids ...uuid.UUID) *BuildLogUpdate {
	blu.mutation.AddModIDs(ids...)
	return blu
}

// AddMods adds the "mods" edges to the Mod entity.
func (blu *BuildLogUpdate) AddMods(m ...*Mod) *BuildLogUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return blu.AddModIDs(ids...)
}

// AddMediumIDs adds the "media" edge to the Media entity by IDs.
func (blu *BuildLogUpdate) AddMediumIDs(ids ...uuid.UUID) *BuildLogUpdate {
	blu.mutation.AddMediumIDs(ids...)
	return blu
}

// AddMedia adds the "media" edges to the Media entity.
func (blu *BuildLogUpdate) AddMedia(m ...*Media) *BuildLogUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return blu.AddMediumIDs(ids...)
}

// Mutation returns the BuildLogMutation object of the builder.
func (blu *BuildLogUpdate) Mutation() *BuildLogMutation {
	return blu.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (blu *BuildLogUpdate) ClearCar() *BuildLogUpdate {
	blu.mutation.ClearCar()
	return blu
}

// ClearMods clears all "mods" edges to the Mod entity.
func (blu *BuildLogUpdate) ClearMods() *BuildLogUpdate {
	blu.mutation.ClearMods()
	return blu
}

// RemoveModIDs removes the "mods" edge to Mod entities by IDs.
func (blu *BuildLogUpdate) RemoveModIDs(ids ...uuid.UUID) *BuildLogUpdate {
	blu.mutation.RemoveModIDs(ids...)
	return blu
}

// RemoveMods removes "mods" edges to Mod entities.
func (blu *BuildLogUpdate) RemoveMods(m ...*Mod) *BuildLogUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return blu.RemoveModIDs(ids...)
}

// ClearMedia clears all "media" edges to the Media entity.
func (blu *BuildLogUpdate) ClearMedia() *BuildLogUpdate {
	blu.mutation.ClearMedia()
	return blu
}

// RemoveMediumIDs removes the "media" edge to Media entities by IDs.
func (blu *BuildLogUpdate) RemoveMediumIDs(ids ...uuid.UUID) *BuildLogUpdate {
	blu.mutation.RemoveMediumIDs(ids...)
	return blu
}

// RemoveMedia removes "media" edges to Media entities.
func (blu *BuildLogUpdate) RemoveMedia(m ...*Media) *BuildLogUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return blu.RemoveMediumIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (blu *BuildLogUpdate) Save(ctx context.Context) (int, error) {
	blu.defaults()
	return withHooks(ctx, blu.sqlSave, blu.mutation, blu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (blu *BuildLogUpdate) SaveX(ctx context.Context) int {
	affected, err := blu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (blu *BuildLogUpdate) Exec(ctx context.Context) error {
	_, err := blu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (blu *BuildLogUpdate) ExecX(ctx context.Context) {
	if err := blu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (blu *BuildLogUpdate) defaults() {
	if _, ok := blu.mutation.UpdateTime(); !ok {
		v := buildlog.UpdateDefaultUpdateTime()
		blu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (blu *BuildLogUpdate) check() error {
	if blu.mutation.CarCleared() && len(blu.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BuildLog.car"`)
	}
	return nil
}

func (blu *BuildLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := blu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(buildlog.Table, buildlog.Columns, sqlgraph.NewFieldSpec(buildlog.FieldID, field.TypeUUID))
	if ps := blu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := blu.mutation.UpdateTime(); ok {
		_spec.SetField(buildlog.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := blu.mutation.Title(); ok {
		_spec.SetField(buildlog.FieldTitle, field.TypeString, value)
	}
	if value, ok := blu.mutation.Notes(); ok {
		_spec.SetField(buildlog.FieldNotes, field.TypeJSON, value)
	}
	if blu.mutation.NotesCleared() {
		_spec.ClearField(buildlog.FieldNotes, field.TypeJSON)
	}
	if value, ok := blu.mutation.LogTime(); ok {
		_spec.SetField(buildlog.FieldLogTime, field.TypeTime, value)
	}
	if blu.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   buildlog.CarTable,
			Columns: []string{buildlog.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := blu.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   buildlog.CarTable,
			Columns: []string{buildlog.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if blu.mutation.ModsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   buildlog.ModsTable,
			Columns: buildlog.ModsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := blu.mutation.RemovedModsIDs(); len(nodes) > 0 && !blu.mutation.ModsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   buildlog.ModsTable,
			Columns: buildlog.ModsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := blu.mutation.ModsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   buildlog.ModsTable,
			Columns: buildlog.ModsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if blu.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   buildlog.MediaTable,
			Columns: buildlog.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := blu.mutation.RemovedMediaIDs(); len(nodes) > 0 && !blu.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   buildlog.MediaTable,
			Columns: buildlog.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := blu.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   buildlog.MediaTable,
			Columns: buildlog.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, blu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{buildlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	blu.mutation.done = true
	return n, nil
}

// BuildLogUpdateOne is the builder for updating a single BuildLog entity.
type BuildLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BuildLogMutation
}

// SetUpdateTime sets the "update_time" field.
func (bluo *BuildLogUpdateOne) SetUpdateTime(t time.Time) *BuildLogUpdateOne {
	bluo.mutation.SetUpdateTime(t)
	return bluo
}

// SetTitle sets the "title" field.
func (bluo *BuildLogUpdateOne) SetTitle(s string) *BuildLogUpdateOne {
	bluo.mutation.SetTitle(s)
	return bluo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (bluo *BuildLogUpdateOne) SetNillableTitle(s *string) *BuildLogUpdateOne {
	if s != nil {
		bluo.SetTitle(*s)
	}
	return bluo
}

// SetNotes sets the "notes" field.
func (bluo *BuildLogUpdateOne) SetNotes(m map[string]interface{}) *BuildLogUpdateOne {
	bluo.mutation.SetNotes(m)
	return bluo
}

// ClearNotes clears the value of the "notes" field.
func (bluo *BuildLogUpdateOne) ClearNotes() *BuildLogUpdateOne {
	bluo.mutation.ClearNotes()
	return bluo
}

// SetLogTime sets the "log_time" field.
func (bluo *BuildLogUpdateOne) SetLogTime(t time.Time) *BuildLogUpdateOne {
	bluo.mutation.SetLogTime(t)
	return bluo
}

// SetNillableLogTime sets the "log_time" field if the given value is not nil.
func (bluo *BuildLogUpdateOne) SetNillableLogTime(t *time.Time) *BuildLogUpdateOne {
	if t != nil {
		bluo.SetLogTime(*t)
	}
	return bluo
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (bluo *BuildLogUpdateOne) SetCarID(id uuid.UUID) *BuildLogUpdateOne {
	bluo.mutation.SetCarID(id)
	return bluo
}

// SetCar sets the "car" edge to the Car entity.
func (bluo *BuildLogUpdateOne) SetCar(c *Car) *BuildLogUpdateOne {
	return bluo.SetCarID(c.ID)
}

// AddModIDs adds the "mods" edge to the Mod entity by IDs.
func (bluo *BuildLogUpdateOne) AddModIDs(ids ...uuid.UUID) *BuildLogUpdateOne {
	bluo.mutation.AddModIDs(ids...)
	return bluo
}

// AddMods adds the "mods" edges to the Mod entity.
func (bluo *BuildLogUpdateOne) AddMods(m ...*Mod) *BuildLogUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return bluo.AddModIDs(ids...)
}

// AddMediumIDs adds the "media" edge to the Media entity by IDs.
func (bluo *BuildLogUpdateOne) AddMediumIDs(ids ...uuid.UUID) *BuildLogUpdateOne {
	bluo.mutation.AddMediumIDs(ids...)
	return bluo
}

// AddMedia adds the "media" edges to the Media entity.
func (bluo *BuildLogUpdateOne) AddMedia(m ...*Media) *BuildLogUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return bluo.AddMediumIDs(ids...)
}

// Mutation returns the BuildLogMutation object of the builder.
func (bluo *BuildLogUpdateOne) Mutation() *BuildLogMutation {
	return bluo.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (bluo *BuildLogUpdateOne) ClearCar() *BuildLogUpdateOne {
	bluo.mutation.ClearCar()
	return bluo
}

// ClearMods clears all "mods" edges to the Mod entity.
func (bluo *BuildLogUpdateOne) ClearMods() *BuildLogUpdateOne {
	bluo.mutation.ClearMods()
	return bluo
}

// RemoveModIDs removes the "mods" edge to Mod entities by IDs.
func (bluo *BuildLogUpdateOne) RemoveModIDs(ids ...uuid.UUID) *BuildLogUpdateOne {
	bluo.mutation.RemoveModIDs(ids...)
	return bluo
}

// RemoveMods removes "mods" edges to Mod entities.
func (bluo *BuildLogUpdateOne) RemoveMods(m ...*Mod) *BuildLogUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return bluo.RemoveModIDs(ids...)
}

// ClearMedia clears all "media" edges to the Media entity.
func (bluo *BuildLogUpdateOne) ClearMedia() *BuildLogUpdateOne {
	bluo.mutation.ClearMedia()
	return bluo
}

// RemoveMediumIDs removes the "media" edge to Media entities by IDs.
func (bluo *BuildLogUpdateOne) RemoveMediumIDs(ids ...uuid.UUID) *BuildLogUpdateOne {
	bluo.mutation.RemoveMediumIDs(ids...)
	return bluo
}

// RemoveMedia removes "media" edges to Media entities.
func (bluo *BuildLogUpdateOne) RemoveMedia(m ...*Media) *BuildLogUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return bluo.RemoveMediumIDs(ids...)
}

// Where appends a list predicates to the BuildLogUpdate builder.
func (bluo *BuildLogUpdateOne) Where(ps ...predicate.BuildLog) *BuildLogUpdateOne {
	bluo.mutation.Where(ps...)
	return bluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bluo *BuildLogUpdateOne) Select(field string, fields ...string) *BuildLogUpdateOne {
	bluo.fields = append([]string{field}, fields...)
	return bluo
}

// Save executes the query and returns the updated BuildLog entity.
func (bluo *BuildLogUpdateOne) Save(ctx context.Context) (*BuildLog, error) {
	bluo.defaults()
	return withHooks(ctx, bluo.sqlSave, bluo.mutation, bluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bluo *BuildLogUpdateOne) SaveX(ctx context.Context) *BuildLog {
	node, err := bluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bluo *BuildLogUpdateOne) Exec(ctx context.Context) error {
	_, err := bluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bluo *BuildLogUpdateOne) ExecX(ctx context.Context) {
	if err := bluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bluo *BuildLogUpdateOne) defaults() {
	if _, ok := bluo.mutation.UpdateTime(); !ok {
		v := buildlog.UpdateDefaultUpdateTime()
		bluo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bluo *BuildLogUpdateOne) check() error {
	if bluo.mutation.CarCleared() && len(bluo.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BuildLog.car"`)
	}
	return nil
}

func (bluo *BuildLogUpdateOne) sqlSave(ctx context.Context) (_node *BuildLog, err error) {
	if err := bluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(buildlog.Table, buildlog.Columns, sqlgraph.NewFieldSpec(buildlog.FieldID, field.TypeUUID))
	id, ok := bluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BuildLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, buildlog.FieldID)
		for _, f := range fields {
			if !buildlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != buildlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bluo.mutation.UpdateTime(); ok {
		_spec.SetField(buildlog.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := bluo.mutation.Title(); ok {
		_spec.SetField(buildlog.FieldTitle, field.TypeString, value)
	}
	if value, ok := bluo.mutation.Notes(); ok {
		_spec.SetField(buildlog.FieldNotes, field.TypeJSON, value)
	}
	if bluo.mutation.NotesCleared() {
		_spec.ClearField(buildlog.FieldNotes, field.TypeJSON)
	}
	if value, ok := bluo.mutation.LogTime(); ok {
		_spec.SetField(buildlog.FieldLogTime, field.TypeTime, value)
	}
	if bluo.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   buildlog.CarTable,
			Columns: []string{buildlog.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bluo.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   buildlog.CarTable,
			Columns: []string{buildlog.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bluo.mutation.ModsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   buildlog.ModsTable,
			Columns: buildlog.ModsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bluo.mutation.RemovedModsIDs(); len(nodes) > 0 && !bluo.mutation.ModsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   buildlog.ModsTable,
			Columns: buildlog.ModsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bluo.mutation.ModsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   buildlog.ModsTable,
			Columns: buildlog.ModsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mod.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bluo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   buildlog.MediaTable,
			Columns: buildlog.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bluo.mutation.RemovedMediaIDs(); len(nodes) > 0 && !bluo.mutation.MediaCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   buildlog.MediaTable,
			Columns: buildlog.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bluo.mutation.MediaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   buildlog.MediaTable,
			Columns: buildlog.MediaPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(media.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BuildLog{config: bluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{buildlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bluo.mutation.done = true
	return _node, nil
}
