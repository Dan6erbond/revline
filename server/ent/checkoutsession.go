// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Dan6erbond/revline/ent/checkoutsession"
	"github.com/Dan6erbond/revline/ent/subscription"
	"github.com/Dan6erbond/revline/ent/user"
	"github.com/google/uuid"
)

// CheckoutSession is the model entity for the CheckoutSession schema.
type CheckoutSession struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// StripeSessionID holds the value of the "stripe_session_id" field.
	StripeSessionID *string `json:"stripe_session_id,omitempty"`
	// StripePriceID holds the value of the "stripe_price_id" field.
	StripePriceID string `json:"stripe_price_id,omitempty"`
	// Mode holds the value of the "mode" field.
	Mode checkoutsession.Mode `json:"mode,omitempty"`
	// Completed holds the value of the "completed" field.
	Completed bool `json:"completed,omitempty"`
	// CompletedAt holds the value of the "completed_at" field.
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	// Affiliate6moCode holds the value of the "affiliate_6mo_code" field.
	Affiliate6moCode *string `json:"affiliate_6mo_code,omitempty"`
	// Affiliate12moCode holds the value of the "affiliate_12mo_code" field.
	Affiliate12moCode *string `json:"affiliate_12mo_code,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CheckoutSessionQuery when eager-loading is set.
	Edges                  CheckoutSessionEdges `json:"edges"`
	user_checkout_sessions *uuid.UUID
	selectValues           sql.SelectValues
}

// CheckoutSessionEdges holds the relations/edges for other nodes in the graph.
type CheckoutSessionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Subscription holds the value of the subscription edge.
	Subscription *Subscription `json:"subscription,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CheckoutSessionEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// SubscriptionOrErr returns the Subscription value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CheckoutSessionEdges) SubscriptionOrErr() (*Subscription, error) {
	if e.Subscription != nil {
		return e.Subscription, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: subscription.Label}
	}
	return nil, &NotLoadedError{edge: "subscription"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CheckoutSession) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case checkoutsession.FieldCompleted:
			values[i] = new(sql.NullBool)
		case checkoutsession.FieldStripeSessionID, checkoutsession.FieldStripePriceID, checkoutsession.FieldMode, checkoutsession.FieldAffiliate6moCode, checkoutsession.FieldAffiliate12moCode:
			values[i] = new(sql.NullString)
		case checkoutsession.FieldCreateTime, checkoutsession.FieldUpdateTime, checkoutsession.FieldCompletedAt:
			values[i] = new(sql.NullTime)
		case checkoutsession.FieldID:
			values[i] = new(uuid.UUID)
		case checkoutsession.ForeignKeys[0]: // user_checkout_sessions
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CheckoutSession fields.
func (cs *CheckoutSession) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case checkoutsession.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cs.ID = *value
			}
		case checkoutsession.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				cs.CreateTime = value.Time
			}
		case checkoutsession.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				cs.UpdateTime = value.Time
			}
		case checkoutsession.FieldStripeSessionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_session_id", values[i])
			} else if value.Valid {
				cs.StripeSessionID = new(string)
				*cs.StripeSessionID = value.String
			}
		case checkoutsession.FieldStripePriceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_price_id", values[i])
			} else if value.Valid {
				cs.StripePriceID = value.String
			}
		case checkoutsession.FieldMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mode", values[i])
			} else if value.Valid {
				cs.Mode = checkoutsession.Mode(value.String)
			}
		case checkoutsession.FieldCompleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field completed", values[i])
			} else if value.Valid {
				cs.Completed = value.Bool
			}
		case checkoutsession.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				cs.CompletedAt = new(time.Time)
				*cs.CompletedAt = value.Time
			}
		case checkoutsession.FieldAffiliate6moCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field affiliate_6mo_code", values[i])
			} else if value.Valid {
				cs.Affiliate6moCode = new(string)
				*cs.Affiliate6moCode = value.String
			}
		case checkoutsession.FieldAffiliate12moCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field affiliate_12mo_code", values[i])
			} else if value.Valid {
				cs.Affiliate12moCode = new(string)
				*cs.Affiliate12moCode = value.String
			}
		case checkoutsession.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_checkout_sessions", values[i])
			} else if value.Valid {
				cs.user_checkout_sessions = new(uuid.UUID)
				*cs.user_checkout_sessions = *value.S.(*uuid.UUID)
			}
		default:
			cs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CheckoutSession.
// This includes values selected through modifiers, order, etc.
func (cs *CheckoutSession) Value(name string) (ent.Value, error) {
	return cs.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the CheckoutSession entity.
func (cs *CheckoutSession) QueryUser() *UserQuery {
	return NewCheckoutSessionClient(cs.config).QueryUser(cs)
}

// QuerySubscription queries the "subscription" edge of the CheckoutSession entity.
func (cs *CheckoutSession) QuerySubscription() *SubscriptionQuery {
	return NewCheckoutSessionClient(cs.config).QuerySubscription(cs)
}

// Update returns a builder for updating this CheckoutSession.
// Note that you need to call CheckoutSession.Unwrap() before calling this method if this CheckoutSession
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *CheckoutSession) Update() *CheckoutSessionUpdateOne {
	return NewCheckoutSessionClient(cs.config).UpdateOne(cs)
}

// Unwrap unwraps the CheckoutSession entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *CheckoutSession) Unwrap() *CheckoutSession {
	_tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: CheckoutSession is not a transactional entity")
	}
	cs.config.driver = _tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *CheckoutSession) String() string {
	var builder strings.Builder
	builder.WriteString("CheckoutSession(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cs.ID))
	builder.WriteString("create_time=")
	builder.WriteString(cs.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(cs.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := cs.StripeSessionID; v != nil {
		builder.WriteString("stripe_session_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("stripe_price_id=")
	builder.WriteString(cs.StripePriceID)
	builder.WriteString(", ")
	builder.WriteString("mode=")
	builder.WriteString(fmt.Sprintf("%v", cs.Mode))
	builder.WriteString(", ")
	builder.WriteString("completed=")
	builder.WriteString(fmt.Sprintf("%v", cs.Completed))
	builder.WriteString(", ")
	if v := cs.CompletedAt; v != nil {
		builder.WriteString("completed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := cs.Affiliate6moCode; v != nil {
		builder.WriteString("affiliate_6mo_code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := cs.Affiliate12moCode; v != nil {
		builder.WriteString("affiliate_12mo_code=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// CheckoutSessions is a parsable slice of CheckoutSession.
type CheckoutSessions []*CheckoutSession
