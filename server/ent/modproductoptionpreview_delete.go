// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/modproductoptionpreview"
	"github.com/Dan6erbond/revline/ent/predicate"
)

// ModProductOptionPreviewDelete is the builder for deleting a ModProductOptionPreview entity.
type ModProductOptionPreviewDelete struct {
	config
	hooks    []Hook
	mutation *ModProductOptionPreviewMutation
}

// Where appends a list predicates to the ModProductOptionPreviewDelete builder.
func (mpopd *ModProductOptionPreviewDelete) Where(ps ...predicate.ModProductOptionPreview) *ModProductOptionPreviewDelete {
	mpopd.mutation.Where(ps...)
	return mpopd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mpopd *ModProductOptionPreviewDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mpopd.sqlExec, mpopd.mutation, mpopd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mpopd *ModProductOptionPreviewDelete) ExecX(ctx context.Context) int {
	n, err := mpopd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mpopd *ModProductOptionPreviewDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(modproductoptionpreview.Table, sqlgraph.NewFieldSpec(modproductoptionpreview.FieldID, field.TypeUUID))
	if ps := mpopd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mpopd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mpopd.mutation.done = true
	return affected, err
}

// ModProductOptionPreviewDeleteOne is the builder for deleting a single ModProductOptionPreview entity.
type ModProductOptionPreviewDeleteOne struct {
	mpopd *ModProductOptionPreviewDelete
}

// Where appends a list predicates to the ModProductOptionPreviewDelete builder.
func (mpopdo *ModProductOptionPreviewDeleteOne) Where(ps ...predicate.ModProductOptionPreview) *ModProductOptionPreviewDeleteOne {
	mpopdo.mpopd.mutation.Where(ps...)
	return mpopdo
}

// Exec executes the deletion query.
func (mpopdo *ModProductOptionPreviewDeleteOne) Exec(ctx context.Context) error {
	n, err := mpopdo.mpopd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{modproductoptionpreview.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mpopdo *ModProductOptionPreviewDeleteOne) ExecX(ctx context.Context) {
	if err := mpopdo.Exec(ctx); err != nil {
		panic(err)
	}
}
