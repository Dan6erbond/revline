// Code generated by ent, DO NOT EDIT.

package usersettings

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldUpdateTime, v))
}

// CurrencyCode applies equality check predicate on the "currency_code" field. It's identical to CurrencyCodeEQ.
func CurrencyCode(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldCurrencyCode, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLTE(FieldUpdateTime, v))
}

// CurrencyCodeEQ applies the EQ predicate on the "currency_code" field.
func CurrencyCodeEQ(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldCurrencyCode, v))
}

// CurrencyCodeNEQ applies the NEQ predicate on the "currency_code" field.
func CurrencyCodeNEQ(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldCurrencyCode, v))
}

// CurrencyCodeIn applies the In predicate on the "currency_code" field.
func CurrencyCodeIn(vs ...string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIn(FieldCurrencyCode, vs...))
}

// CurrencyCodeNotIn applies the NotIn predicate on the "currency_code" field.
func CurrencyCodeNotIn(vs ...string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotIn(FieldCurrencyCode, vs...))
}

// CurrencyCodeGT applies the GT predicate on the "currency_code" field.
func CurrencyCodeGT(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGT(FieldCurrencyCode, v))
}

// CurrencyCodeGTE applies the GTE predicate on the "currency_code" field.
func CurrencyCodeGTE(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGTE(FieldCurrencyCode, v))
}

// CurrencyCodeLT applies the LT predicate on the "currency_code" field.
func CurrencyCodeLT(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLT(FieldCurrencyCode, v))
}

// CurrencyCodeLTE applies the LTE predicate on the "currency_code" field.
func CurrencyCodeLTE(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLTE(FieldCurrencyCode, v))
}

// CurrencyCodeContains applies the Contains predicate on the "currency_code" field.
func CurrencyCodeContains(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldContains(FieldCurrencyCode, v))
}

// CurrencyCodeHasPrefix applies the HasPrefix predicate on the "currency_code" field.
func CurrencyCodeHasPrefix(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldHasPrefix(FieldCurrencyCode, v))
}

// CurrencyCodeHasSuffix applies the HasSuffix predicate on the "currency_code" field.
func CurrencyCodeHasSuffix(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldHasSuffix(FieldCurrencyCode, v))
}

// CurrencyCodeIsNil applies the IsNil predicate on the "currency_code" field.
func CurrencyCodeIsNil() predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIsNull(FieldCurrencyCode))
}

// CurrencyCodeNotNil applies the NotNil predicate on the "currency_code" field.
func CurrencyCodeNotNil() predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotNull(FieldCurrencyCode))
}

// CurrencyCodeEqualFold applies the EqualFold predicate on the "currency_code" field.
func CurrencyCodeEqualFold(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEqualFold(FieldCurrencyCode, v))
}

// CurrencyCodeContainsFold applies the ContainsFold predicate on the "currency_code" field.
func CurrencyCodeContainsFold(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldContainsFold(FieldCurrencyCode, v))
}

// FuelVolumeUnitEQ applies the EQ predicate on the "fuel_volume_unit" field.
func FuelVolumeUnitEQ(v FuelVolumeUnit) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldFuelVolumeUnit, v))
}

// FuelVolumeUnitNEQ applies the NEQ predicate on the "fuel_volume_unit" field.
func FuelVolumeUnitNEQ(v FuelVolumeUnit) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldFuelVolumeUnit, v))
}

// FuelVolumeUnitIn applies the In predicate on the "fuel_volume_unit" field.
func FuelVolumeUnitIn(vs ...FuelVolumeUnit) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIn(FieldFuelVolumeUnit, vs...))
}

// FuelVolumeUnitNotIn applies the NotIn predicate on the "fuel_volume_unit" field.
func FuelVolumeUnitNotIn(vs ...FuelVolumeUnit) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotIn(FieldFuelVolumeUnit, vs...))
}

// FuelVolumeUnitIsNil applies the IsNil predicate on the "fuel_volume_unit" field.
func FuelVolumeUnitIsNil() predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIsNull(FieldFuelVolumeUnit))
}

// FuelVolumeUnitNotNil applies the NotNil predicate on the "fuel_volume_unit" field.
func FuelVolumeUnitNotNil() predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotNull(FieldFuelVolumeUnit))
}

// DistanceUnitEQ applies the EQ predicate on the "distance_unit" field.
func DistanceUnitEQ(v DistanceUnit) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldDistanceUnit, v))
}

// DistanceUnitNEQ applies the NEQ predicate on the "distance_unit" field.
func DistanceUnitNEQ(v DistanceUnit) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldDistanceUnit, v))
}

// DistanceUnitIn applies the In predicate on the "distance_unit" field.
func DistanceUnitIn(vs ...DistanceUnit) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIn(FieldDistanceUnit, vs...))
}

// DistanceUnitNotIn applies the NotIn predicate on the "distance_unit" field.
func DistanceUnitNotIn(vs ...DistanceUnit) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotIn(FieldDistanceUnit, vs...))
}

// DistanceUnitIsNil applies the IsNil predicate on the "distance_unit" field.
func DistanceUnitIsNil() predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIsNull(FieldDistanceUnit))
}

// DistanceUnitNotNil applies the NotNil predicate on the "distance_unit" field.
func DistanceUnitNotNil() predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotNull(FieldDistanceUnit))
}

// FuelConsumptionUnitEQ applies the EQ predicate on the "fuel_consumption_unit" field.
func FuelConsumptionUnitEQ(v FuelConsumptionUnit) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldFuelConsumptionUnit, v))
}

// FuelConsumptionUnitNEQ applies the NEQ predicate on the "fuel_consumption_unit" field.
func FuelConsumptionUnitNEQ(v FuelConsumptionUnit) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldFuelConsumptionUnit, v))
}

// FuelConsumptionUnitIn applies the In predicate on the "fuel_consumption_unit" field.
func FuelConsumptionUnitIn(vs ...FuelConsumptionUnit) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIn(FieldFuelConsumptionUnit, vs...))
}

// FuelConsumptionUnitNotIn applies the NotIn predicate on the "fuel_consumption_unit" field.
func FuelConsumptionUnitNotIn(vs ...FuelConsumptionUnit) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotIn(FieldFuelConsumptionUnit, vs...))
}

// FuelConsumptionUnitIsNil applies the IsNil predicate on the "fuel_consumption_unit" field.
func FuelConsumptionUnitIsNil() predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIsNull(FieldFuelConsumptionUnit))
}

// FuelConsumptionUnitNotNil applies the NotNil predicate on the "fuel_consumption_unit" field.
func FuelConsumptionUnitNotNil() predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotNull(FieldFuelConsumptionUnit))
}

// TemperatureUnitEQ applies the EQ predicate on the "temperature_unit" field.
func TemperatureUnitEQ(v TemperatureUnit) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldTemperatureUnit, v))
}

// TemperatureUnitNEQ applies the NEQ predicate on the "temperature_unit" field.
func TemperatureUnitNEQ(v TemperatureUnit) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldTemperatureUnit, v))
}

// TemperatureUnitIn applies the In predicate on the "temperature_unit" field.
func TemperatureUnitIn(vs ...TemperatureUnit) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIn(FieldTemperatureUnit, vs...))
}

// TemperatureUnitNotIn applies the NotIn predicate on the "temperature_unit" field.
func TemperatureUnitNotIn(vs ...TemperatureUnit) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotIn(FieldTemperatureUnit, vs...))
}

// TemperatureUnitIsNil applies the IsNil predicate on the "temperature_unit" field.
func TemperatureUnitIsNil() predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIsNull(FieldTemperatureUnit))
}

// TemperatureUnitNotNil applies the NotNil predicate on the "temperature_unit" field.
func TemperatureUnitNotNil() predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotNull(FieldTemperatureUnit))
}

// PowerUnitEQ applies the EQ predicate on the "power_unit" field.
func PowerUnitEQ(v PowerUnit) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldPowerUnit, v))
}

// PowerUnitNEQ applies the NEQ predicate on the "power_unit" field.
func PowerUnitNEQ(v PowerUnit) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldPowerUnit, v))
}

// PowerUnitIn applies the In predicate on the "power_unit" field.
func PowerUnitIn(vs ...PowerUnit) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIn(FieldPowerUnit, vs...))
}

// PowerUnitNotIn applies the NotIn predicate on the "power_unit" field.
func PowerUnitNotIn(vs ...PowerUnit) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotIn(FieldPowerUnit, vs...))
}

// PowerUnitIsNil applies the IsNil predicate on the "power_unit" field.
func PowerUnitIsNil() predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIsNull(FieldPowerUnit))
}

// PowerUnitNotNil applies the NotNil predicate on the "power_unit" field.
func PowerUnitNotNil() predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotNull(FieldPowerUnit))
}

// TorqueUnitEQ applies the EQ predicate on the "torque_unit" field.
func TorqueUnitEQ(v TorqueUnit) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldTorqueUnit, v))
}

// TorqueUnitNEQ applies the NEQ predicate on the "torque_unit" field.
func TorqueUnitNEQ(v TorqueUnit) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldTorqueUnit, v))
}

// TorqueUnitIn applies the In predicate on the "torque_unit" field.
func TorqueUnitIn(vs ...TorqueUnit) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIn(FieldTorqueUnit, vs...))
}

// TorqueUnitNotIn applies the NotIn predicate on the "torque_unit" field.
func TorqueUnitNotIn(vs ...TorqueUnit) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotIn(FieldTorqueUnit, vs...))
}

// TorqueUnitIsNil applies the IsNil predicate on the "torque_unit" field.
func TorqueUnitIsNil() predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIsNull(FieldTorqueUnit))
}

// TorqueUnitNotNil applies the NotNil predicate on the "torque_unit" field.
func TorqueUnitNotNil() predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotNull(FieldTorqueUnit))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserSettings {
	return predicate.UserSettings(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserSettings {
	return predicate.UserSettings(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserSettings) predicate.UserSettings {
	return predicate.UserSettings(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserSettings) predicate.UserSettings {
	return predicate.UserSettings(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserSettings) predicate.UserSettings {
	return predicate.UserSettings(sql.NotPredicates(p))
}
