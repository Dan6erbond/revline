// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Dan6erbond/revline/ent/modproductoption"
	"github.com/Dan6erbond/revline/ent/modproductoptionpreview"
	"github.com/google/uuid"
)

// ModProductOptionPreview is the model entity for the ModProductOptionPreview schema.
type ModProductOptionPreview struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Status holds the value of the "status" field.
	Status modproductoptionpreview.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ModProductOptionPreviewQuery when eager-loading is set.
	Edges                       ModProductOptionPreviewEdges `json:"edges"`
	mod_product_option_previews *uuid.UUID
	selectValues                sql.SelectValues
}

// ModProductOptionPreviewEdges holds the relations/edges for other nodes in the graph.
type ModProductOptionPreviewEdges struct {
	// ProductOption holds the value of the product_option edge.
	ProductOption *ModProductOption `json:"product_option,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// ProductOptionOrErr returns the ProductOption value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ModProductOptionPreviewEdges) ProductOptionOrErr() (*ModProductOption, error) {
	if e.ProductOption != nil {
		return e.ProductOption, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: modproductoption.Label}
	}
	return nil, &NotLoadedError{edge: "product_option"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ModProductOptionPreview) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case modproductoptionpreview.FieldStatus:
			values[i] = new(sql.NullString)
		case modproductoptionpreview.FieldCreateTime, modproductoptionpreview.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case modproductoptionpreview.FieldID:
			values[i] = new(uuid.UUID)
		case modproductoptionpreview.ForeignKeys[0]: // mod_product_option_previews
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ModProductOptionPreview fields.
func (mpop *ModProductOptionPreview) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case modproductoptionpreview.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				mpop.ID = *value
			}
		case modproductoptionpreview.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				mpop.CreateTime = value.Time
			}
		case modproductoptionpreview.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				mpop.UpdateTime = value.Time
			}
		case modproductoptionpreview.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				mpop.Status = modproductoptionpreview.Status(value.String)
			}
		case modproductoptionpreview.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field mod_product_option_previews", values[i])
			} else if value.Valid {
				mpop.mod_product_option_previews = new(uuid.UUID)
				*mpop.mod_product_option_previews = *value.S.(*uuid.UUID)
			}
		default:
			mpop.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ModProductOptionPreview.
// This includes values selected through modifiers, order, etc.
func (mpop *ModProductOptionPreview) Value(name string) (ent.Value, error) {
	return mpop.selectValues.Get(name)
}

// QueryProductOption queries the "product_option" edge of the ModProductOptionPreview entity.
func (mpop *ModProductOptionPreview) QueryProductOption() *ModProductOptionQuery {
	return NewModProductOptionPreviewClient(mpop.config).QueryProductOption(mpop)
}

// Update returns a builder for updating this ModProductOptionPreview.
// Note that you need to call ModProductOptionPreview.Unwrap() before calling this method if this ModProductOptionPreview
// was returned from a transaction, and the transaction was committed or rolled back.
func (mpop *ModProductOptionPreview) Update() *ModProductOptionPreviewUpdateOne {
	return NewModProductOptionPreviewClient(mpop.config).UpdateOne(mpop)
}

// Unwrap unwraps the ModProductOptionPreview entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mpop *ModProductOptionPreview) Unwrap() *ModProductOptionPreview {
	_tx, ok := mpop.config.driver.(*txDriver)
	if !ok {
		panic("ent: ModProductOptionPreview is not a transactional entity")
	}
	mpop.config.driver = _tx.drv
	return mpop
}

// String implements the fmt.Stringer.
func (mpop *ModProductOptionPreview) String() string {
	var builder strings.Builder
	builder.WriteString("ModProductOptionPreview(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mpop.ID))
	builder.WriteString("create_time=")
	builder.WriteString(mpop.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(mpop.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", mpop.Status))
	builder.WriteByte(')')
	return builder.String()
}

// ModProductOptionPreviews is a parsable slice of ModProductOptionPreview.
type ModProductOptionPreviews []*ModProductOptionPreview
