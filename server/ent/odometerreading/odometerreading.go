// Code generated by ent, DO NOT EDIT.

package odometerreading

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the odometerreading type in the database.
	Label = "odometer_reading"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldReadingKm holds the string denoting the reading_km field in the database.
	FieldReadingKm = "reading_km"
	// FieldReadingTime holds the string denoting the reading_time field in the database.
	FieldReadingTime = "reading_time"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// EdgeCar holds the string denoting the car edge name in mutations.
	EdgeCar = "car"
	// EdgeFuelUp holds the string denoting the fuel_up edge name in mutations.
	EdgeFuelUp = "fuel_up"
	// EdgeServiceLog holds the string denoting the service_log edge name in mutations.
	EdgeServiceLog = "service_log"
	// Table holds the table name of the odometerreading in the database.
	Table = "odometer_readings"
	// CarTable is the table that holds the car relation/edge.
	CarTable = "odometer_readings"
	// CarInverseTable is the table name for the Car entity.
	// It exists in this package in order to avoid circular dependency with the "car" package.
	CarInverseTable = "cars"
	// CarColumn is the table column denoting the car relation/edge.
	CarColumn = "car_odometer_readings"
	// FuelUpTable is the table that holds the fuel_up relation/edge.
	FuelUpTable = "fuel_ups"
	// FuelUpInverseTable is the table name for the FuelUp entity.
	// It exists in this package in order to avoid circular dependency with the "fuelup" package.
	FuelUpInverseTable = "fuel_ups"
	// FuelUpColumn is the table column denoting the fuel_up relation/edge.
	FuelUpColumn = "odometer_reading_fuel_up"
	// ServiceLogTable is the table that holds the service_log relation/edge.
	ServiceLogTable = "service_logs"
	// ServiceLogInverseTable is the table name for the ServiceLog entity.
	// It exists in this package in order to avoid circular dependency with the "servicelog" package.
	ServiceLogInverseTable = "service_logs"
	// ServiceLogColumn is the table column denoting the service_log relation/edge.
	ServiceLogColumn = "odometer_reading_service_log"
)

// Columns holds all SQL columns for odometerreading fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldReadingKm,
	FieldReadingTime,
	FieldNotes,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "odometer_readings"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"car_odometer_readings",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the OdometerReading queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByReadingKm orders the results by the reading_km field.
func ByReadingKm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReadingKm, opts...).ToFunc()
}

// ByReadingTime orders the results by the reading_time field.
func ByReadingTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReadingTime, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByCarField orders the results by car field.
func ByCarField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarStep(), sql.OrderByField(field, opts...))
	}
}

// ByFuelUpField orders the results by fuel_up field.
func ByFuelUpField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFuelUpStep(), sql.OrderByField(field, opts...))
	}
}

// ByServiceLogField orders the results by service_log field.
func ByServiceLogField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServiceLogStep(), sql.OrderByField(field, opts...))
	}
}
func newCarStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CarTable, CarColumn),
	)
}
func newFuelUpStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FuelUpInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, FuelUpTable, FuelUpColumn),
	)
}
func newServiceLogStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServiceLogInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ServiceLogTable, ServiceLogColumn),
	)
}
