// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/dragresult"
	"github.com/Dan6erbond/revline/ent/dragsession"
	"github.com/google/uuid"
)

// DragResultCreate is the builder for creating a DragResult entity.
type DragResultCreate struct {
	config
	mutation *DragResultMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (drc *DragResultCreate) SetCreateTime(t time.Time) *DragResultCreate {
	drc.mutation.SetCreateTime(t)
	return drc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (drc *DragResultCreate) SetNillableCreateTime(t *time.Time) *DragResultCreate {
	if t != nil {
		drc.SetCreateTime(*t)
	}
	return drc
}

// SetUpdateTime sets the "update_time" field.
func (drc *DragResultCreate) SetUpdateTime(t time.Time) *DragResultCreate {
	drc.mutation.SetUpdateTime(t)
	return drc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (drc *DragResultCreate) SetNillableUpdateTime(t *time.Time) *DragResultCreate {
	if t != nil {
		drc.SetUpdateTime(*t)
	}
	return drc
}

// SetUnit sets the "unit" field.
func (drc *DragResultCreate) SetUnit(d dragresult.Unit) *DragResultCreate {
	drc.mutation.SetUnit(d)
	return drc
}

// SetValue sets the "value" field.
func (drc *DragResultCreate) SetValue(f float64) *DragResultCreate {
	drc.mutation.SetValue(f)
	return drc
}

// SetResult sets the "result" field.
func (drc *DragResultCreate) SetResult(f float64) *DragResultCreate {
	drc.mutation.SetResult(f)
	return drc
}

// SetID sets the "id" field.
func (drc *DragResultCreate) SetID(u uuid.UUID) *DragResultCreate {
	drc.mutation.SetID(u)
	return drc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (drc *DragResultCreate) SetNillableID(u *uuid.UUID) *DragResultCreate {
	if u != nil {
		drc.SetID(*u)
	}
	return drc
}

// SetSessionID sets the "session" edge to the DragSession entity by ID.
func (drc *DragResultCreate) SetSessionID(id uuid.UUID) *DragResultCreate {
	drc.mutation.SetSessionID(id)
	return drc
}

// SetSession sets the "session" edge to the DragSession entity.
func (drc *DragResultCreate) SetSession(d *DragSession) *DragResultCreate {
	return drc.SetSessionID(d.ID)
}

// Mutation returns the DragResultMutation object of the builder.
func (drc *DragResultCreate) Mutation() *DragResultMutation {
	return drc.mutation
}

// Save creates the DragResult in the database.
func (drc *DragResultCreate) Save(ctx context.Context) (*DragResult, error) {
	drc.defaults()
	return withHooks(ctx, drc.sqlSave, drc.mutation, drc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (drc *DragResultCreate) SaveX(ctx context.Context) *DragResult {
	v, err := drc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drc *DragResultCreate) Exec(ctx context.Context) error {
	_, err := drc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drc *DragResultCreate) ExecX(ctx context.Context) {
	if err := drc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (drc *DragResultCreate) defaults() {
	if _, ok := drc.mutation.CreateTime(); !ok {
		v := dragresult.DefaultCreateTime()
		drc.mutation.SetCreateTime(v)
	}
	if _, ok := drc.mutation.UpdateTime(); !ok {
		v := dragresult.DefaultUpdateTime()
		drc.mutation.SetUpdateTime(v)
	}
	if _, ok := drc.mutation.ID(); !ok {
		v := dragresult.DefaultID()
		drc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (drc *DragResultCreate) check() error {
	if _, ok := drc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "DragResult.create_time"`)}
	}
	if _, ok := drc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "DragResult.update_time"`)}
	}
	if _, ok := drc.mutation.Unit(); !ok {
		return &ValidationError{Name: "unit", err: errors.New(`ent: missing required field "DragResult.unit"`)}
	}
	if v, ok := drc.mutation.Unit(); ok {
		if err := dragresult.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf(`ent: validator failed for field "DragResult.unit": %w`, err)}
		}
	}
	if _, ok := drc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "DragResult.value"`)}
	}
	if _, ok := drc.mutation.Result(); !ok {
		return &ValidationError{Name: "result", err: errors.New(`ent: missing required field "DragResult.result"`)}
	}
	if len(drc.mutation.SessionIDs()) == 0 {
		return &ValidationError{Name: "session", err: errors.New(`ent: missing required edge "DragResult.session"`)}
	}
	return nil
}

func (drc *DragResultCreate) sqlSave(ctx context.Context) (*DragResult, error) {
	if err := drc.check(); err != nil {
		return nil, err
	}
	_node, _spec := drc.createSpec()
	if err := sqlgraph.CreateNode(ctx, drc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	drc.mutation.id = &_node.ID
	drc.mutation.done = true
	return _node, nil
}

func (drc *DragResultCreate) createSpec() (*DragResult, *sqlgraph.CreateSpec) {
	var (
		_node = &DragResult{config: drc.config}
		_spec = sqlgraph.NewCreateSpec(dragresult.Table, sqlgraph.NewFieldSpec(dragresult.FieldID, field.TypeUUID))
	)
	if id, ok := drc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := drc.mutation.CreateTime(); ok {
		_spec.SetField(dragresult.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := drc.mutation.UpdateTime(); ok {
		_spec.SetField(dragresult.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := drc.mutation.Unit(); ok {
		_spec.SetField(dragresult.FieldUnit, field.TypeEnum, value)
		_node.Unit = value
	}
	if value, ok := drc.mutation.Value(); ok {
		_spec.SetField(dragresult.FieldValue, field.TypeFloat64, value)
		_node.Value = value
	}
	if value, ok := drc.mutation.Result(); ok {
		_spec.SetField(dragresult.FieldResult, field.TypeFloat64, value)
		_node.Result = value
	}
	if nodes := drc.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dragresult.SessionTable,
			Columns: []string{dragresult.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dragsession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.drag_session_results = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DragResultCreateBulk is the builder for creating many DragResult entities in bulk.
type DragResultCreateBulk struct {
	config
	err      error
	builders []*DragResultCreate
}

// Save creates the DragResult entities in the database.
func (drcb *DragResultCreateBulk) Save(ctx context.Context) ([]*DragResult, error) {
	if drcb.err != nil {
		return nil, drcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(drcb.builders))
	nodes := make([]*DragResult, len(drcb.builders))
	mutators := make([]Mutator, len(drcb.builders))
	for i := range drcb.builders {
		func(i int, root context.Context) {
			builder := drcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DragResultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, drcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, drcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, drcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (drcb *DragResultCreateBulk) SaveX(ctx context.Context) []*DragResult {
	v, err := drcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drcb *DragResultCreateBulk) Exec(ctx context.Context) error {
	_, err := drcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drcb *DragResultCreateBulk) ExecX(ctx context.Context) {
	if err := drcb.Exec(ctx); err != nil {
		panic(err)
	}
}
