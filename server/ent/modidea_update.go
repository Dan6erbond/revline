// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/modidea"
	"github.com/Dan6erbond/revline/ent/modproductoption"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/Dan6erbond/revline/ent/task"
	"github.com/google/uuid"
)

// ModIdeaUpdate is the builder for updating ModIdea entities.
type ModIdeaUpdate struct {
	config
	hooks    []Hook
	mutation *ModIdeaMutation
}

// Where appends a list predicates to the ModIdeaUpdate builder.
func (miu *ModIdeaUpdate) Where(ps ...predicate.ModIdea) *ModIdeaUpdate {
	miu.mutation.Where(ps...)
	return miu
}

// SetUpdateTime sets the "update_time" field.
func (miu *ModIdeaUpdate) SetUpdateTime(t time.Time) *ModIdeaUpdate {
	miu.mutation.SetUpdateTime(t)
	return miu
}

// SetTitle sets the "title" field.
func (miu *ModIdeaUpdate) SetTitle(s string) *ModIdeaUpdate {
	miu.mutation.SetTitle(s)
	return miu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (miu *ModIdeaUpdate) SetNillableTitle(s *string) *ModIdeaUpdate {
	if s != nil {
		miu.SetTitle(*s)
	}
	return miu
}

// SetCategory sets the "category" field.
func (miu *ModIdeaUpdate) SetCategory(m modidea.Category) *ModIdeaUpdate {
	miu.mutation.SetCategory(m)
	return miu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (miu *ModIdeaUpdate) SetNillableCategory(m *modidea.Category) *ModIdeaUpdate {
	if m != nil {
		miu.SetCategory(*m)
	}
	return miu
}

// SetDescription sets the "description" field.
func (miu *ModIdeaUpdate) SetDescription(s string) *ModIdeaUpdate {
	miu.mutation.SetDescription(s)
	return miu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (miu *ModIdeaUpdate) SetNillableDescription(s *string) *ModIdeaUpdate {
	if s != nil {
		miu.SetDescription(*s)
	}
	return miu
}

// ClearDescription clears the value of the "description" field.
func (miu *ModIdeaUpdate) ClearDescription() *ModIdeaUpdate {
	miu.mutation.ClearDescription()
	return miu
}

// SetStage sets the "stage" field.
func (miu *ModIdeaUpdate) SetStage(s string) *ModIdeaUpdate {
	miu.mutation.SetStage(s)
	return miu
}

// SetNillableStage sets the "stage" field if the given value is not nil.
func (miu *ModIdeaUpdate) SetNillableStage(s *string) *ModIdeaUpdate {
	if s != nil {
		miu.SetStage(*s)
	}
	return miu
}

// ClearStage clears the value of the "stage" field.
func (miu *ModIdeaUpdate) ClearStage() *ModIdeaUpdate {
	miu.mutation.ClearStage()
	return miu
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (miu *ModIdeaUpdate) SetCarID(id uuid.UUID) *ModIdeaUpdate {
	miu.mutation.SetCarID(id)
	return miu
}

// SetCar sets the "car" edge to the Car entity.
func (miu *ModIdeaUpdate) SetCar(c *Car) *ModIdeaUpdate {
	return miu.SetCarID(c.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (miu *ModIdeaUpdate) AddTaskIDs(ids ...uuid.UUID) *ModIdeaUpdate {
	miu.mutation.AddTaskIDs(ids...)
	return miu
}

// AddTasks adds the "tasks" edges to the Task entity.
func (miu *ModIdeaUpdate) AddTasks(t ...*Task) *ModIdeaUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return miu.AddTaskIDs(ids...)
}

// AddProductOptionIDs adds the "product_options" edge to the ModProductOption entity by IDs.
func (miu *ModIdeaUpdate) AddProductOptionIDs(ids ...uuid.UUID) *ModIdeaUpdate {
	miu.mutation.AddProductOptionIDs(ids...)
	return miu
}

// AddProductOptions adds the "product_options" edges to the ModProductOption entity.
func (miu *ModIdeaUpdate) AddProductOptions(m ...*ModProductOption) *ModIdeaUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return miu.AddProductOptionIDs(ids...)
}

// Mutation returns the ModIdeaMutation object of the builder.
func (miu *ModIdeaUpdate) Mutation() *ModIdeaMutation {
	return miu.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (miu *ModIdeaUpdate) ClearCar() *ModIdeaUpdate {
	miu.mutation.ClearCar()
	return miu
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (miu *ModIdeaUpdate) ClearTasks() *ModIdeaUpdate {
	miu.mutation.ClearTasks()
	return miu
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (miu *ModIdeaUpdate) RemoveTaskIDs(ids ...uuid.UUID) *ModIdeaUpdate {
	miu.mutation.RemoveTaskIDs(ids...)
	return miu
}

// RemoveTasks removes "tasks" edges to Task entities.
func (miu *ModIdeaUpdate) RemoveTasks(t ...*Task) *ModIdeaUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return miu.RemoveTaskIDs(ids...)
}

// ClearProductOptions clears all "product_options" edges to the ModProductOption entity.
func (miu *ModIdeaUpdate) ClearProductOptions() *ModIdeaUpdate {
	miu.mutation.ClearProductOptions()
	return miu
}

// RemoveProductOptionIDs removes the "product_options" edge to ModProductOption entities by IDs.
func (miu *ModIdeaUpdate) RemoveProductOptionIDs(ids ...uuid.UUID) *ModIdeaUpdate {
	miu.mutation.RemoveProductOptionIDs(ids...)
	return miu
}

// RemoveProductOptions removes "product_options" edges to ModProductOption entities.
func (miu *ModIdeaUpdate) RemoveProductOptions(m ...*ModProductOption) *ModIdeaUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return miu.RemoveProductOptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (miu *ModIdeaUpdate) Save(ctx context.Context) (int, error) {
	miu.defaults()
	return withHooks(ctx, miu.sqlSave, miu.mutation, miu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (miu *ModIdeaUpdate) SaveX(ctx context.Context) int {
	affected, err := miu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (miu *ModIdeaUpdate) Exec(ctx context.Context) error {
	_, err := miu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (miu *ModIdeaUpdate) ExecX(ctx context.Context) {
	if err := miu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (miu *ModIdeaUpdate) defaults() {
	if _, ok := miu.mutation.UpdateTime(); !ok {
		v := modidea.UpdateDefaultUpdateTime()
		miu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (miu *ModIdeaUpdate) check() error {
	if v, ok := miu.mutation.Category(); ok {
		if err := modidea.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "ModIdea.category": %w`, err)}
		}
	}
	if miu.mutation.CarCleared() && len(miu.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ModIdea.car"`)
	}
	return nil
}

func (miu *ModIdeaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := miu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(modidea.Table, modidea.Columns, sqlgraph.NewFieldSpec(modidea.FieldID, field.TypeUUID))
	if ps := miu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := miu.mutation.UpdateTime(); ok {
		_spec.SetField(modidea.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := miu.mutation.Title(); ok {
		_spec.SetField(modidea.FieldTitle, field.TypeString, value)
	}
	if value, ok := miu.mutation.Category(); ok {
		_spec.SetField(modidea.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := miu.mutation.Description(); ok {
		_spec.SetField(modidea.FieldDescription, field.TypeString, value)
	}
	if miu.mutation.DescriptionCleared() {
		_spec.ClearField(modidea.FieldDescription, field.TypeString)
	}
	if value, ok := miu.mutation.Stage(); ok {
		_spec.SetField(modidea.FieldStage, field.TypeString, value)
	}
	if miu.mutation.StageCleared() {
		_spec.ClearField(modidea.FieldStage, field.TypeString)
	}
	if miu.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modidea.CarTable,
			Columns: []string{modidea.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miu.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modidea.CarTable,
			Columns: []string{modidea.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if miu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   modidea.TasksTable,
			Columns: modidea.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miu.mutation.RemovedTasksIDs(); len(nodes) > 0 && !miu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   modidea.TasksTable,
			Columns: modidea.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   modidea.TasksTable,
			Columns: modidea.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if miu.mutation.ProductOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modidea.ProductOptionsTable,
			Columns: []string{modidea.ProductOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modproductoption.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miu.mutation.RemovedProductOptionsIDs(); len(nodes) > 0 && !miu.mutation.ProductOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modidea.ProductOptionsTable,
			Columns: []string{modidea.ProductOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modproductoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miu.mutation.ProductOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modidea.ProductOptionsTable,
			Columns: []string{modidea.ProductOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modproductoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, miu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{modidea.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	miu.mutation.done = true
	return n, nil
}

// ModIdeaUpdateOne is the builder for updating a single ModIdea entity.
type ModIdeaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ModIdeaMutation
}

// SetUpdateTime sets the "update_time" field.
func (miuo *ModIdeaUpdateOne) SetUpdateTime(t time.Time) *ModIdeaUpdateOne {
	miuo.mutation.SetUpdateTime(t)
	return miuo
}

// SetTitle sets the "title" field.
func (miuo *ModIdeaUpdateOne) SetTitle(s string) *ModIdeaUpdateOne {
	miuo.mutation.SetTitle(s)
	return miuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (miuo *ModIdeaUpdateOne) SetNillableTitle(s *string) *ModIdeaUpdateOne {
	if s != nil {
		miuo.SetTitle(*s)
	}
	return miuo
}

// SetCategory sets the "category" field.
func (miuo *ModIdeaUpdateOne) SetCategory(m modidea.Category) *ModIdeaUpdateOne {
	miuo.mutation.SetCategory(m)
	return miuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (miuo *ModIdeaUpdateOne) SetNillableCategory(m *modidea.Category) *ModIdeaUpdateOne {
	if m != nil {
		miuo.SetCategory(*m)
	}
	return miuo
}

// SetDescription sets the "description" field.
func (miuo *ModIdeaUpdateOne) SetDescription(s string) *ModIdeaUpdateOne {
	miuo.mutation.SetDescription(s)
	return miuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (miuo *ModIdeaUpdateOne) SetNillableDescription(s *string) *ModIdeaUpdateOne {
	if s != nil {
		miuo.SetDescription(*s)
	}
	return miuo
}

// ClearDescription clears the value of the "description" field.
func (miuo *ModIdeaUpdateOne) ClearDescription() *ModIdeaUpdateOne {
	miuo.mutation.ClearDescription()
	return miuo
}

// SetStage sets the "stage" field.
func (miuo *ModIdeaUpdateOne) SetStage(s string) *ModIdeaUpdateOne {
	miuo.mutation.SetStage(s)
	return miuo
}

// SetNillableStage sets the "stage" field if the given value is not nil.
func (miuo *ModIdeaUpdateOne) SetNillableStage(s *string) *ModIdeaUpdateOne {
	if s != nil {
		miuo.SetStage(*s)
	}
	return miuo
}

// ClearStage clears the value of the "stage" field.
func (miuo *ModIdeaUpdateOne) ClearStage() *ModIdeaUpdateOne {
	miuo.mutation.ClearStage()
	return miuo
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (miuo *ModIdeaUpdateOne) SetCarID(id uuid.UUID) *ModIdeaUpdateOne {
	miuo.mutation.SetCarID(id)
	return miuo
}

// SetCar sets the "car" edge to the Car entity.
func (miuo *ModIdeaUpdateOne) SetCar(c *Car) *ModIdeaUpdateOne {
	return miuo.SetCarID(c.ID)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (miuo *ModIdeaUpdateOne) AddTaskIDs(ids ...uuid.UUID) *ModIdeaUpdateOne {
	miuo.mutation.AddTaskIDs(ids...)
	return miuo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (miuo *ModIdeaUpdateOne) AddTasks(t ...*Task) *ModIdeaUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return miuo.AddTaskIDs(ids...)
}

// AddProductOptionIDs adds the "product_options" edge to the ModProductOption entity by IDs.
func (miuo *ModIdeaUpdateOne) AddProductOptionIDs(ids ...uuid.UUID) *ModIdeaUpdateOne {
	miuo.mutation.AddProductOptionIDs(ids...)
	return miuo
}

// AddProductOptions adds the "product_options" edges to the ModProductOption entity.
func (miuo *ModIdeaUpdateOne) AddProductOptions(m ...*ModProductOption) *ModIdeaUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return miuo.AddProductOptionIDs(ids...)
}

// Mutation returns the ModIdeaMutation object of the builder.
func (miuo *ModIdeaUpdateOne) Mutation() *ModIdeaMutation {
	return miuo.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (miuo *ModIdeaUpdateOne) ClearCar() *ModIdeaUpdateOne {
	miuo.mutation.ClearCar()
	return miuo
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (miuo *ModIdeaUpdateOne) ClearTasks() *ModIdeaUpdateOne {
	miuo.mutation.ClearTasks()
	return miuo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (miuo *ModIdeaUpdateOne) RemoveTaskIDs(ids ...uuid.UUID) *ModIdeaUpdateOne {
	miuo.mutation.RemoveTaskIDs(ids...)
	return miuo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (miuo *ModIdeaUpdateOne) RemoveTasks(t ...*Task) *ModIdeaUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return miuo.RemoveTaskIDs(ids...)
}

// ClearProductOptions clears all "product_options" edges to the ModProductOption entity.
func (miuo *ModIdeaUpdateOne) ClearProductOptions() *ModIdeaUpdateOne {
	miuo.mutation.ClearProductOptions()
	return miuo
}

// RemoveProductOptionIDs removes the "product_options" edge to ModProductOption entities by IDs.
func (miuo *ModIdeaUpdateOne) RemoveProductOptionIDs(ids ...uuid.UUID) *ModIdeaUpdateOne {
	miuo.mutation.RemoveProductOptionIDs(ids...)
	return miuo
}

// RemoveProductOptions removes "product_options" edges to ModProductOption entities.
func (miuo *ModIdeaUpdateOne) RemoveProductOptions(m ...*ModProductOption) *ModIdeaUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return miuo.RemoveProductOptionIDs(ids...)
}

// Where appends a list predicates to the ModIdeaUpdate builder.
func (miuo *ModIdeaUpdateOne) Where(ps ...predicate.ModIdea) *ModIdeaUpdateOne {
	miuo.mutation.Where(ps...)
	return miuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (miuo *ModIdeaUpdateOne) Select(field string, fields ...string) *ModIdeaUpdateOne {
	miuo.fields = append([]string{field}, fields...)
	return miuo
}

// Save executes the query and returns the updated ModIdea entity.
func (miuo *ModIdeaUpdateOne) Save(ctx context.Context) (*ModIdea, error) {
	miuo.defaults()
	return withHooks(ctx, miuo.sqlSave, miuo.mutation, miuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (miuo *ModIdeaUpdateOne) SaveX(ctx context.Context) *ModIdea {
	node, err := miuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (miuo *ModIdeaUpdateOne) Exec(ctx context.Context) error {
	_, err := miuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (miuo *ModIdeaUpdateOne) ExecX(ctx context.Context) {
	if err := miuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (miuo *ModIdeaUpdateOne) defaults() {
	if _, ok := miuo.mutation.UpdateTime(); !ok {
		v := modidea.UpdateDefaultUpdateTime()
		miuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (miuo *ModIdeaUpdateOne) check() error {
	if v, ok := miuo.mutation.Category(); ok {
		if err := modidea.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "ModIdea.category": %w`, err)}
		}
	}
	if miuo.mutation.CarCleared() && len(miuo.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ModIdea.car"`)
	}
	return nil
}

func (miuo *ModIdeaUpdateOne) sqlSave(ctx context.Context) (_node *ModIdea, err error) {
	if err := miuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(modidea.Table, modidea.Columns, sqlgraph.NewFieldSpec(modidea.FieldID, field.TypeUUID))
	id, ok := miuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ModIdea.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := miuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, modidea.FieldID)
		for _, f := range fields {
			if !modidea.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != modidea.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := miuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := miuo.mutation.UpdateTime(); ok {
		_spec.SetField(modidea.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := miuo.mutation.Title(); ok {
		_spec.SetField(modidea.FieldTitle, field.TypeString, value)
	}
	if value, ok := miuo.mutation.Category(); ok {
		_spec.SetField(modidea.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := miuo.mutation.Description(); ok {
		_spec.SetField(modidea.FieldDescription, field.TypeString, value)
	}
	if miuo.mutation.DescriptionCleared() {
		_spec.ClearField(modidea.FieldDescription, field.TypeString)
	}
	if value, ok := miuo.mutation.Stage(); ok {
		_spec.SetField(modidea.FieldStage, field.TypeString, value)
	}
	if miuo.mutation.StageCleared() {
		_spec.ClearField(modidea.FieldStage, field.TypeString)
	}
	if miuo.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modidea.CarTable,
			Columns: []string{modidea.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miuo.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   modidea.CarTable,
			Columns: []string{modidea.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if miuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   modidea.TasksTable,
			Columns: modidea.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miuo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !miuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   modidea.TasksTable,
			Columns: modidea.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miuo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   modidea.TasksTable,
			Columns: modidea.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if miuo.mutation.ProductOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modidea.ProductOptionsTable,
			Columns: []string{modidea.ProductOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modproductoption.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miuo.mutation.RemovedProductOptionsIDs(); len(nodes) > 0 && !miuo.mutation.ProductOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modidea.ProductOptionsTable,
			Columns: []string{modidea.ProductOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modproductoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := miuo.mutation.ProductOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   modidea.ProductOptionsTable,
			Columns: []string{modidea.ProductOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(modproductoption.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ModIdea{config: miuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, miuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{modidea.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	miuo.mutation.done = true
	return _node, nil
}
