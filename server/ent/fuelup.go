// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/expense"
	"github.com/Dan6erbond/revline/ent/fuelup"
	"github.com/Dan6erbond/revline/ent/odometerreading"
	"github.com/google/uuid"
)

// FuelUp is the model entity for the FuelUp schema.
type FuelUp struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// OccurredAt holds the value of the "occurred_at" field.
	OccurredAt time.Time `json:"occurred_at,omitempty"`
	// Station holds the value of the "station" field.
	Station string `json:"station,omitempty"`
	// AmountLiters holds the value of the "amount_liters" field.
	AmountLiters float64 `json:"amount_liters,omitempty"`
	// FuelCategory holds the value of the "fuel_category" field.
	FuelCategory fuelup.FuelCategory `json:"fuel_category,omitempty"`
	// OctaneRating holds the value of the "octane_rating" field.
	OctaneRating *fuelup.OctaneRating `json:"octane_rating,omitempty"`
	// IsFullTank holds the value of the "is_full_tank" field.
	IsFullTank bool `json:"is_full_tank,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes *string `json:"notes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FuelUpQuery when eager-loading is set.
	Edges                    FuelUpEdges `json:"edges"`
	car_fuel_ups             *uuid.UUID
	odometer_reading_fuel_up *uuid.UUID
	selectValues             sql.SelectValues
}

// FuelUpEdges holds the relations/edges for other nodes in the graph.
type FuelUpEdges struct {
	// Car holds the value of the car edge.
	Car *Car `json:"car,omitempty"`
	// OdometerReading holds the value of the odometer_reading edge.
	OdometerReading *OdometerReading `json:"odometer_reading,omitempty"`
	// Expense holds the value of the expense edge.
	Expense *Expense `json:"expense,omitempty"`
	// Documents holds the value of the documents edge.
	Documents []*Document `json:"documents,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedDocuments map[string][]*Document
}

// CarOrErr returns the Car value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FuelUpEdges) CarOrErr() (*Car, error) {
	if e.Car != nil {
		return e.Car, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: car.Label}
	}
	return nil, &NotLoadedError{edge: "car"}
}

// OdometerReadingOrErr returns the OdometerReading value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FuelUpEdges) OdometerReadingOrErr() (*OdometerReading, error) {
	if e.OdometerReading != nil {
		return e.OdometerReading, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: odometerreading.Label}
	}
	return nil, &NotLoadedError{edge: "odometer_reading"}
}

// ExpenseOrErr returns the Expense value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FuelUpEdges) ExpenseOrErr() (*Expense, error) {
	if e.Expense != nil {
		return e.Expense, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: expense.Label}
	}
	return nil, &NotLoadedError{edge: "expense"}
}

// DocumentsOrErr returns the Documents value or an error if the edge
// was not loaded in eager-loading.
func (e FuelUpEdges) DocumentsOrErr() ([]*Document, error) {
	if e.loadedTypes[3] {
		return e.Documents, nil
	}
	return nil, &NotLoadedError{edge: "documents"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FuelUp) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fuelup.FieldIsFullTank:
			values[i] = new(sql.NullBool)
		case fuelup.FieldAmountLiters:
			values[i] = new(sql.NullFloat64)
		case fuelup.FieldStation, fuelup.FieldFuelCategory, fuelup.FieldOctaneRating, fuelup.FieldNotes:
			values[i] = new(sql.NullString)
		case fuelup.FieldCreateTime, fuelup.FieldUpdateTime, fuelup.FieldOccurredAt:
			values[i] = new(sql.NullTime)
		case fuelup.FieldID:
			values[i] = new(uuid.UUID)
		case fuelup.ForeignKeys[0]: // car_fuel_ups
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case fuelup.ForeignKeys[1]: // odometer_reading_fuel_up
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FuelUp fields.
func (fu *FuelUp) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fuelup.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				fu.ID = *value
			}
		case fuelup.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				fu.CreateTime = value.Time
			}
		case fuelup.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				fu.UpdateTime = value.Time
			}
		case fuelup.FieldOccurredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field occurred_at", values[i])
			} else if value.Valid {
				fu.OccurredAt = value.Time
			}
		case fuelup.FieldStation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field station", values[i])
			} else if value.Valid {
				fu.Station = value.String
			}
		case fuelup.FieldAmountLiters:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount_liters", values[i])
			} else if value.Valid {
				fu.AmountLiters = value.Float64
			}
		case fuelup.FieldFuelCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fuel_category", values[i])
			} else if value.Valid {
				fu.FuelCategory = fuelup.FuelCategory(value.String)
			}
		case fuelup.FieldOctaneRating:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field octane_rating", values[i])
			} else if value.Valid {
				fu.OctaneRating = new(fuelup.OctaneRating)
				*fu.OctaneRating = fuelup.OctaneRating(value.String)
			}
		case fuelup.FieldIsFullTank:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_full_tank", values[i])
			} else if value.Valid {
				fu.IsFullTank = value.Bool
			}
		case fuelup.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				fu.Notes = new(string)
				*fu.Notes = value.String
			}
		case fuelup.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field car_fuel_ups", values[i])
			} else if value.Valid {
				fu.car_fuel_ups = new(uuid.UUID)
				*fu.car_fuel_ups = *value.S.(*uuid.UUID)
			}
		case fuelup.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field odometer_reading_fuel_up", values[i])
			} else if value.Valid {
				fu.odometer_reading_fuel_up = new(uuid.UUID)
				*fu.odometer_reading_fuel_up = *value.S.(*uuid.UUID)
			}
		default:
			fu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FuelUp.
// This includes values selected through modifiers, order, etc.
func (fu *FuelUp) Value(name string) (ent.Value, error) {
	return fu.selectValues.Get(name)
}

// QueryCar queries the "car" edge of the FuelUp entity.
func (fu *FuelUp) QueryCar() *CarQuery {
	return NewFuelUpClient(fu.config).QueryCar(fu)
}

// QueryOdometerReading queries the "odometer_reading" edge of the FuelUp entity.
func (fu *FuelUp) QueryOdometerReading() *OdometerReadingQuery {
	return NewFuelUpClient(fu.config).QueryOdometerReading(fu)
}

// QueryExpense queries the "expense" edge of the FuelUp entity.
func (fu *FuelUp) QueryExpense() *ExpenseQuery {
	return NewFuelUpClient(fu.config).QueryExpense(fu)
}

// QueryDocuments queries the "documents" edge of the FuelUp entity.
func (fu *FuelUp) QueryDocuments() *DocumentQuery {
	return NewFuelUpClient(fu.config).QueryDocuments(fu)
}

// Update returns a builder for updating this FuelUp.
// Note that you need to call FuelUp.Unwrap() before calling this method if this FuelUp
// was returned from a transaction, and the transaction was committed or rolled back.
func (fu *FuelUp) Update() *FuelUpUpdateOne {
	return NewFuelUpClient(fu.config).UpdateOne(fu)
}

// Unwrap unwraps the FuelUp entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fu *FuelUp) Unwrap() *FuelUp {
	_tx, ok := fu.config.driver.(*txDriver)
	if !ok {
		panic("ent: FuelUp is not a transactional entity")
	}
	fu.config.driver = _tx.drv
	return fu
}

// String implements the fmt.Stringer.
func (fu *FuelUp) String() string {
	var builder strings.Builder
	builder.WriteString("FuelUp(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fu.ID))
	builder.WriteString("create_time=")
	builder.WriteString(fu.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(fu.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("occurred_at=")
	builder.WriteString(fu.OccurredAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("station=")
	builder.WriteString(fu.Station)
	builder.WriteString(", ")
	builder.WriteString("amount_liters=")
	builder.WriteString(fmt.Sprintf("%v", fu.AmountLiters))
	builder.WriteString(", ")
	builder.WriteString("fuel_category=")
	builder.WriteString(fmt.Sprintf("%v", fu.FuelCategory))
	builder.WriteString(", ")
	if v := fu.OctaneRating; v != nil {
		builder.WriteString("octane_rating=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("is_full_tank=")
	builder.WriteString(fmt.Sprintf("%v", fu.IsFullTank))
	builder.WriteString(", ")
	if v := fu.Notes; v != nil {
		builder.WriteString("notes=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedDocuments returns the Documents named value or an error if the edge was not
// loaded in eager-loading with this name.
func (fu *FuelUp) NamedDocuments(name string) ([]*Document, error) {
	if fu.Edges.namedDocuments == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := fu.Edges.namedDocuments[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (fu *FuelUp) appendNamedDocuments(name string, edges ...*Document) {
	if fu.Edges.namedDocuments == nil {
		fu.Edges.namedDocuments = make(map[string][]*Document)
	}
	if len(edges) == 0 {
		fu.Edges.namedDocuments[name] = []*Document{}
	} else {
		fu.Edges.namedDocuments[name] = append(fu.Edges.namedDocuments[name], edges...)
	}
}

// FuelUps is a parsable slice of FuelUp.
type FuelUps []*FuelUp
