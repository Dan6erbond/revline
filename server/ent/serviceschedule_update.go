// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/Dan6erbond/revline/ent/serviceitem"
	"github.com/Dan6erbond/revline/ent/servicelog"
	"github.com/Dan6erbond/revline/ent/serviceschedule"
	"github.com/google/uuid"
)

// ServiceScheduleUpdate is the builder for updating ServiceSchedule entities.
type ServiceScheduleUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceScheduleMutation
}

// Where appends a list predicates to the ServiceScheduleUpdate builder.
func (ssu *ServiceScheduleUpdate) Where(ps ...predicate.ServiceSchedule) *ServiceScheduleUpdate {
	ssu.mutation.Where(ps...)
	return ssu
}

// SetUpdateTime sets the "update_time" field.
func (ssu *ServiceScheduleUpdate) SetUpdateTime(t time.Time) *ServiceScheduleUpdate {
	ssu.mutation.SetUpdateTime(t)
	return ssu
}

// SetTitle sets the "title" field.
func (ssu *ServiceScheduleUpdate) SetTitle(s string) *ServiceScheduleUpdate {
	ssu.mutation.SetTitle(s)
	return ssu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ssu *ServiceScheduleUpdate) SetNillableTitle(s *string) *ServiceScheduleUpdate {
	if s != nil {
		ssu.SetTitle(*s)
	}
	return ssu
}

// SetRepeatEveryKm sets the "repeat_every_km" field.
func (ssu *ServiceScheduleUpdate) SetRepeatEveryKm(f float64) *ServiceScheduleUpdate {
	ssu.mutation.ResetRepeatEveryKm()
	ssu.mutation.SetRepeatEveryKm(f)
	return ssu
}

// SetNillableRepeatEveryKm sets the "repeat_every_km" field if the given value is not nil.
func (ssu *ServiceScheduleUpdate) SetNillableRepeatEveryKm(f *float64) *ServiceScheduleUpdate {
	if f != nil {
		ssu.SetRepeatEveryKm(*f)
	}
	return ssu
}

// AddRepeatEveryKm adds f to the "repeat_every_km" field.
func (ssu *ServiceScheduleUpdate) AddRepeatEveryKm(f float64) *ServiceScheduleUpdate {
	ssu.mutation.AddRepeatEveryKm(f)
	return ssu
}

// ClearRepeatEveryKm clears the value of the "repeat_every_km" field.
func (ssu *ServiceScheduleUpdate) ClearRepeatEveryKm() *ServiceScheduleUpdate {
	ssu.mutation.ClearRepeatEveryKm()
	return ssu
}

// SetStartsAtKm sets the "starts_at_km" field.
func (ssu *ServiceScheduleUpdate) SetStartsAtKm(f float64) *ServiceScheduleUpdate {
	ssu.mutation.ResetStartsAtKm()
	ssu.mutation.SetStartsAtKm(f)
	return ssu
}

// SetNillableStartsAtKm sets the "starts_at_km" field if the given value is not nil.
func (ssu *ServiceScheduleUpdate) SetNillableStartsAtKm(f *float64) *ServiceScheduleUpdate {
	if f != nil {
		ssu.SetStartsAtKm(*f)
	}
	return ssu
}

// AddStartsAtKm adds f to the "starts_at_km" field.
func (ssu *ServiceScheduleUpdate) AddStartsAtKm(f float64) *ServiceScheduleUpdate {
	ssu.mutation.AddStartsAtKm(f)
	return ssu
}

// ClearStartsAtKm clears the value of the "starts_at_km" field.
func (ssu *ServiceScheduleUpdate) ClearStartsAtKm() *ServiceScheduleUpdate {
	ssu.mutation.ClearStartsAtKm()
	return ssu
}

// SetRepeatEveryMonths sets the "repeat_every_months" field.
func (ssu *ServiceScheduleUpdate) SetRepeatEveryMonths(i int) *ServiceScheduleUpdate {
	ssu.mutation.ResetRepeatEveryMonths()
	ssu.mutation.SetRepeatEveryMonths(i)
	return ssu
}

// SetNillableRepeatEveryMonths sets the "repeat_every_months" field if the given value is not nil.
func (ssu *ServiceScheduleUpdate) SetNillableRepeatEveryMonths(i *int) *ServiceScheduleUpdate {
	if i != nil {
		ssu.SetRepeatEveryMonths(*i)
	}
	return ssu
}

// AddRepeatEveryMonths adds i to the "repeat_every_months" field.
func (ssu *ServiceScheduleUpdate) AddRepeatEveryMonths(i int) *ServiceScheduleUpdate {
	ssu.mutation.AddRepeatEveryMonths(i)
	return ssu
}

// ClearRepeatEveryMonths clears the value of the "repeat_every_months" field.
func (ssu *ServiceScheduleUpdate) ClearRepeatEveryMonths() *ServiceScheduleUpdate {
	ssu.mutation.ClearRepeatEveryMonths()
	return ssu
}

// SetStartsAtMonths sets the "starts_at_months" field.
func (ssu *ServiceScheduleUpdate) SetStartsAtMonths(i int) *ServiceScheduleUpdate {
	ssu.mutation.ResetStartsAtMonths()
	ssu.mutation.SetStartsAtMonths(i)
	return ssu
}

// SetNillableStartsAtMonths sets the "starts_at_months" field if the given value is not nil.
func (ssu *ServiceScheduleUpdate) SetNillableStartsAtMonths(i *int) *ServiceScheduleUpdate {
	if i != nil {
		ssu.SetStartsAtMonths(*i)
	}
	return ssu
}

// AddStartsAtMonths adds i to the "starts_at_months" field.
func (ssu *ServiceScheduleUpdate) AddStartsAtMonths(i int) *ServiceScheduleUpdate {
	ssu.mutation.AddStartsAtMonths(i)
	return ssu
}

// ClearStartsAtMonths clears the value of the "starts_at_months" field.
func (ssu *ServiceScheduleUpdate) ClearStartsAtMonths() *ServiceScheduleUpdate {
	ssu.mutation.ClearStartsAtMonths()
	return ssu
}

// SetNotes sets the "notes" field.
func (ssu *ServiceScheduleUpdate) SetNotes(s string) *ServiceScheduleUpdate {
	ssu.mutation.SetNotes(s)
	return ssu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (ssu *ServiceScheduleUpdate) SetNillableNotes(s *string) *ServiceScheduleUpdate {
	if s != nil {
		ssu.SetNotes(*s)
	}
	return ssu
}

// ClearNotes clears the value of the "notes" field.
func (ssu *ServiceScheduleUpdate) ClearNotes() *ServiceScheduleUpdate {
	ssu.mutation.ClearNotes()
	return ssu
}

// SetArchived sets the "archived" field.
func (ssu *ServiceScheduleUpdate) SetArchived(b bool) *ServiceScheduleUpdate {
	ssu.mutation.SetArchived(b)
	return ssu
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (ssu *ServiceScheduleUpdate) SetNillableArchived(b *bool) *ServiceScheduleUpdate {
	if b != nil {
		ssu.SetArchived(*b)
	}
	return ssu
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (ssu *ServiceScheduleUpdate) SetCarID(id uuid.UUID) *ServiceScheduleUpdate {
	ssu.mutation.SetCarID(id)
	return ssu
}

// SetCar sets the "car" edge to the Car entity.
func (ssu *ServiceScheduleUpdate) SetCar(c *Car) *ServiceScheduleUpdate {
	return ssu.SetCarID(c.ID)
}

// AddItemIDs adds the "items" edge to the ServiceItem entity by IDs.
func (ssu *ServiceScheduleUpdate) AddItemIDs(ids ...uuid.UUID) *ServiceScheduleUpdate {
	ssu.mutation.AddItemIDs(ids...)
	return ssu
}

// AddItems adds the "items" edges to the ServiceItem entity.
func (ssu *ServiceScheduleUpdate) AddItems(s ...*ServiceItem) *ServiceScheduleUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssu.AddItemIDs(ids...)
}

// AddLogIDs adds the "logs" edge to the ServiceLog entity by IDs.
func (ssu *ServiceScheduleUpdate) AddLogIDs(ids ...uuid.UUID) *ServiceScheduleUpdate {
	ssu.mutation.AddLogIDs(ids...)
	return ssu
}

// AddLogs adds the "logs" edges to the ServiceLog entity.
func (ssu *ServiceScheduleUpdate) AddLogs(s ...*ServiceLog) *ServiceScheduleUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssu.AddLogIDs(ids...)
}

// Mutation returns the ServiceScheduleMutation object of the builder.
func (ssu *ServiceScheduleUpdate) Mutation() *ServiceScheduleMutation {
	return ssu.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (ssu *ServiceScheduleUpdate) ClearCar() *ServiceScheduleUpdate {
	ssu.mutation.ClearCar()
	return ssu
}

// ClearItems clears all "items" edges to the ServiceItem entity.
func (ssu *ServiceScheduleUpdate) ClearItems() *ServiceScheduleUpdate {
	ssu.mutation.ClearItems()
	return ssu
}

// RemoveItemIDs removes the "items" edge to ServiceItem entities by IDs.
func (ssu *ServiceScheduleUpdate) RemoveItemIDs(ids ...uuid.UUID) *ServiceScheduleUpdate {
	ssu.mutation.RemoveItemIDs(ids...)
	return ssu
}

// RemoveItems removes "items" edges to ServiceItem entities.
func (ssu *ServiceScheduleUpdate) RemoveItems(s ...*ServiceItem) *ServiceScheduleUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssu.RemoveItemIDs(ids...)
}

// ClearLogs clears all "logs" edges to the ServiceLog entity.
func (ssu *ServiceScheduleUpdate) ClearLogs() *ServiceScheduleUpdate {
	ssu.mutation.ClearLogs()
	return ssu
}

// RemoveLogIDs removes the "logs" edge to ServiceLog entities by IDs.
func (ssu *ServiceScheduleUpdate) RemoveLogIDs(ids ...uuid.UUID) *ServiceScheduleUpdate {
	ssu.mutation.RemoveLogIDs(ids...)
	return ssu
}

// RemoveLogs removes "logs" edges to ServiceLog entities.
func (ssu *ServiceScheduleUpdate) RemoveLogs(s ...*ServiceLog) *ServiceScheduleUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssu.RemoveLogIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ssu *ServiceScheduleUpdate) Save(ctx context.Context) (int, error) {
	ssu.defaults()
	return withHooks(ctx, ssu.sqlSave, ssu.mutation, ssu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssu *ServiceScheduleUpdate) SaveX(ctx context.Context) int {
	affected, err := ssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ssu *ServiceScheduleUpdate) Exec(ctx context.Context) error {
	_, err := ssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssu *ServiceScheduleUpdate) ExecX(ctx context.Context) {
	if err := ssu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssu *ServiceScheduleUpdate) defaults() {
	if _, ok := ssu.mutation.UpdateTime(); !ok {
		v := serviceschedule.UpdateDefaultUpdateTime()
		ssu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssu *ServiceScheduleUpdate) check() error {
	if ssu.mutation.CarCleared() && len(ssu.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ServiceSchedule.car"`)
	}
	return nil
}

func (ssu *ServiceScheduleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ssu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(serviceschedule.Table, serviceschedule.Columns, sqlgraph.NewFieldSpec(serviceschedule.FieldID, field.TypeUUID))
	if ps := ssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssu.mutation.UpdateTime(); ok {
		_spec.SetField(serviceschedule.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ssu.mutation.Title(); ok {
		_spec.SetField(serviceschedule.FieldTitle, field.TypeString, value)
	}
	if value, ok := ssu.mutation.RepeatEveryKm(); ok {
		_spec.SetField(serviceschedule.FieldRepeatEveryKm, field.TypeFloat64, value)
	}
	if value, ok := ssu.mutation.AddedRepeatEveryKm(); ok {
		_spec.AddField(serviceschedule.FieldRepeatEveryKm, field.TypeFloat64, value)
	}
	if ssu.mutation.RepeatEveryKmCleared() {
		_spec.ClearField(serviceschedule.FieldRepeatEveryKm, field.TypeFloat64)
	}
	if value, ok := ssu.mutation.StartsAtKm(); ok {
		_spec.SetField(serviceschedule.FieldStartsAtKm, field.TypeFloat64, value)
	}
	if value, ok := ssu.mutation.AddedStartsAtKm(); ok {
		_spec.AddField(serviceschedule.FieldStartsAtKm, field.TypeFloat64, value)
	}
	if ssu.mutation.StartsAtKmCleared() {
		_spec.ClearField(serviceschedule.FieldStartsAtKm, field.TypeFloat64)
	}
	if value, ok := ssu.mutation.RepeatEveryMonths(); ok {
		_spec.SetField(serviceschedule.FieldRepeatEveryMonths, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AddedRepeatEveryMonths(); ok {
		_spec.AddField(serviceschedule.FieldRepeatEveryMonths, field.TypeInt, value)
	}
	if ssu.mutation.RepeatEveryMonthsCleared() {
		_spec.ClearField(serviceschedule.FieldRepeatEveryMonths, field.TypeInt)
	}
	if value, ok := ssu.mutation.StartsAtMonths(); ok {
		_spec.SetField(serviceschedule.FieldStartsAtMonths, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AddedStartsAtMonths(); ok {
		_spec.AddField(serviceschedule.FieldStartsAtMonths, field.TypeInt, value)
	}
	if ssu.mutation.StartsAtMonthsCleared() {
		_spec.ClearField(serviceschedule.FieldStartsAtMonths, field.TypeInt)
	}
	if value, ok := ssu.mutation.Notes(); ok {
		_spec.SetField(serviceschedule.FieldNotes, field.TypeString, value)
	}
	if ssu.mutation.NotesCleared() {
		_spec.ClearField(serviceschedule.FieldNotes, field.TypeString)
	}
	if value, ok := ssu.mutation.Archived(); ok {
		_spec.SetField(serviceschedule.FieldArchived, field.TypeBool, value)
	}
	if ssu.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceschedule.CarTable,
			Columns: []string{serviceschedule.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceschedule.CarTable,
			Columns: []string{serviceschedule.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   serviceschedule.ItemsTable,
			Columns: serviceschedule.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.RemovedItemsIDs(); len(nodes) > 0 && !ssu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   serviceschedule.ItemsTable,
			Columns: serviceschedule.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   serviceschedule.ItemsTable,
			Columns: serviceschedule.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceschedule.LogsTable,
			Columns: []string{serviceschedule.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.RemovedLogsIDs(); len(nodes) > 0 && !ssu.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceschedule.LogsTable,
			Columns: []string{serviceschedule.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceschedule.LogsTable,
			Columns: []string{serviceschedule.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceschedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ssu.mutation.done = true
	return n, nil
}

// ServiceScheduleUpdateOne is the builder for updating a single ServiceSchedule entity.
type ServiceScheduleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceScheduleMutation
}

// SetUpdateTime sets the "update_time" field.
func (ssuo *ServiceScheduleUpdateOne) SetUpdateTime(t time.Time) *ServiceScheduleUpdateOne {
	ssuo.mutation.SetUpdateTime(t)
	return ssuo
}

// SetTitle sets the "title" field.
func (ssuo *ServiceScheduleUpdateOne) SetTitle(s string) *ServiceScheduleUpdateOne {
	ssuo.mutation.SetTitle(s)
	return ssuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ssuo *ServiceScheduleUpdateOne) SetNillableTitle(s *string) *ServiceScheduleUpdateOne {
	if s != nil {
		ssuo.SetTitle(*s)
	}
	return ssuo
}

// SetRepeatEveryKm sets the "repeat_every_km" field.
func (ssuo *ServiceScheduleUpdateOne) SetRepeatEveryKm(f float64) *ServiceScheduleUpdateOne {
	ssuo.mutation.ResetRepeatEveryKm()
	ssuo.mutation.SetRepeatEveryKm(f)
	return ssuo
}

// SetNillableRepeatEveryKm sets the "repeat_every_km" field if the given value is not nil.
func (ssuo *ServiceScheduleUpdateOne) SetNillableRepeatEveryKm(f *float64) *ServiceScheduleUpdateOne {
	if f != nil {
		ssuo.SetRepeatEveryKm(*f)
	}
	return ssuo
}

// AddRepeatEveryKm adds f to the "repeat_every_km" field.
func (ssuo *ServiceScheduleUpdateOne) AddRepeatEveryKm(f float64) *ServiceScheduleUpdateOne {
	ssuo.mutation.AddRepeatEveryKm(f)
	return ssuo
}

// ClearRepeatEveryKm clears the value of the "repeat_every_km" field.
func (ssuo *ServiceScheduleUpdateOne) ClearRepeatEveryKm() *ServiceScheduleUpdateOne {
	ssuo.mutation.ClearRepeatEveryKm()
	return ssuo
}

// SetStartsAtKm sets the "starts_at_km" field.
func (ssuo *ServiceScheduleUpdateOne) SetStartsAtKm(f float64) *ServiceScheduleUpdateOne {
	ssuo.mutation.ResetStartsAtKm()
	ssuo.mutation.SetStartsAtKm(f)
	return ssuo
}

// SetNillableStartsAtKm sets the "starts_at_km" field if the given value is not nil.
func (ssuo *ServiceScheduleUpdateOne) SetNillableStartsAtKm(f *float64) *ServiceScheduleUpdateOne {
	if f != nil {
		ssuo.SetStartsAtKm(*f)
	}
	return ssuo
}

// AddStartsAtKm adds f to the "starts_at_km" field.
func (ssuo *ServiceScheduleUpdateOne) AddStartsAtKm(f float64) *ServiceScheduleUpdateOne {
	ssuo.mutation.AddStartsAtKm(f)
	return ssuo
}

// ClearStartsAtKm clears the value of the "starts_at_km" field.
func (ssuo *ServiceScheduleUpdateOne) ClearStartsAtKm() *ServiceScheduleUpdateOne {
	ssuo.mutation.ClearStartsAtKm()
	return ssuo
}

// SetRepeatEveryMonths sets the "repeat_every_months" field.
func (ssuo *ServiceScheduleUpdateOne) SetRepeatEveryMonths(i int) *ServiceScheduleUpdateOne {
	ssuo.mutation.ResetRepeatEveryMonths()
	ssuo.mutation.SetRepeatEveryMonths(i)
	return ssuo
}

// SetNillableRepeatEveryMonths sets the "repeat_every_months" field if the given value is not nil.
func (ssuo *ServiceScheduleUpdateOne) SetNillableRepeatEveryMonths(i *int) *ServiceScheduleUpdateOne {
	if i != nil {
		ssuo.SetRepeatEveryMonths(*i)
	}
	return ssuo
}

// AddRepeatEveryMonths adds i to the "repeat_every_months" field.
func (ssuo *ServiceScheduleUpdateOne) AddRepeatEveryMonths(i int) *ServiceScheduleUpdateOne {
	ssuo.mutation.AddRepeatEveryMonths(i)
	return ssuo
}

// ClearRepeatEveryMonths clears the value of the "repeat_every_months" field.
func (ssuo *ServiceScheduleUpdateOne) ClearRepeatEveryMonths() *ServiceScheduleUpdateOne {
	ssuo.mutation.ClearRepeatEveryMonths()
	return ssuo
}

// SetStartsAtMonths sets the "starts_at_months" field.
func (ssuo *ServiceScheduleUpdateOne) SetStartsAtMonths(i int) *ServiceScheduleUpdateOne {
	ssuo.mutation.ResetStartsAtMonths()
	ssuo.mutation.SetStartsAtMonths(i)
	return ssuo
}

// SetNillableStartsAtMonths sets the "starts_at_months" field if the given value is not nil.
func (ssuo *ServiceScheduleUpdateOne) SetNillableStartsAtMonths(i *int) *ServiceScheduleUpdateOne {
	if i != nil {
		ssuo.SetStartsAtMonths(*i)
	}
	return ssuo
}

// AddStartsAtMonths adds i to the "starts_at_months" field.
func (ssuo *ServiceScheduleUpdateOne) AddStartsAtMonths(i int) *ServiceScheduleUpdateOne {
	ssuo.mutation.AddStartsAtMonths(i)
	return ssuo
}

// ClearStartsAtMonths clears the value of the "starts_at_months" field.
func (ssuo *ServiceScheduleUpdateOne) ClearStartsAtMonths() *ServiceScheduleUpdateOne {
	ssuo.mutation.ClearStartsAtMonths()
	return ssuo
}

// SetNotes sets the "notes" field.
func (ssuo *ServiceScheduleUpdateOne) SetNotes(s string) *ServiceScheduleUpdateOne {
	ssuo.mutation.SetNotes(s)
	return ssuo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (ssuo *ServiceScheduleUpdateOne) SetNillableNotes(s *string) *ServiceScheduleUpdateOne {
	if s != nil {
		ssuo.SetNotes(*s)
	}
	return ssuo
}

// ClearNotes clears the value of the "notes" field.
func (ssuo *ServiceScheduleUpdateOne) ClearNotes() *ServiceScheduleUpdateOne {
	ssuo.mutation.ClearNotes()
	return ssuo
}

// SetArchived sets the "archived" field.
func (ssuo *ServiceScheduleUpdateOne) SetArchived(b bool) *ServiceScheduleUpdateOne {
	ssuo.mutation.SetArchived(b)
	return ssuo
}

// SetNillableArchived sets the "archived" field if the given value is not nil.
func (ssuo *ServiceScheduleUpdateOne) SetNillableArchived(b *bool) *ServiceScheduleUpdateOne {
	if b != nil {
		ssuo.SetArchived(*b)
	}
	return ssuo
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (ssuo *ServiceScheduleUpdateOne) SetCarID(id uuid.UUID) *ServiceScheduleUpdateOne {
	ssuo.mutation.SetCarID(id)
	return ssuo
}

// SetCar sets the "car" edge to the Car entity.
func (ssuo *ServiceScheduleUpdateOne) SetCar(c *Car) *ServiceScheduleUpdateOne {
	return ssuo.SetCarID(c.ID)
}

// AddItemIDs adds the "items" edge to the ServiceItem entity by IDs.
func (ssuo *ServiceScheduleUpdateOne) AddItemIDs(ids ...uuid.UUID) *ServiceScheduleUpdateOne {
	ssuo.mutation.AddItemIDs(ids...)
	return ssuo
}

// AddItems adds the "items" edges to the ServiceItem entity.
func (ssuo *ServiceScheduleUpdateOne) AddItems(s ...*ServiceItem) *ServiceScheduleUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssuo.AddItemIDs(ids...)
}

// AddLogIDs adds the "logs" edge to the ServiceLog entity by IDs.
func (ssuo *ServiceScheduleUpdateOne) AddLogIDs(ids ...uuid.UUID) *ServiceScheduleUpdateOne {
	ssuo.mutation.AddLogIDs(ids...)
	return ssuo
}

// AddLogs adds the "logs" edges to the ServiceLog entity.
func (ssuo *ServiceScheduleUpdateOne) AddLogs(s ...*ServiceLog) *ServiceScheduleUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssuo.AddLogIDs(ids...)
}

// Mutation returns the ServiceScheduleMutation object of the builder.
func (ssuo *ServiceScheduleUpdateOne) Mutation() *ServiceScheduleMutation {
	return ssuo.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (ssuo *ServiceScheduleUpdateOne) ClearCar() *ServiceScheduleUpdateOne {
	ssuo.mutation.ClearCar()
	return ssuo
}

// ClearItems clears all "items" edges to the ServiceItem entity.
func (ssuo *ServiceScheduleUpdateOne) ClearItems() *ServiceScheduleUpdateOne {
	ssuo.mutation.ClearItems()
	return ssuo
}

// RemoveItemIDs removes the "items" edge to ServiceItem entities by IDs.
func (ssuo *ServiceScheduleUpdateOne) RemoveItemIDs(ids ...uuid.UUID) *ServiceScheduleUpdateOne {
	ssuo.mutation.RemoveItemIDs(ids...)
	return ssuo
}

// RemoveItems removes "items" edges to ServiceItem entities.
func (ssuo *ServiceScheduleUpdateOne) RemoveItems(s ...*ServiceItem) *ServiceScheduleUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssuo.RemoveItemIDs(ids...)
}

// ClearLogs clears all "logs" edges to the ServiceLog entity.
func (ssuo *ServiceScheduleUpdateOne) ClearLogs() *ServiceScheduleUpdateOne {
	ssuo.mutation.ClearLogs()
	return ssuo
}

// RemoveLogIDs removes the "logs" edge to ServiceLog entities by IDs.
func (ssuo *ServiceScheduleUpdateOne) RemoveLogIDs(ids ...uuid.UUID) *ServiceScheduleUpdateOne {
	ssuo.mutation.RemoveLogIDs(ids...)
	return ssuo
}

// RemoveLogs removes "logs" edges to ServiceLog entities.
func (ssuo *ServiceScheduleUpdateOne) RemoveLogs(s ...*ServiceLog) *ServiceScheduleUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssuo.RemoveLogIDs(ids...)
}

// Where appends a list predicates to the ServiceScheduleUpdate builder.
func (ssuo *ServiceScheduleUpdateOne) Where(ps ...predicate.ServiceSchedule) *ServiceScheduleUpdateOne {
	ssuo.mutation.Where(ps...)
	return ssuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ssuo *ServiceScheduleUpdateOne) Select(field string, fields ...string) *ServiceScheduleUpdateOne {
	ssuo.fields = append([]string{field}, fields...)
	return ssuo
}

// Save executes the query and returns the updated ServiceSchedule entity.
func (ssuo *ServiceScheduleUpdateOne) Save(ctx context.Context) (*ServiceSchedule, error) {
	ssuo.defaults()
	return withHooks(ctx, ssuo.sqlSave, ssuo.mutation, ssuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssuo *ServiceScheduleUpdateOne) SaveX(ctx context.Context) *ServiceSchedule {
	node, err := ssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ssuo *ServiceScheduleUpdateOne) Exec(ctx context.Context) error {
	_, err := ssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssuo *ServiceScheduleUpdateOne) ExecX(ctx context.Context) {
	if err := ssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssuo *ServiceScheduleUpdateOne) defaults() {
	if _, ok := ssuo.mutation.UpdateTime(); !ok {
		v := serviceschedule.UpdateDefaultUpdateTime()
		ssuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssuo *ServiceScheduleUpdateOne) check() error {
	if ssuo.mutation.CarCleared() && len(ssuo.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ServiceSchedule.car"`)
	}
	return nil
}

func (ssuo *ServiceScheduleUpdateOne) sqlSave(ctx context.Context) (_node *ServiceSchedule, err error) {
	if err := ssuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(serviceschedule.Table, serviceschedule.Columns, sqlgraph.NewFieldSpec(serviceschedule.FieldID, field.TypeUUID))
	id, ok := ssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ServiceSchedule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serviceschedule.FieldID)
		for _, f := range fields {
			if !serviceschedule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != serviceschedule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssuo.mutation.UpdateTime(); ok {
		_spec.SetField(serviceschedule.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ssuo.mutation.Title(); ok {
		_spec.SetField(serviceschedule.FieldTitle, field.TypeString, value)
	}
	if value, ok := ssuo.mutation.RepeatEveryKm(); ok {
		_spec.SetField(serviceschedule.FieldRepeatEveryKm, field.TypeFloat64, value)
	}
	if value, ok := ssuo.mutation.AddedRepeatEveryKm(); ok {
		_spec.AddField(serviceschedule.FieldRepeatEveryKm, field.TypeFloat64, value)
	}
	if ssuo.mutation.RepeatEveryKmCleared() {
		_spec.ClearField(serviceschedule.FieldRepeatEveryKm, field.TypeFloat64)
	}
	if value, ok := ssuo.mutation.StartsAtKm(); ok {
		_spec.SetField(serviceschedule.FieldStartsAtKm, field.TypeFloat64, value)
	}
	if value, ok := ssuo.mutation.AddedStartsAtKm(); ok {
		_spec.AddField(serviceschedule.FieldStartsAtKm, field.TypeFloat64, value)
	}
	if ssuo.mutation.StartsAtKmCleared() {
		_spec.ClearField(serviceschedule.FieldStartsAtKm, field.TypeFloat64)
	}
	if value, ok := ssuo.mutation.RepeatEveryMonths(); ok {
		_spec.SetField(serviceschedule.FieldRepeatEveryMonths, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AddedRepeatEveryMonths(); ok {
		_spec.AddField(serviceschedule.FieldRepeatEveryMonths, field.TypeInt, value)
	}
	if ssuo.mutation.RepeatEveryMonthsCleared() {
		_spec.ClearField(serviceschedule.FieldRepeatEveryMonths, field.TypeInt)
	}
	if value, ok := ssuo.mutation.StartsAtMonths(); ok {
		_spec.SetField(serviceschedule.FieldStartsAtMonths, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AddedStartsAtMonths(); ok {
		_spec.AddField(serviceschedule.FieldStartsAtMonths, field.TypeInt, value)
	}
	if ssuo.mutation.StartsAtMonthsCleared() {
		_spec.ClearField(serviceschedule.FieldStartsAtMonths, field.TypeInt)
	}
	if value, ok := ssuo.mutation.Notes(); ok {
		_spec.SetField(serviceschedule.FieldNotes, field.TypeString, value)
	}
	if ssuo.mutation.NotesCleared() {
		_spec.ClearField(serviceschedule.FieldNotes, field.TypeString)
	}
	if value, ok := ssuo.mutation.Archived(); ok {
		_spec.SetField(serviceschedule.FieldArchived, field.TypeBool, value)
	}
	if ssuo.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceschedule.CarTable,
			Columns: []string{serviceschedule.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   serviceschedule.CarTable,
			Columns: []string{serviceschedule.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   serviceschedule.ItemsTable,
			Columns: serviceschedule.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceitem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.RemovedItemsIDs(); len(nodes) > 0 && !ssuo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   serviceschedule.ItemsTable,
			Columns: serviceschedule.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   serviceschedule.ItemsTable,
			Columns: serviceschedule.ItemsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(serviceitem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceschedule.LogsTable,
			Columns: []string{serviceschedule.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.RemovedLogsIDs(); len(nodes) > 0 && !ssuo.mutation.LogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceschedule.LogsTable,
			Columns: []string{serviceschedule.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.LogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   serviceschedule.LogsTable,
			Columns: []string{serviceschedule.LogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ServiceSchedule{config: ssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serviceschedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ssuo.mutation.done = true
	return _node, nil
}
