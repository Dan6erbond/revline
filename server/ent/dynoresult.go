// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Dan6erbond/revline/ent/dynoresult"
	"github.com/Dan6erbond/revline/ent/dynosession"
	"github.com/google/uuid"
)

// DynoResult is the model entity for the DynoResult schema.
type DynoResult struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Rpm holds the value of the "rpm" field.
	Rpm int `json:"rpm,omitempty"`
	// PowerKw holds the value of the "power_kw" field.
	PowerKw *float64 `json:"power_kw,omitempty"`
	// TorqueNm holds the value of the "torque_nm" field.
	TorqueNm *float64 `json:"torque_nm,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DynoResultQuery when eager-loading is set.
	Edges                DynoResultEdges `json:"edges"`
	dyno_session_results *uuid.UUID
	selectValues         sql.SelectValues
}

// DynoResultEdges holds the relations/edges for other nodes in the graph.
type DynoResultEdges struct {
	// Session holds the value of the session edge.
	Session *DynoSession `json:"session,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// SessionOrErr returns the Session value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DynoResultEdges) SessionOrErr() (*DynoSession, error) {
	if e.Session != nil {
		return e.Session, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: dynosession.Label}
	}
	return nil, &NotLoadedError{edge: "session"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DynoResult) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dynoresult.FieldPowerKw, dynoresult.FieldTorqueNm:
			values[i] = new(sql.NullFloat64)
		case dynoresult.FieldRpm:
			values[i] = new(sql.NullInt64)
		case dynoresult.FieldCreateTime, dynoresult.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case dynoresult.FieldID:
			values[i] = new(uuid.UUID)
		case dynoresult.ForeignKeys[0]: // dyno_session_results
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DynoResult fields.
func (dr *DynoResult) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dynoresult.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				dr.ID = *value
			}
		case dynoresult.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				dr.CreateTime = value.Time
			}
		case dynoresult.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				dr.UpdateTime = value.Time
			}
		case dynoresult.FieldRpm:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rpm", values[i])
			} else if value.Valid {
				dr.Rpm = int(value.Int64)
			}
		case dynoresult.FieldPowerKw:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field power_kw", values[i])
			} else if value.Valid {
				dr.PowerKw = new(float64)
				*dr.PowerKw = value.Float64
			}
		case dynoresult.FieldTorqueNm:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field torque_nm", values[i])
			} else if value.Valid {
				dr.TorqueNm = new(float64)
				*dr.TorqueNm = value.Float64
			}
		case dynoresult.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field dyno_session_results", values[i])
			} else if value.Valid {
				dr.dyno_session_results = new(uuid.UUID)
				*dr.dyno_session_results = *value.S.(*uuid.UUID)
			}
		default:
			dr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DynoResult.
// This includes values selected through modifiers, order, etc.
func (dr *DynoResult) Value(name string) (ent.Value, error) {
	return dr.selectValues.Get(name)
}

// QuerySession queries the "session" edge of the DynoResult entity.
func (dr *DynoResult) QuerySession() *DynoSessionQuery {
	return NewDynoResultClient(dr.config).QuerySession(dr)
}

// Update returns a builder for updating this DynoResult.
// Note that you need to call DynoResult.Unwrap() before calling this method if this DynoResult
// was returned from a transaction, and the transaction was committed or rolled back.
func (dr *DynoResult) Update() *DynoResultUpdateOne {
	return NewDynoResultClient(dr.config).UpdateOne(dr)
}

// Unwrap unwraps the DynoResult entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dr *DynoResult) Unwrap() *DynoResult {
	_tx, ok := dr.config.driver.(*txDriver)
	if !ok {
		panic("ent: DynoResult is not a transactional entity")
	}
	dr.config.driver = _tx.drv
	return dr
}

// String implements the fmt.Stringer.
func (dr *DynoResult) String() string {
	var builder strings.Builder
	builder.WriteString("DynoResult(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dr.ID))
	builder.WriteString("create_time=")
	builder.WriteString(dr.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(dr.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("rpm=")
	builder.WriteString(fmt.Sprintf("%v", dr.Rpm))
	builder.WriteString(", ")
	if v := dr.PowerKw; v != nil {
		builder.WriteString("power_kw=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := dr.TorqueNm; v != nil {
		builder.WriteString("torque_nm=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// DynoResults is a parsable slice of DynoResult.
type DynoResults []*DynoResult
