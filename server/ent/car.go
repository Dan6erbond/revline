// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/media"
	"github.com/Dan6erbond/revline/ent/user"
	"github.com/google/uuid"
)

// Car is the model entity for the Car schema.
type Car struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Make holds the value of the "make" field.
	Make *string `json:"make,omitempty"`
	// Model holds the value of the "model" field.
	Model *string `json:"model,omitempty"`
	// Type holds the value of the "type" field.
	Type *string `json:"type,omitempty"`
	// Year holds the value of the "year" field.
	Year *int `json:"year,omitempty"`
	// Trim holds the value of the "trim" field.
	Trim *string `json:"trim,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarQuery when eager-loading is set.
	Edges            CarEdges `json:"edges"`
	car_banner_image *uuid.UUID
	user_cars        *uuid.UUID
	selectValues     sql.SelectValues
}

// CarEdges holds the relations/edges for other nodes in the graph.
type CarEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// DragSessions holds the value of the drag_sessions edge.
	DragSessions []*DragSession `json:"drag_sessions,omitempty"`
	// FuelUps holds the value of the fuel_ups edge.
	FuelUps []*FuelUp `json:"fuel_ups,omitempty"`
	// OdometerReadings holds the value of the odometer_readings edge.
	OdometerReadings []*OdometerReading `json:"odometer_readings,omitempty"`
	// ServiceItems holds the value of the service_items edge.
	ServiceItems []*ServiceItem `json:"service_items,omitempty"`
	// ServiceLogs holds the value of the service_logs edge.
	ServiceLogs []*ServiceLog `json:"service_logs,omitempty"`
	// ServiceSchedules holds the value of the service_schedules edge.
	ServiceSchedules []*ServiceSchedule `json:"service_schedules,omitempty"`
	// Media holds the value of the media edge.
	Media []*Media `json:"media,omitempty"`
	// Albums holds the value of the albums edge.
	Albums []*Album `json:"albums,omitempty"`
	// Documents holds the value of the documents edge.
	Documents []*Document `json:"documents,omitempty"`
	// DynoSessions holds the value of the dyno_sessions edge.
	DynoSessions []*DynoSession `json:"dyno_sessions,omitempty"`
	// Expenses holds the value of the expenses edge.
	Expenses []*Expense `json:"expenses,omitempty"`
	// BannerImage holds the value of the banner_image edge.
	BannerImage *Media `json:"banner_image,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// ModIdeas holds the value of the mod_ideas edge.
	ModIdeas []*ModIdea `json:"mod_ideas,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [15]bool
	// totalCount holds the count of the edges above.
	totalCount [15]map[string]int

	namedDragSessions     map[string][]*DragSession
	namedFuelUps          map[string][]*FuelUp
	namedOdometerReadings map[string][]*OdometerReading
	namedServiceItems     map[string][]*ServiceItem
	namedServiceLogs      map[string][]*ServiceLog
	namedServiceSchedules map[string][]*ServiceSchedule
	namedMedia            map[string][]*Media
	namedAlbums           map[string][]*Album
	namedDocuments        map[string][]*Document
	namedDynoSessions     map[string][]*DynoSession
	namedExpenses         map[string][]*Expense
	namedTasks            map[string][]*Task
	namedModIdeas         map[string][]*ModIdea
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// DragSessionsOrErr returns the DragSessions value or an error if the edge
// was not loaded in eager-loading.
func (e CarEdges) DragSessionsOrErr() ([]*DragSession, error) {
	if e.loadedTypes[1] {
		return e.DragSessions, nil
	}
	return nil, &NotLoadedError{edge: "drag_sessions"}
}

// FuelUpsOrErr returns the FuelUps value or an error if the edge
// was not loaded in eager-loading.
func (e CarEdges) FuelUpsOrErr() ([]*FuelUp, error) {
	if e.loadedTypes[2] {
		return e.FuelUps, nil
	}
	return nil, &NotLoadedError{edge: "fuel_ups"}
}

// OdometerReadingsOrErr returns the OdometerReadings value or an error if the edge
// was not loaded in eager-loading.
func (e CarEdges) OdometerReadingsOrErr() ([]*OdometerReading, error) {
	if e.loadedTypes[3] {
		return e.OdometerReadings, nil
	}
	return nil, &NotLoadedError{edge: "odometer_readings"}
}

// ServiceItemsOrErr returns the ServiceItems value or an error if the edge
// was not loaded in eager-loading.
func (e CarEdges) ServiceItemsOrErr() ([]*ServiceItem, error) {
	if e.loadedTypes[4] {
		return e.ServiceItems, nil
	}
	return nil, &NotLoadedError{edge: "service_items"}
}

// ServiceLogsOrErr returns the ServiceLogs value or an error if the edge
// was not loaded in eager-loading.
func (e CarEdges) ServiceLogsOrErr() ([]*ServiceLog, error) {
	if e.loadedTypes[5] {
		return e.ServiceLogs, nil
	}
	return nil, &NotLoadedError{edge: "service_logs"}
}

// ServiceSchedulesOrErr returns the ServiceSchedules value or an error if the edge
// was not loaded in eager-loading.
func (e CarEdges) ServiceSchedulesOrErr() ([]*ServiceSchedule, error) {
	if e.loadedTypes[6] {
		return e.ServiceSchedules, nil
	}
	return nil, &NotLoadedError{edge: "service_schedules"}
}

// MediaOrErr returns the Media value or an error if the edge
// was not loaded in eager-loading.
func (e CarEdges) MediaOrErr() ([]*Media, error) {
	if e.loadedTypes[7] {
		return e.Media, nil
	}
	return nil, &NotLoadedError{edge: "media"}
}

// AlbumsOrErr returns the Albums value or an error if the edge
// was not loaded in eager-loading.
func (e CarEdges) AlbumsOrErr() ([]*Album, error) {
	if e.loadedTypes[8] {
		return e.Albums, nil
	}
	return nil, &NotLoadedError{edge: "albums"}
}

// DocumentsOrErr returns the Documents value or an error if the edge
// was not loaded in eager-loading.
func (e CarEdges) DocumentsOrErr() ([]*Document, error) {
	if e.loadedTypes[9] {
		return e.Documents, nil
	}
	return nil, &NotLoadedError{edge: "documents"}
}

// DynoSessionsOrErr returns the DynoSessions value or an error if the edge
// was not loaded in eager-loading.
func (e CarEdges) DynoSessionsOrErr() ([]*DynoSession, error) {
	if e.loadedTypes[10] {
		return e.DynoSessions, nil
	}
	return nil, &NotLoadedError{edge: "dyno_sessions"}
}

// ExpensesOrErr returns the Expenses value or an error if the edge
// was not loaded in eager-loading.
func (e CarEdges) ExpensesOrErr() ([]*Expense, error) {
	if e.loadedTypes[11] {
		return e.Expenses, nil
	}
	return nil, &NotLoadedError{edge: "expenses"}
}

// BannerImageOrErr returns the BannerImage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarEdges) BannerImageOrErr() (*Media, error) {
	if e.BannerImage != nil {
		return e.BannerImage, nil
	} else if e.loadedTypes[12] {
		return nil, &NotFoundError{label: media.Label}
	}
	return nil, &NotLoadedError{edge: "banner_image"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e CarEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[13] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// ModIdeasOrErr returns the ModIdeas value or an error if the edge
// was not loaded in eager-loading.
func (e CarEdges) ModIdeasOrErr() ([]*ModIdea, error) {
	if e.loadedTypes[14] {
		return e.ModIdeas, nil
	}
	return nil, &NotLoadedError{edge: "mod_ideas"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Car) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case car.FieldYear:
			values[i] = new(sql.NullInt64)
		case car.FieldName, car.FieldMake, car.FieldModel, car.FieldType, car.FieldTrim:
			values[i] = new(sql.NullString)
		case car.FieldCreateTime, car.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case car.FieldID:
			values[i] = new(uuid.UUID)
		case car.ForeignKeys[0]: // car_banner_image
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case car.ForeignKeys[1]: // user_cars
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Car fields.
func (c *Car) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case car.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case car.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				c.CreateTime = value.Time
			}
		case car.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				c.UpdateTime = value.Time
			}
		case car.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case car.FieldMake:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field make", values[i])
			} else if value.Valid {
				c.Make = new(string)
				*c.Make = value.String
			}
		case car.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				c.Model = new(string)
				*c.Model = value.String
			}
		case car.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = new(string)
				*c.Type = value.String
			}
		case car.FieldYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field year", values[i])
			} else if value.Valid {
				c.Year = new(int)
				*c.Year = int(value.Int64)
			}
		case car.FieldTrim:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trim", values[i])
			} else if value.Valid {
				c.Trim = new(string)
				*c.Trim = value.String
			}
		case car.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field car_banner_image", values[i])
			} else if value.Valid {
				c.car_banner_image = new(uuid.UUID)
				*c.car_banner_image = *value.S.(*uuid.UUID)
			}
		case car.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_cars", values[i])
			} else if value.Valid {
				c.user_cars = new(uuid.UUID)
				*c.user_cars = *value.S.(*uuid.UUID)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Car.
// This includes values selected through modifiers, order, etc.
func (c *Car) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Car entity.
func (c *Car) QueryOwner() *UserQuery {
	return NewCarClient(c.config).QueryOwner(c)
}

// QueryDragSessions queries the "drag_sessions" edge of the Car entity.
func (c *Car) QueryDragSessions() *DragSessionQuery {
	return NewCarClient(c.config).QueryDragSessions(c)
}

// QueryFuelUps queries the "fuel_ups" edge of the Car entity.
func (c *Car) QueryFuelUps() *FuelUpQuery {
	return NewCarClient(c.config).QueryFuelUps(c)
}

// QueryOdometerReadings queries the "odometer_readings" edge of the Car entity.
func (c *Car) QueryOdometerReadings() *OdometerReadingQuery {
	return NewCarClient(c.config).QueryOdometerReadings(c)
}

// QueryServiceItems queries the "service_items" edge of the Car entity.
func (c *Car) QueryServiceItems() *ServiceItemQuery {
	return NewCarClient(c.config).QueryServiceItems(c)
}

// QueryServiceLogs queries the "service_logs" edge of the Car entity.
func (c *Car) QueryServiceLogs() *ServiceLogQuery {
	return NewCarClient(c.config).QueryServiceLogs(c)
}

// QueryServiceSchedules queries the "service_schedules" edge of the Car entity.
func (c *Car) QueryServiceSchedules() *ServiceScheduleQuery {
	return NewCarClient(c.config).QueryServiceSchedules(c)
}

// QueryMedia queries the "media" edge of the Car entity.
func (c *Car) QueryMedia() *MediaQuery {
	return NewCarClient(c.config).QueryMedia(c)
}

// QueryAlbums queries the "albums" edge of the Car entity.
func (c *Car) QueryAlbums() *AlbumQuery {
	return NewCarClient(c.config).QueryAlbums(c)
}

// QueryDocuments queries the "documents" edge of the Car entity.
func (c *Car) QueryDocuments() *DocumentQuery {
	return NewCarClient(c.config).QueryDocuments(c)
}

// QueryDynoSessions queries the "dyno_sessions" edge of the Car entity.
func (c *Car) QueryDynoSessions() *DynoSessionQuery {
	return NewCarClient(c.config).QueryDynoSessions(c)
}

// QueryExpenses queries the "expenses" edge of the Car entity.
func (c *Car) QueryExpenses() *ExpenseQuery {
	return NewCarClient(c.config).QueryExpenses(c)
}

// QueryBannerImage queries the "banner_image" edge of the Car entity.
func (c *Car) QueryBannerImage() *MediaQuery {
	return NewCarClient(c.config).QueryBannerImage(c)
}

// QueryTasks queries the "tasks" edge of the Car entity.
func (c *Car) QueryTasks() *TaskQuery {
	return NewCarClient(c.config).QueryTasks(c)
}

// QueryModIdeas queries the "mod_ideas" edge of the Car entity.
func (c *Car) QueryModIdeas() *ModIdeaQuery {
	return NewCarClient(c.config).QueryModIdeas(c)
}

// Update returns a builder for updating this Car.
// Note that you need to call Car.Unwrap() before calling this method if this Car
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Car) Update() *CarUpdateOne {
	return NewCarClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Car entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Car) Unwrap() *Car {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Car is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Car) String() string {
	var builder strings.Builder
	builder.WriteString("Car(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("create_time=")
	builder.WriteString(c.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(c.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	if v := c.Make; v != nil {
		builder.WriteString("make=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.Model; v != nil {
		builder.WriteString("model=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.Type; v != nil {
		builder.WriteString("type=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := c.Year; v != nil {
		builder.WriteString("year=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := c.Trim; v != nil {
		builder.WriteString("trim=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedDragSessions returns the DragSessions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Car) NamedDragSessions(name string) ([]*DragSession, error) {
	if c.Edges.namedDragSessions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedDragSessions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Car) appendNamedDragSessions(name string, edges ...*DragSession) {
	if c.Edges.namedDragSessions == nil {
		c.Edges.namedDragSessions = make(map[string][]*DragSession)
	}
	if len(edges) == 0 {
		c.Edges.namedDragSessions[name] = []*DragSession{}
	} else {
		c.Edges.namedDragSessions[name] = append(c.Edges.namedDragSessions[name], edges...)
	}
}

// NamedFuelUps returns the FuelUps named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Car) NamedFuelUps(name string) ([]*FuelUp, error) {
	if c.Edges.namedFuelUps == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedFuelUps[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Car) appendNamedFuelUps(name string, edges ...*FuelUp) {
	if c.Edges.namedFuelUps == nil {
		c.Edges.namedFuelUps = make(map[string][]*FuelUp)
	}
	if len(edges) == 0 {
		c.Edges.namedFuelUps[name] = []*FuelUp{}
	} else {
		c.Edges.namedFuelUps[name] = append(c.Edges.namedFuelUps[name], edges...)
	}
}

// NamedOdometerReadings returns the OdometerReadings named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Car) NamedOdometerReadings(name string) ([]*OdometerReading, error) {
	if c.Edges.namedOdometerReadings == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedOdometerReadings[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Car) appendNamedOdometerReadings(name string, edges ...*OdometerReading) {
	if c.Edges.namedOdometerReadings == nil {
		c.Edges.namedOdometerReadings = make(map[string][]*OdometerReading)
	}
	if len(edges) == 0 {
		c.Edges.namedOdometerReadings[name] = []*OdometerReading{}
	} else {
		c.Edges.namedOdometerReadings[name] = append(c.Edges.namedOdometerReadings[name], edges...)
	}
}

// NamedServiceItems returns the ServiceItems named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Car) NamedServiceItems(name string) ([]*ServiceItem, error) {
	if c.Edges.namedServiceItems == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedServiceItems[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Car) appendNamedServiceItems(name string, edges ...*ServiceItem) {
	if c.Edges.namedServiceItems == nil {
		c.Edges.namedServiceItems = make(map[string][]*ServiceItem)
	}
	if len(edges) == 0 {
		c.Edges.namedServiceItems[name] = []*ServiceItem{}
	} else {
		c.Edges.namedServiceItems[name] = append(c.Edges.namedServiceItems[name], edges...)
	}
}

// NamedServiceLogs returns the ServiceLogs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Car) NamedServiceLogs(name string) ([]*ServiceLog, error) {
	if c.Edges.namedServiceLogs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedServiceLogs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Car) appendNamedServiceLogs(name string, edges ...*ServiceLog) {
	if c.Edges.namedServiceLogs == nil {
		c.Edges.namedServiceLogs = make(map[string][]*ServiceLog)
	}
	if len(edges) == 0 {
		c.Edges.namedServiceLogs[name] = []*ServiceLog{}
	} else {
		c.Edges.namedServiceLogs[name] = append(c.Edges.namedServiceLogs[name], edges...)
	}
}

// NamedServiceSchedules returns the ServiceSchedules named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Car) NamedServiceSchedules(name string) ([]*ServiceSchedule, error) {
	if c.Edges.namedServiceSchedules == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedServiceSchedules[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Car) appendNamedServiceSchedules(name string, edges ...*ServiceSchedule) {
	if c.Edges.namedServiceSchedules == nil {
		c.Edges.namedServiceSchedules = make(map[string][]*ServiceSchedule)
	}
	if len(edges) == 0 {
		c.Edges.namedServiceSchedules[name] = []*ServiceSchedule{}
	} else {
		c.Edges.namedServiceSchedules[name] = append(c.Edges.namedServiceSchedules[name], edges...)
	}
}

// NamedMedia returns the Media named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Car) NamedMedia(name string) ([]*Media, error) {
	if c.Edges.namedMedia == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedMedia[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Car) appendNamedMedia(name string, edges ...*Media) {
	if c.Edges.namedMedia == nil {
		c.Edges.namedMedia = make(map[string][]*Media)
	}
	if len(edges) == 0 {
		c.Edges.namedMedia[name] = []*Media{}
	} else {
		c.Edges.namedMedia[name] = append(c.Edges.namedMedia[name], edges...)
	}
}

// NamedAlbums returns the Albums named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Car) NamedAlbums(name string) ([]*Album, error) {
	if c.Edges.namedAlbums == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedAlbums[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Car) appendNamedAlbums(name string, edges ...*Album) {
	if c.Edges.namedAlbums == nil {
		c.Edges.namedAlbums = make(map[string][]*Album)
	}
	if len(edges) == 0 {
		c.Edges.namedAlbums[name] = []*Album{}
	} else {
		c.Edges.namedAlbums[name] = append(c.Edges.namedAlbums[name], edges...)
	}
}

// NamedDocuments returns the Documents named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Car) NamedDocuments(name string) ([]*Document, error) {
	if c.Edges.namedDocuments == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedDocuments[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Car) appendNamedDocuments(name string, edges ...*Document) {
	if c.Edges.namedDocuments == nil {
		c.Edges.namedDocuments = make(map[string][]*Document)
	}
	if len(edges) == 0 {
		c.Edges.namedDocuments[name] = []*Document{}
	} else {
		c.Edges.namedDocuments[name] = append(c.Edges.namedDocuments[name], edges...)
	}
}

// NamedDynoSessions returns the DynoSessions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Car) NamedDynoSessions(name string) ([]*DynoSession, error) {
	if c.Edges.namedDynoSessions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedDynoSessions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Car) appendNamedDynoSessions(name string, edges ...*DynoSession) {
	if c.Edges.namedDynoSessions == nil {
		c.Edges.namedDynoSessions = make(map[string][]*DynoSession)
	}
	if len(edges) == 0 {
		c.Edges.namedDynoSessions[name] = []*DynoSession{}
	} else {
		c.Edges.namedDynoSessions[name] = append(c.Edges.namedDynoSessions[name], edges...)
	}
}

// NamedExpenses returns the Expenses named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Car) NamedExpenses(name string) ([]*Expense, error) {
	if c.Edges.namedExpenses == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedExpenses[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Car) appendNamedExpenses(name string, edges ...*Expense) {
	if c.Edges.namedExpenses == nil {
		c.Edges.namedExpenses = make(map[string][]*Expense)
	}
	if len(edges) == 0 {
		c.Edges.namedExpenses[name] = []*Expense{}
	} else {
		c.Edges.namedExpenses[name] = append(c.Edges.namedExpenses[name], edges...)
	}
}

// NamedTasks returns the Tasks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Car) NamedTasks(name string) ([]*Task, error) {
	if c.Edges.namedTasks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedTasks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Car) appendNamedTasks(name string, edges ...*Task) {
	if c.Edges.namedTasks == nil {
		c.Edges.namedTasks = make(map[string][]*Task)
	}
	if len(edges) == 0 {
		c.Edges.namedTasks[name] = []*Task{}
	} else {
		c.Edges.namedTasks[name] = append(c.Edges.namedTasks[name], edges...)
	}
}

// NamedModIdeas returns the ModIdeas named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Car) NamedModIdeas(name string) ([]*ModIdea, error) {
	if c.Edges.namedModIdeas == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedModIdeas[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Car) appendNamedModIdeas(name string, edges ...*ModIdea) {
	if c.Edges.namedModIdeas == nil {
		c.Edges.namedModIdeas = make(map[string][]*ModIdea)
	}
	if len(edges) == 0 {
		c.Edges.namedModIdeas[name] = []*ModIdea{}
	} else {
		c.Edges.namedModIdeas[name] = append(c.Edges.namedModIdeas[name], edges...)
	}
}

// Cars is a parsable slice of Car.
type Cars []*Car
