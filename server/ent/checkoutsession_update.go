// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/checkoutsession"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/Dan6erbond/revline/ent/subscription"
	"github.com/Dan6erbond/revline/ent/user"
	"github.com/google/uuid"
)

// CheckoutSessionUpdate is the builder for updating CheckoutSession entities.
type CheckoutSessionUpdate struct {
	config
	hooks    []Hook
	mutation *CheckoutSessionMutation
}

// Where appends a list predicates to the CheckoutSessionUpdate builder.
func (csu *CheckoutSessionUpdate) Where(ps ...predicate.CheckoutSession) *CheckoutSessionUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetUpdateTime sets the "update_time" field.
func (csu *CheckoutSessionUpdate) SetUpdateTime(t time.Time) *CheckoutSessionUpdate {
	csu.mutation.SetUpdateTime(t)
	return csu
}

// SetStripeSessionID sets the "stripe_session_id" field.
func (csu *CheckoutSessionUpdate) SetStripeSessionID(s string) *CheckoutSessionUpdate {
	csu.mutation.SetStripeSessionID(s)
	return csu
}

// SetNillableStripeSessionID sets the "stripe_session_id" field if the given value is not nil.
func (csu *CheckoutSessionUpdate) SetNillableStripeSessionID(s *string) *CheckoutSessionUpdate {
	if s != nil {
		csu.SetStripeSessionID(*s)
	}
	return csu
}

// ClearStripeSessionID clears the value of the "stripe_session_id" field.
func (csu *CheckoutSessionUpdate) ClearStripeSessionID() *CheckoutSessionUpdate {
	csu.mutation.ClearStripeSessionID()
	return csu
}

// SetStripePriceID sets the "stripe_price_id" field.
func (csu *CheckoutSessionUpdate) SetStripePriceID(s string) *CheckoutSessionUpdate {
	csu.mutation.SetStripePriceID(s)
	return csu
}

// SetNillableStripePriceID sets the "stripe_price_id" field if the given value is not nil.
func (csu *CheckoutSessionUpdate) SetNillableStripePriceID(s *string) *CheckoutSessionUpdate {
	if s != nil {
		csu.SetStripePriceID(*s)
	}
	return csu
}

// SetMode sets the "mode" field.
func (csu *CheckoutSessionUpdate) SetMode(c checkoutsession.Mode) *CheckoutSessionUpdate {
	csu.mutation.SetMode(c)
	return csu
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (csu *CheckoutSessionUpdate) SetNillableMode(c *checkoutsession.Mode) *CheckoutSessionUpdate {
	if c != nil {
		csu.SetMode(*c)
	}
	return csu
}

// SetCompleted sets the "completed" field.
func (csu *CheckoutSessionUpdate) SetCompleted(b bool) *CheckoutSessionUpdate {
	csu.mutation.SetCompleted(b)
	return csu
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (csu *CheckoutSessionUpdate) SetNillableCompleted(b *bool) *CheckoutSessionUpdate {
	if b != nil {
		csu.SetCompleted(*b)
	}
	return csu
}

// SetCompletedAt sets the "completed_at" field.
func (csu *CheckoutSessionUpdate) SetCompletedAt(t time.Time) *CheckoutSessionUpdate {
	csu.mutation.SetCompletedAt(t)
	return csu
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (csu *CheckoutSessionUpdate) SetNillableCompletedAt(t *time.Time) *CheckoutSessionUpdate {
	if t != nil {
		csu.SetCompletedAt(*t)
	}
	return csu
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (csu *CheckoutSessionUpdate) ClearCompletedAt() *CheckoutSessionUpdate {
	csu.mutation.ClearCompletedAt()
	return csu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (csu *CheckoutSessionUpdate) SetUserID(id uuid.UUID) *CheckoutSessionUpdate {
	csu.mutation.SetUserID(id)
	return csu
}

// SetUser sets the "user" edge to the User entity.
func (csu *CheckoutSessionUpdate) SetUser(u *User) *CheckoutSessionUpdate {
	return csu.SetUserID(u.ID)
}

// SetSubscriptionID sets the "subscription" edge to the Subscription entity by ID.
func (csu *CheckoutSessionUpdate) SetSubscriptionID(id uuid.UUID) *CheckoutSessionUpdate {
	csu.mutation.SetSubscriptionID(id)
	return csu
}

// SetNillableSubscriptionID sets the "subscription" edge to the Subscription entity by ID if the given value is not nil.
func (csu *CheckoutSessionUpdate) SetNillableSubscriptionID(id *uuid.UUID) *CheckoutSessionUpdate {
	if id != nil {
		csu = csu.SetSubscriptionID(*id)
	}
	return csu
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (csu *CheckoutSessionUpdate) SetSubscription(s *Subscription) *CheckoutSessionUpdate {
	return csu.SetSubscriptionID(s.ID)
}

// Mutation returns the CheckoutSessionMutation object of the builder.
func (csu *CheckoutSessionUpdate) Mutation() *CheckoutSessionMutation {
	return csu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (csu *CheckoutSessionUpdate) ClearUser() *CheckoutSessionUpdate {
	csu.mutation.ClearUser()
	return csu
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (csu *CheckoutSessionUpdate) ClearSubscription() *CheckoutSessionUpdate {
	csu.mutation.ClearSubscription()
	return csu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *CheckoutSessionUpdate) Save(ctx context.Context) (int, error) {
	csu.defaults()
	return withHooks(ctx, csu.sqlSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *CheckoutSessionUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *CheckoutSessionUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *CheckoutSessionUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csu *CheckoutSessionUpdate) defaults() {
	if _, ok := csu.mutation.UpdateTime(); !ok {
		v := checkoutsession.UpdateDefaultUpdateTime()
		csu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csu *CheckoutSessionUpdate) check() error {
	if v, ok := csu.mutation.StripePriceID(); ok {
		if err := checkoutsession.StripePriceIDValidator(v); err != nil {
			return &ValidationError{Name: "stripe_price_id", err: fmt.Errorf(`ent: validator failed for field "CheckoutSession.stripe_price_id": %w`, err)}
		}
	}
	if v, ok := csu.mutation.Mode(); ok {
		if err := checkoutsession.ModeValidator(v); err != nil {
			return &ValidationError{Name: "mode", err: fmt.Errorf(`ent: validator failed for field "CheckoutSession.mode": %w`, err)}
		}
	}
	if csu.mutation.UserCleared() && len(csu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CheckoutSession.user"`)
	}
	return nil
}

func (csu *CheckoutSessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := csu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(checkoutsession.Table, checkoutsession.Columns, sqlgraph.NewFieldSpec(checkoutsession.FieldID, field.TypeUUID))
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.UpdateTime(); ok {
		_spec.SetField(checkoutsession.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := csu.mutation.StripeSessionID(); ok {
		_spec.SetField(checkoutsession.FieldStripeSessionID, field.TypeString, value)
	}
	if csu.mutation.StripeSessionIDCleared() {
		_spec.ClearField(checkoutsession.FieldStripeSessionID, field.TypeString)
	}
	if value, ok := csu.mutation.StripePriceID(); ok {
		_spec.SetField(checkoutsession.FieldStripePriceID, field.TypeString, value)
	}
	if value, ok := csu.mutation.Mode(); ok {
		_spec.SetField(checkoutsession.FieldMode, field.TypeEnum, value)
	}
	if value, ok := csu.mutation.Completed(); ok {
		_spec.SetField(checkoutsession.FieldCompleted, field.TypeBool, value)
	}
	if value, ok := csu.mutation.CompletedAt(); ok {
		_spec.SetField(checkoutsession.FieldCompletedAt, field.TypeTime, value)
	}
	if csu.mutation.CompletedAtCleared() {
		_spec.ClearField(checkoutsession.FieldCompletedAt, field.TypeTime)
	}
	if csu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkoutsession.UserTable,
			Columns: []string{checkoutsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkoutsession.UserTable,
			Columns: []string{checkoutsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csu.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   checkoutsession.SubscriptionTable,
			Columns: []string{checkoutsession.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   checkoutsession.SubscriptionTable,
			Columns: []string{checkoutsession.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{checkoutsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csu.mutation.done = true
	return n, nil
}

// CheckoutSessionUpdateOne is the builder for updating a single CheckoutSession entity.
type CheckoutSessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CheckoutSessionMutation
}

// SetUpdateTime sets the "update_time" field.
func (csuo *CheckoutSessionUpdateOne) SetUpdateTime(t time.Time) *CheckoutSessionUpdateOne {
	csuo.mutation.SetUpdateTime(t)
	return csuo
}

// SetStripeSessionID sets the "stripe_session_id" field.
func (csuo *CheckoutSessionUpdateOne) SetStripeSessionID(s string) *CheckoutSessionUpdateOne {
	csuo.mutation.SetStripeSessionID(s)
	return csuo
}

// SetNillableStripeSessionID sets the "stripe_session_id" field if the given value is not nil.
func (csuo *CheckoutSessionUpdateOne) SetNillableStripeSessionID(s *string) *CheckoutSessionUpdateOne {
	if s != nil {
		csuo.SetStripeSessionID(*s)
	}
	return csuo
}

// ClearStripeSessionID clears the value of the "stripe_session_id" field.
func (csuo *CheckoutSessionUpdateOne) ClearStripeSessionID() *CheckoutSessionUpdateOne {
	csuo.mutation.ClearStripeSessionID()
	return csuo
}

// SetStripePriceID sets the "stripe_price_id" field.
func (csuo *CheckoutSessionUpdateOne) SetStripePriceID(s string) *CheckoutSessionUpdateOne {
	csuo.mutation.SetStripePriceID(s)
	return csuo
}

// SetNillableStripePriceID sets the "stripe_price_id" field if the given value is not nil.
func (csuo *CheckoutSessionUpdateOne) SetNillableStripePriceID(s *string) *CheckoutSessionUpdateOne {
	if s != nil {
		csuo.SetStripePriceID(*s)
	}
	return csuo
}

// SetMode sets the "mode" field.
func (csuo *CheckoutSessionUpdateOne) SetMode(c checkoutsession.Mode) *CheckoutSessionUpdateOne {
	csuo.mutation.SetMode(c)
	return csuo
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (csuo *CheckoutSessionUpdateOne) SetNillableMode(c *checkoutsession.Mode) *CheckoutSessionUpdateOne {
	if c != nil {
		csuo.SetMode(*c)
	}
	return csuo
}

// SetCompleted sets the "completed" field.
func (csuo *CheckoutSessionUpdateOne) SetCompleted(b bool) *CheckoutSessionUpdateOne {
	csuo.mutation.SetCompleted(b)
	return csuo
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (csuo *CheckoutSessionUpdateOne) SetNillableCompleted(b *bool) *CheckoutSessionUpdateOne {
	if b != nil {
		csuo.SetCompleted(*b)
	}
	return csuo
}

// SetCompletedAt sets the "completed_at" field.
func (csuo *CheckoutSessionUpdateOne) SetCompletedAt(t time.Time) *CheckoutSessionUpdateOne {
	csuo.mutation.SetCompletedAt(t)
	return csuo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (csuo *CheckoutSessionUpdateOne) SetNillableCompletedAt(t *time.Time) *CheckoutSessionUpdateOne {
	if t != nil {
		csuo.SetCompletedAt(*t)
	}
	return csuo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (csuo *CheckoutSessionUpdateOne) ClearCompletedAt() *CheckoutSessionUpdateOne {
	csuo.mutation.ClearCompletedAt()
	return csuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (csuo *CheckoutSessionUpdateOne) SetUserID(id uuid.UUID) *CheckoutSessionUpdateOne {
	csuo.mutation.SetUserID(id)
	return csuo
}

// SetUser sets the "user" edge to the User entity.
func (csuo *CheckoutSessionUpdateOne) SetUser(u *User) *CheckoutSessionUpdateOne {
	return csuo.SetUserID(u.ID)
}

// SetSubscriptionID sets the "subscription" edge to the Subscription entity by ID.
func (csuo *CheckoutSessionUpdateOne) SetSubscriptionID(id uuid.UUID) *CheckoutSessionUpdateOne {
	csuo.mutation.SetSubscriptionID(id)
	return csuo
}

// SetNillableSubscriptionID sets the "subscription" edge to the Subscription entity by ID if the given value is not nil.
func (csuo *CheckoutSessionUpdateOne) SetNillableSubscriptionID(id *uuid.UUID) *CheckoutSessionUpdateOne {
	if id != nil {
		csuo = csuo.SetSubscriptionID(*id)
	}
	return csuo
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (csuo *CheckoutSessionUpdateOne) SetSubscription(s *Subscription) *CheckoutSessionUpdateOne {
	return csuo.SetSubscriptionID(s.ID)
}

// Mutation returns the CheckoutSessionMutation object of the builder.
func (csuo *CheckoutSessionUpdateOne) Mutation() *CheckoutSessionMutation {
	return csuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (csuo *CheckoutSessionUpdateOne) ClearUser() *CheckoutSessionUpdateOne {
	csuo.mutation.ClearUser()
	return csuo
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (csuo *CheckoutSessionUpdateOne) ClearSubscription() *CheckoutSessionUpdateOne {
	csuo.mutation.ClearSubscription()
	return csuo
}

// Where appends a list predicates to the CheckoutSessionUpdate builder.
func (csuo *CheckoutSessionUpdateOne) Where(ps ...predicate.CheckoutSession) *CheckoutSessionUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *CheckoutSessionUpdateOne) Select(field string, fields ...string) *CheckoutSessionUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated CheckoutSession entity.
func (csuo *CheckoutSessionUpdateOne) Save(ctx context.Context) (*CheckoutSession, error) {
	csuo.defaults()
	return withHooks(ctx, csuo.sqlSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *CheckoutSessionUpdateOne) SaveX(ctx context.Context) *CheckoutSession {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *CheckoutSessionUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *CheckoutSessionUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csuo *CheckoutSessionUpdateOne) defaults() {
	if _, ok := csuo.mutation.UpdateTime(); !ok {
		v := checkoutsession.UpdateDefaultUpdateTime()
		csuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csuo *CheckoutSessionUpdateOne) check() error {
	if v, ok := csuo.mutation.StripePriceID(); ok {
		if err := checkoutsession.StripePriceIDValidator(v); err != nil {
			return &ValidationError{Name: "stripe_price_id", err: fmt.Errorf(`ent: validator failed for field "CheckoutSession.stripe_price_id": %w`, err)}
		}
	}
	if v, ok := csuo.mutation.Mode(); ok {
		if err := checkoutsession.ModeValidator(v); err != nil {
			return &ValidationError{Name: "mode", err: fmt.Errorf(`ent: validator failed for field "CheckoutSession.mode": %w`, err)}
		}
	}
	if csuo.mutation.UserCleared() && len(csuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CheckoutSession.user"`)
	}
	return nil
}

func (csuo *CheckoutSessionUpdateOne) sqlSave(ctx context.Context) (_node *CheckoutSession, err error) {
	if err := csuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(checkoutsession.Table, checkoutsession.Columns, sqlgraph.NewFieldSpec(checkoutsession.FieldID, field.TypeUUID))
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CheckoutSession.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, checkoutsession.FieldID)
		for _, f := range fields {
			if !checkoutsession.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != checkoutsession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.UpdateTime(); ok {
		_spec.SetField(checkoutsession.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := csuo.mutation.StripeSessionID(); ok {
		_spec.SetField(checkoutsession.FieldStripeSessionID, field.TypeString, value)
	}
	if csuo.mutation.StripeSessionIDCleared() {
		_spec.ClearField(checkoutsession.FieldStripeSessionID, field.TypeString)
	}
	if value, ok := csuo.mutation.StripePriceID(); ok {
		_spec.SetField(checkoutsession.FieldStripePriceID, field.TypeString, value)
	}
	if value, ok := csuo.mutation.Mode(); ok {
		_spec.SetField(checkoutsession.FieldMode, field.TypeEnum, value)
	}
	if value, ok := csuo.mutation.Completed(); ok {
		_spec.SetField(checkoutsession.FieldCompleted, field.TypeBool, value)
	}
	if value, ok := csuo.mutation.CompletedAt(); ok {
		_spec.SetField(checkoutsession.FieldCompletedAt, field.TypeTime, value)
	}
	if csuo.mutation.CompletedAtCleared() {
		_spec.ClearField(checkoutsession.FieldCompletedAt, field.TypeTime)
	}
	if csuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkoutsession.UserTable,
			Columns: []string{checkoutsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkoutsession.UserTable,
			Columns: []string{checkoutsession.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuo.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   checkoutsession.SubscriptionTable,
			Columns: []string{checkoutsession.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   checkoutsession.SubscriptionTable,
			Columns: []string{checkoutsession.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CheckoutSession{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{checkoutsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuo.mutation.done = true
	return _node, nil
}
