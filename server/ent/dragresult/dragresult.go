// Code generated by ent, DO NOT EDIT.

package dragresult

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the dragresult type in the database.
	Label = "drag_result"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldUnit holds the string denoting the unit field in the database.
	FieldUnit = "unit"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"
	// EdgeSession holds the string denoting the session edge name in mutations.
	EdgeSession = "session"
	// Table holds the table name of the dragresult in the database.
	Table = "drag_results"
	// SessionTable is the table that holds the session relation/edge.
	SessionTable = "drag_results"
	// SessionInverseTable is the table name for the DragSession entity.
	// It exists in this package in order to avoid circular dependency with the "dragsession" package.
	SessionInverseTable = "drag_sessions"
	// SessionColumn is the table column denoting the session relation/edge.
	SessionColumn = "drag_session_results"
)

// Columns holds all SQL columns for dragresult fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldUnit,
	FieldValue,
	FieldResult,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "drag_results"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"drag_session_results",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Unit defines the type for the "unit" enum field.
type Unit string

// Unit values.
const (
	UnitKph Unit = "kph"
	UnitKm  Unit = "km"
)

func (u Unit) String() string {
	return string(u)
}

// UnitValidator is a validator for the "unit" field enum values. It is called by the builders before save.
func UnitValidator(u Unit) error {
	switch u {
	case UnitKph, UnitKm:
		return nil
	default:
		return fmt.Errorf("dragresult: invalid enum value for unit field: %q", u)
	}
}

// OrderOption defines the ordering options for the DragResult queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByUnit orders the results by the unit field.
func ByUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnit, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByResult orders the results by the result field.
func ByResult(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResult, opts...).ToFunc()
}

// BySessionField orders the results by session field.
func BySessionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionStep(), sql.OrderByField(field, opts...))
	}
}
func newSessionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SessionTable, SessionColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Unit) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Unit) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Unit(str)
	if err := UnitValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Unit", str)
	}
	return nil
}
