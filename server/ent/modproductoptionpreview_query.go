// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/modproductoption"
	"github.com/Dan6erbond/revline/ent/modproductoptionpreview"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/google/uuid"
)

// ModProductOptionPreviewQuery is the builder for querying ModProductOptionPreview entities.
type ModProductOptionPreviewQuery struct {
	config
	ctx               *QueryContext
	order             []modproductoptionpreview.OrderOption
	inters            []Interceptor
	predicates        []predicate.ModProductOptionPreview
	withProductOption *ModProductOptionQuery
	withFKs           bool
	modifiers         []func(*sql.Selector)
	loadTotal         []func(context.Context, []*ModProductOptionPreview) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ModProductOptionPreviewQuery builder.
func (mpopq *ModProductOptionPreviewQuery) Where(ps ...predicate.ModProductOptionPreview) *ModProductOptionPreviewQuery {
	mpopq.predicates = append(mpopq.predicates, ps...)
	return mpopq
}

// Limit the number of records to be returned by this query.
func (mpopq *ModProductOptionPreviewQuery) Limit(limit int) *ModProductOptionPreviewQuery {
	mpopq.ctx.Limit = &limit
	return mpopq
}

// Offset to start from.
func (mpopq *ModProductOptionPreviewQuery) Offset(offset int) *ModProductOptionPreviewQuery {
	mpopq.ctx.Offset = &offset
	return mpopq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mpopq *ModProductOptionPreviewQuery) Unique(unique bool) *ModProductOptionPreviewQuery {
	mpopq.ctx.Unique = &unique
	return mpopq
}

// Order specifies how the records should be ordered.
func (mpopq *ModProductOptionPreviewQuery) Order(o ...modproductoptionpreview.OrderOption) *ModProductOptionPreviewQuery {
	mpopq.order = append(mpopq.order, o...)
	return mpopq
}

// QueryProductOption chains the current query on the "product_option" edge.
func (mpopq *ModProductOptionPreviewQuery) QueryProductOption() *ModProductOptionQuery {
	query := (&ModProductOptionClient{config: mpopq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mpopq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mpopq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(modproductoptionpreview.Table, modproductoptionpreview.FieldID, selector),
			sqlgraph.To(modproductoption.Table, modproductoption.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, modproductoptionpreview.ProductOptionTable, modproductoptionpreview.ProductOptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(mpopq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ModProductOptionPreview entity from the query.
// Returns a *NotFoundError when no ModProductOptionPreview was found.
func (mpopq *ModProductOptionPreviewQuery) First(ctx context.Context) (*ModProductOptionPreview, error) {
	nodes, err := mpopq.Limit(1).All(setContextOp(ctx, mpopq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{modproductoptionpreview.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mpopq *ModProductOptionPreviewQuery) FirstX(ctx context.Context) *ModProductOptionPreview {
	node, err := mpopq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ModProductOptionPreview ID from the query.
// Returns a *NotFoundError when no ModProductOptionPreview ID was found.
func (mpopq *ModProductOptionPreviewQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = mpopq.Limit(1).IDs(setContextOp(ctx, mpopq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{modproductoptionpreview.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mpopq *ModProductOptionPreviewQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := mpopq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ModProductOptionPreview entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ModProductOptionPreview entity is found.
// Returns a *NotFoundError when no ModProductOptionPreview entities are found.
func (mpopq *ModProductOptionPreviewQuery) Only(ctx context.Context) (*ModProductOptionPreview, error) {
	nodes, err := mpopq.Limit(2).All(setContextOp(ctx, mpopq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{modproductoptionpreview.Label}
	default:
		return nil, &NotSingularError{modproductoptionpreview.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mpopq *ModProductOptionPreviewQuery) OnlyX(ctx context.Context) *ModProductOptionPreview {
	node, err := mpopq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ModProductOptionPreview ID in the query.
// Returns a *NotSingularError when more than one ModProductOptionPreview ID is found.
// Returns a *NotFoundError when no entities are found.
func (mpopq *ModProductOptionPreviewQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = mpopq.Limit(2).IDs(setContextOp(ctx, mpopq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{modproductoptionpreview.Label}
	default:
		err = &NotSingularError{modproductoptionpreview.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mpopq *ModProductOptionPreviewQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := mpopq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ModProductOptionPreviews.
func (mpopq *ModProductOptionPreviewQuery) All(ctx context.Context) ([]*ModProductOptionPreview, error) {
	ctx = setContextOp(ctx, mpopq.ctx, ent.OpQueryAll)
	if err := mpopq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ModProductOptionPreview, *ModProductOptionPreviewQuery]()
	return withInterceptors[[]*ModProductOptionPreview](ctx, mpopq, qr, mpopq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mpopq *ModProductOptionPreviewQuery) AllX(ctx context.Context) []*ModProductOptionPreview {
	nodes, err := mpopq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ModProductOptionPreview IDs.
func (mpopq *ModProductOptionPreviewQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if mpopq.ctx.Unique == nil && mpopq.path != nil {
		mpopq.Unique(true)
	}
	ctx = setContextOp(ctx, mpopq.ctx, ent.OpQueryIDs)
	if err = mpopq.Select(modproductoptionpreview.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mpopq *ModProductOptionPreviewQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := mpopq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mpopq *ModProductOptionPreviewQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mpopq.ctx, ent.OpQueryCount)
	if err := mpopq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mpopq, querierCount[*ModProductOptionPreviewQuery](), mpopq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mpopq *ModProductOptionPreviewQuery) CountX(ctx context.Context) int {
	count, err := mpopq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mpopq *ModProductOptionPreviewQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mpopq.ctx, ent.OpQueryExist)
	switch _, err := mpopq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mpopq *ModProductOptionPreviewQuery) ExistX(ctx context.Context) bool {
	exist, err := mpopq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ModProductOptionPreviewQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mpopq *ModProductOptionPreviewQuery) Clone() *ModProductOptionPreviewQuery {
	if mpopq == nil {
		return nil
	}
	return &ModProductOptionPreviewQuery{
		config:            mpopq.config,
		ctx:               mpopq.ctx.Clone(),
		order:             append([]modproductoptionpreview.OrderOption{}, mpopq.order...),
		inters:            append([]Interceptor{}, mpopq.inters...),
		predicates:        append([]predicate.ModProductOptionPreview{}, mpopq.predicates...),
		withProductOption: mpopq.withProductOption.Clone(),
		// clone intermediate query.
		sql:  mpopq.sql.Clone(),
		path: mpopq.path,
	}
}

// WithProductOption tells the query-builder to eager-load the nodes that are connected to
// the "product_option" edge. The optional arguments are used to configure the query builder of the edge.
func (mpopq *ModProductOptionPreviewQuery) WithProductOption(opts ...func(*ModProductOptionQuery)) *ModProductOptionPreviewQuery {
	query := (&ModProductOptionClient{config: mpopq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mpopq.withProductOption = query
	return mpopq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ModProductOptionPreview.Query().
//		GroupBy(modproductoptionpreview.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (mpopq *ModProductOptionPreviewQuery) GroupBy(field string, fields ...string) *ModProductOptionPreviewGroupBy {
	mpopq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ModProductOptionPreviewGroupBy{build: mpopq}
	grbuild.flds = &mpopq.ctx.Fields
	grbuild.label = modproductoptionpreview.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.ModProductOptionPreview.Query().
//		Select(modproductoptionpreview.FieldCreateTime).
//		Scan(ctx, &v)
func (mpopq *ModProductOptionPreviewQuery) Select(fields ...string) *ModProductOptionPreviewSelect {
	mpopq.ctx.Fields = append(mpopq.ctx.Fields, fields...)
	sbuild := &ModProductOptionPreviewSelect{ModProductOptionPreviewQuery: mpopq}
	sbuild.label = modproductoptionpreview.Label
	sbuild.flds, sbuild.scan = &mpopq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ModProductOptionPreviewSelect configured with the given aggregations.
func (mpopq *ModProductOptionPreviewQuery) Aggregate(fns ...AggregateFunc) *ModProductOptionPreviewSelect {
	return mpopq.Select().Aggregate(fns...)
}

func (mpopq *ModProductOptionPreviewQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mpopq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mpopq); err != nil {
				return err
			}
		}
	}
	for _, f := range mpopq.ctx.Fields {
		if !modproductoptionpreview.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mpopq.path != nil {
		prev, err := mpopq.path(ctx)
		if err != nil {
			return err
		}
		mpopq.sql = prev
	}
	return nil
}

func (mpopq *ModProductOptionPreviewQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ModProductOptionPreview, error) {
	var (
		nodes       = []*ModProductOptionPreview{}
		withFKs     = mpopq.withFKs
		_spec       = mpopq.querySpec()
		loadedTypes = [1]bool{
			mpopq.withProductOption != nil,
		}
	)
	if mpopq.withProductOption != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, modproductoptionpreview.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ModProductOptionPreview).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ModProductOptionPreview{config: mpopq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(mpopq.modifiers) > 0 {
		_spec.Modifiers = mpopq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mpopq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := mpopq.withProductOption; query != nil {
		if err := mpopq.loadProductOption(ctx, query, nodes, nil,
			func(n *ModProductOptionPreview, e *ModProductOption) { n.Edges.ProductOption = e }); err != nil {
			return nil, err
		}
	}
	for i := range mpopq.loadTotal {
		if err := mpopq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (mpopq *ModProductOptionPreviewQuery) loadProductOption(ctx context.Context, query *ModProductOptionQuery, nodes []*ModProductOptionPreview, init func(*ModProductOptionPreview), assign func(*ModProductOptionPreview, *ModProductOption)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ModProductOptionPreview)
	for i := range nodes {
		if nodes[i].mod_product_option_previews == nil {
			continue
		}
		fk := *nodes[i].mod_product_option_previews
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(modproductoption.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "mod_product_option_previews" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (mpopq *ModProductOptionPreviewQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mpopq.querySpec()
	if len(mpopq.modifiers) > 0 {
		_spec.Modifiers = mpopq.modifiers
	}
	_spec.Node.Columns = mpopq.ctx.Fields
	if len(mpopq.ctx.Fields) > 0 {
		_spec.Unique = mpopq.ctx.Unique != nil && *mpopq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mpopq.driver, _spec)
}

func (mpopq *ModProductOptionPreviewQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(modproductoptionpreview.Table, modproductoptionpreview.Columns, sqlgraph.NewFieldSpec(modproductoptionpreview.FieldID, field.TypeUUID))
	_spec.From = mpopq.sql
	if unique := mpopq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if mpopq.path != nil {
		_spec.Unique = true
	}
	if fields := mpopq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, modproductoptionpreview.FieldID)
		for i := range fields {
			if fields[i] != modproductoptionpreview.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mpopq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mpopq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mpopq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mpopq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mpopq *ModProductOptionPreviewQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mpopq.driver.Dialect())
	t1 := builder.Table(modproductoptionpreview.Table)
	columns := mpopq.ctx.Fields
	if len(columns) == 0 {
		columns = modproductoptionpreview.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mpopq.sql != nil {
		selector = mpopq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mpopq.ctx.Unique != nil && *mpopq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range mpopq.predicates {
		p(selector)
	}
	for _, p := range mpopq.order {
		p(selector)
	}
	if offset := mpopq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mpopq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ModProductOptionPreviewGroupBy is the group-by builder for ModProductOptionPreview entities.
type ModProductOptionPreviewGroupBy struct {
	selector
	build *ModProductOptionPreviewQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mpopgb *ModProductOptionPreviewGroupBy) Aggregate(fns ...AggregateFunc) *ModProductOptionPreviewGroupBy {
	mpopgb.fns = append(mpopgb.fns, fns...)
	return mpopgb
}

// Scan applies the selector query and scans the result into the given value.
func (mpopgb *ModProductOptionPreviewGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mpopgb.build.ctx, ent.OpQueryGroupBy)
	if err := mpopgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ModProductOptionPreviewQuery, *ModProductOptionPreviewGroupBy](ctx, mpopgb.build, mpopgb, mpopgb.build.inters, v)
}

func (mpopgb *ModProductOptionPreviewGroupBy) sqlScan(ctx context.Context, root *ModProductOptionPreviewQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mpopgb.fns))
	for _, fn := range mpopgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mpopgb.flds)+len(mpopgb.fns))
		for _, f := range *mpopgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mpopgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mpopgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ModProductOptionPreviewSelect is the builder for selecting fields of ModProductOptionPreview entities.
type ModProductOptionPreviewSelect struct {
	*ModProductOptionPreviewQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mpops *ModProductOptionPreviewSelect) Aggregate(fns ...AggregateFunc) *ModProductOptionPreviewSelect {
	mpops.fns = append(mpops.fns, fns...)
	return mpops
}

// Scan applies the selector query and scans the result into the given value.
func (mpops *ModProductOptionPreviewSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mpops.ctx, ent.OpQuerySelect)
	if err := mpops.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ModProductOptionPreviewQuery, *ModProductOptionPreviewSelect](ctx, mpops.ModProductOptionPreviewQuery, mpops, mpops.inters, v)
}

func (mpops *ModProductOptionPreviewSelect) sqlScan(ctx context.Context, root *ModProductOptionPreviewQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mpops.fns))
	for _, fn := range mpops.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mpops.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mpops.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
