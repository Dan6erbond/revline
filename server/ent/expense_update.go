// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/document"
	"github.com/Dan6erbond/revline/ent/expense"
	"github.com/Dan6erbond/revline/ent/fuelup"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/Dan6erbond/revline/ent/servicelog"
	"github.com/google/uuid"
)

// ExpenseUpdate is the builder for updating Expense entities.
type ExpenseUpdate struct {
	config
	hooks    []Hook
	mutation *ExpenseMutation
}

// Where appends a list predicates to the ExpenseUpdate builder.
func (eu *ExpenseUpdate) Where(ps ...predicate.Expense) *ExpenseUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdateTime sets the "update_time" field.
func (eu *ExpenseUpdate) SetUpdateTime(t time.Time) *ExpenseUpdate {
	eu.mutation.SetUpdateTime(t)
	return eu
}

// SetOccurredAt sets the "occurred_at" field.
func (eu *ExpenseUpdate) SetOccurredAt(t time.Time) *ExpenseUpdate {
	eu.mutation.SetOccurredAt(t)
	return eu
}

// SetNillableOccurredAt sets the "occurred_at" field if the given value is not nil.
func (eu *ExpenseUpdate) SetNillableOccurredAt(t *time.Time) *ExpenseUpdate {
	if t != nil {
		eu.SetOccurredAt(*t)
	}
	return eu
}

// SetType sets the "type" field.
func (eu *ExpenseUpdate) SetType(e expense.Type) *ExpenseUpdate {
	eu.mutation.SetType(e)
	return eu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (eu *ExpenseUpdate) SetNillableType(e *expense.Type) *ExpenseUpdate {
	if e != nil {
		eu.SetType(*e)
	}
	return eu
}

// SetAmount sets the "amount" field.
func (eu *ExpenseUpdate) SetAmount(f float64) *ExpenseUpdate {
	eu.mutation.ResetAmount()
	eu.mutation.SetAmount(f)
	return eu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (eu *ExpenseUpdate) SetNillableAmount(f *float64) *ExpenseUpdate {
	if f != nil {
		eu.SetAmount(*f)
	}
	return eu
}

// AddAmount adds f to the "amount" field.
func (eu *ExpenseUpdate) AddAmount(f float64) *ExpenseUpdate {
	eu.mutation.AddAmount(f)
	return eu
}

// SetNotes sets the "notes" field.
func (eu *ExpenseUpdate) SetNotes(s string) *ExpenseUpdate {
	eu.mutation.SetNotes(s)
	return eu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (eu *ExpenseUpdate) SetNillableNotes(s *string) *ExpenseUpdate {
	if s != nil {
		eu.SetNotes(*s)
	}
	return eu
}

// ClearNotes clears the value of the "notes" field.
func (eu *ExpenseUpdate) ClearNotes() *ExpenseUpdate {
	eu.mutation.ClearNotes()
	return eu
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (eu *ExpenseUpdate) SetCarID(id uuid.UUID) *ExpenseUpdate {
	eu.mutation.SetCarID(id)
	return eu
}

// SetCar sets the "car" edge to the Car entity.
func (eu *ExpenseUpdate) SetCar(c *Car) *ExpenseUpdate {
	return eu.SetCarID(c.ID)
}

// SetFuelUpID sets the "fuel_up" edge to the FuelUp entity by ID.
func (eu *ExpenseUpdate) SetFuelUpID(id uuid.UUID) *ExpenseUpdate {
	eu.mutation.SetFuelUpID(id)
	return eu
}

// SetNillableFuelUpID sets the "fuel_up" edge to the FuelUp entity by ID if the given value is not nil.
func (eu *ExpenseUpdate) SetNillableFuelUpID(id *uuid.UUID) *ExpenseUpdate {
	if id != nil {
		eu = eu.SetFuelUpID(*id)
	}
	return eu
}

// SetFuelUp sets the "fuel_up" edge to the FuelUp entity.
func (eu *ExpenseUpdate) SetFuelUp(f *FuelUp) *ExpenseUpdate {
	return eu.SetFuelUpID(f.ID)
}

// SetServiceLogID sets the "service_log" edge to the ServiceLog entity by ID.
func (eu *ExpenseUpdate) SetServiceLogID(id uuid.UUID) *ExpenseUpdate {
	eu.mutation.SetServiceLogID(id)
	return eu
}

// SetNillableServiceLogID sets the "service_log" edge to the ServiceLog entity by ID if the given value is not nil.
func (eu *ExpenseUpdate) SetNillableServiceLogID(id *uuid.UUID) *ExpenseUpdate {
	if id != nil {
		eu = eu.SetServiceLogID(*id)
	}
	return eu
}

// SetServiceLog sets the "service_log" edge to the ServiceLog entity.
func (eu *ExpenseUpdate) SetServiceLog(s *ServiceLog) *ExpenseUpdate {
	return eu.SetServiceLogID(s.ID)
}

// AddDocumentIDs adds the "documents" edge to the Document entity by IDs.
func (eu *ExpenseUpdate) AddDocumentIDs(ids ...uuid.UUID) *ExpenseUpdate {
	eu.mutation.AddDocumentIDs(ids...)
	return eu
}

// AddDocuments adds the "documents" edges to the Document entity.
func (eu *ExpenseUpdate) AddDocuments(d ...*Document) *ExpenseUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.AddDocumentIDs(ids...)
}

// Mutation returns the ExpenseMutation object of the builder.
func (eu *ExpenseUpdate) Mutation() *ExpenseMutation {
	return eu.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (eu *ExpenseUpdate) ClearCar() *ExpenseUpdate {
	eu.mutation.ClearCar()
	return eu
}

// ClearFuelUp clears the "fuel_up" edge to the FuelUp entity.
func (eu *ExpenseUpdate) ClearFuelUp() *ExpenseUpdate {
	eu.mutation.ClearFuelUp()
	return eu
}

// ClearServiceLog clears the "service_log" edge to the ServiceLog entity.
func (eu *ExpenseUpdate) ClearServiceLog() *ExpenseUpdate {
	eu.mutation.ClearServiceLog()
	return eu
}

// ClearDocuments clears all "documents" edges to the Document entity.
func (eu *ExpenseUpdate) ClearDocuments() *ExpenseUpdate {
	eu.mutation.ClearDocuments()
	return eu
}

// RemoveDocumentIDs removes the "documents" edge to Document entities by IDs.
func (eu *ExpenseUpdate) RemoveDocumentIDs(ids ...uuid.UUID) *ExpenseUpdate {
	eu.mutation.RemoveDocumentIDs(ids...)
	return eu
}

// RemoveDocuments removes "documents" edges to Document entities.
func (eu *ExpenseUpdate) RemoveDocuments(d ...*Document) *ExpenseUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return eu.RemoveDocumentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExpenseUpdate) Save(ctx context.Context) (int, error) {
	eu.defaults()
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExpenseUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExpenseUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExpenseUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *ExpenseUpdate) defaults() {
	if _, ok := eu.mutation.UpdateTime(); !ok {
		v := expense.UpdateDefaultUpdateTime()
		eu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *ExpenseUpdate) check() error {
	if v, ok := eu.mutation.GetType(); ok {
		if err := expense.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Expense.type": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Amount(); ok {
		if err := expense.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Expense.amount": %w`, err)}
		}
	}
	if eu.mutation.CarCleared() && len(eu.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Expense.car"`)
	}
	return nil
}

func (eu *ExpenseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(expense.Table, expense.Columns, sqlgraph.NewFieldSpec(expense.FieldID, field.TypeUUID))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UpdateTime(); ok {
		_spec.SetField(expense.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := eu.mutation.OccurredAt(); ok {
		_spec.SetField(expense.FieldOccurredAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.GetType(); ok {
		_spec.SetField(expense.FieldType, field.TypeEnum, value)
	}
	if value, ok := eu.mutation.Amount(); ok {
		_spec.SetField(expense.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.AddedAmount(); ok {
		_spec.AddField(expense.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := eu.mutation.Notes(); ok {
		_spec.SetField(expense.FieldNotes, field.TypeString, value)
	}
	if eu.mutation.NotesCleared() {
		_spec.ClearField(expense.FieldNotes, field.TypeString)
	}
	if eu.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   expense.CarTable,
			Columns: []string{expense.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   expense.CarTable,
			Columns: []string{expense.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.FuelUpCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   expense.FuelUpTable,
			Columns: []string{expense.FuelUpColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fuelup.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.FuelUpIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   expense.FuelUpTable,
			Columns: []string{expense.FuelUpColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fuelup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ServiceLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   expense.ServiceLogTable,
			Columns: []string{expense.ServiceLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ServiceLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   expense.ServiceLogTable,
			Columns: []string{expense.ServiceLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   expense.DocumentsTable,
			Columns: []string{expense.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedDocumentsIDs(); len(nodes) > 0 && !eu.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   expense.DocumentsTable,
			Columns: []string{expense.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.DocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   expense.DocumentsTable,
			Columns: []string{expense.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{expense.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ExpenseUpdateOne is the builder for updating a single Expense entity.
type ExpenseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExpenseMutation
}

// SetUpdateTime sets the "update_time" field.
func (euo *ExpenseUpdateOne) SetUpdateTime(t time.Time) *ExpenseUpdateOne {
	euo.mutation.SetUpdateTime(t)
	return euo
}

// SetOccurredAt sets the "occurred_at" field.
func (euo *ExpenseUpdateOne) SetOccurredAt(t time.Time) *ExpenseUpdateOne {
	euo.mutation.SetOccurredAt(t)
	return euo
}

// SetNillableOccurredAt sets the "occurred_at" field if the given value is not nil.
func (euo *ExpenseUpdateOne) SetNillableOccurredAt(t *time.Time) *ExpenseUpdateOne {
	if t != nil {
		euo.SetOccurredAt(*t)
	}
	return euo
}

// SetType sets the "type" field.
func (euo *ExpenseUpdateOne) SetType(e expense.Type) *ExpenseUpdateOne {
	euo.mutation.SetType(e)
	return euo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (euo *ExpenseUpdateOne) SetNillableType(e *expense.Type) *ExpenseUpdateOne {
	if e != nil {
		euo.SetType(*e)
	}
	return euo
}

// SetAmount sets the "amount" field.
func (euo *ExpenseUpdateOne) SetAmount(f float64) *ExpenseUpdateOne {
	euo.mutation.ResetAmount()
	euo.mutation.SetAmount(f)
	return euo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (euo *ExpenseUpdateOne) SetNillableAmount(f *float64) *ExpenseUpdateOne {
	if f != nil {
		euo.SetAmount(*f)
	}
	return euo
}

// AddAmount adds f to the "amount" field.
func (euo *ExpenseUpdateOne) AddAmount(f float64) *ExpenseUpdateOne {
	euo.mutation.AddAmount(f)
	return euo
}

// SetNotes sets the "notes" field.
func (euo *ExpenseUpdateOne) SetNotes(s string) *ExpenseUpdateOne {
	euo.mutation.SetNotes(s)
	return euo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (euo *ExpenseUpdateOne) SetNillableNotes(s *string) *ExpenseUpdateOne {
	if s != nil {
		euo.SetNotes(*s)
	}
	return euo
}

// ClearNotes clears the value of the "notes" field.
func (euo *ExpenseUpdateOne) ClearNotes() *ExpenseUpdateOne {
	euo.mutation.ClearNotes()
	return euo
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (euo *ExpenseUpdateOne) SetCarID(id uuid.UUID) *ExpenseUpdateOne {
	euo.mutation.SetCarID(id)
	return euo
}

// SetCar sets the "car" edge to the Car entity.
func (euo *ExpenseUpdateOne) SetCar(c *Car) *ExpenseUpdateOne {
	return euo.SetCarID(c.ID)
}

// SetFuelUpID sets the "fuel_up" edge to the FuelUp entity by ID.
func (euo *ExpenseUpdateOne) SetFuelUpID(id uuid.UUID) *ExpenseUpdateOne {
	euo.mutation.SetFuelUpID(id)
	return euo
}

// SetNillableFuelUpID sets the "fuel_up" edge to the FuelUp entity by ID if the given value is not nil.
func (euo *ExpenseUpdateOne) SetNillableFuelUpID(id *uuid.UUID) *ExpenseUpdateOne {
	if id != nil {
		euo = euo.SetFuelUpID(*id)
	}
	return euo
}

// SetFuelUp sets the "fuel_up" edge to the FuelUp entity.
func (euo *ExpenseUpdateOne) SetFuelUp(f *FuelUp) *ExpenseUpdateOne {
	return euo.SetFuelUpID(f.ID)
}

// SetServiceLogID sets the "service_log" edge to the ServiceLog entity by ID.
func (euo *ExpenseUpdateOne) SetServiceLogID(id uuid.UUID) *ExpenseUpdateOne {
	euo.mutation.SetServiceLogID(id)
	return euo
}

// SetNillableServiceLogID sets the "service_log" edge to the ServiceLog entity by ID if the given value is not nil.
func (euo *ExpenseUpdateOne) SetNillableServiceLogID(id *uuid.UUID) *ExpenseUpdateOne {
	if id != nil {
		euo = euo.SetServiceLogID(*id)
	}
	return euo
}

// SetServiceLog sets the "service_log" edge to the ServiceLog entity.
func (euo *ExpenseUpdateOne) SetServiceLog(s *ServiceLog) *ExpenseUpdateOne {
	return euo.SetServiceLogID(s.ID)
}

// AddDocumentIDs adds the "documents" edge to the Document entity by IDs.
func (euo *ExpenseUpdateOne) AddDocumentIDs(ids ...uuid.UUID) *ExpenseUpdateOne {
	euo.mutation.AddDocumentIDs(ids...)
	return euo
}

// AddDocuments adds the "documents" edges to the Document entity.
func (euo *ExpenseUpdateOne) AddDocuments(d ...*Document) *ExpenseUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.AddDocumentIDs(ids...)
}

// Mutation returns the ExpenseMutation object of the builder.
func (euo *ExpenseUpdateOne) Mutation() *ExpenseMutation {
	return euo.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (euo *ExpenseUpdateOne) ClearCar() *ExpenseUpdateOne {
	euo.mutation.ClearCar()
	return euo
}

// ClearFuelUp clears the "fuel_up" edge to the FuelUp entity.
func (euo *ExpenseUpdateOne) ClearFuelUp() *ExpenseUpdateOne {
	euo.mutation.ClearFuelUp()
	return euo
}

// ClearServiceLog clears the "service_log" edge to the ServiceLog entity.
func (euo *ExpenseUpdateOne) ClearServiceLog() *ExpenseUpdateOne {
	euo.mutation.ClearServiceLog()
	return euo
}

// ClearDocuments clears all "documents" edges to the Document entity.
func (euo *ExpenseUpdateOne) ClearDocuments() *ExpenseUpdateOne {
	euo.mutation.ClearDocuments()
	return euo
}

// RemoveDocumentIDs removes the "documents" edge to Document entities by IDs.
func (euo *ExpenseUpdateOne) RemoveDocumentIDs(ids ...uuid.UUID) *ExpenseUpdateOne {
	euo.mutation.RemoveDocumentIDs(ids...)
	return euo
}

// RemoveDocuments removes "documents" edges to Document entities.
func (euo *ExpenseUpdateOne) RemoveDocuments(d ...*Document) *ExpenseUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return euo.RemoveDocumentIDs(ids...)
}

// Where appends a list predicates to the ExpenseUpdate builder.
func (euo *ExpenseUpdateOne) Where(ps ...predicate.Expense) *ExpenseUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExpenseUpdateOne) Select(field string, fields ...string) *ExpenseUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Expense entity.
func (euo *ExpenseUpdateOne) Save(ctx context.Context) (*Expense, error) {
	euo.defaults()
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExpenseUpdateOne) SaveX(ctx context.Context) *Expense {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExpenseUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExpenseUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *ExpenseUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdateTime(); !ok {
		v := expense.UpdateDefaultUpdateTime()
		euo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *ExpenseUpdateOne) check() error {
	if v, ok := euo.mutation.GetType(); ok {
		if err := expense.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Expense.type": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Amount(); ok {
		if err := expense.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Expense.amount": %w`, err)}
		}
	}
	if euo.mutation.CarCleared() && len(euo.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Expense.car"`)
	}
	return nil
}

func (euo *ExpenseUpdateOne) sqlSave(ctx context.Context) (_node *Expense, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(expense.Table, expense.Columns, sqlgraph.NewFieldSpec(expense.FieldID, field.TypeUUID))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Expense.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, expense.FieldID)
		for _, f := range fields {
			if !expense.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != expense.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UpdateTime(); ok {
		_spec.SetField(expense.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := euo.mutation.OccurredAt(); ok {
		_spec.SetField(expense.FieldOccurredAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.GetType(); ok {
		_spec.SetField(expense.FieldType, field.TypeEnum, value)
	}
	if value, ok := euo.mutation.Amount(); ok {
		_spec.SetField(expense.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.AddedAmount(); ok {
		_spec.AddField(expense.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := euo.mutation.Notes(); ok {
		_spec.SetField(expense.FieldNotes, field.TypeString, value)
	}
	if euo.mutation.NotesCleared() {
		_spec.ClearField(expense.FieldNotes, field.TypeString)
	}
	if euo.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   expense.CarTable,
			Columns: []string{expense.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   expense.CarTable,
			Columns: []string{expense.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.FuelUpCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   expense.FuelUpTable,
			Columns: []string{expense.FuelUpColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fuelup.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.FuelUpIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   expense.FuelUpTable,
			Columns: []string{expense.FuelUpColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fuelup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ServiceLogCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   expense.ServiceLogTable,
			Columns: []string{expense.ServiceLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ServiceLogIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   expense.ServiceLogTable,
			Columns: []string{expense.ServiceLogColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(servicelog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   expense.DocumentsTable,
			Columns: []string{expense.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedDocumentsIDs(); len(nodes) > 0 && !euo.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   expense.DocumentsTable,
			Columns: []string{expense.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.DocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   expense.DocumentsTable,
			Columns: []string{expense.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Expense{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{expense.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
