// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/document"
	"github.com/Dan6erbond/revline/ent/dragresult"
	"github.com/Dan6erbond/revline/ent/dragsession"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/google/uuid"
)

// DragSessionUpdate is the builder for updating DragSession entities.
type DragSessionUpdate struct {
	config
	hooks    []Hook
	mutation *DragSessionMutation
}

// Where appends a list predicates to the DragSessionUpdate builder.
func (dsu *DragSessionUpdate) Where(ps ...predicate.DragSession) *DragSessionUpdate {
	dsu.mutation.Where(ps...)
	return dsu
}

// SetUpdateTime sets the "update_time" field.
func (dsu *DragSessionUpdate) SetUpdateTime(t time.Time) *DragSessionUpdate {
	dsu.mutation.SetUpdateTime(t)
	return dsu
}

// SetTitle sets the "title" field.
func (dsu *DragSessionUpdate) SetTitle(s string) *DragSessionUpdate {
	dsu.mutation.SetTitle(s)
	return dsu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (dsu *DragSessionUpdate) SetNillableTitle(s *string) *DragSessionUpdate {
	if s != nil {
		dsu.SetTitle(*s)
	}
	return dsu
}

// SetNotes sets the "notes" field.
func (dsu *DragSessionUpdate) SetNotes(s string) *DragSessionUpdate {
	dsu.mutation.SetNotes(s)
	return dsu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (dsu *DragSessionUpdate) SetNillableNotes(s *string) *DragSessionUpdate {
	if s != nil {
		dsu.SetNotes(*s)
	}
	return dsu
}

// ClearNotes clears the value of the "notes" field.
func (dsu *DragSessionUpdate) ClearNotes() *DragSessionUpdate {
	dsu.mutation.ClearNotes()
	return dsu
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (dsu *DragSessionUpdate) SetCarID(id uuid.UUID) *DragSessionUpdate {
	dsu.mutation.SetCarID(id)
	return dsu
}

// SetCar sets the "car" edge to the Car entity.
func (dsu *DragSessionUpdate) SetCar(c *Car) *DragSessionUpdate {
	return dsu.SetCarID(c.ID)
}

// AddResultIDs adds the "results" edge to the DragResult entity by IDs.
func (dsu *DragSessionUpdate) AddResultIDs(ids ...uuid.UUID) *DragSessionUpdate {
	dsu.mutation.AddResultIDs(ids...)
	return dsu
}

// AddResults adds the "results" edges to the DragResult entity.
func (dsu *DragSessionUpdate) AddResults(d ...*DragResult) *DragSessionUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dsu.AddResultIDs(ids...)
}

// AddDocumentIDs adds the "documents" edge to the Document entity by IDs.
func (dsu *DragSessionUpdate) AddDocumentIDs(ids ...uuid.UUID) *DragSessionUpdate {
	dsu.mutation.AddDocumentIDs(ids...)
	return dsu
}

// AddDocuments adds the "documents" edges to the Document entity.
func (dsu *DragSessionUpdate) AddDocuments(d ...*Document) *DragSessionUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dsu.AddDocumentIDs(ids...)
}

// Mutation returns the DragSessionMutation object of the builder.
func (dsu *DragSessionUpdate) Mutation() *DragSessionMutation {
	return dsu.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (dsu *DragSessionUpdate) ClearCar() *DragSessionUpdate {
	dsu.mutation.ClearCar()
	return dsu
}

// ClearResults clears all "results" edges to the DragResult entity.
func (dsu *DragSessionUpdate) ClearResults() *DragSessionUpdate {
	dsu.mutation.ClearResults()
	return dsu
}

// RemoveResultIDs removes the "results" edge to DragResult entities by IDs.
func (dsu *DragSessionUpdate) RemoveResultIDs(ids ...uuid.UUID) *DragSessionUpdate {
	dsu.mutation.RemoveResultIDs(ids...)
	return dsu
}

// RemoveResults removes "results" edges to DragResult entities.
func (dsu *DragSessionUpdate) RemoveResults(d ...*DragResult) *DragSessionUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dsu.RemoveResultIDs(ids...)
}

// ClearDocuments clears all "documents" edges to the Document entity.
func (dsu *DragSessionUpdate) ClearDocuments() *DragSessionUpdate {
	dsu.mutation.ClearDocuments()
	return dsu
}

// RemoveDocumentIDs removes the "documents" edge to Document entities by IDs.
func (dsu *DragSessionUpdate) RemoveDocumentIDs(ids ...uuid.UUID) *DragSessionUpdate {
	dsu.mutation.RemoveDocumentIDs(ids...)
	return dsu
}

// RemoveDocuments removes "documents" edges to Document entities.
func (dsu *DragSessionUpdate) RemoveDocuments(d ...*Document) *DragSessionUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dsu.RemoveDocumentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dsu *DragSessionUpdate) Save(ctx context.Context) (int, error) {
	dsu.defaults()
	return withHooks(ctx, dsu.sqlSave, dsu.mutation, dsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dsu *DragSessionUpdate) SaveX(ctx context.Context) int {
	affected, err := dsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dsu *DragSessionUpdate) Exec(ctx context.Context) error {
	_, err := dsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsu *DragSessionUpdate) ExecX(ctx context.Context) {
	if err := dsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dsu *DragSessionUpdate) defaults() {
	if _, ok := dsu.mutation.UpdateTime(); !ok {
		v := dragsession.UpdateDefaultUpdateTime()
		dsu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsu *DragSessionUpdate) check() error {
	if dsu.mutation.CarCleared() && len(dsu.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DragSession.car"`)
	}
	return nil
}

func (dsu *DragSessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(dragsession.Table, dragsession.Columns, sqlgraph.NewFieldSpec(dragsession.FieldID, field.TypeUUID))
	if ps := dsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dsu.mutation.UpdateTime(); ok {
		_spec.SetField(dragsession.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := dsu.mutation.Title(); ok {
		_spec.SetField(dragsession.FieldTitle, field.TypeString, value)
	}
	if value, ok := dsu.mutation.Notes(); ok {
		_spec.SetField(dragsession.FieldNotes, field.TypeString, value)
	}
	if dsu.mutation.NotesCleared() {
		_spec.ClearField(dragsession.FieldNotes, field.TypeString)
	}
	if dsu.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dragsession.CarTable,
			Columns: []string{dragsession.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dsu.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dragsession.CarTable,
			Columns: []string{dragsession.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dsu.mutation.ResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dragsession.ResultsTable,
			Columns: []string{dragsession.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dragresult.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dsu.mutation.RemovedResultsIDs(); len(nodes) > 0 && !dsu.mutation.ResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dragsession.ResultsTable,
			Columns: []string{dragsession.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dragresult.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dsu.mutation.ResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dragsession.ResultsTable,
			Columns: []string{dragsession.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dragresult.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dsu.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dragsession.DocumentsTable,
			Columns: []string{dragsession.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dsu.mutation.RemovedDocumentsIDs(); len(nodes) > 0 && !dsu.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dragsession.DocumentsTable,
			Columns: []string{dragsession.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dsu.mutation.DocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dragsession.DocumentsTable,
			Columns: []string{dragsession.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dragsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dsu.mutation.done = true
	return n, nil
}

// DragSessionUpdateOne is the builder for updating a single DragSession entity.
type DragSessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DragSessionMutation
}

// SetUpdateTime sets the "update_time" field.
func (dsuo *DragSessionUpdateOne) SetUpdateTime(t time.Time) *DragSessionUpdateOne {
	dsuo.mutation.SetUpdateTime(t)
	return dsuo
}

// SetTitle sets the "title" field.
func (dsuo *DragSessionUpdateOne) SetTitle(s string) *DragSessionUpdateOne {
	dsuo.mutation.SetTitle(s)
	return dsuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (dsuo *DragSessionUpdateOne) SetNillableTitle(s *string) *DragSessionUpdateOne {
	if s != nil {
		dsuo.SetTitle(*s)
	}
	return dsuo
}

// SetNotes sets the "notes" field.
func (dsuo *DragSessionUpdateOne) SetNotes(s string) *DragSessionUpdateOne {
	dsuo.mutation.SetNotes(s)
	return dsuo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (dsuo *DragSessionUpdateOne) SetNillableNotes(s *string) *DragSessionUpdateOne {
	if s != nil {
		dsuo.SetNotes(*s)
	}
	return dsuo
}

// ClearNotes clears the value of the "notes" field.
func (dsuo *DragSessionUpdateOne) ClearNotes() *DragSessionUpdateOne {
	dsuo.mutation.ClearNotes()
	return dsuo
}

// SetCarID sets the "car" edge to the Car entity by ID.
func (dsuo *DragSessionUpdateOne) SetCarID(id uuid.UUID) *DragSessionUpdateOne {
	dsuo.mutation.SetCarID(id)
	return dsuo
}

// SetCar sets the "car" edge to the Car entity.
func (dsuo *DragSessionUpdateOne) SetCar(c *Car) *DragSessionUpdateOne {
	return dsuo.SetCarID(c.ID)
}

// AddResultIDs adds the "results" edge to the DragResult entity by IDs.
func (dsuo *DragSessionUpdateOne) AddResultIDs(ids ...uuid.UUID) *DragSessionUpdateOne {
	dsuo.mutation.AddResultIDs(ids...)
	return dsuo
}

// AddResults adds the "results" edges to the DragResult entity.
func (dsuo *DragSessionUpdateOne) AddResults(d ...*DragResult) *DragSessionUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dsuo.AddResultIDs(ids...)
}

// AddDocumentIDs adds the "documents" edge to the Document entity by IDs.
func (dsuo *DragSessionUpdateOne) AddDocumentIDs(ids ...uuid.UUID) *DragSessionUpdateOne {
	dsuo.mutation.AddDocumentIDs(ids...)
	return dsuo
}

// AddDocuments adds the "documents" edges to the Document entity.
func (dsuo *DragSessionUpdateOne) AddDocuments(d ...*Document) *DragSessionUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dsuo.AddDocumentIDs(ids...)
}

// Mutation returns the DragSessionMutation object of the builder.
func (dsuo *DragSessionUpdateOne) Mutation() *DragSessionMutation {
	return dsuo.mutation
}

// ClearCar clears the "car" edge to the Car entity.
func (dsuo *DragSessionUpdateOne) ClearCar() *DragSessionUpdateOne {
	dsuo.mutation.ClearCar()
	return dsuo
}

// ClearResults clears all "results" edges to the DragResult entity.
func (dsuo *DragSessionUpdateOne) ClearResults() *DragSessionUpdateOne {
	dsuo.mutation.ClearResults()
	return dsuo
}

// RemoveResultIDs removes the "results" edge to DragResult entities by IDs.
func (dsuo *DragSessionUpdateOne) RemoveResultIDs(ids ...uuid.UUID) *DragSessionUpdateOne {
	dsuo.mutation.RemoveResultIDs(ids...)
	return dsuo
}

// RemoveResults removes "results" edges to DragResult entities.
func (dsuo *DragSessionUpdateOne) RemoveResults(d ...*DragResult) *DragSessionUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dsuo.RemoveResultIDs(ids...)
}

// ClearDocuments clears all "documents" edges to the Document entity.
func (dsuo *DragSessionUpdateOne) ClearDocuments() *DragSessionUpdateOne {
	dsuo.mutation.ClearDocuments()
	return dsuo
}

// RemoveDocumentIDs removes the "documents" edge to Document entities by IDs.
func (dsuo *DragSessionUpdateOne) RemoveDocumentIDs(ids ...uuid.UUID) *DragSessionUpdateOne {
	dsuo.mutation.RemoveDocumentIDs(ids...)
	return dsuo
}

// RemoveDocuments removes "documents" edges to Document entities.
func (dsuo *DragSessionUpdateOne) RemoveDocuments(d ...*Document) *DragSessionUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dsuo.RemoveDocumentIDs(ids...)
}

// Where appends a list predicates to the DragSessionUpdate builder.
func (dsuo *DragSessionUpdateOne) Where(ps ...predicate.DragSession) *DragSessionUpdateOne {
	dsuo.mutation.Where(ps...)
	return dsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dsuo *DragSessionUpdateOne) Select(field string, fields ...string) *DragSessionUpdateOne {
	dsuo.fields = append([]string{field}, fields...)
	return dsuo
}

// Save executes the query and returns the updated DragSession entity.
func (dsuo *DragSessionUpdateOne) Save(ctx context.Context) (*DragSession, error) {
	dsuo.defaults()
	return withHooks(ctx, dsuo.sqlSave, dsuo.mutation, dsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dsuo *DragSessionUpdateOne) SaveX(ctx context.Context) *DragSession {
	node, err := dsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dsuo *DragSessionUpdateOne) Exec(ctx context.Context) error {
	_, err := dsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dsuo *DragSessionUpdateOne) ExecX(ctx context.Context) {
	if err := dsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dsuo *DragSessionUpdateOne) defaults() {
	if _, ok := dsuo.mutation.UpdateTime(); !ok {
		v := dragsession.UpdateDefaultUpdateTime()
		dsuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dsuo *DragSessionUpdateOne) check() error {
	if dsuo.mutation.CarCleared() && len(dsuo.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DragSession.car"`)
	}
	return nil
}

func (dsuo *DragSessionUpdateOne) sqlSave(ctx context.Context) (_node *DragSession, err error) {
	if err := dsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(dragsession.Table, dragsession.Columns, sqlgraph.NewFieldSpec(dragsession.FieldID, field.TypeUUID))
	id, ok := dsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DragSession.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dragsession.FieldID)
		for _, f := range fields {
			if !dragsession.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dragsession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dsuo.mutation.UpdateTime(); ok {
		_spec.SetField(dragsession.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := dsuo.mutation.Title(); ok {
		_spec.SetField(dragsession.FieldTitle, field.TypeString, value)
	}
	if value, ok := dsuo.mutation.Notes(); ok {
		_spec.SetField(dragsession.FieldNotes, field.TypeString, value)
	}
	if dsuo.mutation.NotesCleared() {
		_spec.ClearField(dragsession.FieldNotes, field.TypeString)
	}
	if dsuo.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dragsession.CarTable,
			Columns: []string{dragsession.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dsuo.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dragsession.CarTable,
			Columns: []string{dragsession.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dsuo.mutation.ResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dragsession.ResultsTable,
			Columns: []string{dragsession.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dragresult.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dsuo.mutation.RemovedResultsIDs(); len(nodes) > 0 && !dsuo.mutation.ResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dragsession.ResultsTable,
			Columns: []string{dragsession.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dragresult.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dsuo.mutation.ResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dragsession.ResultsTable,
			Columns: []string{dragsession.ResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dragresult.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dsuo.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dragsession.DocumentsTable,
			Columns: []string{dragsession.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dsuo.mutation.RemovedDocumentsIDs(); len(nodes) > 0 && !dsuo.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dragsession.DocumentsTable,
			Columns: []string{dragsession.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dsuo.mutation.DocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dragsession.DocumentsTable,
			Columns: []string{dragsession.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DragSession{config: dsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dragsession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dsuo.mutation.done = true
	return _node, nil
}
