// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Dan6erbond/revline/ent/car"
	"github.com/Dan6erbond/revline/ent/predicate"
	"github.com/Dan6erbond/revline/ent/serviceitem"
	"github.com/Dan6erbond/revline/ent/servicelog"
	"github.com/Dan6erbond/revline/ent/serviceschedule"
	"github.com/google/uuid"
)

// ServiceScheduleQuery is the builder for querying ServiceSchedule entities.
type ServiceScheduleQuery struct {
	config
	ctx            *QueryContext
	order          []serviceschedule.OrderOption
	inters         []Interceptor
	predicates     []predicate.ServiceSchedule
	withCar        *CarQuery
	withItems      *ServiceItemQuery
	withLogs       *ServiceLogQuery
	withFKs        bool
	modifiers      []func(*sql.Selector)
	loadTotal      []func(context.Context, []*ServiceSchedule) error
	withNamedItems map[string]*ServiceItemQuery
	withNamedLogs  map[string]*ServiceLogQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ServiceScheduleQuery builder.
func (ssq *ServiceScheduleQuery) Where(ps ...predicate.ServiceSchedule) *ServiceScheduleQuery {
	ssq.predicates = append(ssq.predicates, ps...)
	return ssq
}

// Limit the number of records to be returned by this query.
func (ssq *ServiceScheduleQuery) Limit(limit int) *ServiceScheduleQuery {
	ssq.ctx.Limit = &limit
	return ssq
}

// Offset to start from.
func (ssq *ServiceScheduleQuery) Offset(offset int) *ServiceScheduleQuery {
	ssq.ctx.Offset = &offset
	return ssq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ssq *ServiceScheduleQuery) Unique(unique bool) *ServiceScheduleQuery {
	ssq.ctx.Unique = &unique
	return ssq
}

// Order specifies how the records should be ordered.
func (ssq *ServiceScheduleQuery) Order(o ...serviceschedule.OrderOption) *ServiceScheduleQuery {
	ssq.order = append(ssq.order, o...)
	return ssq
}

// QueryCar chains the current query on the "car" edge.
func (ssq *ServiceScheduleQuery) QueryCar() *CarQuery {
	query := (&CarClient{config: ssq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(serviceschedule.Table, serviceschedule.FieldID, selector),
			sqlgraph.To(car.Table, car.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, serviceschedule.CarTable, serviceschedule.CarColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryItems chains the current query on the "items" edge.
func (ssq *ServiceScheduleQuery) QueryItems() *ServiceItemQuery {
	query := (&ServiceItemClient{config: ssq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(serviceschedule.Table, serviceschedule.FieldID, selector),
			sqlgraph.To(serviceitem.Table, serviceitem.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, serviceschedule.ItemsTable, serviceschedule.ItemsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLogs chains the current query on the "logs" edge.
func (ssq *ServiceScheduleQuery) QueryLogs() *ServiceLogQuery {
	query := (&ServiceLogClient{config: ssq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ssq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ssq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(serviceschedule.Table, serviceschedule.FieldID, selector),
			sqlgraph.To(servicelog.Table, servicelog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, serviceschedule.LogsTable, serviceschedule.LogsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ssq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ServiceSchedule entity from the query.
// Returns a *NotFoundError when no ServiceSchedule was found.
func (ssq *ServiceScheduleQuery) First(ctx context.Context) (*ServiceSchedule, error) {
	nodes, err := ssq.Limit(1).All(setContextOp(ctx, ssq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{serviceschedule.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ssq *ServiceScheduleQuery) FirstX(ctx context.Context) *ServiceSchedule {
	node, err := ssq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ServiceSchedule ID from the query.
// Returns a *NotFoundError when no ServiceSchedule ID was found.
func (ssq *ServiceScheduleQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ssq.Limit(1).IDs(setContextOp(ctx, ssq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{serviceschedule.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ssq *ServiceScheduleQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := ssq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ServiceSchedule entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ServiceSchedule entity is found.
// Returns a *NotFoundError when no ServiceSchedule entities are found.
func (ssq *ServiceScheduleQuery) Only(ctx context.Context) (*ServiceSchedule, error) {
	nodes, err := ssq.Limit(2).All(setContextOp(ctx, ssq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{serviceschedule.Label}
	default:
		return nil, &NotSingularError{serviceschedule.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ssq *ServiceScheduleQuery) OnlyX(ctx context.Context) *ServiceSchedule {
	node, err := ssq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ServiceSchedule ID in the query.
// Returns a *NotSingularError when more than one ServiceSchedule ID is found.
// Returns a *NotFoundError when no entities are found.
func (ssq *ServiceScheduleQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = ssq.Limit(2).IDs(setContextOp(ctx, ssq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{serviceschedule.Label}
	default:
		err = &NotSingularError{serviceschedule.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ssq *ServiceScheduleQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := ssq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ServiceSchedules.
func (ssq *ServiceScheduleQuery) All(ctx context.Context) ([]*ServiceSchedule, error) {
	ctx = setContextOp(ctx, ssq.ctx, ent.OpQueryAll)
	if err := ssq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ServiceSchedule, *ServiceScheduleQuery]()
	return withInterceptors[[]*ServiceSchedule](ctx, ssq, qr, ssq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ssq *ServiceScheduleQuery) AllX(ctx context.Context) []*ServiceSchedule {
	nodes, err := ssq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ServiceSchedule IDs.
func (ssq *ServiceScheduleQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if ssq.ctx.Unique == nil && ssq.path != nil {
		ssq.Unique(true)
	}
	ctx = setContextOp(ctx, ssq.ctx, ent.OpQueryIDs)
	if err = ssq.Select(serviceschedule.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ssq *ServiceScheduleQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := ssq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ssq *ServiceScheduleQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ssq.ctx, ent.OpQueryCount)
	if err := ssq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ssq, querierCount[*ServiceScheduleQuery](), ssq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ssq *ServiceScheduleQuery) CountX(ctx context.Context) int {
	count, err := ssq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ssq *ServiceScheduleQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ssq.ctx, ent.OpQueryExist)
	switch _, err := ssq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ssq *ServiceScheduleQuery) ExistX(ctx context.Context) bool {
	exist, err := ssq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ServiceScheduleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ssq *ServiceScheduleQuery) Clone() *ServiceScheduleQuery {
	if ssq == nil {
		return nil
	}
	return &ServiceScheduleQuery{
		config:     ssq.config,
		ctx:        ssq.ctx.Clone(),
		order:      append([]serviceschedule.OrderOption{}, ssq.order...),
		inters:     append([]Interceptor{}, ssq.inters...),
		predicates: append([]predicate.ServiceSchedule{}, ssq.predicates...),
		withCar:    ssq.withCar.Clone(),
		withItems:  ssq.withItems.Clone(),
		withLogs:   ssq.withLogs.Clone(),
		// clone intermediate query.
		sql:  ssq.sql.Clone(),
		path: ssq.path,
	}
}

// WithCar tells the query-builder to eager-load the nodes that are connected to
// the "car" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *ServiceScheduleQuery) WithCar(opts ...func(*CarQuery)) *ServiceScheduleQuery {
	query := (&CarClient{config: ssq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ssq.withCar = query
	return ssq
}

// WithItems tells the query-builder to eager-load the nodes that are connected to
// the "items" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *ServiceScheduleQuery) WithItems(opts ...func(*ServiceItemQuery)) *ServiceScheduleQuery {
	query := (&ServiceItemClient{config: ssq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ssq.withItems = query
	return ssq
}

// WithLogs tells the query-builder to eager-load the nodes that are connected to
// the "logs" edge. The optional arguments are used to configure the query builder of the edge.
func (ssq *ServiceScheduleQuery) WithLogs(opts ...func(*ServiceLogQuery)) *ServiceScheduleQuery {
	query := (&ServiceLogClient{config: ssq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ssq.withLogs = query
	return ssq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ServiceSchedule.Query().
//		GroupBy(serviceschedule.FieldCreateTime).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ssq *ServiceScheduleQuery) GroupBy(field string, fields ...string) *ServiceScheduleGroupBy {
	ssq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ServiceScheduleGroupBy{build: ssq}
	grbuild.flds = &ssq.ctx.Fields
	grbuild.label = serviceschedule.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreateTime time.Time `json:"create_time,omitempty"`
//	}
//
//	client.ServiceSchedule.Query().
//		Select(serviceschedule.FieldCreateTime).
//		Scan(ctx, &v)
func (ssq *ServiceScheduleQuery) Select(fields ...string) *ServiceScheduleSelect {
	ssq.ctx.Fields = append(ssq.ctx.Fields, fields...)
	sbuild := &ServiceScheduleSelect{ServiceScheduleQuery: ssq}
	sbuild.label = serviceschedule.Label
	sbuild.flds, sbuild.scan = &ssq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ServiceScheduleSelect configured with the given aggregations.
func (ssq *ServiceScheduleQuery) Aggregate(fns ...AggregateFunc) *ServiceScheduleSelect {
	return ssq.Select().Aggregate(fns...)
}

func (ssq *ServiceScheduleQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ssq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ssq); err != nil {
				return err
			}
		}
	}
	for _, f := range ssq.ctx.Fields {
		if !serviceschedule.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ssq.path != nil {
		prev, err := ssq.path(ctx)
		if err != nil {
			return err
		}
		ssq.sql = prev
	}
	return nil
}

func (ssq *ServiceScheduleQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ServiceSchedule, error) {
	var (
		nodes       = []*ServiceSchedule{}
		withFKs     = ssq.withFKs
		_spec       = ssq.querySpec()
		loadedTypes = [3]bool{
			ssq.withCar != nil,
			ssq.withItems != nil,
			ssq.withLogs != nil,
		}
	)
	if ssq.withCar != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, serviceschedule.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ServiceSchedule).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ServiceSchedule{config: ssq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ssq.modifiers) > 0 {
		_spec.Modifiers = ssq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ssq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ssq.withCar; query != nil {
		if err := ssq.loadCar(ctx, query, nodes, nil,
			func(n *ServiceSchedule, e *Car) { n.Edges.Car = e }); err != nil {
			return nil, err
		}
	}
	if query := ssq.withItems; query != nil {
		if err := ssq.loadItems(ctx, query, nodes,
			func(n *ServiceSchedule) { n.Edges.Items = []*ServiceItem{} },
			func(n *ServiceSchedule, e *ServiceItem) { n.Edges.Items = append(n.Edges.Items, e) }); err != nil {
			return nil, err
		}
	}
	if query := ssq.withLogs; query != nil {
		if err := ssq.loadLogs(ctx, query, nodes,
			func(n *ServiceSchedule) { n.Edges.Logs = []*ServiceLog{} },
			func(n *ServiceSchedule, e *ServiceLog) { n.Edges.Logs = append(n.Edges.Logs, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range ssq.withNamedItems {
		if err := ssq.loadItems(ctx, query, nodes,
			func(n *ServiceSchedule) { n.appendNamedItems(name) },
			func(n *ServiceSchedule, e *ServiceItem) { n.appendNamedItems(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range ssq.withNamedLogs {
		if err := ssq.loadLogs(ctx, query, nodes,
			func(n *ServiceSchedule) { n.appendNamedLogs(name) },
			func(n *ServiceSchedule, e *ServiceLog) { n.appendNamedLogs(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range ssq.loadTotal {
		if err := ssq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ssq *ServiceScheduleQuery) loadCar(ctx context.Context, query *CarQuery, nodes []*ServiceSchedule, init func(*ServiceSchedule), assign func(*ServiceSchedule, *Car)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ServiceSchedule)
	for i := range nodes {
		if nodes[i].car_service_schedules == nil {
			continue
		}
		fk := *nodes[i].car_service_schedules
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(car.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "car_service_schedules" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ssq *ServiceScheduleQuery) loadItems(ctx context.Context, query *ServiceItemQuery, nodes []*ServiceSchedule, init func(*ServiceSchedule), assign func(*ServiceSchedule, *ServiceItem)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*ServiceSchedule)
	nids := make(map[uuid.UUID]map[*ServiceSchedule]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(serviceschedule.ItemsTable)
		s.Join(joinT).On(s.C(serviceitem.FieldID), joinT.C(serviceschedule.ItemsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(serviceschedule.ItemsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(serviceschedule.ItemsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*ServiceSchedule]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ServiceItem](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "items" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (ssq *ServiceScheduleQuery) loadLogs(ctx context.Context, query *ServiceLogQuery, nodes []*ServiceSchedule, init func(*ServiceSchedule), assign func(*ServiceSchedule, *ServiceLog)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*ServiceSchedule)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ServiceLog(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(serviceschedule.LogsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.service_schedule_logs
		if fk == nil {
			return fmt.Errorf(`foreign-key "service_schedule_logs" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "service_schedule_logs" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ssq *ServiceScheduleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ssq.querySpec()
	if len(ssq.modifiers) > 0 {
		_spec.Modifiers = ssq.modifiers
	}
	_spec.Node.Columns = ssq.ctx.Fields
	if len(ssq.ctx.Fields) > 0 {
		_spec.Unique = ssq.ctx.Unique != nil && *ssq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ssq.driver, _spec)
}

func (ssq *ServiceScheduleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(serviceschedule.Table, serviceschedule.Columns, sqlgraph.NewFieldSpec(serviceschedule.FieldID, field.TypeUUID))
	_spec.From = ssq.sql
	if unique := ssq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ssq.path != nil {
		_spec.Unique = true
	}
	if fields := ssq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serviceschedule.FieldID)
		for i := range fields {
			if fields[i] != serviceschedule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ssq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ssq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ssq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ssq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ssq *ServiceScheduleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ssq.driver.Dialect())
	t1 := builder.Table(serviceschedule.Table)
	columns := ssq.ctx.Fields
	if len(columns) == 0 {
		columns = serviceschedule.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ssq.sql != nil {
		selector = ssq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ssq.ctx.Unique != nil && *ssq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ssq.predicates {
		p(selector)
	}
	for _, p := range ssq.order {
		p(selector)
	}
	if offset := ssq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ssq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedItems tells the query-builder to eager-load the nodes that are connected to the "items"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ssq *ServiceScheduleQuery) WithNamedItems(name string, opts ...func(*ServiceItemQuery)) *ServiceScheduleQuery {
	query := (&ServiceItemClient{config: ssq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ssq.withNamedItems == nil {
		ssq.withNamedItems = make(map[string]*ServiceItemQuery)
	}
	ssq.withNamedItems[name] = query
	return ssq
}

// WithNamedLogs tells the query-builder to eager-load the nodes that are connected to the "logs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ssq *ServiceScheduleQuery) WithNamedLogs(name string, opts ...func(*ServiceLogQuery)) *ServiceScheduleQuery {
	query := (&ServiceLogClient{config: ssq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ssq.withNamedLogs == nil {
		ssq.withNamedLogs = make(map[string]*ServiceLogQuery)
	}
	ssq.withNamedLogs[name] = query
	return ssq
}

// ServiceScheduleGroupBy is the group-by builder for ServiceSchedule entities.
type ServiceScheduleGroupBy struct {
	selector
	build *ServiceScheduleQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ssgb *ServiceScheduleGroupBy) Aggregate(fns ...AggregateFunc) *ServiceScheduleGroupBy {
	ssgb.fns = append(ssgb.fns, fns...)
	return ssgb
}

// Scan applies the selector query and scans the result into the given value.
func (ssgb *ServiceScheduleGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ssgb.build.ctx, ent.OpQueryGroupBy)
	if err := ssgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ServiceScheduleQuery, *ServiceScheduleGroupBy](ctx, ssgb.build, ssgb, ssgb.build.inters, v)
}

func (ssgb *ServiceScheduleGroupBy) sqlScan(ctx context.Context, root *ServiceScheduleQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ssgb.fns))
	for _, fn := range ssgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ssgb.flds)+len(ssgb.fns))
		for _, f := range *ssgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ssgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ssgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ServiceScheduleSelect is the builder for selecting fields of ServiceSchedule entities.
type ServiceScheduleSelect struct {
	*ServiceScheduleQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sss *ServiceScheduleSelect) Aggregate(fns ...AggregateFunc) *ServiceScheduleSelect {
	sss.fns = append(sss.fns, fns...)
	return sss
}

// Scan applies the selector query and scans the result into the given value.
func (sss *ServiceScheduleSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sss.ctx, ent.OpQuerySelect)
	if err := sss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ServiceScheduleQuery, *ServiceScheduleSelect](ctx, sss.ServiceScheduleQuery, sss, sss.inters, v)
}

func (sss *ServiceScheduleSelect) sqlScan(ctx context.Context, root *ServiceScheduleQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sss.fns))
	for _, fn := range sss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
