// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AlbumsColumns holds the columns for the "albums" table.
	AlbumsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "title", Type: field.TypeString},
		{Name: "car_albums", Type: field.TypeUUID},
	}
	// AlbumsTable holds the schema information for the "albums" table.
	AlbumsTable = &schema.Table{
		Name:       "albums",
		Columns:    AlbumsColumns,
		PrimaryKey: []*schema.Column{AlbumsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "albums_cars_albums",
				Columns:    []*schema.Column{AlbumsColumns[4]},
				RefColumns: []*schema.Column{CarsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// CarsColumns holds the columns for the "cars" table.
	CarsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "make", Type: field.TypeString, Nullable: true},
		{Name: "model", Type: field.TypeString, Nullable: true},
		{Name: "type", Type: field.TypeString, Nullable: true},
		{Name: "year", Type: field.TypeInt, Nullable: true},
		{Name: "trim", Type: field.TypeString, Nullable: true},
		{Name: "car_banner_image", Type: field.TypeUUID, Nullable: true},
		{Name: "user_cars", Type: field.TypeUUID, Nullable: true},
	}
	// CarsTable holds the schema information for the "cars" table.
	CarsTable = &schema.Table{
		Name:       "cars",
		Columns:    CarsColumns,
		PrimaryKey: []*schema.Column{CarsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "cars_media_banner_image",
				Columns:    []*schema.Column{CarsColumns[9]},
				RefColumns: []*schema.Column{MediaColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "cars_users_cars",
				Columns:    []*schema.Column{CarsColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CheckoutSessionsColumns holds the columns for the "checkout_sessions" table.
	CheckoutSessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "stripe_session_id", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "stripe_price_id", Type: field.TypeString},
		{Name: "mode", Type: field.TypeEnum, Enums: []string{"subscription", "setup", "payment"}, Default: "subscription"},
		{Name: "completed", Type: field.TypeBool, Default: false},
		{Name: "completed_at", Type: field.TypeTime, Nullable: true},
		{Name: "user_checkout_sessions", Type: field.TypeUUID},
	}
	// CheckoutSessionsTable holds the schema information for the "checkout_sessions" table.
	CheckoutSessionsTable = &schema.Table{
		Name:       "checkout_sessions",
		Columns:    CheckoutSessionsColumns,
		PrimaryKey: []*schema.Column{CheckoutSessionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "checkout_sessions_users_checkout_sessions",
				Columns:    []*schema.Column{CheckoutSessionsColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// DocumentsColumns holds the columns for the "documents" table.
	DocumentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "car_documents", Type: field.TypeUUID, Nullable: true},
		{Name: "expense_documents", Type: field.TypeUUID, Nullable: true},
		{Name: "fuel_up_documents", Type: field.TypeUUID, Nullable: true},
		{Name: "service_log_documents", Type: field.TypeUUID, Nullable: true},
	}
	// DocumentsTable holds the schema information for the "documents" table.
	DocumentsTable = &schema.Table{
		Name:       "documents",
		Columns:    DocumentsColumns,
		PrimaryKey: []*schema.Column{DocumentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "documents_cars_documents",
				Columns:    []*schema.Column{DocumentsColumns[5]},
				RefColumns: []*schema.Column{CarsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "documents_expenses_documents",
				Columns:    []*schema.Column{DocumentsColumns[6]},
				RefColumns: []*schema.Column{ExpensesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "documents_fuel_ups_documents",
				Columns:    []*schema.Column{DocumentsColumns[7]},
				RefColumns: []*schema.Column{FuelUpsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "documents_service_logs_documents",
				Columns:    []*schema.Column{DocumentsColumns[8]},
				RefColumns: []*schema.Column{ServiceLogsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// DragResultsColumns holds the columns for the "drag_results" table.
	DragResultsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "unit", Type: field.TypeEnum, Enums: []string{"kph", "km"}},
		{Name: "value", Type: field.TypeFloat64},
		{Name: "result", Type: field.TypeFloat64},
		{Name: "drag_session_results", Type: field.TypeUUID},
	}
	// DragResultsTable holds the schema information for the "drag_results" table.
	DragResultsTable = &schema.Table{
		Name:       "drag_results",
		Columns:    DragResultsColumns,
		PrimaryKey: []*schema.Column{DragResultsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "drag_results_drag_sessions_results",
				Columns:    []*schema.Column{DragResultsColumns[6]},
				RefColumns: []*schema.Column{DragSessionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// DragSessionsColumns holds the columns for the "drag_sessions" table.
	DragSessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "title", Type: field.TypeString},
		{Name: "notes", Type: field.TypeString, Nullable: true},
		{Name: "car_drag_sessions", Type: field.TypeUUID},
	}
	// DragSessionsTable holds the schema information for the "drag_sessions" table.
	DragSessionsTable = &schema.Table{
		Name:       "drag_sessions",
		Columns:    DragSessionsColumns,
		PrimaryKey: []*schema.Column{DragSessionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "drag_sessions_cars_drag_sessions",
				Columns:    []*schema.Column{DragSessionsColumns[5]},
				RefColumns: []*schema.Column{CarsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// DynoResultsColumns holds the columns for the "dyno_results" table.
	DynoResultsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "rpm", Type: field.TypeInt},
		{Name: "power_kw", Type: field.TypeFloat64, Nullable: true},
		{Name: "torque_nm", Type: field.TypeFloat64, Nullable: true},
		{Name: "dyno_session_results", Type: field.TypeUUID},
	}
	// DynoResultsTable holds the schema information for the "dyno_results" table.
	DynoResultsTable = &schema.Table{
		Name:       "dyno_results",
		Columns:    DynoResultsColumns,
		PrimaryKey: []*schema.Column{DynoResultsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "dyno_results_dyno_sessions_results",
				Columns:    []*schema.Column{DynoResultsColumns[6]},
				RefColumns: []*schema.Column{DynoSessionsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// DynoSessionsColumns holds the columns for the "dyno_sessions" table.
	DynoSessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "title", Type: field.TypeString},
		{Name: "notes", Type: field.TypeString, Nullable: true},
		{Name: "car_dyno_sessions", Type: field.TypeUUID},
	}
	// DynoSessionsTable holds the schema information for the "dyno_sessions" table.
	DynoSessionsTable = &schema.Table{
		Name:       "dyno_sessions",
		Columns:    DynoSessionsColumns,
		PrimaryKey: []*schema.Column{DynoSessionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "dyno_sessions_cars_dyno_sessions",
				Columns:    []*schema.Column{DynoSessionsColumns[5]},
				RefColumns: []*schema.Column{CarsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ExpensesColumns holds the columns for the "expenses" table.
	ExpensesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "occurred_at", Type: field.TypeTime},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"fuel", "service", "insurance", "tax", "toll", "parking", "loan", "registration", "maintenance", "repair", "upgrade", "cleaning", "accessories", "inspection", "other"}},
		{Name: "amount", Type: field.TypeFloat64},
		{Name: "notes", Type: field.TypeString, Nullable: true},
		{Name: "car_expenses", Type: field.TypeUUID},
		{Name: "fuel_up_expense", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "service_log_expense", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// ExpensesTable holds the schema information for the "expenses" table.
	ExpensesTable = &schema.Table{
		Name:       "expenses",
		Columns:    ExpensesColumns,
		PrimaryKey: []*schema.Column{ExpensesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "expenses_cars_expenses",
				Columns:    []*schema.Column{ExpensesColumns[7]},
				RefColumns: []*schema.Column{CarsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "expenses_fuel_ups_expense",
				Columns:    []*schema.Column{ExpensesColumns[8]},
				RefColumns: []*schema.Column{FuelUpsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "expenses_service_logs_expense",
				Columns:    []*schema.Column{ExpensesColumns[9]},
				RefColumns: []*schema.Column{ServiceLogsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// FuelUpsColumns holds the columns for the "fuel_ups" table.
	FuelUpsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "occurred_at", Type: field.TypeTime},
		{Name: "station", Type: field.TypeString},
		{Name: "amount_liters", Type: field.TypeFloat64},
		{Name: "fuel_category", Type: field.TypeEnum, Enums: []string{"petrol", "diesel", "electric", "lpg", "other"}, SchemaType: map[string]string{"postgres": "fuel_category"}},
		{Name: "octane_rating", Type: field.TypeEnum, Nullable: true, Enums: []string{"ron91", "ron95", "ron98", "ron100", "e85", "race"}, SchemaType: map[string]string{"postgres": "octane_rating"}},
		{Name: "is_full_tank", Type: field.TypeBool, Default: true},
		{Name: "notes", Type: field.TypeString, Nullable: true},
		{Name: "car_fuel_ups", Type: field.TypeUUID},
		{Name: "odometer_reading_fuel_up", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// FuelUpsTable holds the schema information for the "fuel_ups" table.
	FuelUpsTable = &schema.Table{
		Name:       "fuel_ups",
		Columns:    FuelUpsColumns,
		PrimaryKey: []*schema.Column{FuelUpsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "fuel_ups_cars_fuel_ups",
				Columns:    []*schema.Column{FuelUpsColumns[10]},
				RefColumns: []*schema.Column{CarsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "fuel_ups_odometer_readings_fuel_up",
				Columns:    []*schema.Column{FuelUpsColumns[11]},
				RefColumns: []*schema.Column{OdometerReadingsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MediaColumns holds the columns for the "media" table.
	MediaColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "title", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "car_media", Type: field.TypeUUID, Nullable: true},
	}
	// MediaTable holds the schema information for the "media" table.
	MediaTable = &schema.Table{
		Name:       "media",
		Columns:    MediaColumns,
		PrimaryKey: []*schema.Column{MediaColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "media_cars_media",
				Columns:    []*schema.Column{MediaColumns[5]},
				RefColumns: []*schema.Column{CarsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ModIdeasColumns holds the columns for the "mod_ideas" table.
	ModIdeasColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "title", Type: field.TypeString},
		{Name: "category", Type: field.TypeEnum, Enums: []string{"performance", "aesthetic", "utility"}},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "stage", Type: field.TypeString, Nullable: true},
		{Name: "car_mod_ideas", Type: field.TypeUUID},
	}
	// ModIdeasTable holds the schema information for the "mod_ideas" table.
	ModIdeasTable = &schema.Table{
		Name:       "mod_ideas",
		Columns:    ModIdeasColumns,
		PrimaryKey: []*schema.Column{ModIdeasColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "mod_ideas_cars_mod_ideas",
				Columns:    []*schema.Column{ModIdeasColumns[7]},
				RefColumns: []*schema.Column{CarsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ModProductOptionsColumns holds the columns for the "mod_product_options" table.
	ModProductOptionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "vendor", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "link", Type: field.TypeString, Nullable: true},
		{Name: "price", Type: field.TypeFloat64, Nullable: true},
		{Name: "notes", Type: field.TypeString, Nullable: true},
		{Name: "pros", Type: field.TypeJSON, Nullable: true},
		{Name: "cons", Type: field.TypeJSON, Nullable: true},
		{Name: "specs", Type: field.TypeJSON, Nullable: true},
		{Name: "mod_idea_product_options", Type: field.TypeUUID},
	}
	// ModProductOptionsTable holds the schema information for the "mod_product_options" table.
	ModProductOptionsTable = &schema.Table{
		Name:       "mod_product_options",
		Columns:    ModProductOptionsColumns,
		PrimaryKey: []*schema.Column{ModProductOptionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "mod_product_options_mod_ideas_product_options",
				Columns:    []*schema.Column{ModProductOptionsColumns[11]},
				RefColumns: []*schema.Column{ModIdeasColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// OdometerReadingsColumns holds the columns for the "odometer_readings" table.
	OdometerReadingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "reading_km", Type: field.TypeFloat64},
		{Name: "reading_time", Type: field.TypeTime},
		{Name: "notes", Type: field.TypeString, Nullable: true},
		{Name: "car_odometer_readings", Type: field.TypeUUID},
	}
	// OdometerReadingsTable holds the schema information for the "odometer_readings" table.
	OdometerReadingsTable = &schema.Table{
		Name:       "odometer_readings",
		Columns:    OdometerReadingsColumns,
		PrimaryKey: []*schema.Column{OdometerReadingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "odometer_readings_cars_odometer_readings",
				Columns:    []*schema.Column{OdometerReadingsColumns[6]},
				RefColumns: []*schema.Column{CarsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ProfilesColumns holds the columns for the "profiles" table.
	ProfilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "username", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "first_name", Type: field.TypeString, Nullable: true},
		{Name: "last_name", Type: field.TypeString, Nullable: true},
		{Name: "picture", Type: field.TypeUUID, Nullable: true},
		{Name: "currency_code", Type: field.TypeString, Nullable: true},
		{Name: "fuel_volume_unit", Type: field.TypeEnum, Nullable: true, Enums: []string{"liter", "gallon", "imp_gallon"}, SchemaType: map[string]string{"postgres": "fuel_volume_unit"}},
		{Name: "distance_unit", Type: field.TypeEnum, Nullable: true, Enums: []string{"kilometers", "miles"}, SchemaType: map[string]string{"postgres": "distance_unit"}},
		{Name: "fuel_consumption_unit", Type: field.TypeEnum, Nullable: true, Enums: []string{"mpg", "imp_mpg", "kpl", "lp100k"}, SchemaType: map[string]string{"postgres": "fuel_consumption_unit"}},
		{Name: "temperature_unit", Type: field.TypeEnum, Nullable: true, Enums: []string{"celsius", "fahrenheit"}, SchemaType: map[string]string{"postgres": "temperature_unit"}},
		{Name: "power_unit", Type: field.TypeEnum, Nullable: true, Enums: []string{"metric_horsepower", "mech_horsepower", "kilowatts", "imp_horsepower", "electric_horsepower"}, SchemaType: map[string]string{"postgres": "power_unit"}},
		{Name: "torque_unit", Type: field.TypeEnum, Nullable: true, Enums: []string{"newton_meters", "pound_feet", "kilogram_meter"}, SchemaType: map[string]string{"postgres": "torque_unit"}},
		{Name: "visibility", Type: field.TypeEnum, Enums: []string{"public", "private"}, Default: "private"},
		{Name: "user_profile", Type: field.TypeUUID, Unique: true},
	}
	// ProfilesTable holds the schema information for the "profiles" table.
	ProfilesTable = &schema.Table{
		Name:       "profiles",
		Columns:    ProfilesColumns,
		PrimaryKey: []*schema.Column{ProfilesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "profiles_users_profile",
				Columns:    []*schema.Column{ProfilesColumns[15]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ServiceItemsColumns holds the columns for the "service_items" table.
	ServiceItemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "label", Type: field.TypeString},
		{Name: "estimated_minutes", Type: field.TypeInt, Nullable: true},
		{Name: "default_interval_km", Type: field.TypeFloat64, Nullable: true},
		{Name: "default_interval_months", Type: field.TypeInt, Nullable: true},
		{Name: "notes", Type: field.TypeString, Nullable: true},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "car_service_items", Type: field.TypeUUID},
	}
	// ServiceItemsTable holds the schema information for the "service_items" table.
	ServiceItemsTable = &schema.Table{
		Name:       "service_items",
		Columns:    ServiceItemsColumns,
		PrimaryKey: []*schema.Column{ServiceItemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "service_items_cars_service_items",
				Columns:    []*schema.Column{ServiceItemsColumns[9]},
				RefColumns: []*schema.Column{CarsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ServiceLogsColumns holds the columns for the "service_logs" table.
	ServiceLogsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "date_performed", Type: field.TypeTime},
		{Name: "performed_by", Type: field.TypeString, Nullable: true},
		{Name: "notes", Type: field.TypeString, Nullable: true},
		{Name: "car_service_logs", Type: field.TypeUUID},
		{Name: "odometer_reading_service_log", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "service_schedule_logs", Type: field.TypeUUID, Nullable: true},
	}
	// ServiceLogsTable holds the schema information for the "service_logs" table.
	ServiceLogsTable = &schema.Table{
		Name:       "service_logs",
		Columns:    ServiceLogsColumns,
		PrimaryKey: []*schema.Column{ServiceLogsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "service_logs_cars_service_logs",
				Columns:    []*schema.Column{ServiceLogsColumns[6]},
				RefColumns: []*schema.Column{CarsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "service_logs_odometer_readings_service_log",
				Columns:    []*schema.Column{ServiceLogsColumns[7]},
				RefColumns: []*schema.Column{OdometerReadingsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "service_logs_service_schedules_logs",
				Columns:    []*schema.Column{ServiceLogsColumns[8]},
				RefColumns: []*schema.Column{ServiceSchedulesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ServiceSchedulesColumns holds the columns for the "service_schedules" table.
	ServiceSchedulesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "title", Type: field.TypeString},
		{Name: "repeat_every_km", Type: field.TypeFloat64, Nullable: true},
		{Name: "starts_at_km", Type: field.TypeFloat64, Nullable: true},
		{Name: "repeat_every_months", Type: field.TypeInt, Nullable: true},
		{Name: "starts_at_months", Type: field.TypeInt, Nullable: true},
		{Name: "notes", Type: field.TypeString, Nullable: true},
		{Name: "archived", Type: field.TypeBool, Default: false},
		{Name: "car_service_schedules", Type: field.TypeUUID},
	}
	// ServiceSchedulesTable holds the schema information for the "service_schedules" table.
	ServiceSchedulesTable = &schema.Table{
		Name:       "service_schedules",
		Columns:    ServiceSchedulesColumns,
		PrimaryKey: []*schema.Column{ServiceSchedulesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "service_schedules_cars_service_schedules",
				Columns:    []*schema.Column{ServiceSchedulesColumns[10]},
				RefColumns: []*schema.Column{CarsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// SubscriptionsColumns holds the columns for the "subscriptions" table.
	SubscriptionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "stripe_subscription_id", Type: field.TypeString, Nullable: true},
		{Name: "tier", Type: field.TypeEnum, Enums: []string{"diy", "enthusiast"}},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"active", "trialing", "canceled", "incomplete", "incomplete_expired", "past_due", "unpaid"}, Default: "incomplete"},
		{Name: "canceled_at", Type: field.TypeTime, Nullable: true},
		{Name: "cancel_at_period_end", Type: field.TypeBool, Default: false},
		{Name: "trial_end", Type: field.TypeTime, Nullable: true},
		{Name: "checkout_session_subscription", Type: field.TypeUUID, Unique: true, Nullable: true},
		{Name: "user_subscriptions", Type: field.TypeUUID},
	}
	// SubscriptionsTable holds the schema information for the "subscriptions" table.
	SubscriptionsTable = &schema.Table{
		Name:       "subscriptions",
		Columns:    SubscriptionsColumns,
		PrimaryKey: []*schema.Column{SubscriptionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "subscriptions_checkout_sessions_subscription",
				Columns:    []*schema.Column{SubscriptionsColumns[9]},
				RefColumns: []*schema.Column{CheckoutSessionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "subscriptions_users_subscriptions",
				Columns:    []*schema.Column{SubscriptionsColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TasksColumns holds the columns for the "tasks" table.
	TasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"backlog", "todo", "in_progress", "blocked", "completed"}},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "rank", Type: field.TypeFloat64, Default: 0},
		{Name: "estimate", Type: field.TypeFloat64, Nullable: true},
		{Name: "priority", Type: field.TypeEnum, Nullable: true, Enums: []string{"low", "mid", "high", "urgent"}},
		{Name: "effort", Type: field.TypeEnum, Nullable: true, Enums: []string{"trivial", "easy", "moderate", "hard", "extreme"}},
		{Name: "difficulty", Type: field.TypeEnum, Nullable: true, Enums: []string{"beginner", "intermediate", "advanced", "expert"}},
		{Name: "category", Type: field.TypeEnum, Nullable: true, Enums: []string{"maintenance", "service", "repair", "modification", "cosmetic", "cleaning", "detailing", "inspection", "registration", "insurance", "accessory", "diagnostics", "other"}},
		{Name: "budget", Type: field.TypeFloat64, Nullable: true},
		{Name: "parts_needed", Type: field.TypeString, Nullable: true},
		{Name: "car_tasks", Type: field.TypeUUID},
		{Name: "task_subtasks", Type: field.TypeUUID, Nullable: true},
	}
	// TasksTable holds the schema information for the "tasks" table.
	TasksTable = &schema.Table{
		Name:       "tasks",
		Columns:    TasksColumns,
		PrimaryKey: []*schema.Column{TasksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tasks_cars_tasks",
				Columns:    []*schema.Column{TasksColumns[14]},
				RefColumns: []*schema.Column{CarsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "tasks_tasks_subtasks",
				Columns:    []*schema.Column{TasksColumns[15]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "stripe_customer_id", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// AlbumMediaColumns holds the columns for the "album_media" table.
	AlbumMediaColumns = []*schema.Column{
		{Name: "album_id", Type: field.TypeUUID},
		{Name: "media_id", Type: field.TypeUUID},
	}
	// AlbumMediaTable holds the schema information for the "album_media" table.
	AlbumMediaTable = &schema.Table{
		Name:       "album_media",
		Columns:    AlbumMediaColumns,
		PrimaryKey: []*schema.Column{AlbumMediaColumns[0], AlbumMediaColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "album_media_album_id",
				Columns:    []*schema.Column{AlbumMediaColumns[0]},
				RefColumns: []*schema.Column{AlbumsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "album_media_media_id",
				Columns:    []*schema.Column{AlbumMediaColumns[1]},
				RefColumns: []*schema.Column{MediaColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ServiceLogItemsColumns holds the columns for the "service_log_items" table.
	ServiceLogItemsColumns = []*schema.Column{
		{Name: "service_log_id", Type: field.TypeUUID},
		{Name: "service_item_id", Type: field.TypeUUID},
	}
	// ServiceLogItemsTable holds the schema information for the "service_log_items" table.
	ServiceLogItemsTable = &schema.Table{
		Name:       "service_log_items",
		Columns:    ServiceLogItemsColumns,
		PrimaryKey: []*schema.Column{ServiceLogItemsColumns[0], ServiceLogItemsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "service_log_items_service_log_id",
				Columns:    []*schema.Column{ServiceLogItemsColumns[0]},
				RefColumns: []*schema.Column{ServiceLogsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "service_log_items_service_item_id",
				Columns:    []*schema.Column{ServiceLogItemsColumns[1]},
				RefColumns: []*schema.Column{ServiceItemsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ServiceScheduleItemsColumns holds the columns for the "service_schedule_items" table.
	ServiceScheduleItemsColumns = []*schema.Column{
		{Name: "service_schedule_id", Type: field.TypeUUID},
		{Name: "service_item_id", Type: field.TypeUUID},
	}
	// ServiceScheduleItemsTable holds the schema information for the "service_schedule_items" table.
	ServiceScheduleItemsTable = &schema.Table{
		Name:       "service_schedule_items",
		Columns:    ServiceScheduleItemsColumns,
		PrimaryKey: []*schema.Column{ServiceScheduleItemsColumns[0], ServiceScheduleItemsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "service_schedule_items_service_schedule_id",
				Columns:    []*schema.Column{ServiceScheduleItemsColumns[0]},
				RefColumns: []*schema.Column{ServiceSchedulesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "service_schedule_items_service_item_id",
				Columns:    []*schema.Column{ServiceScheduleItemsColumns[1]},
				RefColumns: []*schema.Column{ServiceItemsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TaskModIdeasColumns holds the columns for the "task_mod_ideas" table.
	TaskModIdeasColumns = []*schema.Column{
		{Name: "task_id", Type: field.TypeUUID},
		{Name: "mod_idea_id", Type: field.TypeUUID},
	}
	// TaskModIdeasTable holds the schema information for the "task_mod_ideas" table.
	TaskModIdeasTable = &schema.Table{
		Name:       "task_mod_ideas",
		Columns:    TaskModIdeasColumns,
		PrimaryKey: []*schema.Column{TaskModIdeasColumns[0], TaskModIdeasColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "task_mod_ideas_task_id",
				Columns:    []*schema.Column{TaskModIdeasColumns[0]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "task_mod_ideas_mod_idea_id",
				Columns:    []*schema.Column{TaskModIdeasColumns[1]},
				RefColumns: []*schema.Column{ModIdeasColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AlbumsTable,
		CarsTable,
		CheckoutSessionsTable,
		DocumentsTable,
		DragResultsTable,
		DragSessionsTable,
		DynoResultsTable,
		DynoSessionsTable,
		ExpensesTable,
		FuelUpsTable,
		MediaTable,
		ModIdeasTable,
		ModProductOptionsTable,
		OdometerReadingsTable,
		ProfilesTable,
		ServiceItemsTable,
		ServiceLogsTable,
		ServiceSchedulesTable,
		SubscriptionsTable,
		TasksTable,
		UsersTable,
		AlbumMediaTable,
		ServiceLogItemsTable,
		ServiceScheduleItemsTable,
		TaskModIdeasTable,
	}
)

func init() {
	AlbumsTable.ForeignKeys[0].RefTable = CarsTable
	CarsTable.ForeignKeys[0].RefTable = MediaTable
	CarsTable.ForeignKeys[1].RefTable = UsersTable
	CheckoutSessionsTable.ForeignKeys[0].RefTable = UsersTable
	DocumentsTable.ForeignKeys[0].RefTable = CarsTable
	DocumentsTable.ForeignKeys[1].RefTable = ExpensesTable
	DocumentsTable.ForeignKeys[2].RefTable = FuelUpsTable
	DocumentsTable.ForeignKeys[3].RefTable = ServiceLogsTable
	DragResultsTable.ForeignKeys[0].RefTable = DragSessionsTable
	DragSessionsTable.ForeignKeys[0].RefTable = CarsTable
	DynoResultsTable.ForeignKeys[0].RefTable = DynoSessionsTable
	DynoSessionsTable.ForeignKeys[0].RefTable = CarsTable
	ExpensesTable.ForeignKeys[0].RefTable = CarsTable
	ExpensesTable.ForeignKeys[1].RefTable = FuelUpsTable
	ExpensesTable.ForeignKeys[2].RefTable = ServiceLogsTable
	FuelUpsTable.ForeignKeys[0].RefTable = CarsTable
	FuelUpsTable.ForeignKeys[1].RefTable = OdometerReadingsTable
	MediaTable.ForeignKeys[0].RefTable = CarsTable
	ModIdeasTable.ForeignKeys[0].RefTable = CarsTable
	ModProductOptionsTable.ForeignKeys[0].RefTable = ModIdeasTable
	OdometerReadingsTable.ForeignKeys[0].RefTable = CarsTable
	ProfilesTable.ForeignKeys[0].RefTable = UsersTable
	ServiceItemsTable.ForeignKeys[0].RefTable = CarsTable
	ServiceLogsTable.ForeignKeys[0].RefTable = CarsTable
	ServiceLogsTable.ForeignKeys[1].RefTable = OdometerReadingsTable
	ServiceLogsTable.ForeignKeys[2].RefTable = ServiceSchedulesTable
	ServiceSchedulesTable.ForeignKeys[0].RefTable = CarsTable
	SubscriptionsTable.ForeignKeys[0].RefTable = CheckoutSessionsTable
	SubscriptionsTable.ForeignKeys[1].RefTable = UsersTable
	TasksTable.ForeignKeys[0].RefTable = CarsTable
	TasksTable.ForeignKeys[1].RefTable = TasksTable
	AlbumMediaTable.ForeignKeys[0].RefTable = AlbumsTable
	AlbumMediaTable.ForeignKeys[1].RefTable = MediaTable
	ServiceLogItemsTable.ForeignKeys[0].RefTable = ServiceLogsTable
	ServiceLogItemsTable.ForeignKeys[1].RefTable = ServiceItemsTable
	ServiceScheduleItemsTable.ForeignKeys[0].RefTable = ServiceSchedulesTable
	ServiceScheduleItemsTable.ForeignKeys[1].RefTable = ServiceItemsTable
	TaskModIdeasTable.ForeignKeys[0].RefTable = TasksTable
	TaskModIdeasTable.ForeignKeys[1].RefTable = ModIdeasTable
}
