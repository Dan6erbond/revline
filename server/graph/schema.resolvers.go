package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/Dan6erbond/revline/auth"
	"github.com/Dan6erbond/revline/ent"
	"github.com/Dan6erbond/revline/graph/model"
	"github.com/Dan6erbond/revline/internal"
	"github.com/google/uuid"
	minio "github.com/minio/minio-go/v7"
)

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, input ent.UpdateProfileInput) (*ent.Profile, error) {
	user := auth.ForContext(ctx)

	profile, err := user.Profile(ctx)

	if err != nil {
		return nil, err
	}

	if profile == nil {
		if profile, err = r.entClient.Profile.Create().SetInput(ent.CreateProfileInput{
			Username:            input.Username,
			FirstName:           input.FirstName,
			LastName:            input.LastName,
			CurrencyCode:        input.CurrencyCode,
			FuelVolumeUnit:      input.FuelVolumeUnit,
			DistanceUnit:        input.DistanceUnit,
			FuelConsumptionUnit: input.FuelConsumptionUnit,
			TemperatureUnit:     input.TemperatureUnit,
			Visibility:          input.Visibility,
			UserID:              user.ID,
		}).Save(ctx); err != nil {
			return nil, err
		}
	}

	return profile, err
}

// UploadProfilePicture is the resolver for the uploadProfilePicture field.
func (r *mutationResolver) UploadProfilePicture(ctx context.Context, input *model.UploadProfilePictureInput) (*ent.Profile, error) {
	user := auth.ForContext(ctx)

	profile, err := user.Profile(ctx)

	if profile == nil {
		if profile, err = r.entClient.Profile.Create().Save(ctx); err != nil {
			return nil, err
		}
	}

	if err != nil {
		return nil, err
	}

	imgBytes, err := io.ReadAll(input.Picture.File)

	if err != nil {
		return nil, err
	}

	img, err := internal.ParseImage(imgBytes)

	if err != nil {
		return nil, err
	}

	png, size, err := internal.ToPng(img)

	if err != nil {
		return nil, err
	}

	id := uuid.New()

	objectName := fmt.Sprintf("users/%s/profile-pictures/%s", user.ID, id)

	if _, err = r.s3Client.PutObject(ctx, r.config.S3.Bucket, objectName, png, *size, minio.PutObjectOptions{ContentType: "image/png"}); err != nil {
		return nil, err
	}

	return profile.Update().SetPicture(id).Save(ctx)
}

// PictureURL is the resolver for the pictureUrl field.
func (r *profileResolver) PictureURL(ctx context.Context, obj *ent.Profile) (*string, error) {
	if obj.Picture != nil {
		user, err := obj.User(ctx)

		if err != nil {
			return nil, err
		}

		objectName := fmt.Sprintf("users/%s/profile-pictures/%s", user.ID, obj.Picture)

		url, err := r.s3Client.PresignedGetObject(ctx, r.config.S3.Bucket, objectName, time.Hour, nil)

		if err != nil {
			return nil, err
		}

		urls := url.String()

		return &urls, err
	}

	return nil, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*ent.User, error) {
	return auth.ForContext(ctx), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
