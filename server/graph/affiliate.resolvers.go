package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"net/url"

	"github.com/Dan6erbond/revline/auth"
	"github.com/Dan6erbond/revline/ent"
	"github.com/dustinkirkland/golang-petname"
	stripe "github.com/stripe/stripe-go/v82"
	"github.com/stripe/stripe-go/v82/account"
	"github.com/stripe/stripe-go/v82/accountlink"
	"github.com/stripe/stripe-go/v82/loginlink"
)

// CreateConnectAccount is the resolver for the createConnectAccount field.
func (r *mutationResolver) CreateConnectAccount(ctx context.Context) (*ent.User, error) {
	user := auth.ForContext(ctx)

	account, err := account.New(&stripe.AccountParams{
		Controller: &stripe.AccountControllerParams{
			StripeDashboard: &stripe.AccountControllerStripeDashboardParams{
				Type: stripe.String("express"),
			},
			Fees: &stripe.AccountControllerFeesParams{
				Payer: stripe.String("application"),
			},
			Losses: &stripe.AccountControllerLossesParams{
				Payments: stripe.String("application"),
			},
		},
	})

	if err != nil {
		return nil, err
	}

	if _, err := user.Update().
		SetStripeAccountID(account.ID).
		SetAffiliate6moCode(petname.Generate(3, "-")).
		SetAffiliate12moCode(petname.Generate(3, "-")).
		Save(ctx); err != nil {
		return nil, err
	}

	return user, err
}

// LinkConnectAccount is the resolver for the linkConnectAccount field.
func (r *mutationResolver) LinkConnectAccount(ctx context.Context) (string, error) {
	user := auth.ForContext(ctx)

	baseURL, err := url.Parse(r.config.PublicURL)

	if err != nil {
		return "", err
	}

	var (
		successURL = baseURL.JoinPath("/affiliate")
		cancelURL  = baseURL.JoinPath("/affiliate")
	)

	successURL.RawQuery = "success=true"
	cancelURL.RawQuery = "canceled=true"

	accountLink, err := accountlink.New(&stripe.AccountLinkParams{
		Account:    user.StripeAccountID,
		ReturnURL:  stripe.String(successURL.String()),
		RefreshURL: stripe.String(cancelURL.String()),
		Type:       stripe.String("account_onboarding"),
	})

	if err != nil {
		return "", err
	}

	return accountLink.URL, err
}

// CreateExpressLoginLink is the resolver for the createExpressLoginLink field.
func (r *mutationResolver) CreateExpressLoginLink(ctx context.Context) (string, error) {
	user := auth.ForContext(ctx)

	params := &stripe.LoginLinkParams{
		Account: user.StripeAccountID,
	}

	result, err := loginlink.New(params)

	if err != nil {
		return "", err
	}

	return result.URL, err
}
