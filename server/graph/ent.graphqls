directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Car {
  id: ID!
  createTime: Time!
  updateTime: Time!
  name: String!
  make: String
  model: String
  type: String
  year: Int
  trim: String
  owner: User
  dragSessions: [DragSession!]
  fuelUps: [FuelUp!]
  odometerReadings: [OdometerReading!]
  serviceItems: [ServiceItem!]
  serviceLogs: [ServiceLog!]
  serviceSchedules: [ServiceSchedule!]
  media: [Media!]
  bannerImage: Media
}
"""
CarWhereInput is used for filtering Car objects.
Input was generated by ent.
"""
input CarWhereInput {
  not: CarWhereInput
  and: [CarWhereInput!]
  or: [CarWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  make field predicates
  """
  make: String
  makeNEQ: String
  makeIn: [String!]
  makeNotIn: [String!]
  makeGT: String
  makeGTE: String
  makeLT: String
  makeLTE: String
  makeContains: String
  makeHasPrefix: String
  makeHasSuffix: String
  makeIsNil: Boolean
  makeNotNil: Boolean
  makeEqualFold: String
  makeContainsFold: String
  """
  model field predicates
  """
  model: String
  modelNEQ: String
  modelIn: [String!]
  modelNotIn: [String!]
  modelGT: String
  modelGTE: String
  modelLT: String
  modelLTE: String
  modelContains: String
  modelHasPrefix: String
  modelHasSuffix: String
  modelIsNil: Boolean
  modelNotNil: Boolean
  modelEqualFold: String
  modelContainsFold: String
  """
  type field predicates
  """
  type: String
  typeNEQ: String
  typeIn: [String!]
  typeNotIn: [String!]
  typeGT: String
  typeGTE: String
  typeLT: String
  typeLTE: String
  typeContains: String
  typeHasPrefix: String
  typeHasSuffix: String
  typeIsNil: Boolean
  typeNotNil: Boolean
  typeEqualFold: String
  typeContainsFold: String
  """
  year field predicates
  """
  year: Int
  yearNEQ: Int
  yearIn: [Int!]
  yearNotIn: [Int!]
  yearGT: Int
  yearGTE: Int
  yearLT: Int
  yearLTE: Int
  yearIsNil: Boolean
  yearNotNil: Boolean
  """
  trim field predicates
  """
  trim: String
  trimNEQ: String
  trimIn: [String!]
  trimNotIn: [String!]
  trimGT: String
  trimGTE: String
  trimLT: String
  trimLTE: String
  trimContains: String
  trimHasPrefix: String
  trimHasSuffix: String
  trimIsNil: Boolean
  trimNotNil: Boolean
  trimEqualFold: String
  trimContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
  """
  drag_sessions edge predicates
  """
  hasDragSessions: Boolean
  hasDragSessionsWith: [DragSessionWhereInput!]
  """
  fuel_ups edge predicates
  """
  hasFuelUps: Boolean
  hasFuelUpsWith: [FuelUpWhereInput!]
  """
  odometer_readings edge predicates
  """
  hasOdometerReadings: Boolean
  hasOdometerReadingsWith: [OdometerReadingWhereInput!]
  """
  service_items edge predicates
  """
  hasServiceItems: Boolean
  hasServiceItemsWith: [ServiceItemWhereInput!]
  """
  service_logs edge predicates
  """
  hasServiceLogs: Boolean
  hasServiceLogsWith: [ServiceLogWhereInput!]
  """
  service_schedules edge predicates
  """
  hasServiceSchedules: Boolean
  hasServiceSchedulesWith: [ServiceScheduleWhereInput!]
  """
  media edge predicates
  """
  hasMedia: Boolean
  hasMediaWith: [MediaWhereInput!]
  """
  banner_image edge predicates
  """
  hasBannerImage: Boolean
  hasBannerImageWith: [MediaWhereInput!]
}
"""
CreateCarInput is used for create Car object.
Input was generated by ent.
"""
input CreateCarInput {
  createTime: Time
  updateTime: Time
  name: String!
  make: String
  model: String
  type: String
  year: Int
  trim: String
  ownerID: ID
  dragSessionIDs: [ID!]
  fuelUpIDs: [ID!]
  odometerReadingIDs: [ID!]
  serviceItemIDs: [ID!]
  serviceLogIDs: [ID!]
  serviceScheduleIDs: [ID!]
  mediumIDs: [ID!]
  bannerImageID: ID
}
"""
CreateDragResultInput is used for create DragResult object.
Input was generated by ent.
"""
input CreateDragResultInput {
  createTime: Time
  updateTime: Time
  unit: DragResultUnit!
  value: Float!
  result: Float!
  sessionID: ID!
}
"""
CreateDragSessionInput is used for create DragSession object.
Input was generated by ent.
"""
input CreateDragSessionInput {
  createTime: Time
  updateTime: Time
  title: String!
  notes: String
  carID: ID!
  resultIDs: [ID!]
}
"""
CreateFuelUpInput is used for create FuelUp object.
Input was generated by ent.
"""
input CreateFuelUpInput {
  createTime: Time
  updateTime: Time
  occurredAt: Time!
  station: String!
  amountLiters: Float!
  cost: Float!
  fuelCategory: FuelCategory!
  octaneRating: OctaneRating
  isFullTank: Boolean
  notes: String
  carID: ID!
  odometerReadingID: ID
}
"""
CreateMediaInput is used for create Media object.
Input was generated by ent.
"""
input CreateMediaInput {
  createTime: Time
  updateTime: Time
  carID: ID
}
"""
CreateOdometerReadingInput is used for create OdometerReading object.
Input was generated by ent.
"""
input CreateOdometerReadingInput {
  createTime: Time
  updateTime: Time
  readingKm: Float!
  notes: String
  carID: ID!
  fuelUpID: ID
  serviceLogID: ID
}
"""
CreateProfileInput is used for create Profile object.
Input was generated by ent.
"""
input CreateProfileInput {
  createTime: Time
  updateTime: Time
  username: String
  firstName: String
  lastName: String
  currencyCode: String
  fuelVolumeUnit: FuelVolumeUnit
  distanceUnit: DistanceUnit
  fuelConsumptionUnit: FuelConsumptionUnit
  temperatureUnit: TemperatureUnit
  visibility: ProfileVisibility
  userID: ID!
}
"""
CreateServiceItemInput is used for create ServiceItem object.
Input was generated by ent.
"""
input CreateServiceItemInput {
  createTime: Time
  updateTime: Time
  label: String!
  estimatedMinutes: Int
  defaultIntervalKm: Float
  defaultIntervalMonths: Int
  notes: String
  tags: [String!]
  carID: ID!
  scheduleIDs: [ID!]
  logIDs: [ID!]
}
"""
CreateServiceLogInput is used for create ServiceLog object.
Input was generated by ent.
"""
input CreateServiceLogInput {
  createTime: Time
  updateTime: Time
  datePerformed: Time!
  performedBy: String
  notes: String
  carID: ID!
  itemIDs: [ID!]
  scheduleID: ID
  odometerReadingID: ID
}
"""
CreateServiceScheduleInput is used for create ServiceSchedule object.
Input was generated by ent.
"""
input CreateServiceScheduleInput {
  createTime: Time
  updateTime: Time
  title: String!
  repeatEveryKm: Float
  startsAtKm: Float
  repeatEveryMonths: Int
  startsAtMonths: Int
  notes: String
  archived: Boolean
  carID: ID!
  itemIDs: [ID!]
  logIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  createTime: Time
  updateTime: Time
  email: String!
  carIDs: [ID!]
  profileID: ID
}
"""
DistanceUnit is enum for the field distance_unit
"""
enum DistanceUnit @goModel(model: "github.com/Dan6erbond/revline/ent/profile.DistanceUnit") {
  kilometers
  miles
}
type DragResult {
  id: ID!
  createTime: Time!
  updateTime: Time!
  unit: DragResultUnit!
  value: Float!
  result: Float!
  session: DragSession!
}
"""
DragResultUnit is enum for the field unit
"""
enum DragResultUnit @goModel(model: "github.com/Dan6erbond/revline/ent/dragresult.Unit") {
  kph
  km
}
"""
DragResultWhereInput is used for filtering DragResult objects.
Input was generated by ent.
"""
input DragResultWhereInput {
  not: DragResultWhereInput
  and: [DragResultWhereInput!]
  or: [DragResultWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  unit field predicates
  """
  unit: DragResultUnit
  unitNEQ: DragResultUnit
  unitIn: [DragResultUnit!]
  unitNotIn: [DragResultUnit!]
  """
  value field predicates
  """
  value: Float
  valueNEQ: Float
  valueIn: [Float!]
  valueNotIn: [Float!]
  valueGT: Float
  valueGTE: Float
  valueLT: Float
  valueLTE: Float
  """
  result field predicates
  """
  result: Float
  resultNEQ: Float
  resultIn: [Float!]
  resultNotIn: [Float!]
  resultGT: Float
  resultGTE: Float
  resultLT: Float
  resultLTE: Float
  """
  session edge predicates
  """
  hasSession: Boolean
  hasSessionWith: [DragSessionWhereInput!]
}
type DragSession {
  id: ID!
  createTime: Time!
  updateTime: Time!
  title: String!
  notes: String
  car: Car!
  results: [DragResult!]
}
"""
DragSessionWhereInput is used for filtering DragSession objects.
Input was generated by ent.
"""
input DragSessionWhereInput {
  not: DragSessionWhereInput
  and: [DragSessionWhereInput!]
  or: [DragSessionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  notes field predicates
  """
  notes: String
  notesNEQ: String
  notesIn: [String!]
  notesNotIn: [String!]
  notesGT: String
  notesGTE: String
  notesLT: String
  notesLTE: String
  notesContains: String
  notesHasPrefix: String
  notesHasSuffix: String
  notesIsNil: Boolean
  notesNotNil: Boolean
  notesEqualFold: String
  notesContainsFold: String
  """
  car edge predicates
  """
  hasCar: Boolean
  hasCarWith: [CarWhereInput!]
  """
  results edge predicates
  """
  hasResults: Boolean
  hasResultsWith: [DragResultWhereInput!]
}
"""
FuelCategory is enum for the field fuel_category
"""
enum FuelCategory @goModel(model: "github.com/Dan6erbond/revline/ent/fuelup.FuelCategory") {
  petrol
  diesel
  electric
  lpg
  other
}
"""
FuelConsumptionUnit is enum for the field fuel_consumption_unit
"""
enum FuelConsumptionUnit @goModel(model: "github.com/Dan6erbond/revline/ent/profile.FuelConsumptionUnit") {
  mpg
  imp_mpg
  kpl
  lp100k
}
type FuelUp {
  id: ID!
  createTime: Time!
  updateTime: Time!
  occurredAt: Time!
  station: String!
  amountLiters: Float!
  cost: Float!
  fuelCategory: FuelCategory!
  octaneRating: OctaneRating
  isFullTank: Boolean!
  notes: String
  car: Car!
  odometerReading: OdometerReading
}
"""
FuelUpWhereInput is used for filtering FuelUp objects.
Input was generated by ent.
"""
input FuelUpWhereInput {
  not: FuelUpWhereInput
  and: [FuelUpWhereInput!]
  or: [FuelUpWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  occurred_at field predicates
  """
  occurredAt: Time
  occurredAtNEQ: Time
  occurredAtIn: [Time!]
  occurredAtNotIn: [Time!]
  occurredAtGT: Time
  occurredAtGTE: Time
  occurredAtLT: Time
  occurredAtLTE: Time
  """
  station field predicates
  """
  station: String
  stationNEQ: String
  stationIn: [String!]
  stationNotIn: [String!]
  stationGT: String
  stationGTE: String
  stationLT: String
  stationLTE: String
  stationContains: String
  stationHasPrefix: String
  stationHasSuffix: String
  stationEqualFold: String
  stationContainsFold: String
  """
  amount_liters field predicates
  """
  amountLiters: Float
  amountLitersNEQ: Float
  amountLitersIn: [Float!]
  amountLitersNotIn: [Float!]
  amountLitersGT: Float
  amountLitersGTE: Float
  amountLitersLT: Float
  amountLitersLTE: Float
  """
  cost field predicates
  """
  cost: Float
  costNEQ: Float
  costIn: [Float!]
  costNotIn: [Float!]
  costGT: Float
  costGTE: Float
  costLT: Float
  costLTE: Float
  """
  fuel_category field predicates
  """
  fuelCategory: FuelCategory
  fuelCategoryNEQ: FuelCategory
  fuelCategoryIn: [FuelCategory!]
  fuelCategoryNotIn: [FuelCategory!]
  """
  octane_rating field predicates
  """
  octaneRating: OctaneRating
  octaneRatingNEQ: OctaneRating
  octaneRatingIn: [OctaneRating!]
  octaneRatingNotIn: [OctaneRating!]
  octaneRatingIsNil: Boolean
  octaneRatingNotNil: Boolean
  """
  is_full_tank field predicates
  """
  isFullTank: Boolean
  isFullTankNEQ: Boolean
  """
  notes field predicates
  """
  notes: String
  notesNEQ: String
  notesIn: [String!]
  notesNotIn: [String!]
  notesGT: String
  notesGTE: String
  notesLT: String
  notesLTE: String
  notesContains: String
  notesHasPrefix: String
  notesHasSuffix: String
  notesIsNil: Boolean
  notesNotNil: Boolean
  notesEqualFold: String
  notesContainsFold: String
  """
  car edge predicates
  """
  hasCar: Boolean
  hasCarWith: [CarWhereInput!]
  """
  odometer_reading edge predicates
  """
  hasOdometerReading: Boolean
  hasOdometerReadingWith: [OdometerReadingWhereInput!]
}
"""
FuelVolumeUnit is enum for the field fuel_volume_unit
"""
enum FuelVolumeUnit @goModel(model: "github.com/Dan6erbond/revline/ent/profile.FuelVolumeUnit") {
  liter
  gallon
  imp_gallon
}
type Media {
  id: ID!
  createTime: Time!
  updateTime: Time!
  car: Car
}
"""
MediaWhereInput is used for filtering Media objects.
Input was generated by ent.
"""
input MediaWhereInput {
  not: MediaWhereInput
  and: [MediaWhereInput!]
  or: [MediaWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  car edge predicates
  """
  hasCar: Boolean
  hasCarWith: [CarWhereInput!]
}
"""
OctaneRating is enum for the field octane_rating
"""
enum OctaneRating @goModel(model: "github.com/Dan6erbond/revline/ent/fuelup.OctaneRating") {
  ron91
  ron95
  ron98
  ron100
  e85
  race
}
type OdometerReading {
  id: ID!
  createTime: Time!
  updateTime: Time!
  readingKm: Float!
  notes: String
  car: Car!
  fuelUp: FuelUp
  serviceLog: ServiceLog
}
"""
OdometerReadingWhereInput is used for filtering OdometerReading objects.
Input was generated by ent.
"""
input OdometerReadingWhereInput {
  not: OdometerReadingWhereInput
  and: [OdometerReadingWhereInput!]
  or: [OdometerReadingWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  reading_km field predicates
  """
  readingKm: Float
  readingKmNEQ: Float
  readingKmIn: [Float!]
  readingKmNotIn: [Float!]
  readingKmGT: Float
  readingKmGTE: Float
  readingKmLT: Float
  readingKmLTE: Float
  """
  notes field predicates
  """
  notes: String
  notesNEQ: String
  notesIn: [String!]
  notesNotIn: [String!]
  notesGT: String
  notesGTE: String
  notesLT: String
  notesLTE: String
  notesContains: String
  notesHasPrefix: String
  notesHasSuffix: String
  notesIsNil: Boolean
  notesNotNil: Boolean
  notesEqualFold: String
  notesContainsFold: String
  """
  car edge predicates
  """
  hasCar: Boolean
  hasCarWith: [CarWhereInput!]
  """
  fuel_up edge predicates
  """
  hasFuelUp: Boolean
  hasFuelUpWith: [FuelUpWhereInput!]
  """
  service_log edge predicates
  """
  hasServiceLog: Boolean
  hasServiceLogWith: [ServiceLogWhereInput!]
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
type Profile {
  id: ID!
  createTime: Time!
  updateTime: Time!
  username: String
  firstName: String
  lastName: String
  currencyCode: String
  fuelVolumeUnit: FuelVolumeUnit
  distanceUnit: DistanceUnit
  fuelConsumptionUnit: FuelConsumptionUnit
  temperatureUnit: TemperatureUnit
  visibility: ProfileVisibility!
  user: User!
}
"""
ProfileVisibility is enum for the field visibility
"""
enum ProfileVisibility @goModel(model: "github.com/Dan6erbond/revline/ent/profile.Visibility") {
  public
  private
}
"""
ProfileWhereInput is used for filtering Profile objects.
Input was generated by ent.
"""
input ProfileWhereInput {
  not: ProfileWhereInput
  and: [ProfileWhereInput!]
  or: [ProfileWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  username field predicates
  """
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameIsNil: Boolean
  usernameNotNil: Boolean
  usernameEqualFold: String
  usernameContainsFold: String
  """
  first_name field predicates
  """
  firstName: String
  firstNameNEQ: String
  firstNameIn: [String!]
  firstNameNotIn: [String!]
  firstNameGT: String
  firstNameGTE: String
  firstNameLT: String
  firstNameLTE: String
  firstNameContains: String
  firstNameHasPrefix: String
  firstNameHasSuffix: String
  firstNameIsNil: Boolean
  firstNameNotNil: Boolean
  firstNameEqualFold: String
  firstNameContainsFold: String
  """
  last_name field predicates
  """
  lastName: String
  lastNameNEQ: String
  lastNameIn: [String!]
  lastNameNotIn: [String!]
  lastNameGT: String
  lastNameGTE: String
  lastNameLT: String
  lastNameLTE: String
  lastNameContains: String
  lastNameHasPrefix: String
  lastNameHasSuffix: String
  lastNameIsNil: Boolean
  lastNameNotNil: Boolean
  lastNameEqualFold: String
  lastNameContainsFold: String
  """
  currency_code field predicates
  """
  currencyCode: String
  currencyCodeNEQ: String
  currencyCodeIn: [String!]
  currencyCodeNotIn: [String!]
  currencyCodeGT: String
  currencyCodeGTE: String
  currencyCodeLT: String
  currencyCodeLTE: String
  currencyCodeContains: String
  currencyCodeHasPrefix: String
  currencyCodeHasSuffix: String
  currencyCodeIsNil: Boolean
  currencyCodeNotNil: Boolean
  currencyCodeEqualFold: String
  currencyCodeContainsFold: String
  """
  fuel_volume_unit field predicates
  """
  fuelVolumeUnit: FuelVolumeUnit
  fuelVolumeUnitNEQ: FuelVolumeUnit
  fuelVolumeUnitIn: [FuelVolumeUnit!]
  fuelVolumeUnitNotIn: [FuelVolumeUnit!]
  fuelVolumeUnitIsNil: Boolean
  fuelVolumeUnitNotNil: Boolean
  """
  distance_unit field predicates
  """
  distanceUnit: DistanceUnit
  distanceUnitNEQ: DistanceUnit
  distanceUnitIn: [DistanceUnit!]
  distanceUnitNotIn: [DistanceUnit!]
  distanceUnitIsNil: Boolean
  distanceUnitNotNil: Boolean
  """
  fuel_consumption_unit field predicates
  """
  fuelConsumptionUnit: FuelConsumptionUnit
  fuelConsumptionUnitNEQ: FuelConsumptionUnit
  fuelConsumptionUnitIn: [FuelConsumptionUnit!]
  fuelConsumptionUnitNotIn: [FuelConsumptionUnit!]
  fuelConsumptionUnitIsNil: Boolean
  fuelConsumptionUnitNotNil: Boolean
  """
  temperature_unit field predicates
  """
  temperatureUnit: TemperatureUnit
  temperatureUnitNEQ: TemperatureUnit
  temperatureUnitIn: [TemperatureUnit!]
  temperatureUnitNotIn: [TemperatureUnit!]
  temperatureUnitIsNil: Boolean
  temperatureUnitNotNil: Boolean
  """
  visibility field predicates
  """
  visibility: ProfileVisibility
  visibilityNEQ: ProfileVisibility
  visibilityIn: [ProfileVisibility!]
  visibilityNotIn: [ProfileVisibility!]
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
type ServiceItem {
  id: ID!
  createTime: Time!
  updateTime: Time!
  label: String!
  estimatedMinutes: Int
  defaultIntervalKm: Float
  defaultIntervalMonths: Int
  notes: String
  tags: [String!]!
  car: Car!
  schedules: [ServiceSchedule!]
  logs: [ServiceLog!]
}
"""
ServiceItemWhereInput is used for filtering ServiceItem objects.
Input was generated by ent.
"""
input ServiceItemWhereInput {
  not: ServiceItemWhereInput
  and: [ServiceItemWhereInput!]
  or: [ServiceItemWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  label field predicates
  """
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelEqualFold: String
  labelContainsFold: String
  """
  estimated_minutes field predicates
  """
  estimatedMinutes: Int
  estimatedMinutesNEQ: Int
  estimatedMinutesIn: [Int!]
  estimatedMinutesNotIn: [Int!]
  estimatedMinutesGT: Int
  estimatedMinutesGTE: Int
  estimatedMinutesLT: Int
  estimatedMinutesLTE: Int
  estimatedMinutesIsNil: Boolean
  estimatedMinutesNotNil: Boolean
  """
  default_interval_km field predicates
  """
  defaultIntervalKm: Float
  defaultIntervalKmNEQ: Float
  defaultIntervalKmIn: [Float!]
  defaultIntervalKmNotIn: [Float!]
  defaultIntervalKmGT: Float
  defaultIntervalKmGTE: Float
  defaultIntervalKmLT: Float
  defaultIntervalKmLTE: Float
  defaultIntervalKmIsNil: Boolean
  defaultIntervalKmNotNil: Boolean
  """
  default_interval_months field predicates
  """
  defaultIntervalMonths: Int
  defaultIntervalMonthsNEQ: Int
  defaultIntervalMonthsIn: [Int!]
  defaultIntervalMonthsNotIn: [Int!]
  defaultIntervalMonthsGT: Int
  defaultIntervalMonthsGTE: Int
  defaultIntervalMonthsLT: Int
  defaultIntervalMonthsLTE: Int
  defaultIntervalMonthsIsNil: Boolean
  defaultIntervalMonthsNotNil: Boolean
  """
  notes field predicates
  """
  notes: String
  notesNEQ: String
  notesIn: [String!]
  notesNotIn: [String!]
  notesGT: String
  notesGTE: String
  notesLT: String
  notesLTE: String
  notesContains: String
  notesHasPrefix: String
  notesHasSuffix: String
  notesIsNil: Boolean
  notesNotNil: Boolean
  notesEqualFold: String
  notesContainsFold: String
  """
  car edge predicates
  """
  hasCar: Boolean
  hasCarWith: [CarWhereInput!]
  """
  schedules edge predicates
  """
  hasSchedules: Boolean
  hasSchedulesWith: [ServiceScheduleWhereInput!]
  """
  logs edge predicates
  """
  hasLogs: Boolean
  hasLogsWith: [ServiceLogWhereInput!]
}
type ServiceLog {
  id: ID!
  createTime: Time!
  updateTime: Time!
  datePerformed: Time!
  performedBy: String
  notes: String
  car: Car!
  items: [ServiceItem!]
  schedule: ServiceSchedule
  odometerReading: OdometerReading
}
"""
ServiceLogWhereInput is used for filtering ServiceLog objects.
Input was generated by ent.
"""
input ServiceLogWhereInput {
  not: ServiceLogWhereInput
  and: [ServiceLogWhereInput!]
  or: [ServiceLogWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  date_performed field predicates
  """
  datePerformed: Time
  datePerformedNEQ: Time
  datePerformedIn: [Time!]
  datePerformedNotIn: [Time!]
  datePerformedGT: Time
  datePerformedGTE: Time
  datePerformedLT: Time
  datePerformedLTE: Time
  """
  performed_by field predicates
  """
  performedBy: String
  performedByNEQ: String
  performedByIn: [String!]
  performedByNotIn: [String!]
  performedByGT: String
  performedByGTE: String
  performedByLT: String
  performedByLTE: String
  performedByContains: String
  performedByHasPrefix: String
  performedByHasSuffix: String
  performedByIsNil: Boolean
  performedByNotNil: Boolean
  performedByEqualFold: String
  performedByContainsFold: String
  """
  notes field predicates
  """
  notes: String
  notesNEQ: String
  notesIn: [String!]
  notesNotIn: [String!]
  notesGT: String
  notesGTE: String
  notesLT: String
  notesLTE: String
  notesContains: String
  notesHasPrefix: String
  notesHasSuffix: String
  notesIsNil: Boolean
  notesNotNil: Boolean
  notesEqualFold: String
  notesContainsFold: String
  """
  car edge predicates
  """
  hasCar: Boolean
  hasCarWith: [CarWhereInput!]
  """
  items edge predicates
  """
  hasItems: Boolean
  hasItemsWith: [ServiceItemWhereInput!]
  """
  schedule edge predicates
  """
  hasSchedule: Boolean
  hasScheduleWith: [ServiceScheduleWhereInput!]
  """
  odometer_reading edge predicates
  """
  hasOdometerReading: Boolean
  hasOdometerReadingWith: [OdometerReadingWhereInput!]
}
type ServiceSchedule {
  id: ID!
  createTime: Time!
  updateTime: Time!
  title: String!
  repeatEveryKm: Float
  startsAtKm: Float
  repeatEveryMonths: Int
  startsAtMonths: Int
  notes: String
  archived: Boolean!
  car: Car!
  items: [ServiceItem!]
  logs: [ServiceLog!]
}
"""
ServiceScheduleWhereInput is used for filtering ServiceSchedule objects.
Input was generated by ent.
"""
input ServiceScheduleWhereInput {
  not: ServiceScheduleWhereInput
  and: [ServiceScheduleWhereInput!]
  or: [ServiceScheduleWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  repeat_every_km field predicates
  """
  repeatEveryKm: Float
  repeatEveryKmNEQ: Float
  repeatEveryKmIn: [Float!]
  repeatEveryKmNotIn: [Float!]
  repeatEveryKmGT: Float
  repeatEveryKmGTE: Float
  repeatEveryKmLT: Float
  repeatEveryKmLTE: Float
  repeatEveryKmIsNil: Boolean
  repeatEveryKmNotNil: Boolean
  """
  starts_at_km field predicates
  """
  startsAtKm: Float
  startsAtKmNEQ: Float
  startsAtKmIn: [Float!]
  startsAtKmNotIn: [Float!]
  startsAtKmGT: Float
  startsAtKmGTE: Float
  startsAtKmLT: Float
  startsAtKmLTE: Float
  startsAtKmIsNil: Boolean
  startsAtKmNotNil: Boolean
  """
  repeat_every_months field predicates
  """
  repeatEveryMonths: Int
  repeatEveryMonthsNEQ: Int
  repeatEveryMonthsIn: [Int!]
  repeatEveryMonthsNotIn: [Int!]
  repeatEveryMonthsGT: Int
  repeatEveryMonthsGTE: Int
  repeatEveryMonthsLT: Int
  repeatEveryMonthsLTE: Int
  repeatEveryMonthsIsNil: Boolean
  repeatEveryMonthsNotNil: Boolean
  """
  starts_at_months field predicates
  """
  startsAtMonths: Int
  startsAtMonthsNEQ: Int
  startsAtMonthsIn: [Int!]
  startsAtMonthsNotIn: [Int!]
  startsAtMonthsGT: Int
  startsAtMonthsGTE: Int
  startsAtMonthsLT: Int
  startsAtMonthsLTE: Int
  startsAtMonthsIsNil: Boolean
  startsAtMonthsNotNil: Boolean
  """
  notes field predicates
  """
  notes: String
  notesNEQ: String
  notesIn: [String!]
  notesNotIn: [String!]
  notesGT: String
  notesGTE: String
  notesLT: String
  notesLTE: String
  notesContains: String
  notesHasPrefix: String
  notesHasSuffix: String
  notesIsNil: Boolean
  notesNotNil: Boolean
  notesEqualFold: String
  notesContainsFold: String
  """
  archived field predicates
  """
  archived: Boolean
  archivedNEQ: Boolean
  """
  car edge predicates
  """
  hasCar: Boolean
  hasCarWith: [CarWhereInput!]
  """
  items edge predicates
  """
  hasItems: Boolean
  hasItemsWith: [ServiceItemWhereInput!]
  """
  logs edge predicates
  """
  hasLogs: Boolean
  hasLogsWith: [ServiceLogWhereInput!]
}
"""
TemperatureUnit is enum for the field temperature_unit
"""
enum TemperatureUnit @goModel(model: "github.com/Dan6erbond/revline/ent/profile.TemperatureUnit") {
  celsius
  fahrenheit
}
"""
The builtin Time type
"""
scalar Time
"""
UpdateCarInput is used for update Car object.
Input was generated by ent.
"""
input UpdateCarInput {
  updateTime: Time
  name: String
  make: String
  clearMake: Boolean
  model: String
  clearModel: Boolean
  type: String
  clearType: Boolean
  year: Int
  clearYear: Boolean
  trim: String
  clearTrim: Boolean
  ownerID: ID
  clearOwner: Boolean
  addDragSessionIDs: [ID!]
  removeDragSessionIDs: [ID!]
  clearDragSessions: Boolean
  addFuelUpIDs: [ID!]
  removeFuelUpIDs: [ID!]
  clearFuelUps: Boolean
  addOdometerReadingIDs: [ID!]
  removeOdometerReadingIDs: [ID!]
  clearOdometerReadings: Boolean
  addServiceItemIDs: [ID!]
  removeServiceItemIDs: [ID!]
  clearServiceItems: Boolean
  addServiceLogIDs: [ID!]
  removeServiceLogIDs: [ID!]
  clearServiceLogs: Boolean
  addServiceScheduleIDs: [ID!]
  removeServiceScheduleIDs: [ID!]
  clearServiceSchedules: Boolean
  addMediumIDs: [ID!]
  removeMediumIDs: [ID!]
  clearMedia: Boolean
  bannerImageID: ID
  clearBannerImage: Boolean
}
"""
UpdateDragResultInput is used for update DragResult object.
Input was generated by ent.
"""
input UpdateDragResultInput {
  updateTime: Time
  unit: DragResultUnit
  value: Float
  result: Float
  sessionID: ID
}
"""
UpdateDragSessionInput is used for update DragSession object.
Input was generated by ent.
"""
input UpdateDragSessionInput {
  updateTime: Time
  title: String
  notes: String
  clearNotes: Boolean
  carID: ID
  addResultIDs: [ID!]
  removeResultIDs: [ID!]
  clearResults: Boolean
}
"""
UpdateFuelUpInput is used for update FuelUp object.
Input was generated by ent.
"""
input UpdateFuelUpInput {
  updateTime: Time
  occurredAt: Time
  station: String
  amountLiters: Float
  cost: Float
  fuelCategory: FuelCategory
  octaneRating: OctaneRating
  clearOctaneRating: Boolean
  isFullTank: Boolean
  notes: String
  clearNotes: Boolean
  carID: ID
  odometerReadingID: ID
  clearOdometerReading: Boolean
}
"""
UpdateMediaInput is used for update Media object.
Input was generated by ent.
"""
input UpdateMediaInput {
  updateTime: Time
  carID: ID
  clearCar: Boolean
}
"""
UpdateOdometerReadingInput is used for update OdometerReading object.
Input was generated by ent.
"""
input UpdateOdometerReadingInput {
  updateTime: Time
  readingKm: Float
  notes: String
  clearNotes: Boolean
  carID: ID
  fuelUpID: ID
  clearFuelUp: Boolean
  serviceLogID: ID
  clearServiceLog: Boolean
}
"""
UpdateProfileInput is used for update Profile object.
Input was generated by ent.
"""
input UpdateProfileInput {
  updateTime: Time
  username: String
  clearUsername: Boolean
  firstName: String
  clearFirstName: Boolean
  lastName: String
  clearLastName: Boolean
  currencyCode: String
  clearCurrencyCode: Boolean
  fuelVolumeUnit: FuelVolumeUnit
  clearFuelVolumeUnit: Boolean
  distanceUnit: DistanceUnit
  clearDistanceUnit: Boolean
  fuelConsumptionUnit: FuelConsumptionUnit
  clearFuelConsumptionUnit: Boolean
  temperatureUnit: TemperatureUnit
  clearTemperatureUnit: Boolean
  visibility: ProfileVisibility
  userID: ID
}
"""
UpdateServiceItemInput is used for update ServiceItem object.
Input was generated by ent.
"""
input UpdateServiceItemInput {
  updateTime: Time
  label: String
  estimatedMinutes: Int
  clearEstimatedMinutes: Boolean
  defaultIntervalKm: Float
  clearDefaultIntervalKm: Boolean
  defaultIntervalMonths: Int
  clearDefaultIntervalMonths: Boolean
  notes: String
  clearNotes: Boolean
  tags: [String!]
  appendTags: [String!]
  carID: ID
  addScheduleIDs: [ID!]
  removeScheduleIDs: [ID!]
  clearSchedules: Boolean
  addLogIDs: [ID!]
  removeLogIDs: [ID!]
  clearLogs: Boolean
}
"""
UpdateServiceLogInput is used for update ServiceLog object.
Input was generated by ent.
"""
input UpdateServiceLogInput {
  updateTime: Time
  datePerformed: Time
  performedBy: String
  clearPerformedBy: Boolean
  notes: String
  clearNotes: Boolean
  carID: ID
  addItemIDs: [ID!]
  removeItemIDs: [ID!]
  clearItems: Boolean
  scheduleID: ID
  clearSchedule: Boolean
  odometerReadingID: ID
  clearOdometerReading: Boolean
}
"""
UpdateServiceScheduleInput is used for update ServiceSchedule object.
Input was generated by ent.
"""
input UpdateServiceScheduleInput {
  updateTime: Time
  title: String
  repeatEveryKm: Float
  clearRepeatEveryKm: Boolean
  startsAtKm: Float
  clearStartsAtKm: Boolean
  repeatEveryMonths: Int
  clearRepeatEveryMonths: Boolean
  startsAtMonths: Int
  clearStartsAtMonths: Boolean
  notes: String
  clearNotes: Boolean
  archived: Boolean
  carID: ID
  addItemIDs: [ID!]
  removeItemIDs: [ID!]
  clearItems: Boolean
  addLogIDs: [ID!]
  removeLogIDs: [ID!]
  clearLogs: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  updateTime: Time
  email: String
  addCarIDs: [ID!]
  removeCarIDs: [ID!]
  clearCars: Boolean
  profileID: ID
  clearProfile: Boolean
}
type User {
  id: ID!
  createTime: Time!
  updateTime: Time!
  email: String!
  cars: [Car!]
  profile: Profile
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  cars edge predicates
  """
  hasCars: Boolean
  hasCarsWith: [CarWhereInput!]
  """
  profile edge predicates
  """
  hasProfile: Boolean
  hasProfileWith: [ProfileWhereInput!]
}
