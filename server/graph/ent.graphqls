directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Album implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  title: String!
  car: Car!
  media: [Media!]
}
"""
AlbumWhereInput is used for filtering Album objects.
Input was generated by ent.
"""
input AlbumWhereInput {
  not: AlbumWhereInput
  and: [AlbumWhereInput!]
  or: [AlbumWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  car edge predicates
  """
  hasCar: Boolean
  hasCarWith: [CarWhereInput!]
  """
  media edge predicates
  """
  hasMedia: Boolean
  hasMediaWith: [MediaWhereInput!]
}
type BuildLog implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  title: String!
  notes: Map
  logTime: Time!
  car: Car!
  mods: [Mod!]
  media: [Media!]
}
"""
BuildLogWhereInput is used for filtering BuildLog objects.
Input was generated by ent.
"""
input BuildLogWhereInput {
  not: BuildLogWhereInput
  and: [BuildLogWhereInput!]
  or: [BuildLogWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  log_time field predicates
  """
  logTime: Time
  logTimeNEQ: Time
  logTimeIn: [Time!]
  logTimeNotIn: [Time!]
  logTimeGT: Time
  logTimeGTE: Time
  logTimeLT: Time
  logTimeLTE: Time
  """
  car edge predicates
  """
  hasCar: Boolean
  hasCarWith: [CarWhereInput!]
  """
  mods edge predicates
  """
  hasMods: Boolean
  hasModsWith: [ModWhereInput!]
  """
  media edge predicates
  """
  hasMedia: Boolean
  hasMediaWith: [MediaWhereInput!]
}
type Car implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  name: String!
  make: String
  model: String
  type: String
  year: Int
  trim: String
  owner: User!
  dragSessions: [DragSession!]
  fuelUps: [FuelUp!]
  odometerReadings: [OdometerReading!]
  serviceItems: [ServiceItem!]
  serviceLogs: [ServiceLog!]
  serviceSchedules: [ServiceSchedule!]
  media: [Media!]
  albums: [Album!]
  documents: [Document!]
  dynoSessions: [DynoSession!]
  expenses: [Expense!]
  buildLogs: [BuildLog!]
  bannerImage: Media
  tasks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tasks returned from the connection.
    """
    orderBy: [TaskOrder!]

    """
    Filtering options for Tasks returned from the connection.
    """
    where: TaskWhereInput
  ): TaskConnection!
  mods(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Filtering options for Mods returned from the connection.
    """
    where: ModWhereInput
  ): ModConnection!
}
"""
CarWhereInput is used for filtering Car objects.
Input was generated by ent.
"""
input CarWhereInput {
  not: CarWhereInput
  and: [CarWhereInput!]
  or: [CarWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  make field predicates
  """
  make: String
  makeNEQ: String
  makeIn: [String!]
  makeNotIn: [String!]
  makeGT: String
  makeGTE: String
  makeLT: String
  makeLTE: String
  makeContains: String
  makeHasPrefix: String
  makeHasSuffix: String
  makeIsNil: Boolean
  makeNotNil: Boolean
  makeEqualFold: String
  makeContainsFold: String
  """
  model field predicates
  """
  model: String
  modelNEQ: String
  modelIn: [String!]
  modelNotIn: [String!]
  modelGT: String
  modelGTE: String
  modelLT: String
  modelLTE: String
  modelContains: String
  modelHasPrefix: String
  modelHasSuffix: String
  modelIsNil: Boolean
  modelNotNil: Boolean
  modelEqualFold: String
  modelContainsFold: String
  """
  type field predicates
  """
  type: String
  typeNEQ: String
  typeIn: [String!]
  typeNotIn: [String!]
  typeGT: String
  typeGTE: String
  typeLT: String
  typeLTE: String
  typeContains: String
  typeHasPrefix: String
  typeHasSuffix: String
  typeIsNil: Boolean
  typeNotNil: Boolean
  typeEqualFold: String
  typeContainsFold: String
  """
  year field predicates
  """
  year: Int
  yearNEQ: Int
  yearIn: [Int!]
  yearNotIn: [Int!]
  yearGT: Int
  yearGTE: Int
  yearLT: Int
  yearLTE: Int
  yearIsNil: Boolean
  yearNotNil: Boolean
  """
  trim field predicates
  """
  trim: String
  trimNEQ: String
  trimIn: [String!]
  trimNotIn: [String!]
  trimGT: String
  trimGTE: String
  trimLT: String
  trimLTE: String
  trimContains: String
  trimHasPrefix: String
  trimHasSuffix: String
  trimIsNil: Boolean
  trimNotNil: Boolean
  trimEqualFold: String
  trimContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
  """
  drag_sessions edge predicates
  """
  hasDragSessions: Boolean
  hasDragSessionsWith: [DragSessionWhereInput!]
  """
  fuel_ups edge predicates
  """
  hasFuelUps: Boolean
  hasFuelUpsWith: [FuelUpWhereInput!]
  """
  odometer_readings edge predicates
  """
  hasOdometerReadings: Boolean
  hasOdometerReadingsWith: [OdometerReadingWhereInput!]
  """
  service_items edge predicates
  """
  hasServiceItems: Boolean
  hasServiceItemsWith: [ServiceItemWhereInput!]
  """
  service_logs edge predicates
  """
  hasServiceLogs: Boolean
  hasServiceLogsWith: [ServiceLogWhereInput!]
  """
  service_schedules edge predicates
  """
  hasServiceSchedules: Boolean
  hasServiceSchedulesWith: [ServiceScheduleWhereInput!]
  """
  media edge predicates
  """
  hasMedia: Boolean
  hasMediaWith: [MediaWhereInput!]
  """
  albums edge predicates
  """
  hasAlbums: Boolean
  hasAlbumsWith: [AlbumWhereInput!]
  """
  documents edge predicates
  """
  hasDocuments: Boolean
  hasDocumentsWith: [DocumentWhereInput!]
  """
  dyno_sessions edge predicates
  """
  hasDynoSessions: Boolean
  hasDynoSessionsWith: [DynoSessionWhereInput!]
  """
  expenses edge predicates
  """
  hasExpenses: Boolean
  hasExpensesWith: [ExpenseWhereInput!]
  """
  build_logs edge predicates
  """
  hasBuildLogs: Boolean
  hasBuildLogsWith: [BuildLogWhereInput!]
  """
  banner_image edge predicates
  """
  hasBannerImage: Boolean
  hasBannerImageWith: [MediaWhereInput!]
  """
  tasks edge predicates
  """
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
  """
  mods edge predicates
  """
  hasMods: Boolean
  hasModsWith: [ModWhereInput!]
}
type CheckoutSession implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  stripeSessionID: String
  stripePriceID: String!
  mode: CheckoutSessionMode!
  completed: Boolean!
  completedAt: Time
  affiliate6moCode: String
  affiliate12moCode: String
  user: User!
  subscription: SubscriptionPlan
}
"""
CheckoutSessionMode is enum for the field mode
"""
enum CheckoutSessionMode @goModel(model: "github.com/Dan6erbond/revline/ent/checkoutsession.Mode") {
  subscription
  setup
  payment
}
"""
CheckoutSessionWhereInput is used for filtering CheckoutSession objects.
Input was generated by ent.
"""
input CheckoutSessionWhereInput {
  not: CheckoutSessionWhereInput
  and: [CheckoutSessionWhereInput!]
  or: [CheckoutSessionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  stripe_session_id field predicates
  """
  stripeSessionID: String
  stripeSessionIDNEQ: String
  stripeSessionIDIn: [String!]
  stripeSessionIDNotIn: [String!]
  stripeSessionIDGT: String
  stripeSessionIDGTE: String
  stripeSessionIDLT: String
  stripeSessionIDLTE: String
  stripeSessionIDContains: String
  stripeSessionIDHasPrefix: String
  stripeSessionIDHasSuffix: String
  stripeSessionIDIsNil: Boolean
  stripeSessionIDNotNil: Boolean
  stripeSessionIDEqualFold: String
  stripeSessionIDContainsFold: String
  """
  stripe_price_id field predicates
  """
  stripePriceID: String
  stripePriceIDNEQ: String
  stripePriceIDIn: [String!]
  stripePriceIDNotIn: [String!]
  stripePriceIDGT: String
  stripePriceIDGTE: String
  stripePriceIDLT: String
  stripePriceIDLTE: String
  stripePriceIDContains: String
  stripePriceIDHasPrefix: String
  stripePriceIDHasSuffix: String
  stripePriceIDEqualFold: String
  stripePriceIDContainsFold: String
  """
  mode field predicates
  """
  mode: CheckoutSessionMode
  modeNEQ: CheckoutSessionMode
  modeIn: [CheckoutSessionMode!]
  modeNotIn: [CheckoutSessionMode!]
  """
  completed field predicates
  """
  completed: Boolean
  completedNEQ: Boolean
  """
  completed_at field predicates
  """
  completedAt: Time
  completedAtNEQ: Time
  completedAtIn: [Time!]
  completedAtNotIn: [Time!]
  completedAtGT: Time
  completedAtGTE: Time
  completedAtLT: Time
  completedAtLTE: Time
  completedAtIsNil: Boolean
  completedAtNotNil: Boolean
  """
  affiliate_6mo_code field predicates
  """
  affiliate6moCode: String
  affiliate6moCodeNEQ: String
  affiliate6moCodeIn: [String!]
  affiliate6moCodeNotIn: [String!]
  affiliate6moCodeGT: String
  affiliate6moCodeGTE: String
  affiliate6moCodeLT: String
  affiliate6moCodeLTE: String
  affiliate6moCodeContains: String
  affiliate6moCodeHasPrefix: String
  affiliate6moCodeHasSuffix: String
  affiliate6moCodeIsNil: Boolean
  affiliate6moCodeNotNil: Boolean
  affiliate6moCodeEqualFold: String
  affiliate6moCodeContainsFold: String
  """
  affiliate_12mo_code field predicates
  """
  affiliate12moCode: String
  affiliate12moCodeNEQ: String
  affiliate12moCodeIn: [String!]
  affiliate12moCodeNotIn: [String!]
  affiliate12moCodeGT: String
  affiliate12moCodeGTE: String
  affiliate12moCodeLT: String
  affiliate12moCodeLTE: String
  affiliate12moCodeContains: String
  affiliate12moCodeHasPrefix: String
  affiliate12moCodeHasSuffix: String
  affiliate12moCodeIsNil: Boolean
  affiliate12moCodeNotNil: Boolean
  affiliate12moCodeEqualFold: String
  affiliate12moCodeContainsFold: String
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  subscription edge predicates
  """
  hasSubscription: Boolean
  hasSubscriptionWith: [SubscriptionPlanWhereInput!]
}
"""
CreateAlbumInput is used for create Album object.
Input was generated by ent.
"""
input CreateAlbumInput {
  createTime: Time
  updateTime: Time
  title: String!
  carID: ID!
  mediumIDs: [ID!]
}
"""
CreateBuildLogInput is used for create BuildLog object.
Input was generated by ent.
"""
input CreateBuildLogInput {
  createTime: Time
  updateTime: Time
  title: String!
  notes: Map
  logTime: Time!
  carID: ID!
  modIDs: [ID!]
  mediumIDs: [ID!]
}
"""
CreateCarInput is used for create Car object.
Input was generated by ent.
"""
input CreateCarInput {
  createTime: Time
  updateTime: Time
  name: String!
  make: String
  model: String
  type: String
  year: Int
  trim: String
  ownerID: ID!
  dragSessionIDs: [ID!]
  fuelUpIDs: [ID!]
  odometerReadingIDs: [ID!]
  serviceItemIDs: [ID!]
  serviceLogIDs: [ID!]
  serviceScheduleIDs: [ID!]
  mediumIDs: [ID!]
  albumIDs: [ID!]
  documentIDs: [ID!]
  dynoSessionIDs: [ID!]
  expenseIDs: [ID!]
  buildLogIDs: [ID!]
  bannerImageID: ID
  taskIDs: [ID!]
  modIDs: [ID!]
}
"""
CreateDocumentInput is used for create Document object.
Input was generated by ent.
"""
input CreateDocumentInput {
  createTime: Time
  updateTime: Time
  name: String!
  tags: [String!]
  carID: ID
  expenseID: ID
  fuelUpID: ID
  serviceLogID: ID
  dragSessionID: ID
  dynoSessionID: ID
}
"""
CreateDragResultInput is used for create DragResult object.
Input was generated by ent.
"""
input CreateDragResultInput {
  createTime: Time
  updateTime: Time
  unit: DragResultUnit!
  value: Float!
  result: Float!
  sessionID: ID!
}
"""
CreateDragSessionInput is used for create DragSession object.
Input was generated by ent.
"""
input CreateDragSessionInput {
  createTime: Time
  updateTime: Time
  title: String!
  notes: Map
  carID: ID!
  resultIDs: [ID!]
  documentIDs: [ID!]
}
"""
CreateDynoResultInput is used for create DynoResult object.
Input was generated by ent.
"""
input CreateDynoResultInput {
  createTime: Time
  updateTime: Time
  rpm: Int!
  powerKw: Float
  torqueNm: Float
  sessionID: ID!
}
"""
CreateDynoSessionInput is used for create DynoSession object.
Input was generated by ent.
"""
input CreateDynoSessionInput {
  createTime: Time
  updateTime: Time
  title: String!
  notes: Map
  carID: ID!
  resultIDs: [ID!]
  documentIDs: [ID!]
}
"""
CreateExpenseInput is used for create Expense object.
Input was generated by ent.
"""
input CreateExpenseInput {
  createTime: Time
  updateTime: Time
  occurredAt: Time!
  type: ExpenseType!
  amount: Float!
  notes: Map
  carID: ID!
  fuelUpID: ID
  serviceLogID: ID
  documentIDs: [ID!]
}
"""
CreateFuelUpInput is used for create FuelUp object.
Input was generated by ent.
"""
input CreateFuelUpInput {
  createTime: Time
  updateTime: Time
  occurredAt: Time!
  station: String!
  amountLiters: Float!
  fuelCategory: FuelCategory
  octaneRating: OctaneRating
  isFullTank: Boolean
  notes: Map
  carID: ID!
  odometerReadingID: ID
  expenseID: ID
  documentIDs: [ID!]
}
"""
CreateMediaInput is used for create Media object.
Input was generated by ent.
"""
input CreateMediaInput {
  createTime: Time
  updateTime: Time
  title: String
  description: String
  userID: ID
  carID: ID
  modProductOptionID: ID
  buildLogIDs: [ID!]
  albumIDs: [ID!]
}
"""
CreateModInput is used for create Mod object.
Input was generated by ent.
"""
input CreateModInput {
  createTime: Time
  updateTime: Time
  title: String!
  category: ModCategory!
  status: ModStatus
  description: String
  stage: String
  carID: ID!
  taskIDs: [ID!]
  productOptionIDs: [ID!]
  buildLogIDs: [ID!]
}
"""
CreateModProductOptionInput is used for create ModProductOption object.
Input was generated by ent.
"""
input CreateModProductOptionInput {
  createTime: Time
  updateTime: Time
  vendor: String
  name: String
  link: String
  price: Float
  notes: String
  pros: [String!]
  cons: [String!]
  specs: Map
  modID: ID!
  mediumIDs: [ID!]
}
"""
CreateOdometerReadingInput is used for create OdometerReading object.
Input was generated by ent.
"""
input CreateOdometerReadingInput {
  createTime: Time
  updateTime: Time
  readingKm: Float!
  readingTime: Time!
  notes: String
  carID: ID!
  fuelUpID: ID
  serviceLogID: ID
}
"""
CreateProfileInput is used for create Profile object.
Input was generated by ent.
"""
input CreateProfileInput {
  createTime: Time
  updateTime: Time
  username: String
  firstName: String
  lastName: String
  visibility: ProfileVisibility
  userID: ID!
}
"""
CreateServiceItemInput is used for create ServiceItem object.
Input was generated by ent.
"""
input CreateServiceItemInput {
  createTime: Time
  updateTime: Time
  label: String!
  estimatedMinutes: Int
  defaultIntervalKm: Float
  defaultIntervalMonths: Int
  notes: String
  tags: [String!]
  carID: ID!
  scheduleIDs: [ID!]
  logIDs: [ID!]
}
"""
CreateServiceLogInput is used for create ServiceLog object.
Input was generated by ent.
"""
input CreateServiceLogInput {
  createTime: Time
  updateTime: Time
  datePerformed: Time!
  performedBy: String
  notes: String
  carID: ID!
  itemIDs: [ID!]
  scheduleID: ID
  odometerReadingID: ID
  expenseID: ID
  documentIDs: [ID!]
}
"""
CreateServiceScheduleInput is used for create ServiceSchedule object.
Input was generated by ent.
"""
input CreateServiceScheduleInput {
  createTime: Time
  updateTime: Time
  title: String!
  repeatEveryKm: Float
  startsAtKm: Float
  repeatEveryMonths: Int
  startsAtMonths: Int
  notes: String
  archived: Boolean
  carID: ID!
  itemIDs: [ID!]
  logIDs: [ID!]
}
"""
CreateTaskInput is used for create Task object.
Input was generated by ent.
"""
input CreateTaskInput {
  createTime: Time
  updateTime: Time
  status: TaskStatus!
  title: String!
  description: String
  rank: Float
  estimate: Float
  priority: TaskPriority
  effort: TaskEffort
  difficulty: TaskDifficulty
  category: TaskCategory
  budget: Float
  partsNeeded: String
  carID: ID!
  parentID: ID
  subtaskIDs: [ID!]
  modIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  createTime: Time
  updateTime: Time
  email: String!
  stripeCustomerID: String
  stripeAccountID: String
  stripeAccountCapabilities: Map
  affiliate6moCode: String
  affiliate12moCode: String
  carIDs: [ID!]
  profileID: ID
  settingsID: ID
  subscriptionIDs: [ID!]
  checkoutSessionIDs: [ID!]
  mediumIDs: [ID!]
}
"""
CreateUserSettingsInput is used for create UserSettings object.
Input was generated by ent.
"""
input CreateUserSettingsInput {
  createTime: Time
  updateTime: Time
  currencyCode: String
  fuelVolumeUnit: FuelVolumeUnit
  distanceUnit: DistanceUnit
  fuelConsumptionUnit: FuelConsumptionUnit
  temperatureUnit: TemperatureUnit
  powerUnit: PowerUnit
  torqueUnit: TorqueUnit
  userID: ID!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
DistanceUnit is enum for the field distance_unit
"""
enum DistanceUnit @goModel(model: "github.com/Dan6erbond/revline/ent/usersettings.DistanceUnit") {
  kilometers
  miles
}
type Document implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  name: String!
  tags: [String!]!
  car: Car
  expense: Expense
  fuelUp: FuelUp
  serviceLog: ServiceLog
  dragSession: DragSession
  dynoSession: DynoSession
}
"""
DocumentWhereInput is used for filtering Document objects.
Input was generated by ent.
"""
input DocumentWhereInput {
  not: DocumentWhereInput
  and: [DocumentWhereInput!]
  or: [DocumentWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  car edge predicates
  """
  hasCar: Boolean
  hasCarWith: [CarWhereInput!]
  """
  expense edge predicates
  """
  hasExpense: Boolean
  hasExpenseWith: [ExpenseWhereInput!]
  """
  fuel_up edge predicates
  """
  hasFuelUp: Boolean
  hasFuelUpWith: [FuelUpWhereInput!]
  """
  service_log edge predicates
  """
  hasServiceLog: Boolean
  hasServiceLogWith: [ServiceLogWhereInput!]
  """
  drag_session edge predicates
  """
  hasDragSession: Boolean
  hasDragSessionWith: [DragSessionWhereInput!]
  """
  dyno_session edge predicates
  """
  hasDynoSession: Boolean
  hasDynoSessionWith: [DynoSessionWhereInput!]
}
type DragResult implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  unit: DragResultUnit!
  value: Float!
  result: Float!
  session: DragSession!
}
"""
DragResultUnit is enum for the field unit
"""
enum DragResultUnit @goModel(model: "github.com/Dan6erbond/revline/ent/dragresult.Unit") {
  kph
  km
}
"""
DragResultWhereInput is used for filtering DragResult objects.
Input was generated by ent.
"""
input DragResultWhereInput {
  not: DragResultWhereInput
  and: [DragResultWhereInput!]
  or: [DragResultWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  unit field predicates
  """
  unit: DragResultUnit
  unitNEQ: DragResultUnit
  unitIn: [DragResultUnit!]
  unitNotIn: [DragResultUnit!]
  """
  value field predicates
  """
  value: Float
  valueNEQ: Float
  valueIn: [Float!]
  valueNotIn: [Float!]
  valueGT: Float
  valueGTE: Float
  valueLT: Float
  valueLTE: Float
  """
  result field predicates
  """
  result: Float
  resultNEQ: Float
  resultIn: [Float!]
  resultNotIn: [Float!]
  resultGT: Float
  resultGTE: Float
  resultLT: Float
  resultLTE: Float
  """
  session edge predicates
  """
  hasSession: Boolean
  hasSessionWith: [DragSessionWhereInput!]
}
type DragSession implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  title: String!
  notes: Map
  car: Car!
  results: [DragResult!]
  documents: [Document!]
}
"""
DragSessionWhereInput is used for filtering DragSession objects.
Input was generated by ent.
"""
input DragSessionWhereInput {
  not: DragSessionWhereInput
  and: [DragSessionWhereInput!]
  or: [DragSessionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  car edge predicates
  """
  hasCar: Boolean
  hasCarWith: [CarWhereInput!]
  """
  results edge predicates
  """
  hasResults: Boolean
  hasResultsWith: [DragResultWhereInput!]
  """
  documents edge predicates
  """
  hasDocuments: Boolean
  hasDocumentsWith: [DocumentWhereInput!]
}
type DynoResult implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  rpm: Int!
  powerKw: Float
  torqueNm: Float
  session: DynoSession!
}
"""
DynoResultWhereInput is used for filtering DynoResult objects.
Input was generated by ent.
"""
input DynoResultWhereInput {
  not: DynoResultWhereInput
  and: [DynoResultWhereInput!]
  or: [DynoResultWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  rpm field predicates
  """
  rpm: Int
  rpmNEQ: Int
  rpmIn: [Int!]
  rpmNotIn: [Int!]
  rpmGT: Int
  rpmGTE: Int
  rpmLT: Int
  rpmLTE: Int
  """
  power_kw field predicates
  """
  powerKw: Float
  powerKwNEQ: Float
  powerKwIn: [Float!]
  powerKwNotIn: [Float!]
  powerKwGT: Float
  powerKwGTE: Float
  powerKwLT: Float
  powerKwLTE: Float
  powerKwIsNil: Boolean
  powerKwNotNil: Boolean
  """
  torque_nm field predicates
  """
  torqueNm: Float
  torqueNmNEQ: Float
  torqueNmIn: [Float!]
  torqueNmNotIn: [Float!]
  torqueNmGT: Float
  torqueNmGTE: Float
  torqueNmLT: Float
  torqueNmLTE: Float
  torqueNmIsNil: Boolean
  torqueNmNotNil: Boolean
  """
  session edge predicates
  """
  hasSession: Boolean
  hasSessionWith: [DynoSessionWhereInput!]
}
type DynoSession implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  title: String!
  notes: Map
  car: Car!
  results: [DynoResult!]
  documents: [Document!]
}
"""
DynoSessionWhereInput is used for filtering DynoSession objects.
Input was generated by ent.
"""
input DynoSessionWhereInput {
  not: DynoSessionWhereInput
  and: [DynoSessionWhereInput!]
  or: [DynoSessionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  car edge predicates
  """
  hasCar: Boolean
  hasCarWith: [CarWhereInput!]
  """
  results edge predicates
  """
  hasResults: Boolean
  hasResultsWith: [DynoResultWhereInput!]
  """
  documents edge predicates
  """
  hasDocuments: Boolean
  hasDocumentsWith: [DocumentWhereInput!]
}
type Expense implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  occurredAt: Time!
  type: ExpenseType!
  amount: Float!
  notes: Map
  car: Car!
  fuelUp: FuelUp
  serviceLog: ServiceLog
  documents: [Document!]
}
"""
ExpenseType is enum for the field type
"""
enum ExpenseType @goModel(model: "github.com/Dan6erbond/revline/ent/expense.Type") {
  fuel
  service
  insurance
  tax
  toll
  parking
  loan
  registration
  maintenance
  repair
  upgrade
  cleaning
  accessories
  inspection
  other
}
"""
ExpenseWhereInput is used for filtering Expense objects.
Input was generated by ent.
"""
input ExpenseWhereInput {
  not: ExpenseWhereInput
  and: [ExpenseWhereInput!]
  or: [ExpenseWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  occurred_at field predicates
  """
  occurredAt: Time
  occurredAtNEQ: Time
  occurredAtIn: [Time!]
  occurredAtNotIn: [Time!]
  occurredAtGT: Time
  occurredAtGTE: Time
  occurredAtLT: Time
  occurredAtLTE: Time
  """
  type field predicates
  """
  type: ExpenseType
  typeNEQ: ExpenseType
  typeIn: [ExpenseType!]
  typeNotIn: [ExpenseType!]
  """
  amount field predicates
  """
  amount: Float
  amountNEQ: Float
  amountIn: [Float!]
  amountNotIn: [Float!]
  amountGT: Float
  amountGTE: Float
  amountLT: Float
  amountLTE: Float
  """
  car edge predicates
  """
  hasCar: Boolean
  hasCarWith: [CarWhereInput!]
  """
  fuel_up edge predicates
  """
  hasFuelUp: Boolean
  hasFuelUpWith: [FuelUpWhereInput!]
  """
  service_log edge predicates
  """
  hasServiceLog: Boolean
  hasServiceLogWith: [ServiceLogWhereInput!]
  """
  documents edge predicates
  """
  hasDocuments: Boolean
  hasDocumentsWith: [DocumentWhereInput!]
}
"""
FuelCategory is enum for the field fuel_category
"""
enum FuelCategory @goModel(model: "github.com/Dan6erbond/revline/ent/fuelup.FuelCategory") {
  petrol
  diesel
  electric
  lpg
  other
}
"""
FuelConsumptionUnit is enum for the field fuel_consumption_unit
"""
enum FuelConsumptionUnit @goModel(model: "github.com/Dan6erbond/revline/ent/usersettings.FuelConsumptionUnit") {
  mpg
  imp_mpg
  kpl
  lp100k
}
type FuelUp implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  occurredAt: Time!
  station: String!
  amountLiters: Float!
  fuelCategory: FuelCategory
  octaneRating: OctaneRating
  isFullTank: Boolean!
  notes: Map
  car: Car!
  odometerReading: OdometerReading
  expense: Expense
  documents: [Document!]
}
"""
FuelUpWhereInput is used for filtering FuelUp objects.
Input was generated by ent.
"""
input FuelUpWhereInput {
  not: FuelUpWhereInput
  and: [FuelUpWhereInput!]
  or: [FuelUpWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  occurred_at field predicates
  """
  occurredAt: Time
  occurredAtNEQ: Time
  occurredAtIn: [Time!]
  occurredAtNotIn: [Time!]
  occurredAtGT: Time
  occurredAtGTE: Time
  occurredAtLT: Time
  occurredAtLTE: Time
  """
  station field predicates
  """
  station: String
  stationNEQ: String
  stationIn: [String!]
  stationNotIn: [String!]
  stationGT: String
  stationGTE: String
  stationLT: String
  stationLTE: String
  stationContains: String
  stationHasPrefix: String
  stationHasSuffix: String
  stationEqualFold: String
  stationContainsFold: String
  """
  amount_liters field predicates
  """
  amountLiters: Float
  amountLitersNEQ: Float
  amountLitersIn: [Float!]
  amountLitersNotIn: [Float!]
  amountLitersGT: Float
  amountLitersGTE: Float
  amountLitersLT: Float
  amountLitersLTE: Float
  """
  fuel_category field predicates
  """
  fuelCategory: FuelCategory
  fuelCategoryNEQ: FuelCategory
  fuelCategoryIn: [FuelCategory!]
  fuelCategoryNotIn: [FuelCategory!]
  fuelCategoryIsNil: Boolean
  fuelCategoryNotNil: Boolean
  """
  octane_rating field predicates
  """
  octaneRating: OctaneRating
  octaneRatingNEQ: OctaneRating
  octaneRatingIn: [OctaneRating!]
  octaneRatingNotIn: [OctaneRating!]
  octaneRatingIsNil: Boolean
  octaneRatingNotNil: Boolean
  """
  is_full_tank field predicates
  """
  isFullTank: Boolean
  isFullTankNEQ: Boolean
  """
  car edge predicates
  """
  hasCar: Boolean
  hasCarWith: [CarWhereInput!]
  """
  odometer_reading edge predicates
  """
  hasOdometerReading: Boolean
  hasOdometerReadingWith: [OdometerReadingWhereInput!]
  """
  expense edge predicates
  """
  hasExpense: Boolean
  hasExpenseWith: [ExpenseWhereInput!]
  """
  documents edge predicates
  """
  hasDocuments: Boolean
  hasDocumentsWith: [DocumentWhereInput!]
}
"""
FuelVolumeUnit is enum for the field fuel_volume_unit
"""
enum FuelVolumeUnit @goModel(model: "github.com/Dan6erbond/revline/ent/usersettings.FuelVolumeUnit") {
  liter
  gallon
  imp_gallon
}
"""
The builtin Map type
"""
scalar Map
type Media implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  title: String
  description: String
  user: User
  car: Car
  modProductOption: ModProductOption
  buildLog: [BuildLog!]
  albums: [Album!]
}
"""
MediaWhereInput is used for filtering Media objects.
Input was generated by ent.
"""
input MediaWhereInput {
  not: MediaWhereInput
  and: [MediaWhereInput!]
  or: [MediaWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleIsNil: Boolean
  titleNotNil: Boolean
  titleEqualFold: String
  titleContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  car edge predicates
  """
  hasCar: Boolean
  hasCarWith: [CarWhereInput!]
  """
  mod_product_option edge predicates
  """
  hasModProductOption: Boolean
  hasModProductOptionWith: [ModProductOptionWhereInput!]
  """
  build_log edge predicates
  """
  hasBuildLog: Boolean
  hasBuildLogWith: [BuildLogWhereInput!]
  """
  albums edge predicates
  """
  hasAlbums: Boolean
  hasAlbumsWith: [AlbumWhereInput!]
}
type Mod implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  title: String!
  category: ModCategory!
  status: ModStatus!
  description: String
  stage: String
  car: Car!
  tasks: [Task!]
  productOptions: [ModProductOption!]
  buildLogs: [BuildLog!]
}
"""
ModCategory is enum for the field category
"""
enum ModCategory @goModel(model: "github.com/Dan6erbond/revline/ent/mod.Category") {
  performance
  aesthetic
  utility
}
"""
A connection to a list of items.
"""
type ModConnection {
  """
  A list of edges.
  """
  edges: [ModEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ModEdge {
  """
  The item at the end of the edge.
  """
  node: Mod
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type ModProductOption implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  vendor: String
  name: String
  link: String
  price: Float
  notes: String
  pros: [String!]
  cons: [String!]
  specs: Map
  mod: Mod!
  media: [Media!]
}
"""
ModProductOptionWhereInput is used for filtering ModProductOption objects.
Input was generated by ent.
"""
input ModProductOptionWhereInput {
  not: ModProductOptionWhereInput
  and: [ModProductOptionWhereInput!]
  or: [ModProductOptionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  vendor field predicates
  """
  vendor: String
  vendorNEQ: String
  vendorIn: [String!]
  vendorNotIn: [String!]
  vendorGT: String
  vendorGTE: String
  vendorLT: String
  vendorLTE: String
  vendorContains: String
  vendorHasPrefix: String
  vendorHasSuffix: String
  vendorIsNil: Boolean
  vendorNotNil: Boolean
  vendorEqualFold: String
  vendorContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  link field predicates
  """
  link: String
  linkNEQ: String
  linkIn: [String!]
  linkNotIn: [String!]
  linkGT: String
  linkGTE: String
  linkLT: String
  linkLTE: String
  linkContains: String
  linkHasPrefix: String
  linkHasSuffix: String
  linkIsNil: Boolean
  linkNotNil: Boolean
  linkEqualFold: String
  linkContainsFold: String
  """
  price field predicates
  """
  price: Float
  priceNEQ: Float
  priceIn: [Float!]
  priceNotIn: [Float!]
  priceGT: Float
  priceGTE: Float
  priceLT: Float
  priceLTE: Float
  priceIsNil: Boolean
  priceNotNil: Boolean
  """
  notes field predicates
  """
  notes: String
  notesNEQ: String
  notesIn: [String!]
  notesNotIn: [String!]
  notesGT: String
  notesGTE: String
  notesLT: String
  notesLTE: String
  notesContains: String
  notesHasPrefix: String
  notesHasSuffix: String
  notesIsNil: Boolean
  notesNotNil: Boolean
  notesEqualFold: String
  notesContainsFold: String
  """
  mod edge predicates
  """
  hasMod: Boolean
  hasModWith: [ModWhereInput!]
  """
  media edge predicates
  """
  hasMedia: Boolean
  hasMediaWith: [MediaWhereInput!]
}
"""
ModStatus is enum for the field status
"""
enum ModStatus @goModel(model: "github.com/Dan6erbond/revline/ent/mod.Status") {
  idea
  planned
  completed
}
"""
ModWhereInput is used for filtering Mod objects.
Input was generated by ent.
"""
input ModWhereInput {
  not: ModWhereInput
  and: [ModWhereInput!]
  or: [ModWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  category field predicates
  """
  category: ModCategory
  categoryNEQ: ModCategory
  categoryIn: [ModCategory!]
  categoryNotIn: [ModCategory!]
  """
  status field predicates
  """
  status: ModStatus
  statusNEQ: ModStatus
  statusIn: [ModStatus!]
  statusNotIn: [ModStatus!]
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  stage field predicates
  """
  stage: String
  stageNEQ: String
  stageIn: [String!]
  stageNotIn: [String!]
  stageGT: String
  stageGTE: String
  stageLT: String
  stageLTE: String
  stageContains: String
  stageHasPrefix: String
  stageHasSuffix: String
  stageIsNil: Boolean
  stageNotNil: Boolean
  stageEqualFold: String
  stageContainsFold: String
  """
  car edge predicates
  """
  hasCar: Boolean
  hasCarWith: [CarWhereInput!]
  """
  tasks edge predicates
  """
  hasTasks: Boolean
  hasTasksWith: [TaskWhereInput!]
  """
  product_options edge predicates
  """
  hasProductOptions: Boolean
  hasProductOptionsWith: [ModProductOptionWhereInput!]
  """
  build_logs edge predicates
  """
  hasBuildLogs: Boolean
  hasBuildLogsWith: [BuildLogWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/Dan6erbond/revline/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
OctaneRating is enum for the field octane_rating
"""
enum OctaneRating @goModel(model: "github.com/Dan6erbond/revline/ent/fuelup.OctaneRating") {
  ron91
  ron95
  ron98
  ron100
  e85
  race
}
type OdometerReading implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  readingKm: Float!
  readingTime: Time!
  notes: String
  car: Car!
  fuelUp: FuelUp
  serviceLog: ServiceLog
}
"""
OdometerReadingWhereInput is used for filtering OdometerReading objects.
Input was generated by ent.
"""
input OdometerReadingWhereInput {
  not: OdometerReadingWhereInput
  and: [OdometerReadingWhereInput!]
  or: [OdometerReadingWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  reading_km field predicates
  """
  readingKm: Float
  readingKmNEQ: Float
  readingKmIn: [Float!]
  readingKmNotIn: [Float!]
  readingKmGT: Float
  readingKmGTE: Float
  readingKmLT: Float
  readingKmLTE: Float
  """
  reading_time field predicates
  """
  readingTime: Time
  readingTimeNEQ: Time
  readingTimeIn: [Time!]
  readingTimeNotIn: [Time!]
  readingTimeGT: Time
  readingTimeGTE: Time
  readingTimeLT: Time
  readingTimeLTE: Time
  """
  notes field predicates
  """
  notes: String
  notesNEQ: String
  notesIn: [String!]
  notesNotIn: [String!]
  notesGT: String
  notesGTE: String
  notesLT: String
  notesLTE: String
  notesContains: String
  notesHasPrefix: String
  notesHasSuffix: String
  notesIsNil: Boolean
  notesNotNil: Boolean
  notesEqualFold: String
  notesContainsFold: String
  """
  car edge predicates
  """
  hasCar: Boolean
  hasCarWith: [CarWhereInput!]
  """
  fuel_up edge predicates
  """
  hasFuelUp: Boolean
  hasFuelUpWith: [FuelUpWhereInput!]
  """
  service_log edge predicates
  """
  hasServiceLog: Boolean
  hasServiceLogWith: [ServiceLogWhereInput!]
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
"""
PowerUnit is enum for the field power_unit
"""
enum PowerUnit @goModel(model: "github.com/Dan6erbond/revline/ent/usersettings.PowerUnit") {
  metric_horsepower
  mech_horsepower
  kilowatts
  imp_horsepower
  electric_horsepower
}
type Profile implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  username: String
  firstName: String
  lastName: String
  visibility: ProfileVisibility!
  user: User!
}
"""
ProfileVisibility is enum for the field visibility
"""
enum ProfileVisibility @goModel(model: "github.com/Dan6erbond/revline/ent/profile.Visibility") {
  public
  private
}
"""
ProfileWhereInput is used for filtering Profile objects.
Input was generated by ent.
"""
input ProfileWhereInput {
  not: ProfileWhereInput
  and: [ProfileWhereInput!]
  or: [ProfileWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  username field predicates
  """
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameIsNil: Boolean
  usernameNotNil: Boolean
  usernameEqualFold: String
  usernameContainsFold: String
  """
  first_name field predicates
  """
  firstName: String
  firstNameNEQ: String
  firstNameIn: [String!]
  firstNameNotIn: [String!]
  firstNameGT: String
  firstNameGTE: String
  firstNameLT: String
  firstNameLTE: String
  firstNameContains: String
  firstNameHasPrefix: String
  firstNameHasSuffix: String
  firstNameIsNil: Boolean
  firstNameNotNil: Boolean
  firstNameEqualFold: String
  firstNameContainsFold: String
  """
  last_name field predicates
  """
  lastName: String
  lastNameNEQ: String
  lastNameIn: [String!]
  lastNameNotIn: [String!]
  lastNameGT: String
  lastNameGTE: String
  lastNameLT: String
  lastNameLTE: String
  lastNameContains: String
  lastNameHasPrefix: String
  lastNameHasSuffix: String
  lastNameIsNil: Boolean
  lastNameNotNil: Boolean
  lastNameEqualFold: String
  lastNameContainsFold: String
  """
  visibility field predicates
  """
  visibility: ProfileVisibility
  visibilityNEQ: ProfileVisibility
  visibilityIn: [ProfileVisibility!]
  visibilityNotIn: [ProfileVisibility!]
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
}
type ServiceItem implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  label: String!
  estimatedMinutes: Int
  defaultIntervalKm: Float
  defaultIntervalMonths: Int
  notes: String
  tags: [String!]!
  car: Car!
  schedules: [ServiceSchedule!]
  logs: [ServiceLog!]
}
"""
ServiceItemWhereInput is used for filtering ServiceItem objects.
Input was generated by ent.
"""
input ServiceItemWhereInput {
  not: ServiceItemWhereInput
  and: [ServiceItemWhereInput!]
  or: [ServiceItemWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  label field predicates
  """
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelEqualFold: String
  labelContainsFold: String
  """
  estimated_minutes field predicates
  """
  estimatedMinutes: Int
  estimatedMinutesNEQ: Int
  estimatedMinutesIn: [Int!]
  estimatedMinutesNotIn: [Int!]
  estimatedMinutesGT: Int
  estimatedMinutesGTE: Int
  estimatedMinutesLT: Int
  estimatedMinutesLTE: Int
  estimatedMinutesIsNil: Boolean
  estimatedMinutesNotNil: Boolean
  """
  default_interval_km field predicates
  """
  defaultIntervalKm: Float
  defaultIntervalKmNEQ: Float
  defaultIntervalKmIn: [Float!]
  defaultIntervalKmNotIn: [Float!]
  defaultIntervalKmGT: Float
  defaultIntervalKmGTE: Float
  defaultIntervalKmLT: Float
  defaultIntervalKmLTE: Float
  defaultIntervalKmIsNil: Boolean
  defaultIntervalKmNotNil: Boolean
  """
  default_interval_months field predicates
  """
  defaultIntervalMonths: Int
  defaultIntervalMonthsNEQ: Int
  defaultIntervalMonthsIn: [Int!]
  defaultIntervalMonthsNotIn: [Int!]
  defaultIntervalMonthsGT: Int
  defaultIntervalMonthsGTE: Int
  defaultIntervalMonthsLT: Int
  defaultIntervalMonthsLTE: Int
  defaultIntervalMonthsIsNil: Boolean
  defaultIntervalMonthsNotNil: Boolean
  """
  notes field predicates
  """
  notes: String
  notesNEQ: String
  notesIn: [String!]
  notesNotIn: [String!]
  notesGT: String
  notesGTE: String
  notesLT: String
  notesLTE: String
  notesContains: String
  notesHasPrefix: String
  notesHasSuffix: String
  notesIsNil: Boolean
  notesNotNil: Boolean
  notesEqualFold: String
  notesContainsFold: String
  """
  car edge predicates
  """
  hasCar: Boolean
  hasCarWith: [CarWhereInput!]
  """
  schedules edge predicates
  """
  hasSchedules: Boolean
  hasSchedulesWith: [ServiceScheduleWhereInput!]
  """
  logs edge predicates
  """
  hasLogs: Boolean
  hasLogsWith: [ServiceLogWhereInput!]
}
type ServiceLog implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  datePerformed: Time!
  performedBy: String
  notes: String
  car: Car!
  items: [ServiceItem!]
  schedule: ServiceSchedule
  odometerReading: OdometerReading
  expense: Expense
  documents: [Document!]
}
"""
ServiceLogWhereInput is used for filtering ServiceLog objects.
Input was generated by ent.
"""
input ServiceLogWhereInput {
  not: ServiceLogWhereInput
  and: [ServiceLogWhereInput!]
  or: [ServiceLogWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  date_performed field predicates
  """
  datePerformed: Time
  datePerformedNEQ: Time
  datePerformedIn: [Time!]
  datePerformedNotIn: [Time!]
  datePerformedGT: Time
  datePerformedGTE: Time
  datePerformedLT: Time
  datePerformedLTE: Time
  """
  performed_by field predicates
  """
  performedBy: String
  performedByNEQ: String
  performedByIn: [String!]
  performedByNotIn: [String!]
  performedByGT: String
  performedByGTE: String
  performedByLT: String
  performedByLTE: String
  performedByContains: String
  performedByHasPrefix: String
  performedByHasSuffix: String
  performedByIsNil: Boolean
  performedByNotNil: Boolean
  performedByEqualFold: String
  performedByContainsFold: String
  """
  notes field predicates
  """
  notes: String
  notesNEQ: String
  notesIn: [String!]
  notesNotIn: [String!]
  notesGT: String
  notesGTE: String
  notesLT: String
  notesLTE: String
  notesContains: String
  notesHasPrefix: String
  notesHasSuffix: String
  notesIsNil: Boolean
  notesNotNil: Boolean
  notesEqualFold: String
  notesContainsFold: String
  """
  car edge predicates
  """
  hasCar: Boolean
  hasCarWith: [CarWhereInput!]
  """
  items edge predicates
  """
  hasItems: Boolean
  hasItemsWith: [ServiceItemWhereInput!]
  """
  schedule edge predicates
  """
  hasSchedule: Boolean
  hasScheduleWith: [ServiceScheduleWhereInput!]
  """
  odometer_reading edge predicates
  """
  hasOdometerReading: Boolean
  hasOdometerReadingWith: [OdometerReadingWhereInput!]
  """
  expense edge predicates
  """
  hasExpense: Boolean
  hasExpenseWith: [ExpenseWhereInput!]
  """
  documents edge predicates
  """
  hasDocuments: Boolean
  hasDocumentsWith: [DocumentWhereInput!]
}
type ServiceSchedule implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  title: String!
  repeatEveryKm: Float
  startsAtKm: Float
  repeatEveryMonths: Int
  startsAtMonths: Int
  notes: String
  archived: Boolean!
  car: Car!
  items: [ServiceItem!]
  logs: [ServiceLog!]
}
"""
ServiceScheduleWhereInput is used for filtering ServiceSchedule objects.
Input was generated by ent.
"""
input ServiceScheduleWhereInput {
  not: ServiceScheduleWhereInput
  and: [ServiceScheduleWhereInput!]
  or: [ServiceScheduleWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  repeat_every_km field predicates
  """
  repeatEveryKm: Float
  repeatEveryKmNEQ: Float
  repeatEveryKmIn: [Float!]
  repeatEveryKmNotIn: [Float!]
  repeatEveryKmGT: Float
  repeatEveryKmGTE: Float
  repeatEveryKmLT: Float
  repeatEveryKmLTE: Float
  repeatEveryKmIsNil: Boolean
  repeatEveryKmNotNil: Boolean
  """
  starts_at_km field predicates
  """
  startsAtKm: Float
  startsAtKmNEQ: Float
  startsAtKmIn: [Float!]
  startsAtKmNotIn: [Float!]
  startsAtKmGT: Float
  startsAtKmGTE: Float
  startsAtKmLT: Float
  startsAtKmLTE: Float
  startsAtKmIsNil: Boolean
  startsAtKmNotNil: Boolean
  """
  repeat_every_months field predicates
  """
  repeatEveryMonths: Int
  repeatEveryMonthsNEQ: Int
  repeatEveryMonthsIn: [Int!]
  repeatEveryMonthsNotIn: [Int!]
  repeatEveryMonthsGT: Int
  repeatEveryMonthsGTE: Int
  repeatEveryMonthsLT: Int
  repeatEveryMonthsLTE: Int
  repeatEveryMonthsIsNil: Boolean
  repeatEveryMonthsNotNil: Boolean
  """
  starts_at_months field predicates
  """
  startsAtMonths: Int
  startsAtMonthsNEQ: Int
  startsAtMonthsIn: [Int!]
  startsAtMonthsNotIn: [Int!]
  startsAtMonthsGT: Int
  startsAtMonthsGTE: Int
  startsAtMonthsLT: Int
  startsAtMonthsLTE: Int
  startsAtMonthsIsNil: Boolean
  startsAtMonthsNotNil: Boolean
  """
  notes field predicates
  """
  notes: String
  notesNEQ: String
  notesIn: [String!]
  notesNotIn: [String!]
  notesGT: String
  notesGTE: String
  notesLT: String
  notesLTE: String
  notesContains: String
  notesHasPrefix: String
  notesHasSuffix: String
  notesIsNil: Boolean
  notesNotNil: Boolean
  notesEqualFold: String
  notesContainsFold: String
  """
  archived field predicates
  """
  archived: Boolean
  archivedNEQ: Boolean
  """
  car edge predicates
  """
  hasCar: Boolean
  hasCarWith: [CarWhereInput!]
  """
  items edge predicates
  """
  hasItems: Boolean
  hasItemsWith: [ServiceItemWhereInput!]
  """
  logs edge predicates
  """
  hasLogs: Boolean
  hasLogsWith: [ServiceLogWhereInput!]
}
type SubscriptionPlan implements Node @goModel(model: "github.com/Dan6erbond/revline/ent.Subscription") {
  id: ID!
  createTime: Time!
  updateTime: Time!
  stripeSubscriptionID: String
  tier: SubscriptionTier!
  status: SubscriptionStatus!
  canceledAt: Time
  cancelAtPeriodEnd: Boolean!
  trialEnd: Time
  affiliate6moCode: String
  affiliate12moCode: String
  user: User!
  checkoutSession: CheckoutSession
}
"""
SubscriptionPlanWhereInput is used for filtering Subscription objects.
Input was generated by ent.
"""
input SubscriptionPlanWhereInput {
  not: SubscriptionPlanWhereInput
  and: [SubscriptionPlanWhereInput!]
  or: [SubscriptionPlanWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  stripe_subscription_id field predicates
  """
  stripeSubscriptionID: String
  stripeSubscriptionIDNEQ: String
  stripeSubscriptionIDIn: [String!]
  stripeSubscriptionIDNotIn: [String!]
  stripeSubscriptionIDGT: String
  stripeSubscriptionIDGTE: String
  stripeSubscriptionIDLT: String
  stripeSubscriptionIDLTE: String
  stripeSubscriptionIDContains: String
  stripeSubscriptionIDHasPrefix: String
  stripeSubscriptionIDHasSuffix: String
  stripeSubscriptionIDIsNil: Boolean
  stripeSubscriptionIDNotNil: Boolean
  stripeSubscriptionIDEqualFold: String
  stripeSubscriptionIDContainsFold: String
  """
  tier field predicates
  """
  tier: SubscriptionTier
  tierNEQ: SubscriptionTier
  tierIn: [SubscriptionTier!]
  tierNotIn: [SubscriptionTier!]
  """
  status field predicates
  """
  status: SubscriptionStatus
  statusNEQ: SubscriptionStatus
  statusIn: [SubscriptionStatus!]
  statusNotIn: [SubscriptionStatus!]
  """
  canceled_at field predicates
  """
  canceledAt: Time
  canceledAtNEQ: Time
  canceledAtIn: [Time!]
  canceledAtNotIn: [Time!]
  canceledAtGT: Time
  canceledAtGTE: Time
  canceledAtLT: Time
  canceledAtLTE: Time
  canceledAtIsNil: Boolean
  canceledAtNotNil: Boolean
  """
  cancel_at_period_end field predicates
  """
  cancelAtPeriodEnd: Boolean
  cancelAtPeriodEndNEQ: Boolean
  """
  trial_end field predicates
  """
  trialEnd: Time
  trialEndNEQ: Time
  trialEndIn: [Time!]
  trialEndNotIn: [Time!]
  trialEndGT: Time
  trialEndGTE: Time
  trialEndLT: Time
  trialEndLTE: Time
  trialEndIsNil: Boolean
  trialEndNotNil: Boolean
  """
  affiliate_6mo_code field predicates
  """
  affiliate6moCode: String
  affiliate6moCodeNEQ: String
  affiliate6moCodeIn: [String!]
  affiliate6moCodeNotIn: [String!]
  affiliate6moCodeGT: String
  affiliate6moCodeGTE: String
  affiliate6moCodeLT: String
  affiliate6moCodeLTE: String
  affiliate6moCodeContains: String
  affiliate6moCodeHasPrefix: String
  affiliate6moCodeHasSuffix: String
  affiliate6moCodeIsNil: Boolean
  affiliate6moCodeNotNil: Boolean
  affiliate6moCodeEqualFold: String
  affiliate6moCodeContainsFold: String
  """
  affiliate_12mo_code field predicates
  """
  affiliate12moCode: String
  affiliate12moCodeNEQ: String
  affiliate12moCodeIn: [String!]
  affiliate12moCodeNotIn: [String!]
  affiliate12moCodeGT: String
  affiliate12moCodeGTE: String
  affiliate12moCodeLT: String
  affiliate12moCodeLTE: String
  affiliate12moCodeContains: String
  affiliate12moCodeHasPrefix: String
  affiliate12moCodeHasSuffix: String
  affiliate12moCodeIsNil: Boolean
  affiliate12moCodeNotNil: Boolean
  affiliate12moCodeEqualFold: String
  affiliate12moCodeContainsFold: String
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  checkout_session edge predicates
  """
  hasCheckoutSession: Boolean
  hasCheckoutSessionWith: [CheckoutSessionWhereInput!]
}
"""
SubscriptionStatus is enum for the field status
"""
enum SubscriptionStatus @goModel(model: "github.com/Dan6erbond/revline/ent/subscription.Status") {
  active
  trialing
  canceled
  incomplete
  incomplete_expired
  past_due
  unpaid
}
"""
SubscriptionTier is enum for the field tier
"""
enum SubscriptionTier @goModel(model: "github.com/Dan6erbond/revline/ent/subscription.Tier") {
  diy
  enthusiast
}
type Task implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  status: TaskStatus!
  title: String!
  description: String
  rank: Float!
  estimate: Float
  priority: TaskPriority
  effort: TaskEffort
  difficulty: TaskDifficulty
  category: TaskCategory
  budget: Float
  partsNeeded: String
  car: Car!
  parent: Task
  subtasks: [Task!]
  mods: [Mod!]
}
"""
TaskCategory is enum for the field category
"""
enum TaskCategory @goModel(model: "github.com/Dan6erbond/revline/ent/task.Category") {
  maintenance
  service
  repair
  modification
  cosmetic
  cleaning
  detailing
  inspection
  registration
  insurance
  accessory
  diagnostics
  other
}
"""
A connection to a list of items.
"""
type TaskConnection {
  """
  A list of edges.
  """
  edges: [TaskEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
TaskDifficulty is enum for the field difficulty
"""
enum TaskDifficulty @goModel(model: "github.com/Dan6erbond/revline/ent/task.Difficulty") {
  beginner
  intermediate
  advanced
  expert
}
"""
An edge in a connection.
"""
type TaskEdge {
  """
  The item at the end of the edge.
  """
  node: Task
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
TaskEffort is enum for the field effort
"""
enum TaskEffort @goModel(model: "github.com/Dan6erbond/revline/ent/task.Effort") {
  trivial
  easy
  moderate
  hard
  extreme
}
"""
Ordering options for Task connections
"""
input TaskOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Tasks.
  """
  field: TaskOrderField!
}
"""
Properties by which Task connections can be ordered.
"""
enum TaskOrderField {
  ID
  STATUS
  TITLE
  DESCRIPTION
  RANK
  ESTIMATE
  PRIORITY
  EFFORT
  DIFFICULTY
  CATEGORY
  BUDGET
  PARTS_NEEDED
}
"""
TaskPriority is enum for the field priority
"""
enum TaskPriority @goModel(model: "github.com/Dan6erbond/revline/ent/task.Priority") {
  low
  mid
  high
  urgent
}
"""
TaskStatus is enum for the field status
"""
enum TaskStatus @goModel(model: "github.com/Dan6erbond/revline/ent/task.Status") {
  backlog
  todo
  in_progress
  blocked
  completed
}
"""
TaskWhereInput is used for filtering Task objects.
Input was generated by ent.
"""
input TaskWhereInput {
  not: TaskWhereInput
  and: [TaskWhereInput!]
  or: [TaskWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  status field predicates
  """
  status: TaskStatus
  statusNEQ: TaskStatus
  statusIn: [TaskStatus!]
  statusNotIn: [TaskStatus!]
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  rank field predicates
  """
  rank: Float
  rankNEQ: Float
  rankIn: [Float!]
  rankNotIn: [Float!]
  rankGT: Float
  rankGTE: Float
  rankLT: Float
  rankLTE: Float
  """
  estimate field predicates
  """
  estimate: Float
  estimateNEQ: Float
  estimateIn: [Float!]
  estimateNotIn: [Float!]
  estimateGT: Float
  estimateGTE: Float
  estimateLT: Float
  estimateLTE: Float
  estimateIsNil: Boolean
  estimateNotNil: Boolean
  """
  priority field predicates
  """
  priority: TaskPriority
  priorityNEQ: TaskPriority
  priorityIn: [TaskPriority!]
  priorityNotIn: [TaskPriority!]
  priorityIsNil: Boolean
  priorityNotNil: Boolean
  """
  effort field predicates
  """
  effort: TaskEffort
  effortNEQ: TaskEffort
  effortIn: [TaskEffort!]
  effortNotIn: [TaskEffort!]
  effortIsNil: Boolean
  effortNotNil: Boolean
  """
  difficulty field predicates
  """
  difficulty: TaskDifficulty
  difficultyNEQ: TaskDifficulty
  difficultyIn: [TaskDifficulty!]
  difficultyNotIn: [TaskDifficulty!]
  difficultyIsNil: Boolean
  difficultyNotNil: Boolean
  """
  category field predicates
  """
  category: TaskCategory
  categoryNEQ: TaskCategory
  categoryIn: [TaskCategory!]
  categoryNotIn: [TaskCategory!]
  categoryIsNil: Boolean
  categoryNotNil: Boolean
  """
  budget field predicates
  """
  budget: Float
  budgetNEQ: Float
  budgetIn: [Float!]
  budgetNotIn: [Float!]
  budgetGT: Float
  budgetGTE: Float
  budgetLT: Float
  budgetLTE: Float
  budgetIsNil: Boolean
  budgetNotNil: Boolean
  """
  parts_needed field predicates
  """
  partsNeeded: String
  partsNeededNEQ: String
  partsNeededIn: [String!]
  partsNeededNotIn: [String!]
  partsNeededGT: String
  partsNeededGTE: String
  partsNeededLT: String
  partsNeededLTE: String
  partsNeededContains: String
  partsNeededHasPrefix: String
  partsNeededHasSuffix: String
  partsNeededIsNil: Boolean
  partsNeededNotNil: Boolean
  partsNeededEqualFold: String
  partsNeededContainsFold: String
  """
  car edge predicates
  """
  hasCar: Boolean
  hasCarWith: [CarWhereInput!]
  """
  parent edge predicates
  """
  hasParent: Boolean
  hasParentWith: [TaskWhereInput!]
  """
  subtasks edge predicates
  """
  hasSubtasks: Boolean
  hasSubtasksWith: [TaskWhereInput!]
  """
  mods edge predicates
  """
  hasMods: Boolean
  hasModsWith: [ModWhereInput!]
}
"""
TemperatureUnit is enum for the field temperature_unit
"""
enum TemperatureUnit @goModel(model: "github.com/Dan6erbond/revline/ent/usersettings.TemperatureUnit") {
  celsius
  fahrenheit
}
"""
The builtin Time type
"""
scalar Time
"""
TorqueUnit is enum for the field torque_unit
"""
enum TorqueUnit @goModel(model: "github.com/Dan6erbond/revline/ent/usersettings.TorqueUnit") {
  newton_meters
  pound_feet
  kilogram_meter
}
"""
UpdateAlbumInput is used for update Album object.
Input was generated by ent.
"""
input UpdateAlbumInput {
  updateTime: Time
  title: String
  carID: ID
  addMediumIDs: [ID!]
  removeMediumIDs: [ID!]
  clearMedia: Boolean
}
"""
UpdateBuildLogInput is used for update BuildLog object.
Input was generated by ent.
"""
input UpdateBuildLogInput {
  updateTime: Time
  title: String
  notes: Map
  clearNotes: Boolean
  logTime: Time
  carID: ID
  addModIDs: [ID!]
  removeModIDs: [ID!]
  clearMods: Boolean
  addMediumIDs: [ID!]
  removeMediumIDs: [ID!]
  clearMedia: Boolean
}
"""
UpdateCarInput is used for update Car object.
Input was generated by ent.
"""
input UpdateCarInput {
  updateTime: Time
  name: String
  make: String
  clearMake: Boolean
  model: String
  clearModel: Boolean
  type: String
  clearType: Boolean
  year: Int
  clearYear: Boolean
  trim: String
  clearTrim: Boolean
  ownerID: ID
  addDragSessionIDs: [ID!]
  removeDragSessionIDs: [ID!]
  clearDragSessions: Boolean
  addFuelUpIDs: [ID!]
  removeFuelUpIDs: [ID!]
  clearFuelUps: Boolean
  addOdometerReadingIDs: [ID!]
  removeOdometerReadingIDs: [ID!]
  clearOdometerReadings: Boolean
  addServiceItemIDs: [ID!]
  removeServiceItemIDs: [ID!]
  clearServiceItems: Boolean
  addServiceLogIDs: [ID!]
  removeServiceLogIDs: [ID!]
  clearServiceLogs: Boolean
  addServiceScheduleIDs: [ID!]
  removeServiceScheduleIDs: [ID!]
  clearServiceSchedules: Boolean
  addMediumIDs: [ID!]
  removeMediumIDs: [ID!]
  clearMedia: Boolean
  addAlbumIDs: [ID!]
  removeAlbumIDs: [ID!]
  clearAlbums: Boolean
  addDocumentIDs: [ID!]
  removeDocumentIDs: [ID!]
  clearDocuments: Boolean
  addDynoSessionIDs: [ID!]
  removeDynoSessionIDs: [ID!]
  clearDynoSessions: Boolean
  addExpenseIDs: [ID!]
  removeExpenseIDs: [ID!]
  clearExpenses: Boolean
  addBuildLogIDs: [ID!]
  removeBuildLogIDs: [ID!]
  clearBuildLogs: Boolean
  bannerImageID: ID
  clearBannerImage: Boolean
  addTaskIDs: [ID!]
  removeTaskIDs: [ID!]
  clearTasks: Boolean
  addModIDs: [ID!]
  removeModIDs: [ID!]
  clearMods: Boolean
}
"""
UpdateDocumentInput is used for update Document object.
Input was generated by ent.
"""
input UpdateDocumentInput {
  updateTime: Time
  name: String
  tags: [String!]
  appendTags: [String!]
  carID: ID
  clearCar: Boolean
  expenseID: ID
  clearExpense: Boolean
  fuelUpID: ID
  clearFuelUp: Boolean
  serviceLogID: ID
  clearServiceLog: Boolean
  dragSessionID: ID
  clearDragSession: Boolean
  dynoSessionID: ID
  clearDynoSession: Boolean
}
"""
UpdateDragResultInput is used for update DragResult object.
Input was generated by ent.
"""
input UpdateDragResultInput {
  updateTime: Time
  unit: DragResultUnit
  value: Float
  result: Float
  sessionID: ID
}
"""
UpdateDragSessionInput is used for update DragSession object.
Input was generated by ent.
"""
input UpdateDragSessionInput {
  updateTime: Time
  title: String
  notes: Map
  clearNotes: Boolean
  carID: ID
  addResultIDs: [ID!]
  removeResultIDs: [ID!]
  clearResults: Boolean
  addDocumentIDs: [ID!]
  removeDocumentIDs: [ID!]
  clearDocuments: Boolean
}
"""
UpdateDynoResultInput is used for update DynoResult object.
Input was generated by ent.
"""
input UpdateDynoResultInput {
  updateTime: Time
  rpm: Int
  powerKw: Float
  clearPowerKw: Boolean
  torqueNm: Float
  clearTorqueNm: Boolean
  sessionID: ID
}
"""
UpdateDynoSessionInput is used for update DynoSession object.
Input was generated by ent.
"""
input UpdateDynoSessionInput {
  updateTime: Time
  title: String
  notes: Map
  clearNotes: Boolean
  carID: ID
  addResultIDs: [ID!]
  removeResultIDs: [ID!]
  clearResults: Boolean
  addDocumentIDs: [ID!]
  removeDocumentIDs: [ID!]
  clearDocuments: Boolean
}
"""
UpdateExpenseInput is used for update Expense object.
Input was generated by ent.
"""
input UpdateExpenseInput {
  updateTime: Time
  occurredAt: Time
  type: ExpenseType
  amount: Float
  notes: Map
  clearNotes: Boolean
  carID: ID
  fuelUpID: ID
  clearFuelUp: Boolean
  serviceLogID: ID
  clearServiceLog: Boolean
  addDocumentIDs: [ID!]
  removeDocumentIDs: [ID!]
  clearDocuments: Boolean
}
"""
UpdateFuelUpInput is used for update FuelUp object.
Input was generated by ent.
"""
input UpdateFuelUpInput {
  updateTime: Time
  occurredAt: Time
  station: String
  amountLiters: Float
  fuelCategory: FuelCategory
  clearFuelCategory: Boolean
  octaneRating: OctaneRating
  clearOctaneRating: Boolean
  isFullTank: Boolean
  notes: Map
  clearNotes: Boolean
  carID: ID
  odometerReadingID: ID
  clearOdometerReading: Boolean
  expenseID: ID
  clearExpense: Boolean
  addDocumentIDs: [ID!]
  removeDocumentIDs: [ID!]
  clearDocuments: Boolean
}
"""
UpdateMediaInput is used for update Media object.
Input was generated by ent.
"""
input UpdateMediaInput {
  updateTime: Time
  title: String
  clearTitle: Boolean
  description: String
  clearDescription: Boolean
  userID: ID
  clearUser: Boolean
  carID: ID
  clearCar: Boolean
  modProductOptionID: ID
  clearModProductOption: Boolean
  addBuildLogIDs: [ID!]
  removeBuildLogIDs: [ID!]
  clearBuildLog: Boolean
  addAlbumIDs: [ID!]
  removeAlbumIDs: [ID!]
  clearAlbums: Boolean
}
"""
UpdateModInput is used for update Mod object.
Input was generated by ent.
"""
input UpdateModInput {
  updateTime: Time
  title: String
  category: ModCategory
  status: ModStatus
  description: String
  clearDescription: Boolean
  stage: String
  clearStage: Boolean
  carID: ID
  addTaskIDs: [ID!]
  removeTaskIDs: [ID!]
  clearTasks: Boolean
  addProductOptionIDs: [ID!]
  removeProductOptionIDs: [ID!]
  clearProductOptions: Boolean
  addBuildLogIDs: [ID!]
  removeBuildLogIDs: [ID!]
  clearBuildLogs: Boolean
}
"""
UpdateModProductOptionInput is used for update ModProductOption object.
Input was generated by ent.
"""
input UpdateModProductOptionInput {
  updateTime: Time
  vendor: String
  clearVendor: Boolean
  name: String
  clearName: Boolean
  link: String
  clearLink: Boolean
  price: Float
  clearPrice: Boolean
  notes: String
  clearNotes: Boolean
  pros: [String!]
  appendPros: [String!]
  clearPros: Boolean
  cons: [String!]
  appendCons: [String!]
  clearCons: Boolean
  specs: Map
  clearSpecs: Boolean
  modID: ID
  addMediumIDs: [ID!]
  removeMediumIDs: [ID!]
  clearMedia: Boolean
}
"""
UpdateOdometerReadingInput is used for update OdometerReading object.
Input was generated by ent.
"""
input UpdateOdometerReadingInput {
  updateTime: Time
  readingKm: Float
  readingTime: Time
  notes: String
  clearNotes: Boolean
  carID: ID
  fuelUpID: ID
  clearFuelUp: Boolean
  serviceLogID: ID
  clearServiceLog: Boolean
}
"""
UpdateProfileInput is used for update Profile object.
Input was generated by ent.
"""
input UpdateProfileInput {
  updateTime: Time
  username: String
  clearUsername: Boolean
  firstName: String
  clearFirstName: Boolean
  lastName: String
  clearLastName: Boolean
  visibility: ProfileVisibility
  userID: ID
}
"""
UpdateServiceItemInput is used for update ServiceItem object.
Input was generated by ent.
"""
input UpdateServiceItemInput {
  updateTime: Time
  label: String
  estimatedMinutes: Int
  clearEstimatedMinutes: Boolean
  defaultIntervalKm: Float
  clearDefaultIntervalKm: Boolean
  defaultIntervalMonths: Int
  clearDefaultIntervalMonths: Boolean
  notes: String
  clearNotes: Boolean
  tags: [String!]
  appendTags: [String!]
  carID: ID
  addScheduleIDs: [ID!]
  removeScheduleIDs: [ID!]
  clearSchedules: Boolean
  addLogIDs: [ID!]
  removeLogIDs: [ID!]
  clearLogs: Boolean
}
"""
UpdateServiceLogInput is used for update ServiceLog object.
Input was generated by ent.
"""
input UpdateServiceLogInput {
  updateTime: Time
  datePerformed: Time
  performedBy: String
  clearPerformedBy: Boolean
  notes: String
  clearNotes: Boolean
  carID: ID
  addItemIDs: [ID!]
  removeItemIDs: [ID!]
  clearItems: Boolean
  scheduleID: ID
  clearSchedule: Boolean
  odometerReadingID: ID
  clearOdometerReading: Boolean
  expenseID: ID
  clearExpense: Boolean
  addDocumentIDs: [ID!]
  removeDocumentIDs: [ID!]
  clearDocuments: Boolean
}
"""
UpdateServiceScheduleInput is used for update ServiceSchedule object.
Input was generated by ent.
"""
input UpdateServiceScheduleInput {
  updateTime: Time
  title: String
  repeatEveryKm: Float
  clearRepeatEveryKm: Boolean
  startsAtKm: Float
  clearStartsAtKm: Boolean
  repeatEveryMonths: Int
  clearRepeatEveryMonths: Boolean
  startsAtMonths: Int
  clearStartsAtMonths: Boolean
  notes: String
  clearNotes: Boolean
  archived: Boolean
  carID: ID
  addItemIDs: [ID!]
  removeItemIDs: [ID!]
  clearItems: Boolean
  addLogIDs: [ID!]
  removeLogIDs: [ID!]
  clearLogs: Boolean
}
"""
UpdateTaskInput is used for update Task object.
Input was generated by ent.
"""
input UpdateTaskInput {
  updateTime: Time
  status: TaskStatus
  title: String
  description: String
  clearDescription: Boolean
  rank: Float
  estimate: Float
  clearEstimate: Boolean
  priority: TaskPriority
  clearPriority: Boolean
  effort: TaskEffort
  clearEffort: Boolean
  difficulty: TaskDifficulty
  clearDifficulty: Boolean
  category: TaskCategory
  clearCategory: Boolean
  budget: Float
  clearBudget: Boolean
  partsNeeded: String
  clearPartsNeeded: Boolean
  carID: ID
  parentID: ID
  clearParent: Boolean
  addSubtaskIDs: [ID!]
  removeSubtaskIDs: [ID!]
  clearSubtasks: Boolean
  addModIDs: [ID!]
  removeModIDs: [ID!]
  clearMods: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  updateTime: Time
  email: String
  stripeCustomerID: String
  clearStripeCustomerID: Boolean
  stripeAccountID: String
  clearStripeAccountID: Boolean
  stripeAccountCapabilities: Map
  clearStripeAccountCapabilities: Boolean
  affiliate6moCode: String
  clearAffiliate6moCode: Boolean
  affiliate12moCode: String
  clearAffiliate12moCode: Boolean
  addCarIDs: [ID!]
  removeCarIDs: [ID!]
  clearCars: Boolean
  profileID: ID
  clearProfile: Boolean
  settingsID: ID
  clearSettings: Boolean
  addSubscriptionIDs: [ID!]
  removeSubscriptionIDs: [ID!]
  clearSubscriptions: Boolean
  addCheckoutSessionIDs: [ID!]
  removeCheckoutSessionIDs: [ID!]
  clearCheckoutSessions: Boolean
  addMediumIDs: [ID!]
  removeMediumIDs: [ID!]
  clearMedia: Boolean
}
"""
UpdateUserSettingsInput is used for update UserSettings object.
Input was generated by ent.
"""
input UpdateUserSettingsInput {
  updateTime: Time
  currencyCode: String
  clearCurrencyCode: Boolean
  fuelVolumeUnit: FuelVolumeUnit
  clearFuelVolumeUnit: Boolean
  distanceUnit: DistanceUnit
  clearDistanceUnit: Boolean
  fuelConsumptionUnit: FuelConsumptionUnit
  clearFuelConsumptionUnit: Boolean
  temperatureUnit: TemperatureUnit
  clearTemperatureUnit: Boolean
  powerUnit: PowerUnit
  clearPowerUnit: Boolean
  torqueUnit: TorqueUnit
  clearTorqueUnit: Boolean
  userID: ID
}
type User implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  email: String!
  stripeCustomerID: String
  stripeAccountID: String
  stripeAccountCapabilities: Map
  affiliate6moCode: String
  affiliate12moCode: String
  cars: [Car!]
  profile: Profile
  settings: UserSettings
  subscriptions: [SubscriptionPlan!]
  checkoutSessions: [CheckoutSession!]
  media: [Media!]
}
type UserSettings implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  currencyCode: String
  fuelVolumeUnit: FuelVolumeUnit
  distanceUnit: DistanceUnit
  fuelConsumptionUnit: FuelConsumptionUnit
  temperatureUnit: TemperatureUnit
  powerUnit: PowerUnit
  torqueUnit: TorqueUnit
  user: User!
}
"""
UserSettingsWhereInput is used for filtering UserSettings objects.
Input was generated by ent.
"""
input UserSettingsWhereInput {
  not: UserSettingsWhereInput
  and: [UserSettingsWhereInput!]
  or: [UserSettingsWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  currency_code field predicates
  """
  currencyCode: String
  currencyCodeNEQ: String
  currencyCodeIn: [String!]
  currencyCodeNotIn: [String!]
  currencyCodeGT: String
  currencyCodeGTE: String
  currencyCodeLT: String
  currencyCodeLTE: String
  currencyCodeContains: String
  currencyCodeHasPrefix: String
  currencyCodeHasSuffix: String
  currencyCodeIsNil: Boolean
  currencyCodeNotNil: Boolean
  currencyCodeEqualFold: String
  currencyCodeContainsFold: String
  """
  fuel_volume_unit field predicates
  """
  fuelVolumeUnit: FuelVolumeUnit
  fuelVolumeUnitNEQ: FuelVolumeUnit
  fuelVolumeUnitIn: [FuelVolumeUnit!]
  fuelVolumeUnitNotIn: [FuelVolumeUnit!]
  fuelVolumeUnitIsNil: Boolean
  fuelVolumeUnitNotNil: Boolean
  """
  distance_unit field predicates
  """
  distanceUnit: DistanceUnit
  distanceUnitNEQ: DistanceUnit
  distanceUnitIn: [DistanceUnit!]
  distanceUnitNotIn: [DistanceUnit!]
  distanceUnitIsNil: Boolean
  distanceUnitNotNil: Boolean
  """
  fuel_consumption_unit field predicates
  """
  fuelConsumptionUnit: FuelConsumptionUnit
  fuelConsumptionUnitNEQ: FuelConsumptionUnit
  fuelConsumptionUnitIn: [FuelConsumptionUnit!]
  fuelConsumptionUnitNotIn: [FuelConsumptionUnit!]
  fuelConsumptionUnitIsNil: Boolean
  fuelConsumptionUnitNotNil: Boolean
  """
  temperature_unit field predicates
  """
  temperatureUnit: TemperatureUnit
  temperatureUnitNEQ: TemperatureUnit
  temperatureUnitIn: [TemperatureUnit!]
  temperatureUnitNotIn: [TemperatureUnit!]
  temperatureUnitIsNil: Boolean
  temperatureUnitNotNil: Boolean
  """
  power_unit field predicates
  """
  powerUnit: PowerUnit
  powerUnitNEQ: PowerUnit
  powerUnitIn: [PowerUnit!]
  powerUnitNotIn: [PowerUnit!]
  powerUnitIsNil: Boolean
  powerUnitNotNil: Boolean
  """
  torque_unit field predicates
  """
  torqueUnit: TorqueUnit
  torqueUnitNEQ: TorqueUnit
  torqueUnitIn: [TorqueUnit!]
  torqueUnitNotIn: [TorqueUnit!]
  torqueUnitIsNil: Boolean
  torqueUnitNotNil: Boolean
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  stripe_customer_id field predicates
  """
  stripeCustomerID: String
  stripeCustomerIDNEQ: String
  stripeCustomerIDIn: [String!]
  stripeCustomerIDNotIn: [String!]
  stripeCustomerIDGT: String
  stripeCustomerIDGTE: String
  stripeCustomerIDLT: String
  stripeCustomerIDLTE: String
  stripeCustomerIDContains: String
  stripeCustomerIDHasPrefix: String
  stripeCustomerIDHasSuffix: String
  stripeCustomerIDIsNil: Boolean
  stripeCustomerIDNotNil: Boolean
  stripeCustomerIDEqualFold: String
  stripeCustomerIDContainsFold: String
  """
  stripe_account_id field predicates
  """
  stripeAccountID: String
  stripeAccountIDNEQ: String
  stripeAccountIDIn: [String!]
  stripeAccountIDNotIn: [String!]
  stripeAccountIDGT: String
  stripeAccountIDGTE: String
  stripeAccountIDLT: String
  stripeAccountIDLTE: String
  stripeAccountIDContains: String
  stripeAccountIDHasPrefix: String
  stripeAccountIDHasSuffix: String
  stripeAccountIDIsNil: Boolean
  stripeAccountIDNotNil: Boolean
  stripeAccountIDEqualFold: String
  stripeAccountIDContainsFold: String
  """
  affiliate_6mo_code field predicates
  """
  affiliate6moCode: String
  affiliate6moCodeNEQ: String
  affiliate6moCodeIn: [String!]
  affiliate6moCodeNotIn: [String!]
  affiliate6moCodeGT: String
  affiliate6moCodeGTE: String
  affiliate6moCodeLT: String
  affiliate6moCodeLTE: String
  affiliate6moCodeContains: String
  affiliate6moCodeHasPrefix: String
  affiliate6moCodeHasSuffix: String
  affiliate6moCodeIsNil: Boolean
  affiliate6moCodeNotNil: Boolean
  affiliate6moCodeEqualFold: String
  affiliate6moCodeContainsFold: String
  """
  affiliate_12mo_code field predicates
  """
  affiliate12moCode: String
  affiliate12moCodeNEQ: String
  affiliate12moCodeIn: [String!]
  affiliate12moCodeNotIn: [String!]
  affiliate12moCodeGT: String
  affiliate12moCodeGTE: String
  affiliate12moCodeLT: String
  affiliate12moCodeLTE: String
  affiliate12moCodeContains: String
  affiliate12moCodeHasPrefix: String
  affiliate12moCodeHasSuffix: String
  affiliate12moCodeIsNil: Boolean
  affiliate12moCodeNotNil: Boolean
  affiliate12moCodeEqualFold: String
  affiliate12moCodeContainsFold: String
  """
  cars edge predicates
  """
  hasCars: Boolean
  hasCarsWith: [CarWhereInput!]
  """
  profile edge predicates
  """
  hasProfile: Boolean
  hasProfileWith: [ProfileWhereInput!]
  """
  settings edge predicates
  """
  hasSettings: Boolean
  hasSettingsWith: [UserSettingsWhereInput!]
  """
  subscriptions edge predicates
  """
  hasSubscriptions: Boolean
  hasSubscriptionsWith: [SubscriptionPlanWhereInput!]
  """
  checkout_sessions edge predicates
  """
  hasCheckoutSessions: Boolean
  hasCheckoutSessionsWith: [CheckoutSessionWhereInput!]
  """
  media edge predicates
  """
  hasMedia: Boolean
  hasMediaWith: [MediaWhereInput!]
}
