type UpcomingService {
  schedule: ServiceSchedule!
  nextDueKm: Float
  nextDueDate: Time
}

extend type Car {
  bannerImageUrl: String
  averageConsumptionLitersPerKm: Float!
  upcomingServices: [UpcomingService!]!
  odometerKm: Float!
}

type FileMetadata @goModel(model: "github.com/minio/minio-go/v7.ObjectInfo") {
  etag: String!
  key: String!
  size: Int!
  contentType: String!
  expires: Time
}

extend type Media {
  url: String!
  metadata: FileMetadata
}

extend type Document {
  url: String!
  metadata: FileMetadata
}

extend type Query {
  car(id: ID!): Car!
  dragSession(id: ID!): DragSession!
  dynoSession(id: ID!): DynoSession!
  document(id: ID!): Document!
  media(id: ID!): Media!
  album(id: ID!): Album!
  task(id: ID!): Task!
  modIdea(id: ID!): ModIdea!
}

type UploadMediaResult {
  media: Media!
  uploadUrl: String!
}

type UploadDocumentResult {
  document: Document!
  uploadUrl: String!
}

extend input CreateFuelUpInput {
  cost: Float!
  odometerKm: Float
}

extend input CreateServiceLogInput {
  cost: Float
  odometerKm: Float
}

extend type Mutation {
  createCar(input: CreateCarInput!): Car! @loggedIn
  uploadBannerImage(input: CreateMediaInput!): UploadMediaResult! @loggedIn
  uploadMedia(input: CreateMediaInput!): UploadMediaResult! @loggedIn
  updateMedia(id: ID!, input: UpdateMediaInput!): Media! @loggedIn
  uploadDocument(input: CreateDocumentInput!): UploadDocumentResult! @loggedIn
  createExpense(input: CreateExpenseInput!): Expense! @loggedIn
  createFuelUp(input: CreateFuelUpInput!): FuelUp! @loggedIn
  createOdometerReading(input: CreateOdometerReadingInput!): OdometerReading!
    @loggedIn
  createServiceItem(input: CreateServiceItemInput!): ServiceItem! @loggedIn
  createServiceSchedule(input: CreateServiceScheduleInput!): ServiceSchedule!
    @loggedIn
  createServiceLog(input: CreateServiceLogInput!): ServiceLog! @loggedIn
  createDragSession(input: CreateDragSessionInput!): DragSession! @loggedIn
  createDragResult(input: CreateDragResultInput!): DragResult! @loggedIn
  createDynoSession(input: CreateDynoSessionInput!): DynoSession! @loggedIn
  createDynoResult(input: CreateDynoResultInput!): DynoResult! @loggedIn
  createAlbum(input: CreateAlbumInput!): Album! @loggedIn
  updateAlbum(id: ID!, input: UpdateAlbumInput!): Album! @loggedIn
  createTask(input: CreateTaskInput!): Task! @loggedIn
  updateTask(id: ID!, input: UpdateTaskInput!): Task! @loggedIn
  createModIdea(input: CreateModIdeaInput!): ModIdea! @loggedIn
  updateModIdea(id: ID!, input: UpdateModIdeaInput!): ModIdea! @loggedIn
  createModProductOption(
    input: CreateModProductOptionInput!
  ): ModProductOption! @loggedIn
  updateModProductOption(
    id: ID!
    input: UpdateModProductOptionInput!
  ): ModProductOption! @loggedIn
}
