package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"
	"math"
	"slices"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Dan6erbond/revline/auth"
	"github.com/Dan6erbond/revline/ent"
	"github.com/Dan6erbond/revline/ent/album"
	"github.com/Dan6erbond/revline/ent/fuelup"
	"github.com/Dan6erbond/revline/ent/media"
	"github.com/Dan6erbond/revline/ent/odometerreading"
	"github.com/Dan6erbond/revline/ent/serviceschedule"
	"github.com/Dan6erbond/revline/graph/model"
	"github.com/google/uuid"
	minio "github.com/minio/minio-go/v7"
)

// BannerImageURL is the resolver for the bannerImageUrl field.
func (r *carResolver) BannerImageURL(ctx context.Context, obj *ent.Car) (*string, error) {
	owner, err := obj.Owner(ctx)

	if err != nil {
		return nil, err
	}

	bannerImage, err := obj.BannerImage(ctx)

	if err != nil {
		return nil, err
	}

	if bannerImage == nil {
		return nil, nil
	}

	objectName := fmt.Sprintf("users/%s/cars/%s/media/%s", owner.ID, obj.ID, bannerImage.ID)

	url, err := r.s3Client.PresignedGetObject(ctx, r.config.S3.Bucket, objectName, time.Hour, nil)

	if err != nil {
		return nil, err
	}

	urls := url.String()

	return &urls, err
}

// AverageConsumptionLitersPerKm is the resolver for the averageConsumptionLitersPerKm field.
func (r *carResolver) AverageConsumptionLitersPerKm(ctx context.Context, obj *ent.Car) (float64, error) {
	fuelUps, err := obj.QueryFuelUps().WithOdometerReading().Order(fuelup.ByOccurredAt()).All(ctx)

	if err != nil {
		return 0, err
	}

	var fullTanks []*ent.FuelUp

	for _, fu := range fuelUps {
		if or, err := fu.OdometerReading(ctx); fu.IsFullTank && err == nil && or != nil {
			fullTanks = append(fullTanks, fu)
		}
	}

	if len(fullTanks) < 2 {
		return 0, nil
	}

	var (
		totalDistance float64 = 0
		totalFuelUsed float64 = 0
	)

	for i := 0; i < len(fullTanks)-1; i++ {
		start := fullTanks[i]
		end := fullTanks[i+1]

		startReading, _ := start.OdometerReading(ctx)
		endReading, _ := end.OdometerReading(ctx)

		startKm := startReading.ReadingKm
		endKm := endReading.ReadingKm

		distance := endKm - startKm
		fuelUsed := end.AmountLiters

		if distance <= 0 {
			continue
		}

		for _, fu := range fuelUps {
			if fu.OccurredAt.After(start.OccurredAt) && fu.OccurredAt.Before(end.OccurredAt) {
				fuelUsed += fu.AmountLiters
			}
		}

		totalDistance += distance
		totalFuelUsed += fuelUsed
	}

	if totalDistance <= 0 {
		return 0, nil
	}

	return totalFuelUsed / totalDistance, nil
}

// UpcomingServices is the resolver for the upcomingServices field.
func (r *carResolver) UpcomingServices(ctx context.Context, obj *ent.Car) ([]*model.UpcomingService, error) {
	/* var odometerKm float64

	lastReading, err := obj.QueryOdometerReadings().Order(odometerreading.ByCreateTime(sql.OrderDesc())).First(ctx)

	if err != nil {
		return nil, err
	}

	if lastReading != nil {
		odometerKm = lastReading.ReadingKm
	} */

	schedules, err := obj.QueryServiceSchedules().
		WithLogs(func(slq *ent.ServiceLogQuery) {
			slq.WithOdometerReading()
		}).
		Where(serviceschedule.ArchivedEQ(false)).
		All(ctx)

	if err != nil {
		return nil, err
	}

	/* now := time.Now() */

	var upcoming []*model.UpcomingService

	for _, schedule := range schedules {
		logs, _ := schedule.Logs(ctx)

		slices.SortFunc(logs, func(a, b *ent.ServiceLog) int {
			return b.DatePerformed.Compare(a.DatePerformed)
		})

		var (
			startKm float64
			// startDate time.Time

			nextDueKm   *float64
			nextDueDate *time.Time
		)

		if schedule.StartsAtKm != nil {
			startKm = *schedule.StartsAtKm
		}

		lastLogOdometerReading := startKm

		if len(logs) > 0 {
			if or, _ := logs[0].OdometerReading(ctx); or != nil {
				lastLogOdometerReading = or.ReadingKm
			}
		}

		// TODO: calculate start date based on start months

		if schedule.RepeatEveryKm == nil {
			repeatEveryKm := *schedule.RepeatEveryKm
			lastKm := lastLogOdometerReading
			cyclesSinceStart := math.Floor((lastKm-startKm)/repeatEveryKm) + 1
			res := startKm + cyclesSinceStart*(repeatEveryKm)
			nextDueKm = &res
		} else {
			continue
		}

		// TODO: compute next due by date
		/* if (repeatMonths !== undefined) {
			const baseDate = lastLog?.datePerformed ?? startDate;
			nextDueDate = new Date(baseDate);
			nextDueDate.setMonth(nextDueDate.getMonth() + repeatMonths);
		} */

		// TODO: determine "dueAt" value for sorting
		/* let dueAt: Date | number;
		if (nextDueKm !== undefined && nextDueDate !== undefined) {
			// Take whichever is sooner
			const kmDelta = nextDueKm - odometerKm;
			const dateDelta = nextDueDate.getTime() - now.getTime();
			dueAt =
				kmDelta < 0 || dateDelta < 0
					? Math.min(kmDelta, dateDelta)
					: Math.min(kmDelta, dateDelta);
		} else if (nextDueKm !== undefined) {
			dueAt = nextDueKm;
		} else if (nextDueDate !== undefined) {
			dueAt = nextDueDate;
		} else {
			continue; // Can't determine next due
		} */

		upcoming = append(upcoming, &model.UpcomingService{schedule, nextDueKm, nextDueDate})
	}

	slices.SortFunc(upcoming, func(a, b *model.UpcomingService) int {
		andk, bndk := *a.NextDueKm, *b.NextDueKm
		return int(andk - bndk)
	})

	return upcoming, nil
}

// OdometerKm is the resolver for the odometerKm field.
func (r *carResolver) OdometerKm(ctx context.Context, obj *ent.Car) (float64, error) {
	reading, err := obj.QueryOdometerReadings().Order(odometerreading.ByReadingTime(sql.OrderDesc())).First(ctx)

	if ent.IsNotFound(err) {
		return 0, nil
	}

	if err != nil {
		return 0, nil
	}

	return reading.ReadingKm, nil
}

// URL is the resolver for the url field.
func (r *documentResolver) URL(ctx context.Context, obj *ent.Document) (string, error) {
	car, err := obj.Car(ctx)

	if err != nil {
		return "", err
	}

	owner, err := car.Owner(ctx)

	if err != nil {
		return "", err
	}

	objectName := fmt.Sprintf("users/%s/cars/%s/documents/%s", owner.ID, car.ID, obj.ID)

	url, err := r.s3Client.PresignedGetObject(ctx, r.config.S3.Bucket, objectName, time.Hour, nil)

	if err != nil {
		return "", err
	}

	return url.String(), err
}

// Metadata is the resolver for the metadata field.
func (r *documentResolver) Metadata(ctx context.Context, obj *ent.Document) (*minio.ObjectInfo, error) {
	car, err := obj.Car(ctx)

	if err != nil {
		return nil, err
	}

	owner, err := car.Owner(ctx)

	if err != nil {
		return nil, err
	}

	objectName := fmt.Sprintf("users/%s/cars/%s/documents/%s", owner.ID, car.ID, obj.ID)

	object, err := r.s3Client.GetObject(ctx, r.config.S3.Bucket, objectName, minio.GetObjectOptions{})

	if err != nil {
		return nil, err
	}

	info, err := object.Stat()

	if err != nil {
		if err, ok := err.(minio.ErrorResponse); ok && (err.Code == "NoSuchKey") {
			//nolint:nilnil
			return nil, nil
		}

		return nil, err
	}

	return &info, err
}

// URL is the resolver for the url field.
func (r *mediaResolver) URL(ctx context.Context, obj *ent.Media) (string, error) {
	car, err := obj.Car(ctx)

	if err != nil {
		return "", err
	}

	owner, err := car.Owner(ctx)

	if err != nil {
		return "", err
	}

	objectName := fmt.Sprintf("users/%s/cars/%s/media/%s", owner.ID, car.ID, obj.ID)

	url, err := r.s3Client.PresignedGetObject(ctx, r.config.S3.Bucket, objectName, time.Hour, nil)

	if err != nil {
		return "", err
	}

	return url.String(), err
}

// Metadata is the resolver for the metadata field.
func (r *mediaResolver) Metadata(ctx context.Context, obj *ent.Media) (*minio.ObjectInfo, error) {
	car, err := obj.Car(ctx)

	if err != nil {
		return nil, err
	}

	owner, err := car.Owner(ctx)

	if err != nil {
		return nil, err
	}

	objectName := fmt.Sprintf("users/%s/cars/%s/media/%s", owner.ID, car.ID, obj.ID)

	object, err := r.s3Client.GetObject(ctx, r.config.S3.Bucket, objectName, minio.GetObjectOptions{})

	if err != nil {
		return nil, err
	}

	info, err := object.Stat()

	if err != nil {
		if err, ok := err.(minio.ErrorResponse); ok && (err.Code == "NoSuchKey") {
			//nolint:nilnil
			return nil, nil
		}

		return nil, err
	}

	return &info, err
}

// CreateCar is the resolver for the createCar field.
func (r *mutationResolver) CreateCar(ctx context.Context, input ent.CreateCarInput) (*ent.Car, error) {
	user := auth.ForContext(ctx)

	input.OwnerID = &user.ID

	return r.entClient.Car.Create().SetInput(input).Save(ctx)
}

// UploadBannerImage is the resolver for the uploadBannerImage field.
func (r *mutationResolver) UploadBannerImage(ctx context.Context, input ent.CreateMediaInput) (*model.UploadMediaResult, error) {
	user := auth.ForContext(ctx)

	car, err := r.entClient.Car.Get(ctx, *input.CarID)

	if err != nil {
		return nil, err
	}

	media, err := r.entClient.Media.Create().SetCar(car).Save(ctx)

	if err != nil {
		return nil, err
	}

	objectName := fmt.Sprintf("users/%s/cars/%s/media/%s", user.ID, car.ID, media.ID)

	url, err := r.s3Client.PresignedPutObject(ctx, r.config.S3.Bucket, objectName, time.Hour)

	if err != nil {
		return nil, err
	}

	if _, err := car.Update().SetBannerImage(media).Save(ctx); err != nil {
		return nil, err
	}

	return &model.UploadMediaResult{media, url.String()}, nil
}

// UploadMedia is the resolver for the uploadMedia field.
func (r *mutationResolver) UploadMedia(ctx context.Context, input ent.CreateMediaInput) (*model.UploadMediaResult, error) {
	user := auth.ForContext(ctx)

	car, err := r.entClient.Car.Get(ctx, *input.CarID)

	if err != nil {
		return nil, err
	}

	media, err := r.entClient.Media.Create().SetInput(input).Save(ctx)

	if err != nil {
		return nil, err
	}

	objectName := fmt.Sprintf("users/%s/cars/%s/media/%s", user.ID, car.ID, media.ID)

	url, err := r.s3Client.PresignedPutObject(ctx, r.config.S3.Bucket, objectName, time.Hour)

	if err != nil {
		return nil, err
	}

	return &model.UploadMediaResult{media, url.String()}, nil
}

// UpdateMedia is the resolver for the updateMedia field.
func (r *mutationResolver) UpdateMedia(ctx context.Context, id string, input ent.UpdateMediaInput) (*ent.Media, error) {
	uid, err := uuid.Parse(id)

	if err != nil {
		return nil, err
	}

	return r.entClient.Media.UpdateOneID(uid).SetInput(input).Save(ctx)
}

// UploadDocument is the resolver for the uploadDocument field.
func (r *mutationResolver) UploadDocument(ctx context.Context, input ent.CreateDocumentInput) (*model.UploadDocumentResult, error) {
	user := auth.ForContext(ctx)

	car, err := r.entClient.Car.Get(ctx, *input.CarID)

	if err != nil {
		return nil, err
	}

	document, err := r.entClient.Document.Create().SetInput(input).Save(ctx)

	if err != nil {
		return nil, err
	}

	objectName := fmt.Sprintf("users/%s/cars/%s/documents/%s", user.ID, car.ID, document.ID)

	url, err := r.s3Client.PresignedPutObject(ctx, r.config.S3.Bucket, objectName, time.Hour)

	if err != nil {
		return nil, err
	}

	return &model.UploadDocumentResult{document, url.String()}, nil
}

// CreateExpense is the resolver for the createExpense field.
func (r *mutationResolver) CreateExpense(ctx context.Context, input ent.CreateExpenseInput) (*ent.Expense, error) {
	c := ent.FromContext(ctx)

	return c.Expense.Create().SetInput(input).Save(ctx)
}

// CreateFuelUp is the resolver for the createFuelUp field.
func (r *mutationResolver) CreateFuelUp(ctx context.Context, input ent.CreateFuelUpInput) (*ent.FuelUp, error) {
	c := ent.FromContext(ctx)

	return c.FuelUp.Create().SetInput(input).Save(ctx)
}

// CreateOdometerReading is the resolver for the createOdometerReading field.
func (r *mutationResolver) CreateOdometerReading(ctx context.Context, input ent.CreateOdometerReadingInput) (*ent.OdometerReading, error) {
	return r.entClient.OdometerReading.Create().SetInput(input).Save(ctx)
}

// CreateServiceItem is the resolver for the createServiceItem field.
func (r *mutationResolver) CreateServiceItem(ctx context.Context, input ent.CreateServiceItemInput) (*ent.ServiceItem, error) {
	return r.entClient.ServiceItem.Create().SetInput(input).Save(ctx)
}

// CreateServiceSchedule is the resolver for the createServiceSchedule field.
func (r *mutationResolver) CreateServiceSchedule(ctx context.Context, input ent.CreateServiceScheduleInput) (*ent.ServiceSchedule, error) {
	return r.entClient.ServiceSchedule.Create().SetInput(input).Save(ctx)
}

// CreateServiceLog is the resolver for the createServiceLog field.
func (r *mutationResolver) CreateServiceLog(ctx context.Context, input ent.CreateServiceLogInput) (*ent.ServiceLog, error) {
	c := ent.FromContext(ctx)

	return c.ServiceLog.Create().SetInput(input).Save(ctx)
}

// CreateDragSession is the resolver for the createDragSession field.
func (r *mutationResolver) CreateDragSession(ctx context.Context, input ent.CreateDragSessionInput) (*ent.DragSession, error) {
	return r.entClient.DragSession.Create().SetInput(input).Save(ctx)
}

// CreateDragResult is the resolver for the createDragResult field.
func (r *mutationResolver) CreateDragResult(ctx context.Context, input ent.CreateDragResultInput) (*ent.DragResult, error) {
	return r.entClient.DragResult.Create().SetInput(input).Save(ctx)
}

// CreateDynoSession is the resolver for the createDynoSession field.
func (r *mutationResolver) CreateDynoSession(ctx context.Context, input ent.CreateDynoSessionInput) (*ent.DynoSession, error) {
	return r.entClient.DynoSession.Create().SetInput(input).Save(ctx)
}

// CreateDynoResult is the resolver for the createDynoResult field.
func (r *mutationResolver) CreateDynoResult(ctx context.Context, input ent.CreateDynoResultInput) (*ent.DynoResult, error) {
	return r.entClient.DynoResult.Create().SetInput(input).Save(ctx)
}

// CreateAlbum is the resolver for the createAlbum field.
func (r *mutationResolver) CreateAlbum(ctx context.Context, input ent.CreateAlbumInput) (*ent.Album, error) {
	return r.entClient.Album.Create().SetInput(input).Save(ctx)
}

// UpdateAlbum is the resolver for the updateAlbum field.
func (r *mutationResolver) UpdateAlbum(ctx context.Context, id string, input ent.UpdateAlbumInput) (*ent.Album, error) {
	uid, err := uuid.Parse(id)

	if err != nil {
		return nil, err
	}

	return r.entClient.Album.UpdateOneID(uid).SetInput(input).Save(ctx)
}

// Car is the resolver for the car field.
func (r *queryResolver) Car(ctx context.Context, id string) (*ent.Car, error) {
	uid, err := uuid.Parse(id)

	if err != nil {
		return nil, err
	}

	return r.entClient.Car.Get(ctx, uid)
}

// DragSession is the resolver for the dragSession field.
func (r *queryResolver) DragSession(ctx context.Context, id string) (*ent.DragSession, error) {
	uid, err := uuid.Parse(id)

	if err != nil {
		return nil, err
	}

	return r.entClient.DragSession.Get(ctx, uid)
}

// DynoSession is the resolver for the dynoSession field.
func (r *queryResolver) DynoSession(ctx context.Context, id string) (*ent.DynoSession, error) {
	uid, err := uuid.Parse(id)

	if err != nil {
		return nil, err
	}

	return r.entClient.DynoSession.Get(ctx, uid)
}

// Document is the resolver for the document field.
func (r *queryResolver) Document(ctx context.Context, id string) (*ent.Document, error) {
	uid, err := uuid.Parse(id)

	if err != nil {
		return nil, err
	}

	return r.entClient.Document.Get(ctx, uid)
}

// Media is the resolver for the media field.
func (r *queryResolver) Media(ctx context.Context, id string) (*ent.Media, error) {
	uid, err := uuid.Parse(id)

	if err != nil {
		return nil, err
	}

	return r.entClient.Media.Query().Where(media.IDEQ(uid)).First(ctx)
}

// Album is the resolver for the album field.
func (r *queryResolver) Album(ctx context.Context, id string) (*ent.Album, error) {
	uid, err := uuid.Parse(id)

	if err != nil {
		return nil, err
	}

	return r.entClient.Album.Query().Where(album.IDEQ(uid)).First(ctx)
}

// Cost is the resolver for the cost field.
func (r *createFuelUpInputResolver) Cost(ctx context.Context, obj *ent.CreateFuelUpInput, data float64) error {
	c := ent.FromContext(ctx)

	ex, err := c.Expense.Create().
		SetCarID(obj.CarID).
		SetAmount(data).
		SetNotes("Created by fuel-up").
		Save(ctx)

	if err != nil {
		return err
	}

	obj.ExpenseID = &ex.ID

	return err
}

// OdometerKm is the resolver for the odometerKm field.
func (r *createFuelUpInputResolver) OdometerKm(ctx context.Context, obj *ent.CreateFuelUpInput, data *float64) error {
	if data != nil {
		c := ent.FromContext(ctx)

		or, err := c.OdometerReading.Create().
			SetCarID(obj.CarID).
			SetReadingKm(*data).
			SetReadingTime(obj.OccurredAt).
			SetNotes("Created by fuel-up").
			Save(ctx)

		if err != nil {
			return err
		}

		obj.OdometerReadingID = &or.ID

		return err
	}

	return nil
}

// Cost is the resolver for the cost field.
func (r *createServiceLogInputResolver) Cost(ctx context.Context, obj *ent.CreateServiceLogInput, data *float64) error {
	if data != nil {
		c := ent.FromContext(ctx)

		ex, err := c.Expense.Create().
			SetCarID(obj.CarID).
			SetAmount(*data).
			SetNotes("Created by service log").
			Save(ctx)

		if err != nil {
			return err
		}

		obj.ExpenseID = &ex.ID

		return err
	}

	return nil
}

// OdometerKm is the resolver for the odometerKm field.
func (r *createServiceLogInputResolver) OdometerKm(ctx context.Context, obj *ent.CreateServiceLogInput, data *float64) error {
	if data != nil {
		c := ent.FromContext(ctx)

		or, err := c.OdometerReading.Create().
			SetCarID(obj.CarID).
			SetReadingKm(*data).
			SetReadingTime(obj.DatePerformed).
			SetNotes("Created by service log").
			Save(ctx)

		if err != nil {
			return err
		}

		obj.OdometerReadingID = &or.ID

		return err
	}

	return nil
}
