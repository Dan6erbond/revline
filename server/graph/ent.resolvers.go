package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"

	"github.com/Dan6erbond/revline/ent"
	"github.com/spf13/cast"
)

// Pros is the resolver for the pros field.
func (r *modProductOptionResolver) Pros(ctx context.Context, obj *ent.ModProductOption) (any, error) {
	return obj.Pros, nil
}

// Cons is the resolver for the cons field.
func (r *modProductOptionResolver) Cons(ctx context.Context, obj *ent.ModProductOption) (any, error) {
	return obj.Cons, nil
}

// Specs is the resolver for the specs field.
func (r *modProductOptionResolver) Specs(ctx context.Context, obj *ent.ModProductOption) (map[string]any, error) {
	converted := make(map[string]any, len(obj.Specs))
	for k, v := range obj.Specs {
		converted[k] = v
	}

	return converted, nil
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Node - node"))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// Pros is the resolver for the pros field.
func (r *createModProductOptionInputResolver) Pros(ctx context.Context, obj *ent.CreateModProductOptionInput, data any) error {
	converted := make([]string, len(data.([]any)))
	for i, v := range data.([]any) {
		converted[i] = cast.ToString(v)
	}
	obj.Pros = converted
	return nil
}

// Cons is the resolver for the cons field.
func (r *createModProductOptionInputResolver) Cons(ctx context.Context, obj *ent.CreateModProductOptionInput, data any) error {
	converted := make([]string, len(data.([]any)))
	for i, v := range data.([]any) {
		converted[i] = cast.ToString(v)
	}
	obj.Cons = converted
	return nil
}

// Specs is the resolver for the specs field.
func (r *createModProductOptionInputResolver) Specs(ctx context.Context, obj *ent.CreateModProductOptionInput, data map[string]any) error {
	converted := make(map[string]string, len(data))
	for k, v := range data {
		converted[k] = cast.ToString(v)
	}
	obj.Specs = converted
	return nil
}

// Pros is the resolver for the pros field.
func (r *updateModProductOptionInputResolver) Pros(ctx context.Context, obj *ent.UpdateModProductOptionInput, data any) error {
	converted := make([]string, len(data.([]any)))
	for i, v := range data.([]any) {
		converted[i] = cast.ToString(v)
	}
	obj.Pros = converted
	return nil
}

// AppendPros is the resolver for the appendPros field.
func (r *updateModProductOptionInputResolver) AppendPros(ctx context.Context, obj *ent.UpdateModProductOptionInput, data any) error {
	converted := make([]string, len(data.([]any)))
	for i, v := range data.([]any) {
		converted[i] = cast.ToString(v)
	}
	obj.AppendPros = converted
	return nil
}

// Cons is the resolver for the cons field.
func (r *updateModProductOptionInputResolver) Cons(ctx context.Context, obj *ent.UpdateModProductOptionInput, data any) error {
	converted := make([]string, len(data.([]any)))
	for i, v := range data.([]any) {
		converted[i] = cast.ToString(v)
	}
	obj.Cons = converted
	return nil
}

// AppendCons is the resolver for the appendCons field.
func (r *updateModProductOptionInputResolver) AppendCons(ctx context.Context, obj *ent.UpdateModProductOptionInput, data any) error {
	converted := make([]string, len(data.([]any)))
	for i, v := range data.([]any) {
		converted[i] = cast.ToString(v)
	}
	obj.AppendCons = converted
	return nil
}

// Specs is the resolver for the specs field.
func (r *updateModProductOptionInputResolver) Specs(ctx context.Context, obj *ent.UpdateModProductOptionInput, data map[string]any) error {
	converted := make(map[string]string, len(data))
	for k, v := range data {
		converted[k] = cast.ToString(v)
	}
	obj.Specs = converted
	return nil
}

// Car returns CarResolver implementation.
func (r *Resolver) Car() CarResolver { return &carResolver{r} }

// Document returns DocumentResolver implementation.
func (r *Resolver) Document() DocumentResolver { return &documentResolver{r} }

// Media returns MediaResolver implementation.
func (r *Resolver) Media() MediaResolver { return &mediaResolver{r} }

// ModProductOption returns ModProductOptionResolver implementation.
func (r *Resolver) ModProductOption() ModProductOptionResolver { return &modProductOptionResolver{r} }

// Profile returns ProfileResolver implementation.
func (r *Resolver) Profile() ProfileResolver { return &profileResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

// CreateFuelUpInput returns CreateFuelUpInputResolver implementation.
func (r *Resolver) CreateFuelUpInput() CreateFuelUpInputResolver {
	return &createFuelUpInputResolver{r}
}

// CreateModProductOptionInput returns CreateModProductOptionInputResolver implementation.
func (r *Resolver) CreateModProductOptionInput() CreateModProductOptionInputResolver {
	return &createModProductOptionInputResolver{r}
}

// CreateServiceLogInput returns CreateServiceLogInputResolver implementation.
func (r *Resolver) CreateServiceLogInput() CreateServiceLogInputResolver {
	return &createServiceLogInputResolver{r}
}

// UpdateModProductOptionInput returns UpdateModProductOptionInputResolver implementation.
func (r *Resolver) UpdateModProductOptionInput() UpdateModProductOptionInputResolver {
	return &updateModProductOptionInputResolver{r}
}

type carResolver struct{ *Resolver }
type documentResolver struct{ *Resolver }
type mediaResolver struct{ *Resolver }
type modProductOptionResolver struct{ *Resolver }
type profileResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
type createFuelUpInputResolver struct{ *Resolver }
type createModProductOptionInputResolver struct{ *Resolver }
type createServiceLogInputResolver struct{ *Resolver }
type updateModProductOptionInputResolver struct{ *Resolver }
