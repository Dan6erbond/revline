type ServiceSchedule {
  id: ID!
  title: String!
  notes: String
  repeatEveryKm: Int
  repeatEveryMonths: Int
  startsAtKm: Int
  startsAtDate: Date
  items: [ServiceItem!]!
  logs: [ServiceLog!]!
  car: Car!
  archived: Boolean!
  createdAt: Date!
  updatedAt: Date!
}

extend type Car {
  serviceSchedules: [ServiceSchedule!]!
}

input CreateServiceScheduleInput {
  carId: ID!
  title: String!
  serviceItemIds: [ID!]!
  repeatEveryKm: Int
  repeatEveryMonths: Int
  startsAtKm: Int
  startsAtDate: Date
  notes: String
}

input UpdateServiceScheduleInput {
  id: ID!
  title: String
  serviceItemIds: [ID!]
  repeatEveryKm: Int
  repeatEveryMonths: Int
  startsAtKm: Int
  startsAtDate: Date
  notes: String
  archived: Boolean
}

type Mutation {
  createServiceSchedule(input: CreateServiceScheduleInput!): ServiceSchedule!
  updateServiceSchedule(input: UpdateServiceScheduleInput!): ServiceSchedule!
  deleteServiceSchedule(id: ID!): Boolean!
}
