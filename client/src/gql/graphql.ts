/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** The builtin Time type */
  Time: { input: any; output: any; }
  Upload: { input: any; output: any; }
};

export type Car = {
  __typename?: 'Car';
  averageConsumptionLitersPerKm: Scalars['Float']['output'];
  bannerImage?: Maybe<Media>;
  bannerImageUrl?: Maybe<Scalars['String']['output']>;
  createTime: Scalars['Time']['output'];
  dragSessions?: Maybe<Array<DragSession>>;
  fuelUps?: Maybe<Array<FuelUp>>;
  id: Scalars['ID']['output'];
  make?: Maybe<Scalars['String']['output']>;
  media?: Maybe<Array<Media>>;
  model?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  odometerReadings?: Maybe<Array<OdometerReading>>;
  owner?: Maybe<User>;
  serviceItems?: Maybe<Array<ServiceItem>>;
  serviceLogs?: Maybe<Array<ServiceLog>>;
  serviceSchedules?: Maybe<Array<ServiceSchedule>>;
  trim?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  upcomingServices: Array<UpcomingService>;
  updateTime: Scalars['Time']['output'];
  year?: Maybe<Scalars['Int']['output']>;
};

/**
 * CarWhereInput is used for filtering Car objects.
 * Input was generated by ent.
 */
export type CarWhereInput = {
  and?: InputMaybe<Array<CarWhereInput>>;
  /** create_time field predicates */
  createTime?: InputMaybe<Scalars['Time']['input']>;
  createTimeGT?: InputMaybe<Scalars['Time']['input']>;
  createTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  createTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createTimeLT?: InputMaybe<Scalars['Time']['input']>;
  createTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  createTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  createTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** banner_image edge predicates */
  hasBannerImage?: InputMaybe<Scalars['Boolean']['input']>;
  hasBannerImageWith?: InputMaybe<Array<MediaWhereInput>>;
  /** drag_sessions edge predicates */
  hasDragSessions?: InputMaybe<Scalars['Boolean']['input']>;
  hasDragSessionsWith?: InputMaybe<Array<DragSessionWhereInput>>;
  /** fuel_ups edge predicates */
  hasFuelUps?: InputMaybe<Scalars['Boolean']['input']>;
  hasFuelUpsWith?: InputMaybe<Array<FuelUpWhereInput>>;
  /** media edge predicates */
  hasMedia?: InputMaybe<Scalars['Boolean']['input']>;
  hasMediaWith?: InputMaybe<Array<MediaWhereInput>>;
  /** odometer_readings edge predicates */
  hasOdometerReadings?: InputMaybe<Scalars['Boolean']['input']>;
  hasOdometerReadingsWith?: InputMaybe<Array<OdometerReadingWhereInput>>;
  /** owner edge predicates */
  hasOwner?: InputMaybe<Scalars['Boolean']['input']>;
  hasOwnerWith?: InputMaybe<Array<UserWhereInput>>;
  /** service_items edge predicates */
  hasServiceItems?: InputMaybe<Scalars['Boolean']['input']>;
  hasServiceItemsWith?: InputMaybe<Array<ServiceItemWhereInput>>;
  /** service_logs edge predicates */
  hasServiceLogs?: InputMaybe<Scalars['Boolean']['input']>;
  hasServiceLogsWith?: InputMaybe<Array<ServiceLogWhereInput>>;
  /** service_schedules edge predicates */
  hasServiceSchedules?: InputMaybe<Scalars['Boolean']['input']>;
  hasServiceSchedulesWith?: InputMaybe<Array<ServiceScheduleWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** make field predicates */
  make?: InputMaybe<Scalars['String']['input']>;
  makeContains?: InputMaybe<Scalars['String']['input']>;
  makeContainsFold?: InputMaybe<Scalars['String']['input']>;
  makeEqualFold?: InputMaybe<Scalars['String']['input']>;
  makeGT?: InputMaybe<Scalars['String']['input']>;
  makeGTE?: InputMaybe<Scalars['String']['input']>;
  makeHasPrefix?: InputMaybe<Scalars['String']['input']>;
  makeHasSuffix?: InputMaybe<Scalars['String']['input']>;
  makeIn?: InputMaybe<Array<Scalars['String']['input']>>;
  makeIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  makeLT?: InputMaybe<Scalars['String']['input']>;
  makeLTE?: InputMaybe<Scalars['String']['input']>;
  makeNEQ?: InputMaybe<Scalars['String']['input']>;
  makeNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  makeNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** model field predicates */
  model?: InputMaybe<Scalars['String']['input']>;
  modelContains?: InputMaybe<Scalars['String']['input']>;
  modelContainsFold?: InputMaybe<Scalars['String']['input']>;
  modelEqualFold?: InputMaybe<Scalars['String']['input']>;
  modelGT?: InputMaybe<Scalars['String']['input']>;
  modelGTE?: InputMaybe<Scalars['String']['input']>;
  modelHasPrefix?: InputMaybe<Scalars['String']['input']>;
  modelHasSuffix?: InputMaybe<Scalars['String']['input']>;
  modelIn?: InputMaybe<Array<Scalars['String']['input']>>;
  modelIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  modelLT?: InputMaybe<Scalars['String']['input']>;
  modelLTE?: InputMaybe<Scalars['String']['input']>;
  modelNEQ?: InputMaybe<Scalars['String']['input']>;
  modelNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  modelNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<CarWhereInput>;
  or?: InputMaybe<Array<CarWhereInput>>;
  /** trim field predicates */
  trim?: InputMaybe<Scalars['String']['input']>;
  trimContains?: InputMaybe<Scalars['String']['input']>;
  trimContainsFold?: InputMaybe<Scalars['String']['input']>;
  trimEqualFold?: InputMaybe<Scalars['String']['input']>;
  trimGT?: InputMaybe<Scalars['String']['input']>;
  trimGTE?: InputMaybe<Scalars['String']['input']>;
  trimHasPrefix?: InputMaybe<Scalars['String']['input']>;
  trimHasSuffix?: InputMaybe<Scalars['String']['input']>;
  trimIn?: InputMaybe<Array<Scalars['String']['input']>>;
  trimIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  trimLT?: InputMaybe<Scalars['String']['input']>;
  trimLTE?: InputMaybe<Scalars['String']['input']>;
  trimNEQ?: InputMaybe<Scalars['String']['input']>;
  trimNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  trimNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** type field predicates */
  type?: InputMaybe<Scalars['String']['input']>;
  typeContains?: InputMaybe<Scalars['String']['input']>;
  typeContainsFold?: InputMaybe<Scalars['String']['input']>;
  typeEqualFold?: InputMaybe<Scalars['String']['input']>;
  typeGT?: InputMaybe<Scalars['String']['input']>;
  typeGTE?: InputMaybe<Scalars['String']['input']>;
  typeHasPrefix?: InputMaybe<Scalars['String']['input']>;
  typeHasSuffix?: InputMaybe<Scalars['String']['input']>;
  typeIn?: InputMaybe<Array<Scalars['String']['input']>>;
  typeIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  typeLT?: InputMaybe<Scalars['String']['input']>;
  typeLTE?: InputMaybe<Scalars['String']['input']>;
  typeNEQ?: InputMaybe<Scalars['String']['input']>;
  typeNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  typeNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** update_time field predicates */
  updateTime?: InputMaybe<Scalars['Time']['input']>;
  updateTimeGT?: InputMaybe<Scalars['Time']['input']>;
  updateTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  updateTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updateTimeLT?: InputMaybe<Scalars['Time']['input']>;
  updateTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  updateTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  updateTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** year field predicates */
  year?: InputMaybe<Scalars['Int']['input']>;
  yearGT?: InputMaybe<Scalars['Int']['input']>;
  yearGTE?: InputMaybe<Scalars['Int']['input']>;
  yearIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  yearIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  yearLT?: InputMaybe<Scalars['Int']['input']>;
  yearLTE?: InputMaybe<Scalars['Int']['input']>;
  yearNEQ?: InputMaybe<Scalars['Int']['input']>;
  yearNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  yearNotNil?: InputMaybe<Scalars['Boolean']['input']>;
};

/**
 * CreateCarInput is used for create Car object.
 * Input was generated by ent.
 */
export type CreateCarInput = {
  bannerImageID?: InputMaybe<Scalars['ID']['input']>;
  createTime?: InputMaybe<Scalars['Time']['input']>;
  dragSessionIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  fuelUpIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  make?: InputMaybe<Scalars['String']['input']>;
  mediumIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  model?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  odometerReadingIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  ownerID?: InputMaybe<Scalars['ID']['input']>;
  serviceItemIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  serviceLogIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  serviceScheduleIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  trim?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  updateTime?: InputMaybe<Scalars['Time']['input']>;
  year?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * CreateDragResultInput is used for create DragResult object.
 * Input was generated by ent.
 */
export type CreateDragResultInput = {
  createTime?: InputMaybe<Scalars['Time']['input']>;
  result: Scalars['Float']['input'];
  sessionID: Scalars['ID']['input'];
  unit: DragResultUnit;
  updateTime?: InputMaybe<Scalars['Time']['input']>;
  value: Scalars['Float']['input'];
};

/**
 * CreateDragSessionInput is used for create DragSession object.
 * Input was generated by ent.
 */
export type CreateDragSessionInput = {
  carID: Scalars['ID']['input'];
  createTime?: InputMaybe<Scalars['Time']['input']>;
  notes?: InputMaybe<Scalars['String']['input']>;
  resultIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  title: Scalars['String']['input'];
  updateTime?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * CreateFuelUpInput is used for create FuelUp object.
 * Input was generated by ent.
 */
export type CreateFuelUpInput = {
  amountLiters: Scalars['Float']['input'];
  carID: Scalars['ID']['input'];
  cost: Scalars['Float']['input'];
  createTime?: InputMaybe<Scalars['Time']['input']>;
  fuelCategory: FuelCategory;
  isFullTank?: InputMaybe<Scalars['Boolean']['input']>;
  notes?: InputMaybe<Scalars['String']['input']>;
  occurredAt: Scalars['Time']['input'];
  octaneRating?: InputMaybe<OctaneRating>;
  odometerKm?: InputMaybe<Scalars['Float']['input']>;
  odometerReading?: InputMaybe<CreateOdometerReadingInput>;
  odometerReadingID?: InputMaybe<Scalars['ID']['input']>;
  station: Scalars['String']['input'];
  updateTime?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * CreateMediaInput is used for create Media object.
 * Input was generated by ent.
 */
export type CreateMediaInput = {
  carID?: InputMaybe<Scalars['ID']['input']>;
  createTime?: InputMaybe<Scalars['Time']['input']>;
  updateTime?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * CreateOdometerReadingInput is used for create OdometerReading object.
 * Input was generated by ent.
 */
export type CreateOdometerReadingInput = {
  carID: Scalars['ID']['input'];
  createTime?: InputMaybe<Scalars['Time']['input']>;
  fuelUpID?: InputMaybe<Scalars['ID']['input']>;
  notes?: InputMaybe<Scalars['String']['input']>;
  readingKm: Scalars['Float']['input'];
  serviceLogID?: InputMaybe<Scalars['ID']['input']>;
  updateTime?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * CreateProfileInput is used for create Profile object.
 * Input was generated by ent.
 */
export type CreateProfileInput = {
  createTime?: InputMaybe<Scalars['Time']['input']>;
  currencyCode?: InputMaybe<Scalars['String']['input']>;
  distanceUnit?: InputMaybe<DistanceUnit>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  fuelConsumptionUnit?: InputMaybe<FuelConsumptionUnit>;
  fuelVolumeUnit?: InputMaybe<FuelVolumeUnit>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  temperatureUnit?: InputMaybe<TemperatureUnit>;
  updateTime?: InputMaybe<Scalars['Time']['input']>;
  userID: Scalars['ID']['input'];
  username?: InputMaybe<Scalars['String']['input']>;
  visibility?: InputMaybe<ProfileVisibility>;
};

/**
 * CreateServiceItemInput is used for create ServiceItem object.
 * Input was generated by ent.
 */
export type CreateServiceItemInput = {
  carID: Scalars['ID']['input'];
  createTime?: InputMaybe<Scalars['Time']['input']>;
  defaultIntervalKm?: InputMaybe<Scalars['Float']['input']>;
  defaultIntervalMonths?: InputMaybe<Scalars['Int']['input']>;
  estimatedMinutes?: InputMaybe<Scalars['Int']['input']>;
  label: Scalars['String']['input'];
  logIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  notes?: InputMaybe<Scalars['String']['input']>;
  scheduleIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  updateTime?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * CreateServiceLogInput is used for create ServiceLog object.
 * Input was generated by ent.
 */
export type CreateServiceLogInput = {
  carID: Scalars['ID']['input'];
  createTime?: InputMaybe<Scalars['Time']['input']>;
  datePerformed: Scalars['Time']['input'];
  itemIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  notes?: InputMaybe<Scalars['String']['input']>;
  odometerKm?: InputMaybe<Scalars['Float']['input']>;
  odometerReadingID?: InputMaybe<Scalars['ID']['input']>;
  performedBy?: InputMaybe<Scalars['String']['input']>;
  scheduleID?: InputMaybe<Scalars['ID']['input']>;
  updateTime?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * CreateServiceScheduleInput is used for create ServiceSchedule object.
 * Input was generated by ent.
 */
export type CreateServiceScheduleInput = {
  archived?: InputMaybe<Scalars['Boolean']['input']>;
  carID: Scalars['ID']['input'];
  createTime?: InputMaybe<Scalars['Time']['input']>;
  itemIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  logIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  notes?: InputMaybe<Scalars['String']['input']>;
  repeatEveryKm?: InputMaybe<Scalars['Float']['input']>;
  repeatEveryMonths?: InputMaybe<Scalars['Int']['input']>;
  startsAtKm?: InputMaybe<Scalars['Float']['input']>;
  startsAtMonths?: InputMaybe<Scalars['Int']['input']>;
  title: Scalars['String']['input'];
  updateTime?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * CreateUserInput is used for create User object.
 * Input was generated by ent.
 */
export type CreateUserInput = {
  carIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  createTime?: InputMaybe<Scalars['Time']['input']>;
  email: Scalars['String']['input'];
  profileID?: InputMaybe<Scalars['ID']['input']>;
  updateTime?: InputMaybe<Scalars['Time']['input']>;
};

/** DistanceUnit is enum for the field distance_unit */
export enum DistanceUnit {
  Kilometers = 'kilometers',
  Miles = 'miles'
}

export type DragResult = {
  __typename?: 'DragResult';
  createTime: Scalars['Time']['output'];
  id: Scalars['ID']['output'];
  result: Scalars['Float']['output'];
  session: DragSession;
  unit: DragResultUnit;
  updateTime: Scalars['Time']['output'];
  value: Scalars['Float']['output'];
};

/** DragResultUnit is enum for the field unit */
export enum DragResultUnit {
  Km = 'km',
  Kph = 'kph'
}

/**
 * DragResultWhereInput is used for filtering DragResult objects.
 * Input was generated by ent.
 */
export type DragResultWhereInput = {
  and?: InputMaybe<Array<DragResultWhereInput>>;
  /** create_time field predicates */
  createTime?: InputMaybe<Scalars['Time']['input']>;
  createTimeGT?: InputMaybe<Scalars['Time']['input']>;
  createTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  createTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createTimeLT?: InputMaybe<Scalars['Time']['input']>;
  createTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  createTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  createTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** session edge predicates */
  hasSession?: InputMaybe<Scalars['Boolean']['input']>;
  hasSessionWith?: InputMaybe<Array<DragSessionWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<DragResultWhereInput>;
  or?: InputMaybe<Array<DragResultWhereInput>>;
  /** result field predicates */
  result?: InputMaybe<Scalars['Float']['input']>;
  resultGT?: InputMaybe<Scalars['Float']['input']>;
  resultGTE?: InputMaybe<Scalars['Float']['input']>;
  resultIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  resultLT?: InputMaybe<Scalars['Float']['input']>;
  resultLTE?: InputMaybe<Scalars['Float']['input']>;
  resultNEQ?: InputMaybe<Scalars['Float']['input']>;
  resultNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  /** unit field predicates */
  unit?: InputMaybe<DragResultUnit>;
  unitIn?: InputMaybe<Array<DragResultUnit>>;
  unitNEQ?: InputMaybe<DragResultUnit>;
  unitNotIn?: InputMaybe<Array<DragResultUnit>>;
  /** update_time field predicates */
  updateTime?: InputMaybe<Scalars['Time']['input']>;
  updateTimeGT?: InputMaybe<Scalars['Time']['input']>;
  updateTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  updateTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updateTimeLT?: InputMaybe<Scalars['Time']['input']>;
  updateTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  updateTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  updateTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** value field predicates */
  value?: InputMaybe<Scalars['Float']['input']>;
  valueGT?: InputMaybe<Scalars['Float']['input']>;
  valueGTE?: InputMaybe<Scalars['Float']['input']>;
  valueIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  valueLT?: InputMaybe<Scalars['Float']['input']>;
  valueLTE?: InputMaybe<Scalars['Float']['input']>;
  valueNEQ?: InputMaybe<Scalars['Float']['input']>;
  valueNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
};

export type DragSession = {
  __typename?: 'DragSession';
  car: Car;
  createTime: Scalars['Time']['output'];
  id: Scalars['ID']['output'];
  notes?: Maybe<Scalars['String']['output']>;
  results?: Maybe<Array<DragResult>>;
  title: Scalars['String']['output'];
  updateTime: Scalars['Time']['output'];
};

/**
 * DragSessionWhereInput is used for filtering DragSession objects.
 * Input was generated by ent.
 */
export type DragSessionWhereInput = {
  and?: InputMaybe<Array<DragSessionWhereInput>>;
  /** create_time field predicates */
  createTime?: InputMaybe<Scalars['Time']['input']>;
  createTimeGT?: InputMaybe<Scalars['Time']['input']>;
  createTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  createTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createTimeLT?: InputMaybe<Scalars['Time']['input']>;
  createTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  createTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  createTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** car edge predicates */
  hasCar?: InputMaybe<Scalars['Boolean']['input']>;
  hasCarWith?: InputMaybe<Array<CarWhereInput>>;
  /** results edge predicates */
  hasResults?: InputMaybe<Scalars['Boolean']['input']>;
  hasResultsWith?: InputMaybe<Array<DragResultWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<DragSessionWhereInput>;
  /** notes field predicates */
  notes?: InputMaybe<Scalars['String']['input']>;
  notesContains?: InputMaybe<Scalars['String']['input']>;
  notesContainsFold?: InputMaybe<Scalars['String']['input']>;
  notesEqualFold?: InputMaybe<Scalars['String']['input']>;
  notesGT?: InputMaybe<Scalars['String']['input']>;
  notesGTE?: InputMaybe<Scalars['String']['input']>;
  notesHasPrefix?: InputMaybe<Scalars['String']['input']>;
  notesHasSuffix?: InputMaybe<Scalars['String']['input']>;
  notesIn?: InputMaybe<Array<Scalars['String']['input']>>;
  notesIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  notesLT?: InputMaybe<Scalars['String']['input']>;
  notesLTE?: InputMaybe<Scalars['String']['input']>;
  notesNEQ?: InputMaybe<Scalars['String']['input']>;
  notesNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  notesNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  or?: InputMaybe<Array<DragSessionWhereInput>>;
  /** title field predicates */
  title?: InputMaybe<Scalars['String']['input']>;
  titleContains?: InputMaybe<Scalars['String']['input']>;
  titleContainsFold?: InputMaybe<Scalars['String']['input']>;
  titleEqualFold?: InputMaybe<Scalars['String']['input']>;
  titleGT?: InputMaybe<Scalars['String']['input']>;
  titleGTE?: InputMaybe<Scalars['String']['input']>;
  titleHasPrefix?: InputMaybe<Scalars['String']['input']>;
  titleHasSuffix?: InputMaybe<Scalars['String']['input']>;
  titleIn?: InputMaybe<Array<Scalars['String']['input']>>;
  titleLT?: InputMaybe<Scalars['String']['input']>;
  titleLTE?: InputMaybe<Scalars['String']['input']>;
  titleNEQ?: InputMaybe<Scalars['String']['input']>;
  titleNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** update_time field predicates */
  updateTime?: InputMaybe<Scalars['Time']['input']>;
  updateTimeGT?: InputMaybe<Scalars['Time']['input']>;
  updateTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  updateTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updateTimeLT?: InputMaybe<Scalars['Time']['input']>;
  updateTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  updateTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  updateTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

/** FuelCategory is enum for the field fuel_category */
export enum FuelCategory {
  Diesel = 'diesel',
  Electric = 'electric',
  Lpg = 'lpg',
  Other = 'other',
  Petrol = 'petrol'
}

/** FuelConsumptionUnit is enum for the field fuel_consumption_unit */
export enum FuelConsumptionUnit {
  ImpMpg = 'imp_mpg',
  Kpl = 'kpl',
  Lp100k = 'lp100k',
  Mpg = 'mpg'
}

export type FuelUp = {
  __typename?: 'FuelUp';
  amountLiters: Scalars['Float']['output'];
  car: Car;
  cost: Scalars['Float']['output'];
  createTime: Scalars['Time']['output'];
  fuelCategory: FuelCategory;
  id: Scalars['ID']['output'];
  isFullTank: Scalars['Boolean']['output'];
  notes?: Maybe<Scalars['String']['output']>;
  occurredAt: Scalars['Time']['output'];
  octaneRating?: Maybe<OctaneRating>;
  odometerReading?: Maybe<OdometerReading>;
  station: Scalars['String']['output'];
  updateTime: Scalars['Time']['output'];
};

/**
 * FuelUpWhereInput is used for filtering FuelUp objects.
 * Input was generated by ent.
 */
export type FuelUpWhereInput = {
  /** amount_liters field predicates */
  amountLiters?: InputMaybe<Scalars['Float']['input']>;
  amountLitersGT?: InputMaybe<Scalars['Float']['input']>;
  amountLitersGTE?: InputMaybe<Scalars['Float']['input']>;
  amountLitersIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  amountLitersLT?: InputMaybe<Scalars['Float']['input']>;
  amountLitersLTE?: InputMaybe<Scalars['Float']['input']>;
  amountLitersNEQ?: InputMaybe<Scalars['Float']['input']>;
  amountLitersNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  and?: InputMaybe<Array<FuelUpWhereInput>>;
  /** cost field predicates */
  cost?: InputMaybe<Scalars['Float']['input']>;
  costGT?: InputMaybe<Scalars['Float']['input']>;
  costGTE?: InputMaybe<Scalars['Float']['input']>;
  costIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  costLT?: InputMaybe<Scalars['Float']['input']>;
  costLTE?: InputMaybe<Scalars['Float']['input']>;
  costNEQ?: InputMaybe<Scalars['Float']['input']>;
  costNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  /** create_time field predicates */
  createTime?: InputMaybe<Scalars['Time']['input']>;
  createTimeGT?: InputMaybe<Scalars['Time']['input']>;
  createTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  createTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createTimeLT?: InputMaybe<Scalars['Time']['input']>;
  createTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  createTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  createTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** fuel_category field predicates */
  fuelCategory?: InputMaybe<FuelCategory>;
  fuelCategoryIn?: InputMaybe<Array<FuelCategory>>;
  fuelCategoryNEQ?: InputMaybe<FuelCategory>;
  fuelCategoryNotIn?: InputMaybe<Array<FuelCategory>>;
  /** car edge predicates */
  hasCar?: InputMaybe<Scalars['Boolean']['input']>;
  hasCarWith?: InputMaybe<Array<CarWhereInput>>;
  /** odometer_reading edge predicates */
  hasOdometerReading?: InputMaybe<Scalars['Boolean']['input']>;
  hasOdometerReadingWith?: InputMaybe<Array<OdometerReadingWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** is_full_tank field predicates */
  isFullTank?: InputMaybe<Scalars['Boolean']['input']>;
  isFullTankNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<FuelUpWhereInput>;
  /** notes field predicates */
  notes?: InputMaybe<Scalars['String']['input']>;
  notesContains?: InputMaybe<Scalars['String']['input']>;
  notesContainsFold?: InputMaybe<Scalars['String']['input']>;
  notesEqualFold?: InputMaybe<Scalars['String']['input']>;
  notesGT?: InputMaybe<Scalars['String']['input']>;
  notesGTE?: InputMaybe<Scalars['String']['input']>;
  notesHasPrefix?: InputMaybe<Scalars['String']['input']>;
  notesHasSuffix?: InputMaybe<Scalars['String']['input']>;
  notesIn?: InputMaybe<Array<Scalars['String']['input']>>;
  notesIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  notesLT?: InputMaybe<Scalars['String']['input']>;
  notesLTE?: InputMaybe<Scalars['String']['input']>;
  notesNEQ?: InputMaybe<Scalars['String']['input']>;
  notesNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  notesNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** occurred_at field predicates */
  occurredAt?: InputMaybe<Scalars['Time']['input']>;
  occurredAtGT?: InputMaybe<Scalars['Time']['input']>;
  occurredAtGTE?: InputMaybe<Scalars['Time']['input']>;
  occurredAtIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  occurredAtLT?: InputMaybe<Scalars['Time']['input']>;
  occurredAtLTE?: InputMaybe<Scalars['Time']['input']>;
  occurredAtNEQ?: InputMaybe<Scalars['Time']['input']>;
  occurredAtNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** octane_rating field predicates */
  octaneRating?: InputMaybe<OctaneRating>;
  octaneRatingIn?: InputMaybe<Array<OctaneRating>>;
  octaneRatingIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  octaneRatingNEQ?: InputMaybe<OctaneRating>;
  octaneRatingNotIn?: InputMaybe<Array<OctaneRating>>;
  octaneRatingNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  or?: InputMaybe<Array<FuelUpWhereInput>>;
  /** station field predicates */
  station?: InputMaybe<Scalars['String']['input']>;
  stationContains?: InputMaybe<Scalars['String']['input']>;
  stationContainsFold?: InputMaybe<Scalars['String']['input']>;
  stationEqualFold?: InputMaybe<Scalars['String']['input']>;
  stationGT?: InputMaybe<Scalars['String']['input']>;
  stationGTE?: InputMaybe<Scalars['String']['input']>;
  stationHasPrefix?: InputMaybe<Scalars['String']['input']>;
  stationHasSuffix?: InputMaybe<Scalars['String']['input']>;
  stationIn?: InputMaybe<Array<Scalars['String']['input']>>;
  stationLT?: InputMaybe<Scalars['String']['input']>;
  stationLTE?: InputMaybe<Scalars['String']['input']>;
  stationNEQ?: InputMaybe<Scalars['String']['input']>;
  stationNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** update_time field predicates */
  updateTime?: InputMaybe<Scalars['Time']['input']>;
  updateTimeGT?: InputMaybe<Scalars['Time']['input']>;
  updateTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  updateTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updateTimeLT?: InputMaybe<Scalars['Time']['input']>;
  updateTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  updateTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  updateTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

/** FuelVolumeUnit is enum for the field fuel_volume_unit */
export enum FuelVolumeUnit {
  Gallon = 'gallon',
  ImpGallon = 'imp_gallon',
  Liter = 'liter'
}

export type Media = {
  __typename?: 'Media';
  car?: Maybe<Car>;
  createTime: Scalars['Time']['output'];
  id: Scalars['ID']['output'];
  updateTime: Scalars['Time']['output'];
  url: Scalars['String']['output'];
};

/**
 * MediaWhereInput is used for filtering Media objects.
 * Input was generated by ent.
 */
export type MediaWhereInput = {
  and?: InputMaybe<Array<MediaWhereInput>>;
  /** create_time field predicates */
  createTime?: InputMaybe<Scalars['Time']['input']>;
  createTimeGT?: InputMaybe<Scalars['Time']['input']>;
  createTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  createTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createTimeLT?: InputMaybe<Scalars['Time']['input']>;
  createTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  createTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  createTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** car edge predicates */
  hasCar?: InputMaybe<Scalars['Boolean']['input']>;
  hasCarWith?: InputMaybe<Array<CarWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<MediaWhereInput>;
  or?: InputMaybe<Array<MediaWhereInput>>;
  /** update_time field predicates */
  updateTime?: InputMaybe<Scalars['Time']['input']>;
  updateTimeGT?: InputMaybe<Scalars['Time']['input']>;
  updateTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  updateTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updateTimeLT?: InputMaybe<Scalars['Time']['input']>;
  updateTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  updateTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  updateTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  createCar: Car;
  createDragResult: DragResult;
  createDragSession: DragSession;
  createFuelUp: FuelUp;
  createOdometerReading: OdometerReading;
  createServiceItem: ServiceItem;
  createServiceLog: ServiceLog;
  createServiceSchedule: ServiceSchedule;
  updateProfile: Profile;
  uploadBannerImage: UploadMediaResult;
  uploadMedia: UploadMediaResult;
  uploadProfilePicture: Profile;
};


export type MutationCreateCarArgs = {
  input: CreateCarInput;
};


export type MutationCreateDragResultArgs = {
  input: CreateDragResultInput;
};


export type MutationCreateDragSessionArgs = {
  input: CreateDragSessionInput;
};


export type MutationCreateFuelUpArgs = {
  input: CreateFuelUpInput;
};


export type MutationCreateOdometerReadingArgs = {
  input: CreateOdometerReadingInput;
};


export type MutationCreateServiceItemArgs = {
  input: CreateServiceItemInput;
};


export type MutationCreateServiceLogArgs = {
  input: CreateServiceLogInput;
};


export type MutationCreateServiceScheduleArgs = {
  input: CreateServiceScheduleInput;
};


export type MutationUpdateProfileArgs = {
  input: UpdateProfileInput;
};


export type MutationUploadBannerImageArgs = {
  input: CreateMediaInput;
};


export type MutationUploadMediaArgs = {
  input: CreateMediaInput;
};


export type MutationUploadProfilePictureArgs = {
  input?: InputMaybe<UploadProfilePictureInput>;
};

/** OctaneRating is enum for the field octane_rating */
export enum OctaneRating {
  E85 = 'e85',
  Race = 'race',
  Ron91 = 'ron91',
  Ron95 = 'ron95',
  Ron98 = 'ron98',
  Ron100 = 'ron100'
}

export type OdometerReading = {
  __typename?: 'OdometerReading';
  car: Car;
  createTime: Scalars['Time']['output'];
  fuelUp?: Maybe<FuelUp>;
  id: Scalars['ID']['output'];
  notes?: Maybe<Scalars['String']['output']>;
  readingKm: Scalars['Float']['output'];
  serviceLog?: Maybe<ServiceLog>;
  updateTime: Scalars['Time']['output'];
};

/**
 * OdometerReadingWhereInput is used for filtering OdometerReading objects.
 * Input was generated by ent.
 */
export type OdometerReadingWhereInput = {
  and?: InputMaybe<Array<OdometerReadingWhereInput>>;
  /** create_time field predicates */
  createTime?: InputMaybe<Scalars['Time']['input']>;
  createTimeGT?: InputMaybe<Scalars['Time']['input']>;
  createTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  createTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createTimeLT?: InputMaybe<Scalars['Time']['input']>;
  createTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  createTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  createTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** car edge predicates */
  hasCar?: InputMaybe<Scalars['Boolean']['input']>;
  hasCarWith?: InputMaybe<Array<CarWhereInput>>;
  /** fuel_up edge predicates */
  hasFuelUp?: InputMaybe<Scalars['Boolean']['input']>;
  hasFuelUpWith?: InputMaybe<Array<FuelUpWhereInput>>;
  /** service_log edge predicates */
  hasServiceLog?: InputMaybe<Scalars['Boolean']['input']>;
  hasServiceLogWith?: InputMaybe<Array<ServiceLogWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<OdometerReadingWhereInput>;
  /** notes field predicates */
  notes?: InputMaybe<Scalars['String']['input']>;
  notesContains?: InputMaybe<Scalars['String']['input']>;
  notesContainsFold?: InputMaybe<Scalars['String']['input']>;
  notesEqualFold?: InputMaybe<Scalars['String']['input']>;
  notesGT?: InputMaybe<Scalars['String']['input']>;
  notesGTE?: InputMaybe<Scalars['String']['input']>;
  notesHasPrefix?: InputMaybe<Scalars['String']['input']>;
  notesHasSuffix?: InputMaybe<Scalars['String']['input']>;
  notesIn?: InputMaybe<Array<Scalars['String']['input']>>;
  notesIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  notesLT?: InputMaybe<Scalars['String']['input']>;
  notesLTE?: InputMaybe<Scalars['String']['input']>;
  notesNEQ?: InputMaybe<Scalars['String']['input']>;
  notesNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  notesNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  or?: InputMaybe<Array<OdometerReadingWhereInput>>;
  /** reading_km field predicates */
  readingKm?: InputMaybe<Scalars['Float']['input']>;
  readingKmGT?: InputMaybe<Scalars['Float']['input']>;
  readingKmGTE?: InputMaybe<Scalars['Float']['input']>;
  readingKmIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  readingKmLT?: InputMaybe<Scalars['Float']['input']>;
  readingKmLTE?: InputMaybe<Scalars['Float']['input']>;
  readingKmNEQ?: InputMaybe<Scalars['Float']['input']>;
  readingKmNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  /** update_time field predicates */
  updateTime?: InputMaybe<Scalars['Time']['input']>;
  updateTimeGT?: InputMaybe<Scalars['Time']['input']>;
  updateTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  updateTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updateTimeLT?: InputMaybe<Scalars['Time']['input']>;
  updateTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  updateTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  updateTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

/** Possible directions in which to order a list of items when provided an `orderBy` argument. */
export enum OrderDirection {
  /** Specifies an ascending order for a given `orderBy` argument. */
  Asc = 'ASC',
  /** Specifies a descending order for a given `orderBy` argument. */
  Desc = 'DESC'
}

export type Profile = {
  __typename?: 'Profile';
  createTime: Scalars['Time']['output'];
  currencyCode?: Maybe<Scalars['String']['output']>;
  distanceUnit?: Maybe<DistanceUnit>;
  firstName?: Maybe<Scalars['String']['output']>;
  fuelConsumptionUnit?: Maybe<FuelConsumptionUnit>;
  fuelVolumeUnit?: Maybe<FuelVolumeUnit>;
  id: Scalars['ID']['output'];
  lastName?: Maybe<Scalars['String']['output']>;
  pictureUrl?: Maybe<Scalars['String']['output']>;
  temperatureUnit?: Maybe<TemperatureUnit>;
  updateTime: Scalars['Time']['output'];
  user: User;
  username?: Maybe<Scalars['String']['output']>;
  visibility: ProfileVisibility;
};

/** ProfileVisibility is enum for the field visibility */
export enum ProfileVisibility {
  Private = 'private',
  Public = 'public'
}

/**
 * ProfileWhereInput is used for filtering Profile objects.
 * Input was generated by ent.
 */
export type ProfileWhereInput = {
  and?: InputMaybe<Array<ProfileWhereInput>>;
  /** create_time field predicates */
  createTime?: InputMaybe<Scalars['Time']['input']>;
  createTimeGT?: InputMaybe<Scalars['Time']['input']>;
  createTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  createTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createTimeLT?: InputMaybe<Scalars['Time']['input']>;
  createTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  createTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  createTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** currency_code field predicates */
  currencyCode?: InputMaybe<Scalars['String']['input']>;
  currencyCodeContains?: InputMaybe<Scalars['String']['input']>;
  currencyCodeContainsFold?: InputMaybe<Scalars['String']['input']>;
  currencyCodeEqualFold?: InputMaybe<Scalars['String']['input']>;
  currencyCodeGT?: InputMaybe<Scalars['String']['input']>;
  currencyCodeGTE?: InputMaybe<Scalars['String']['input']>;
  currencyCodeHasPrefix?: InputMaybe<Scalars['String']['input']>;
  currencyCodeHasSuffix?: InputMaybe<Scalars['String']['input']>;
  currencyCodeIn?: InputMaybe<Array<Scalars['String']['input']>>;
  currencyCodeIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  currencyCodeLT?: InputMaybe<Scalars['String']['input']>;
  currencyCodeLTE?: InputMaybe<Scalars['String']['input']>;
  currencyCodeNEQ?: InputMaybe<Scalars['String']['input']>;
  currencyCodeNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  currencyCodeNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** distance_unit field predicates */
  distanceUnit?: InputMaybe<DistanceUnit>;
  distanceUnitIn?: InputMaybe<Array<DistanceUnit>>;
  distanceUnitIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  distanceUnitNEQ?: InputMaybe<DistanceUnit>;
  distanceUnitNotIn?: InputMaybe<Array<DistanceUnit>>;
  distanceUnitNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** first_name field predicates */
  firstName?: InputMaybe<Scalars['String']['input']>;
  firstNameContains?: InputMaybe<Scalars['String']['input']>;
  firstNameContainsFold?: InputMaybe<Scalars['String']['input']>;
  firstNameEqualFold?: InputMaybe<Scalars['String']['input']>;
  firstNameGT?: InputMaybe<Scalars['String']['input']>;
  firstNameGTE?: InputMaybe<Scalars['String']['input']>;
  firstNameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  firstNameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  firstNameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  firstNameIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  firstNameLT?: InputMaybe<Scalars['String']['input']>;
  firstNameLTE?: InputMaybe<Scalars['String']['input']>;
  firstNameNEQ?: InputMaybe<Scalars['String']['input']>;
  firstNameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  firstNameNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** fuel_consumption_unit field predicates */
  fuelConsumptionUnit?: InputMaybe<FuelConsumptionUnit>;
  fuelConsumptionUnitIn?: InputMaybe<Array<FuelConsumptionUnit>>;
  fuelConsumptionUnitIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  fuelConsumptionUnitNEQ?: InputMaybe<FuelConsumptionUnit>;
  fuelConsumptionUnitNotIn?: InputMaybe<Array<FuelConsumptionUnit>>;
  fuelConsumptionUnitNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** fuel_volume_unit field predicates */
  fuelVolumeUnit?: InputMaybe<FuelVolumeUnit>;
  fuelVolumeUnitIn?: InputMaybe<Array<FuelVolumeUnit>>;
  fuelVolumeUnitIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  fuelVolumeUnitNEQ?: InputMaybe<FuelVolumeUnit>;
  fuelVolumeUnitNotIn?: InputMaybe<Array<FuelVolumeUnit>>;
  fuelVolumeUnitNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** user edge predicates */
  hasUser?: InputMaybe<Scalars['Boolean']['input']>;
  hasUserWith?: InputMaybe<Array<UserWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** last_name field predicates */
  lastName?: InputMaybe<Scalars['String']['input']>;
  lastNameContains?: InputMaybe<Scalars['String']['input']>;
  lastNameContainsFold?: InputMaybe<Scalars['String']['input']>;
  lastNameEqualFold?: InputMaybe<Scalars['String']['input']>;
  lastNameGT?: InputMaybe<Scalars['String']['input']>;
  lastNameGTE?: InputMaybe<Scalars['String']['input']>;
  lastNameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  lastNameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  lastNameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  lastNameIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  lastNameLT?: InputMaybe<Scalars['String']['input']>;
  lastNameLTE?: InputMaybe<Scalars['String']['input']>;
  lastNameNEQ?: InputMaybe<Scalars['String']['input']>;
  lastNameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  lastNameNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<ProfileWhereInput>;
  or?: InputMaybe<Array<ProfileWhereInput>>;
  /** temperature_unit field predicates */
  temperatureUnit?: InputMaybe<TemperatureUnit>;
  temperatureUnitIn?: InputMaybe<Array<TemperatureUnit>>;
  temperatureUnitIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  temperatureUnitNEQ?: InputMaybe<TemperatureUnit>;
  temperatureUnitNotIn?: InputMaybe<Array<TemperatureUnit>>;
  temperatureUnitNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** update_time field predicates */
  updateTime?: InputMaybe<Scalars['Time']['input']>;
  updateTimeGT?: InputMaybe<Scalars['Time']['input']>;
  updateTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  updateTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updateTimeLT?: InputMaybe<Scalars['Time']['input']>;
  updateTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  updateTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  updateTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** username field predicates */
  username?: InputMaybe<Scalars['String']['input']>;
  usernameContains?: InputMaybe<Scalars['String']['input']>;
  usernameContainsFold?: InputMaybe<Scalars['String']['input']>;
  usernameEqualFold?: InputMaybe<Scalars['String']['input']>;
  usernameGT?: InputMaybe<Scalars['String']['input']>;
  usernameGTE?: InputMaybe<Scalars['String']['input']>;
  usernameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  usernameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  usernameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  usernameIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  usernameLT?: InputMaybe<Scalars['String']['input']>;
  usernameLTE?: InputMaybe<Scalars['String']['input']>;
  usernameNEQ?: InputMaybe<Scalars['String']['input']>;
  usernameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  usernameNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** visibility field predicates */
  visibility?: InputMaybe<ProfileVisibility>;
  visibilityIn?: InputMaybe<Array<ProfileVisibility>>;
  visibilityNEQ?: InputMaybe<ProfileVisibility>;
  visibilityNotIn?: InputMaybe<Array<ProfileVisibility>>;
};

export type Query = {
  __typename?: 'Query';
  car: Car;
  dragSession: DragSession;
  me: User;
};


export type QueryCarArgs = {
  id: Scalars['ID']['input'];
};


export type QueryDragSessionArgs = {
  id: Scalars['ID']['input'];
};

export type ServiceItem = {
  __typename?: 'ServiceItem';
  car: Car;
  createTime: Scalars['Time']['output'];
  defaultIntervalKm?: Maybe<Scalars['Float']['output']>;
  defaultIntervalMonths?: Maybe<Scalars['Int']['output']>;
  estimatedMinutes?: Maybe<Scalars['Int']['output']>;
  id: Scalars['ID']['output'];
  label: Scalars['String']['output'];
  logs?: Maybe<Array<ServiceLog>>;
  notes?: Maybe<Scalars['String']['output']>;
  schedules?: Maybe<Array<ServiceSchedule>>;
  tags: Array<Scalars['String']['output']>;
  updateTime: Scalars['Time']['output'];
};

/**
 * ServiceItemWhereInput is used for filtering ServiceItem objects.
 * Input was generated by ent.
 */
export type ServiceItemWhereInput = {
  and?: InputMaybe<Array<ServiceItemWhereInput>>;
  /** create_time field predicates */
  createTime?: InputMaybe<Scalars['Time']['input']>;
  createTimeGT?: InputMaybe<Scalars['Time']['input']>;
  createTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  createTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createTimeLT?: InputMaybe<Scalars['Time']['input']>;
  createTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  createTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  createTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** default_interval_km field predicates */
  defaultIntervalKm?: InputMaybe<Scalars['Float']['input']>;
  defaultIntervalKmGT?: InputMaybe<Scalars['Float']['input']>;
  defaultIntervalKmGTE?: InputMaybe<Scalars['Float']['input']>;
  defaultIntervalKmIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  defaultIntervalKmIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  defaultIntervalKmLT?: InputMaybe<Scalars['Float']['input']>;
  defaultIntervalKmLTE?: InputMaybe<Scalars['Float']['input']>;
  defaultIntervalKmNEQ?: InputMaybe<Scalars['Float']['input']>;
  defaultIntervalKmNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  defaultIntervalKmNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** default_interval_months field predicates */
  defaultIntervalMonths?: InputMaybe<Scalars['Int']['input']>;
  defaultIntervalMonthsGT?: InputMaybe<Scalars['Int']['input']>;
  defaultIntervalMonthsGTE?: InputMaybe<Scalars['Int']['input']>;
  defaultIntervalMonthsIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  defaultIntervalMonthsIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  defaultIntervalMonthsLT?: InputMaybe<Scalars['Int']['input']>;
  defaultIntervalMonthsLTE?: InputMaybe<Scalars['Int']['input']>;
  defaultIntervalMonthsNEQ?: InputMaybe<Scalars['Int']['input']>;
  defaultIntervalMonthsNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  defaultIntervalMonthsNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** estimated_minutes field predicates */
  estimatedMinutes?: InputMaybe<Scalars['Int']['input']>;
  estimatedMinutesGT?: InputMaybe<Scalars['Int']['input']>;
  estimatedMinutesGTE?: InputMaybe<Scalars['Int']['input']>;
  estimatedMinutesIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  estimatedMinutesIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  estimatedMinutesLT?: InputMaybe<Scalars['Int']['input']>;
  estimatedMinutesLTE?: InputMaybe<Scalars['Int']['input']>;
  estimatedMinutesNEQ?: InputMaybe<Scalars['Int']['input']>;
  estimatedMinutesNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  estimatedMinutesNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** car edge predicates */
  hasCar?: InputMaybe<Scalars['Boolean']['input']>;
  hasCarWith?: InputMaybe<Array<CarWhereInput>>;
  /** logs edge predicates */
  hasLogs?: InputMaybe<Scalars['Boolean']['input']>;
  hasLogsWith?: InputMaybe<Array<ServiceLogWhereInput>>;
  /** schedules edge predicates */
  hasSchedules?: InputMaybe<Scalars['Boolean']['input']>;
  hasSchedulesWith?: InputMaybe<Array<ServiceScheduleWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** label field predicates */
  label?: InputMaybe<Scalars['String']['input']>;
  labelContains?: InputMaybe<Scalars['String']['input']>;
  labelContainsFold?: InputMaybe<Scalars['String']['input']>;
  labelEqualFold?: InputMaybe<Scalars['String']['input']>;
  labelGT?: InputMaybe<Scalars['String']['input']>;
  labelGTE?: InputMaybe<Scalars['String']['input']>;
  labelHasPrefix?: InputMaybe<Scalars['String']['input']>;
  labelHasSuffix?: InputMaybe<Scalars['String']['input']>;
  labelIn?: InputMaybe<Array<Scalars['String']['input']>>;
  labelLT?: InputMaybe<Scalars['String']['input']>;
  labelLTE?: InputMaybe<Scalars['String']['input']>;
  labelNEQ?: InputMaybe<Scalars['String']['input']>;
  labelNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<ServiceItemWhereInput>;
  /** notes field predicates */
  notes?: InputMaybe<Scalars['String']['input']>;
  notesContains?: InputMaybe<Scalars['String']['input']>;
  notesContainsFold?: InputMaybe<Scalars['String']['input']>;
  notesEqualFold?: InputMaybe<Scalars['String']['input']>;
  notesGT?: InputMaybe<Scalars['String']['input']>;
  notesGTE?: InputMaybe<Scalars['String']['input']>;
  notesHasPrefix?: InputMaybe<Scalars['String']['input']>;
  notesHasSuffix?: InputMaybe<Scalars['String']['input']>;
  notesIn?: InputMaybe<Array<Scalars['String']['input']>>;
  notesIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  notesLT?: InputMaybe<Scalars['String']['input']>;
  notesLTE?: InputMaybe<Scalars['String']['input']>;
  notesNEQ?: InputMaybe<Scalars['String']['input']>;
  notesNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  notesNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  or?: InputMaybe<Array<ServiceItemWhereInput>>;
  /** update_time field predicates */
  updateTime?: InputMaybe<Scalars['Time']['input']>;
  updateTimeGT?: InputMaybe<Scalars['Time']['input']>;
  updateTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  updateTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updateTimeLT?: InputMaybe<Scalars['Time']['input']>;
  updateTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  updateTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  updateTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type ServiceLog = {
  __typename?: 'ServiceLog';
  car: Car;
  createTime: Scalars['Time']['output'];
  datePerformed: Scalars['Time']['output'];
  id: Scalars['ID']['output'];
  items?: Maybe<Array<ServiceItem>>;
  notes?: Maybe<Scalars['String']['output']>;
  odometerReading?: Maybe<OdometerReading>;
  performedBy?: Maybe<Scalars['String']['output']>;
  schedule?: Maybe<ServiceSchedule>;
  updateTime: Scalars['Time']['output'];
};

/**
 * ServiceLogWhereInput is used for filtering ServiceLog objects.
 * Input was generated by ent.
 */
export type ServiceLogWhereInput = {
  and?: InputMaybe<Array<ServiceLogWhereInput>>;
  /** create_time field predicates */
  createTime?: InputMaybe<Scalars['Time']['input']>;
  createTimeGT?: InputMaybe<Scalars['Time']['input']>;
  createTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  createTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createTimeLT?: InputMaybe<Scalars['Time']['input']>;
  createTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  createTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  createTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** date_performed field predicates */
  datePerformed?: InputMaybe<Scalars['Time']['input']>;
  datePerformedGT?: InputMaybe<Scalars['Time']['input']>;
  datePerformedGTE?: InputMaybe<Scalars['Time']['input']>;
  datePerformedIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  datePerformedLT?: InputMaybe<Scalars['Time']['input']>;
  datePerformedLTE?: InputMaybe<Scalars['Time']['input']>;
  datePerformedNEQ?: InputMaybe<Scalars['Time']['input']>;
  datePerformedNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** car edge predicates */
  hasCar?: InputMaybe<Scalars['Boolean']['input']>;
  hasCarWith?: InputMaybe<Array<CarWhereInput>>;
  /** items edge predicates */
  hasItems?: InputMaybe<Scalars['Boolean']['input']>;
  hasItemsWith?: InputMaybe<Array<ServiceItemWhereInput>>;
  /** odometer_reading edge predicates */
  hasOdometerReading?: InputMaybe<Scalars['Boolean']['input']>;
  hasOdometerReadingWith?: InputMaybe<Array<OdometerReadingWhereInput>>;
  /** schedule edge predicates */
  hasSchedule?: InputMaybe<Scalars['Boolean']['input']>;
  hasScheduleWith?: InputMaybe<Array<ServiceScheduleWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<ServiceLogWhereInput>;
  /** notes field predicates */
  notes?: InputMaybe<Scalars['String']['input']>;
  notesContains?: InputMaybe<Scalars['String']['input']>;
  notesContainsFold?: InputMaybe<Scalars['String']['input']>;
  notesEqualFold?: InputMaybe<Scalars['String']['input']>;
  notesGT?: InputMaybe<Scalars['String']['input']>;
  notesGTE?: InputMaybe<Scalars['String']['input']>;
  notesHasPrefix?: InputMaybe<Scalars['String']['input']>;
  notesHasSuffix?: InputMaybe<Scalars['String']['input']>;
  notesIn?: InputMaybe<Array<Scalars['String']['input']>>;
  notesIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  notesLT?: InputMaybe<Scalars['String']['input']>;
  notesLTE?: InputMaybe<Scalars['String']['input']>;
  notesNEQ?: InputMaybe<Scalars['String']['input']>;
  notesNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  notesNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  or?: InputMaybe<Array<ServiceLogWhereInput>>;
  /** performed_by field predicates */
  performedBy?: InputMaybe<Scalars['String']['input']>;
  performedByContains?: InputMaybe<Scalars['String']['input']>;
  performedByContainsFold?: InputMaybe<Scalars['String']['input']>;
  performedByEqualFold?: InputMaybe<Scalars['String']['input']>;
  performedByGT?: InputMaybe<Scalars['String']['input']>;
  performedByGTE?: InputMaybe<Scalars['String']['input']>;
  performedByHasPrefix?: InputMaybe<Scalars['String']['input']>;
  performedByHasSuffix?: InputMaybe<Scalars['String']['input']>;
  performedByIn?: InputMaybe<Array<Scalars['String']['input']>>;
  performedByIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  performedByLT?: InputMaybe<Scalars['String']['input']>;
  performedByLTE?: InputMaybe<Scalars['String']['input']>;
  performedByNEQ?: InputMaybe<Scalars['String']['input']>;
  performedByNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  performedByNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** update_time field predicates */
  updateTime?: InputMaybe<Scalars['Time']['input']>;
  updateTimeGT?: InputMaybe<Scalars['Time']['input']>;
  updateTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  updateTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updateTimeLT?: InputMaybe<Scalars['Time']['input']>;
  updateTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  updateTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  updateTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type ServiceSchedule = {
  __typename?: 'ServiceSchedule';
  archived: Scalars['Boolean']['output'];
  car: Car;
  createTime: Scalars['Time']['output'];
  id: Scalars['ID']['output'];
  items?: Maybe<Array<ServiceItem>>;
  logs?: Maybe<Array<ServiceLog>>;
  notes?: Maybe<Scalars['String']['output']>;
  repeatEveryKm?: Maybe<Scalars['Float']['output']>;
  repeatEveryMonths?: Maybe<Scalars['Int']['output']>;
  startsAtKm?: Maybe<Scalars['Float']['output']>;
  startsAtMonths?: Maybe<Scalars['Int']['output']>;
  title: Scalars['String']['output'];
  updateTime: Scalars['Time']['output'];
};

/**
 * ServiceScheduleWhereInput is used for filtering ServiceSchedule objects.
 * Input was generated by ent.
 */
export type ServiceScheduleWhereInput = {
  and?: InputMaybe<Array<ServiceScheduleWhereInput>>;
  /** archived field predicates */
  archived?: InputMaybe<Scalars['Boolean']['input']>;
  archivedNEQ?: InputMaybe<Scalars['Boolean']['input']>;
  /** create_time field predicates */
  createTime?: InputMaybe<Scalars['Time']['input']>;
  createTimeGT?: InputMaybe<Scalars['Time']['input']>;
  createTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  createTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createTimeLT?: InputMaybe<Scalars['Time']['input']>;
  createTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  createTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  createTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** car edge predicates */
  hasCar?: InputMaybe<Scalars['Boolean']['input']>;
  hasCarWith?: InputMaybe<Array<CarWhereInput>>;
  /** items edge predicates */
  hasItems?: InputMaybe<Scalars['Boolean']['input']>;
  hasItemsWith?: InputMaybe<Array<ServiceItemWhereInput>>;
  /** logs edge predicates */
  hasLogs?: InputMaybe<Scalars['Boolean']['input']>;
  hasLogsWith?: InputMaybe<Array<ServiceLogWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<ServiceScheduleWhereInput>;
  /** notes field predicates */
  notes?: InputMaybe<Scalars['String']['input']>;
  notesContains?: InputMaybe<Scalars['String']['input']>;
  notesContainsFold?: InputMaybe<Scalars['String']['input']>;
  notesEqualFold?: InputMaybe<Scalars['String']['input']>;
  notesGT?: InputMaybe<Scalars['String']['input']>;
  notesGTE?: InputMaybe<Scalars['String']['input']>;
  notesHasPrefix?: InputMaybe<Scalars['String']['input']>;
  notesHasSuffix?: InputMaybe<Scalars['String']['input']>;
  notesIn?: InputMaybe<Array<Scalars['String']['input']>>;
  notesIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  notesLT?: InputMaybe<Scalars['String']['input']>;
  notesLTE?: InputMaybe<Scalars['String']['input']>;
  notesNEQ?: InputMaybe<Scalars['String']['input']>;
  notesNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  notesNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  or?: InputMaybe<Array<ServiceScheduleWhereInput>>;
  /** repeat_every_km field predicates */
  repeatEveryKm?: InputMaybe<Scalars['Float']['input']>;
  repeatEveryKmGT?: InputMaybe<Scalars['Float']['input']>;
  repeatEveryKmGTE?: InputMaybe<Scalars['Float']['input']>;
  repeatEveryKmIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  repeatEveryKmIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  repeatEveryKmLT?: InputMaybe<Scalars['Float']['input']>;
  repeatEveryKmLTE?: InputMaybe<Scalars['Float']['input']>;
  repeatEveryKmNEQ?: InputMaybe<Scalars['Float']['input']>;
  repeatEveryKmNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  repeatEveryKmNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** repeat_every_months field predicates */
  repeatEveryMonths?: InputMaybe<Scalars['Int']['input']>;
  repeatEveryMonthsGT?: InputMaybe<Scalars['Int']['input']>;
  repeatEveryMonthsGTE?: InputMaybe<Scalars['Int']['input']>;
  repeatEveryMonthsIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  repeatEveryMonthsIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  repeatEveryMonthsLT?: InputMaybe<Scalars['Int']['input']>;
  repeatEveryMonthsLTE?: InputMaybe<Scalars['Int']['input']>;
  repeatEveryMonthsNEQ?: InputMaybe<Scalars['Int']['input']>;
  repeatEveryMonthsNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  repeatEveryMonthsNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** starts_at_km field predicates */
  startsAtKm?: InputMaybe<Scalars['Float']['input']>;
  startsAtKmGT?: InputMaybe<Scalars['Float']['input']>;
  startsAtKmGTE?: InputMaybe<Scalars['Float']['input']>;
  startsAtKmIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  startsAtKmIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  startsAtKmLT?: InputMaybe<Scalars['Float']['input']>;
  startsAtKmLTE?: InputMaybe<Scalars['Float']['input']>;
  startsAtKmNEQ?: InputMaybe<Scalars['Float']['input']>;
  startsAtKmNotIn?: InputMaybe<Array<Scalars['Float']['input']>>;
  startsAtKmNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** starts_at_months field predicates */
  startsAtMonths?: InputMaybe<Scalars['Int']['input']>;
  startsAtMonthsGT?: InputMaybe<Scalars['Int']['input']>;
  startsAtMonthsGTE?: InputMaybe<Scalars['Int']['input']>;
  startsAtMonthsIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  startsAtMonthsIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  startsAtMonthsLT?: InputMaybe<Scalars['Int']['input']>;
  startsAtMonthsLTE?: InputMaybe<Scalars['Int']['input']>;
  startsAtMonthsNEQ?: InputMaybe<Scalars['Int']['input']>;
  startsAtMonthsNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  startsAtMonthsNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** title field predicates */
  title?: InputMaybe<Scalars['String']['input']>;
  titleContains?: InputMaybe<Scalars['String']['input']>;
  titleContainsFold?: InputMaybe<Scalars['String']['input']>;
  titleEqualFold?: InputMaybe<Scalars['String']['input']>;
  titleGT?: InputMaybe<Scalars['String']['input']>;
  titleGTE?: InputMaybe<Scalars['String']['input']>;
  titleHasPrefix?: InputMaybe<Scalars['String']['input']>;
  titleHasSuffix?: InputMaybe<Scalars['String']['input']>;
  titleIn?: InputMaybe<Array<Scalars['String']['input']>>;
  titleLT?: InputMaybe<Scalars['String']['input']>;
  titleLTE?: InputMaybe<Scalars['String']['input']>;
  titleNEQ?: InputMaybe<Scalars['String']['input']>;
  titleNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** update_time field predicates */
  updateTime?: InputMaybe<Scalars['Time']['input']>;
  updateTimeGT?: InputMaybe<Scalars['Time']['input']>;
  updateTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  updateTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updateTimeLT?: InputMaybe<Scalars['Time']['input']>;
  updateTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  updateTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  updateTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

/** TemperatureUnit is enum for the field temperature_unit */
export enum TemperatureUnit {
  Celsius = 'celsius',
  Fahrenheit = 'fahrenheit'
}

export type UpcomingService = {
  __typename?: 'UpcomingService';
  nextDueDate?: Maybe<Scalars['Time']['output']>;
  nextDueKm?: Maybe<Scalars['Float']['output']>;
  schedule: ServiceSchedule;
};

/**
 * UpdateCarInput is used for update Car object.
 * Input was generated by ent.
 */
export type UpdateCarInput = {
  addDragSessionIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addFuelUpIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addMediumIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addOdometerReadingIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addServiceItemIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addServiceLogIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addServiceScheduleIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  bannerImageID?: InputMaybe<Scalars['ID']['input']>;
  clearBannerImage?: InputMaybe<Scalars['Boolean']['input']>;
  clearDragSessions?: InputMaybe<Scalars['Boolean']['input']>;
  clearFuelUps?: InputMaybe<Scalars['Boolean']['input']>;
  clearMake?: InputMaybe<Scalars['Boolean']['input']>;
  clearMedia?: InputMaybe<Scalars['Boolean']['input']>;
  clearModel?: InputMaybe<Scalars['Boolean']['input']>;
  clearOdometerReadings?: InputMaybe<Scalars['Boolean']['input']>;
  clearOwner?: InputMaybe<Scalars['Boolean']['input']>;
  clearServiceItems?: InputMaybe<Scalars['Boolean']['input']>;
  clearServiceLogs?: InputMaybe<Scalars['Boolean']['input']>;
  clearServiceSchedules?: InputMaybe<Scalars['Boolean']['input']>;
  clearTrim?: InputMaybe<Scalars['Boolean']['input']>;
  clearType?: InputMaybe<Scalars['Boolean']['input']>;
  clearYear?: InputMaybe<Scalars['Boolean']['input']>;
  make?: InputMaybe<Scalars['String']['input']>;
  model?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  ownerID?: InputMaybe<Scalars['ID']['input']>;
  removeDragSessionIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeFuelUpIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeMediumIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeOdometerReadingIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeServiceItemIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeServiceLogIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeServiceScheduleIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  trim?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  updateTime?: InputMaybe<Scalars['Time']['input']>;
  year?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * UpdateDragResultInput is used for update DragResult object.
 * Input was generated by ent.
 */
export type UpdateDragResultInput = {
  result?: InputMaybe<Scalars['Float']['input']>;
  sessionID?: InputMaybe<Scalars['ID']['input']>;
  unit?: InputMaybe<DragResultUnit>;
  updateTime?: InputMaybe<Scalars['Time']['input']>;
  value?: InputMaybe<Scalars['Float']['input']>;
};

/**
 * UpdateDragSessionInput is used for update DragSession object.
 * Input was generated by ent.
 */
export type UpdateDragSessionInput = {
  addResultIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  carID?: InputMaybe<Scalars['ID']['input']>;
  clearNotes?: InputMaybe<Scalars['Boolean']['input']>;
  clearResults?: InputMaybe<Scalars['Boolean']['input']>;
  notes?: InputMaybe<Scalars['String']['input']>;
  removeResultIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  title?: InputMaybe<Scalars['String']['input']>;
  updateTime?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdateFuelUpInput is used for update FuelUp object.
 * Input was generated by ent.
 */
export type UpdateFuelUpInput = {
  amountLiters?: InputMaybe<Scalars['Float']['input']>;
  carID?: InputMaybe<Scalars['ID']['input']>;
  clearNotes?: InputMaybe<Scalars['Boolean']['input']>;
  clearOctaneRating?: InputMaybe<Scalars['Boolean']['input']>;
  clearOdometerReading?: InputMaybe<Scalars['Boolean']['input']>;
  cost?: InputMaybe<Scalars['Float']['input']>;
  fuelCategory?: InputMaybe<FuelCategory>;
  isFullTank?: InputMaybe<Scalars['Boolean']['input']>;
  notes?: InputMaybe<Scalars['String']['input']>;
  occurredAt?: InputMaybe<Scalars['Time']['input']>;
  octaneRating?: InputMaybe<OctaneRating>;
  odometerReadingID?: InputMaybe<Scalars['ID']['input']>;
  station?: InputMaybe<Scalars['String']['input']>;
  updateTime?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdateMediaInput is used for update Media object.
 * Input was generated by ent.
 */
export type UpdateMediaInput = {
  carID?: InputMaybe<Scalars['ID']['input']>;
  clearCar?: InputMaybe<Scalars['Boolean']['input']>;
  updateTime?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdateOdometerReadingInput is used for update OdometerReading object.
 * Input was generated by ent.
 */
export type UpdateOdometerReadingInput = {
  carID?: InputMaybe<Scalars['ID']['input']>;
  clearFuelUp?: InputMaybe<Scalars['Boolean']['input']>;
  clearNotes?: InputMaybe<Scalars['Boolean']['input']>;
  clearServiceLog?: InputMaybe<Scalars['Boolean']['input']>;
  fuelUpID?: InputMaybe<Scalars['ID']['input']>;
  notes?: InputMaybe<Scalars['String']['input']>;
  readingKm?: InputMaybe<Scalars['Float']['input']>;
  serviceLogID?: InputMaybe<Scalars['ID']['input']>;
  updateTime?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdateProfileInput is used for update Profile object.
 * Input was generated by ent.
 */
export type UpdateProfileInput = {
  clearCurrencyCode?: InputMaybe<Scalars['Boolean']['input']>;
  clearDistanceUnit?: InputMaybe<Scalars['Boolean']['input']>;
  clearFirstName?: InputMaybe<Scalars['Boolean']['input']>;
  clearFuelConsumptionUnit?: InputMaybe<Scalars['Boolean']['input']>;
  clearFuelVolumeUnit?: InputMaybe<Scalars['Boolean']['input']>;
  clearLastName?: InputMaybe<Scalars['Boolean']['input']>;
  clearTemperatureUnit?: InputMaybe<Scalars['Boolean']['input']>;
  clearUsername?: InputMaybe<Scalars['Boolean']['input']>;
  currencyCode?: InputMaybe<Scalars['String']['input']>;
  distanceUnit?: InputMaybe<DistanceUnit>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  fuelConsumptionUnit?: InputMaybe<FuelConsumptionUnit>;
  fuelVolumeUnit?: InputMaybe<FuelVolumeUnit>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  temperatureUnit?: InputMaybe<TemperatureUnit>;
  updateTime?: InputMaybe<Scalars['Time']['input']>;
  userID?: InputMaybe<Scalars['ID']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
  visibility?: InputMaybe<ProfileVisibility>;
};

/**
 * UpdateServiceItemInput is used for update ServiceItem object.
 * Input was generated by ent.
 */
export type UpdateServiceItemInput = {
  addLogIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addScheduleIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  appendTags?: InputMaybe<Array<Scalars['String']['input']>>;
  carID?: InputMaybe<Scalars['ID']['input']>;
  clearDefaultIntervalKm?: InputMaybe<Scalars['Boolean']['input']>;
  clearDefaultIntervalMonths?: InputMaybe<Scalars['Boolean']['input']>;
  clearEstimatedMinutes?: InputMaybe<Scalars['Boolean']['input']>;
  clearLogs?: InputMaybe<Scalars['Boolean']['input']>;
  clearNotes?: InputMaybe<Scalars['Boolean']['input']>;
  clearSchedules?: InputMaybe<Scalars['Boolean']['input']>;
  defaultIntervalKm?: InputMaybe<Scalars['Float']['input']>;
  defaultIntervalMonths?: InputMaybe<Scalars['Int']['input']>;
  estimatedMinutes?: InputMaybe<Scalars['Int']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  notes?: InputMaybe<Scalars['String']['input']>;
  removeLogIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeScheduleIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  updateTime?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdateServiceLogInput is used for update ServiceLog object.
 * Input was generated by ent.
 */
export type UpdateServiceLogInput = {
  addItemIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  carID?: InputMaybe<Scalars['ID']['input']>;
  clearItems?: InputMaybe<Scalars['Boolean']['input']>;
  clearNotes?: InputMaybe<Scalars['Boolean']['input']>;
  clearOdometerReading?: InputMaybe<Scalars['Boolean']['input']>;
  clearPerformedBy?: InputMaybe<Scalars['Boolean']['input']>;
  clearSchedule?: InputMaybe<Scalars['Boolean']['input']>;
  datePerformed?: InputMaybe<Scalars['Time']['input']>;
  notes?: InputMaybe<Scalars['String']['input']>;
  odometerReadingID?: InputMaybe<Scalars['ID']['input']>;
  performedBy?: InputMaybe<Scalars['String']['input']>;
  removeItemIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  scheduleID?: InputMaybe<Scalars['ID']['input']>;
  updateTime?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdateServiceScheduleInput is used for update ServiceSchedule object.
 * Input was generated by ent.
 */
export type UpdateServiceScheduleInput = {
  addItemIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  addLogIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  archived?: InputMaybe<Scalars['Boolean']['input']>;
  carID?: InputMaybe<Scalars['ID']['input']>;
  clearItems?: InputMaybe<Scalars['Boolean']['input']>;
  clearLogs?: InputMaybe<Scalars['Boolean']['input']>;
  clearNotes?: InputMaybe<Scalars['Boolean']['input']>;
  clearRepeatEveryKm?: InputMaybe<Scalars['Boolean']['input']>;
  clearRepeatEveryMonths?: InputMaybe<Scalars['Boolean']['input']>;
  clearStartsAtKm?: InputMaybe<Scalars['Boolean']['input']>;
  clearStartsAtMonths?: InputMaybe<Scalars['Boolean']['input']>;
  notes?: InputMaybe<Scalars['String']['input']>;
  removeItemIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  removeLogIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  repeatEveryKm?: InputMaybe<Scalars['Float']['input']>;
  repeatEveryMonths?: InputMaybe<Scalars['Int']['input']>;
  startsAtKm?: InputMaybe<Scalars['Float']['input']>;
  startsAtMonths?: InputMaybe<Scalars['Int']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  updateTime?: InputMaybe<Scalars['Time']['input']>;
};

/**
 * UpdateUserInput is used for update User object.
 * Input was generated by ent.
 */
export type UpdateUserInput = {
  addCarIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  clearCars?: InputMaybe<Scalars['Boolean']['input']>;
  clearProfile?: InputMaybe<Scalars['Boolean']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  profileID?: InputMaybe<Scalars['ID']['input']>;
  removeCarIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
  updateTime?: InputMaybe<Scalars['Time']['input']>;
};

export type UploadMediaResult = {
  __typename?: 'UploadMediaResult';
  media: Media;
  uploadUrl: Scalars['String']['output'];
};

export type UploadProfilePictureInput = {
  picture?: InputMaybe<Scalars['Upload']['input']>;
};

export type User = {
  __typename?: 'User';
  cars?: Maybe<Array<Car>>;
  createTime: Scalars['Time']['output'];
  email: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  profile?: Maybe<Profile>;
  updateTime: Scalars['Time']['output'];
};

/**
 * UserWhereInput is used for filtering User objects.
 * Input was generated by ent.
 */
export type UserWhereInput = {
  and?: InputMaybe<Array<UserWhereInput>>;
  /** create_time field predicates */
  createTime?: InputMaybe<Scalars['Time']['input']>;
  createTimeGT?: InputMaybe<Scalars['Time']['input']>;
  createTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  createTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  createTimeLT?: InputMaybe<Scalars['Time']['input']>;
  createTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  createTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  createTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  /** email field predicates */
  email?: InputMaybe<Scalars['String']['input']>;
  emailContains?: InputMaybe<Scalars['String']['input']>;
  emailContainsFold?: InputMaybe<Scalars['String']['input']>;
  emailEqualFold?: InputMaybe<Scalars['String']['input']>;
  emailGT?: InputMaybe<Scalars['String']['input']>;
  emailGTE?: InputMaybe<Scalars['String']['input']>;
  emailHasPrefix?: InputMaybe<Scalars['String']['input']>;
  emailHasSuffix?: InputMaybe<Scalars['String']['input']>;
  emailIn?: InputMaybe<Array<Scalars['String']['input']>>;
  emailLT?: InputMaybe<Scalars['String']['input']>;
  emailLTE?: InputMaybe<Scalars['String']['input']>;
  emailNEQ?: InputMaybe<Scalars['String']['input']>;
  emailNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** cars edge predicates */
  hasCars?: InputMaybe<Scalars['Boolean']['input']>;
  hasCarsWith?: InputMaybe<Array<CarWhereInput>>;
  /** profile edge predicates */
  hasProfile?: InputMaybe<Scalars['Boolean']['input']>;
  hasProfileWith?: InputMaybe<Array<ProfileWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<UserWhereInput>;
  or?: InputMaybe<Array<UserWhereInput>>;
  /** update_time field predicates */
  updateTime?: InputMaybe<Scalars['Time']['input']>;
  updateTimeGT?: InputMaybe<Scalars['Time']['input']>;
  updateTimeGTE?: InputMaybe<Scalars['Time']['input']>;
  updateTimeIn?: InputMaybe<Array<Scalars['Time']['input']>>;
  updateTimeLT?: InputMaybe<Scalars['Time']['input']>;
  updateTimeLTE?: InputMaybe<Scalars['Time']['input']>;
  updateTimeNEQ?: InputMaybe<Scalars['Time']['input']>;
  updateTimeNotIn?: InputMaybe<Array<Scalars['Time']['input']>>;
};

export type GetMeQueryVariables = Exact<{ [key: string]: never; }>;


export type GetMeQuery = { __typename?: 'Query', me: { __typename?: 'User', id: string, email: string } };

export type GetMeNavbarQueryVariables = Exact<{ [key: string]: never; }>;


export type GetMeNavbarQuery = { __typename?: 'Query', me: { __typename?: 'User', id: string, email: string, profile?: { __typename?: 'Profile', id: string, username?: string | null, pictureUrl?: string | null } | null } };

export type GetCarBannerQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetCarBannerQuery = { __typename?: 'Query', car: { __typename?: 'Car', id: string, name: string, bannerImageUrl?: string | null } };

export type UploadBannerImageMutationVariables = Exact<{
  input: CreateMediaInput;
}>;


export type UploadBannerImageMutation = { __typename?: 'Mutation', uploadBannerImage: { __typename?: 'UploadMediaResult', uploadUrl: string, media: { __typename?: 'Media', id: string } } };

export type GetFuelUpsQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetFuelUpsQuery = { __typename?: 'Query', me: { __typename?: 'User', id: string, profile?: { __typename?: 'Profile', id: string, fuelConsumptionUnit?: FuelConsumptionUnit | null, currencyCode?: string | null, distanceUnit?: DistanceUnit | null, fuelVolumeUnit?: FuelVolumeUnit | null } | null }, car: { __typename?: 'Car', id: string, averageConsumptionLitersPerKm: number, fuelUps?: Array<{ __typename?: 'FuelUp', id: string, occurredAt: any, station: string, amountLiters: number, cost: number, fuelCategory: FuelCategory, octaneRating?: OctaneRating | null, notes?: string | null, isFullTank: boolean, odometerReading?: { __typename?: 'OdometerReading', id: string, readingKm: number } | null }> | null } };

export type CreateFuelUpMutationVariables = Exact<{
  input: CreateFuelUpInput;
}>;


export type CreateFuelUpMutation = { __typename?: 'Mutation', createFuelUp: { __typename?: 'FuelUp', id: string, occurredAt: any, station: string, amountLiters: number, cost: number, fuelCategory: FuelCategory, octaneRating?: OctaneRating | null, notes?: string | null, isFullTank: boolean, odometerReading?: { __typename?: 'OdometerReading', id: string, readingKm: number } | null } };

export type GetOdometerReadingsQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetOdometerReadingsQuery = { __typename?: 'Query', me: { __typename?: 'User', id: string, profile?: { __typename?: 'Profile', id: string, distanceUnit?: DistanceUnit | null } | null }, car: { __typename?: 'Car', id: string, odometerReadings?: Array<{ __typename?: 'OdometerReading', id: string, readingKm: number, createTime: any, notes?: string | null }> | null } };

export type CreateOdometerReadingMutationVariables = Exact<{
  input: CreateOdometerReadingInput;
}>;


export type CreateOdometerReadingMutation = { __typename?: 'Mutation', createOdometerReading: { __typename?: 'OdometerReading', id: string, readingKm: number, createTime: any, notes?: string | null } };

export type GetUpcomingServicesQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetUpcomingServicesQuery = { __typename?: 'Query', me: { __typename?: 'User', id: string, profile?: { __typename?: 'Profile', id: string, distanceUnit?: DistanceUnit | null } | null }, car: { __typename?: 'Car', id: string, upcomingServices: Array<{ __typename?: 'UpcomingService', nextDueKm?: number | null, nextDueDate?: any | null, schedule: { __typename?: 'ServiceSchedule', id: string, title: string, notes?: string | null, repeatEveryKm?: number | null, repeatEveryMonths?: number | null, startsAtKm?: number | null, startsAtMonths?: number | null, archived: boolean, items?: Array<{ __typename?: 'ServiceItem', id: string, label: string, notes?: string | null, estimatedMinutes?: number | null, defaultIntervalKm?: number | null, defaultIntervalMonths?: number | null, tags: Array<string> }> | null } }> } };

export type GetServiceItemsQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetServiceItemsQuery = { __typename?: 'Query', me: { __typename?: 'User', id: string, profile?: { __typename?: 'Profile', id: string, distanceUnit?: DistanceUnit | null } | null }, car: { __typename?: 'Car', id: string, serviceItems?: Array<{ __typename?: 'ServiceItem', id: string, label: string, notes?: string | null, estimatedMinutes?: number | null, defaultIntervalKm?: number | null, defaultIntervalMonths?: number | null, tags: Array<string> }> | null } };

export type CreateServiceItemMutationVariables = Exact<{
  input: CreateServiceItemInput;
}>;


export type CreateServiceItemMutation = { __typename?: 'Mutation', createServiceItem: { __typename?: 'ServiceItem', id: string, label: string, notes?: string | null, estimatedMinutes?: number | null, defaultIntervalKm?: number | null, defaultIntervalMonths?: number | null, tags: Array<string> } };

export type GetServiceLogsQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetServiceLogsQuery = { __typename?: 'Query', me: { __typename?: 'User', id: string, profile?: { __typename?: 'Profile', id: string, distanceUnit?: DistanceUnit | null } | null }, car: { __typename?: 'Car', id: string, serviceLogs?: Array<{ __typename?: 'ServiceLog', id: string, datePerformed: any, notes?: string | null, performedBy?: string | null, odometerReading?: { __typename?: 'OdometerReading', id: string, readingKm: number, notes?: string | null } | null, items?: Array<{ __typename?: 'ServiceItem', id: string, label: string, notes?: string | null, estimatedMinutes?: number | null, defaultIntervalKm?: number | null, defaultIntervalMonths?: number | null, tags: Array<string> }> | null, schedule?: { __typename?: 'ServiceSchedule', id: string, title: string, notes?: string | null, repeatEveryKm?: number | null, repeatEveryMonths?: number | null, startsAtKm?: number | null, startsAtMonths?: number | null, archived: boolean } | null }> | null } };

export type GetServiceSchedulesQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetServiceSchedulesQuery = { __typename?: 'Query', me: { __typename?: 'User', id: string, profile?: { __typename?: 'Profile', id: string, distanceUnit?: DistanceUnit | null } | null }, car: { __typename?: 'Car', id: string, serviceSchedules?: Array<{ __typename?: 'ServiceSchedule', id: string, title: string, notes?: string | null, repeatEveryKm?: number | null, repeatEveryMonths?: number | null, startsAtKm?: number | null, startsAtMonths?: number | null, archived: boolean, items?: Array<{ __typename?: 'ServiceItem', id: string, label: string, notes?: string | null, estimatedMinutes?: number | null, defaultIntervalKm?: number | null, defaultIntervalMonths?: number | null, tags: Array<string> }> | null }> | null } };

export type CreateServiceLogMutationVariables = Exact<{
  input: CreateServiceLogInput;
}>;


export type CreateServiceLogMutation = { __typename?: 'Mutation', createServiceLog: { __typename?: 'ServiceLog', id: string, datePerformed: any, notes?: string | null, performedBy?: string | null, odometerReading?: { __typename?: 'OdometerReading', id: string, readingKm: number, notes?: string | null } | null, items?: Array<{ __typename?: 'ServiceItem', id: string, label: string, notes?: string | null, estimatedMinutes?: number | null, defaultIntervalKm?: number | null, defaultIntervalMonths?: number | null, tags: Array<string> }> | null, schedule?: { __typename?: 'ServiceSchedule', id: string, title: string, notes?: string | null, repeatEveryKm?: number | null, repeatEveryMonths?: number | null, startsAtKm?: number | null, startsAtMonths?: number | null, archived: boolean } | null } };

export type CreateServiceScheduleMutationVariables = Exact<{
  input: CreateServiceScheduleInput;
}>;


export type CreateServiceScheduleMutation = { __typename?: 'Mutation', createServiceSchedule: { __typename?: 'ServiceSchedule', id: string, title: string, notes?: string | null, repeatEveryKm?: number | null, repeatEveryMonths?: number | null, startsAtKm?: number | null, startsAtMonths?: number | null, archived: boolean, items?: Array<{ __typename?: 'ServiceItem', id: string, label: string, notes?: string | null, estimatedMinutes?: number | null, defaultIntervalKm?: number | null, defaultIntervalMonths?: number | null, tags: Array<string> }> | null } };

export type CreateDragSessionMutationVariables = Exact<{
  input: CreateDragSessionInput;
}>;


export type CreateDragSessionMutation = { __typename?: 'Mutation', createDragSession: { __typename?: 'DragSession', id: string, title: string, notes?: string | null } };

export type GetDragSessionsQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetDragSessionsQuery = { __typename?: 'Query', car: { __typename?: 'Car', id: string, dragSessions?: Array<{ __typename?: 'DragSession', id: string, title: string, notes?: string | null, results?: Array<{ __typename?: 'DragResult', id: string }> | null }> | null } };

export type GetDragSessionQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetDragSessionQuery = { __typename?: 'Query', dragSession: { __typename?: 'DragSession', id: string, title: string, notes?: string | null, results?: Array<{ __typename?: 'DragResult', id: string, unit: DragResultUnit, value: number, result: number }> | null } };

export type CreateDragResultMutationVariables = Exact<{
  input: CreateDragResultInput;
}>;


export type CreateDragResultMutation = { __typename?: 'Mutation', createDragResult: { __typename?: 'DragResult', id: string, unit: DragResultUnit, value: number, result: number } };

export type GetProfileQueryVariables = Exact<{ [key: string]: never; }>;


export type GetProfileQuery = { __typename?: 'Query', me: { __typename?: 'User', id: string, profile?: { __typename?: 'Profile', id: string, username?: string | null, firstName?: string | null, lastName?: string | null, currencyCode?: string | null, fuelVolumeUnit?: FuelVolumeUnit | null, distanceUnit?: DistanceUnit | null, fuelConsumptionUnit?: FuelConsumptionUnit | null, temperatureUnit?: TemperatureUnit | null, pictureUrl?: string | null } | null } };

export type UpdateProfileMutationVariables = Exact<{
  input: UpdateProfileInput;
}>;


export type UpdateProfileMutation = { __typename?: 'Mutation', updateProfile: { __typename?: 'Profile', id: string, username?: string | null, firstName?: string | null, lastName?: string | null, currencyCode?: string | null, fuelVolumeUnit?: FuelVolumeUnit | null, distanceUnit?: DistanceUnit | null, fuelConsumptionUnit?: FuelConsumptionUnit | null, temperatureUnit?: TemperatureUnit | null } };

export type UploadProfilePictureMutationVariables = Exact<{
  input: UploadProfilePictureInput;
}>;


export type UploadProfilePictureMutation = { __typename?: 'Mutation', uploadProfilePicture: { __typename?: 'Profile', id: string, pictureUrl?: string | null } };

export type GetGalleryQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetGalleryQuery = { __typename?: 'Query', car: { __typename?: 'Car', id: string, media?: Array<{ __typename?: 'Media', id: string, url: string }> | null } };

export type UploadMediaMutationVariables = Exact<{
  input: CreateMediaInput;
}>;


export type UploadMediaMutation = { __typename?: 'Mutation', uploadMedia: { __typename?: 'UploadMediaResult', uploadUrl: string, media: { __typename?: 'Media', id: string, url: string } } };

export type CreateCarMutationVariables = Exact<{
  input: CreateCarInput;
}>;


export type CreateCarMutation = { __typename?: 'Mutation', createCar: { __typename?: 'Car', id: string } };

export type GetGarageQueryVariables = Exact<{ [key: string]: never; }>;


export type GetGarageQuery = { __typename?: 'Query', me: { __typename?: 'User', cars?: Array<{ __typename?: 'Car', id: string, name: string, bannerImageUrl?: string | null }> | null } };


export const GetMeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetMe"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"me"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}}]}}]}}]} as unknown as DocumentNode<GetMeQuery, GetMeQueryVariables>;
export const GetMeNavbarDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetMeNavbar"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"me"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"email"}},{"kind":"Field","name":{"kind":"Name","value":"profile"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"pictureUrl"}}]}}]}}]}}]} as unknown as DocumentNode<GetMeNavbarQuery, GetMeNavbarQueryVariables>;
export const GetCarBannerDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetCarBanner"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"car"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"bannerImageUrl"}}]}}]}}]} as unknown as DocumentNode<GetCarBannerQuery, GetCarBannerQueryVariables>;
export const UploadBannerImageDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UploadBannerImage"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreateMediaInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"uploadBannerImage"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"media"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}},{"kind":"Field","name":{"kind":"Name","value":"uploadUrl"}}]}}]}}]} as unknown as DocumentNode<UploadBannerImageMutation, UploadBannerImageMutationVariables>;
export const GetFuelUpsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetFuelUps"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"me"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"profile"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"fuelConsumptionUnit"}},{"kind":"Field","name":{"kind":"Name","value":"currencyCode"}},{"kind":"Field","name":{"kind":"Name","value":"distanceUnit"}},{"kind":"Field","name":{"kind":"Name","value":"fuelVolumeUnit"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"car"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"fuelUps"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"occurredAt"}},{"kind":"Field","name":{"kind":"Name","value":"station"}},{"kind":"Field","name":{"kind":"Name","value":"amountLiters"}},{"kind":"Field","name":{"kind":"Name","value":"cost"}},{"kind":"Field","name":{"kind":"Name","value":"fuelCategory"}},{"kind":"Field","name":{"kind":"Name","value":"octaneRating"}},{"kind":"Field","name":{"kind":"Name","value":"odometerReading"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"readingKm"}}]}},{"kind":"Field","name":{"kind":"Name","value":"notes"}},{"kind":"Field","name":{"kind":"Name","value":"isFullTank"}}]}},{"kind":"Field","name":{"kind":"Name","value":"averageConsumptionLitersPerKm"}}]}}]}}]} as unknown as DocumentNode<GetFuelUpsQuery, GetFuelUpsQueryVariables>;
export const CreateFuelUpDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateFuelUp"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreateFuelUpInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createFuelUp"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"occurredAt"}},{"kind":"Field","name":{"kind":"Name","value":"station"}},{"kind":"Field","name":{"kind":"Name","value":"amountLiters"}},{"kind":"Field","name":{"kind":"Name","value":"cost"}},{"kind":"Field","name":{"kind":"Name","value":"fuelCategory"}},{"kind":"Field","name":{"kind":"Name","value":"octaneRating"}},{"kind":"Field","name":{"kind":"Name","value":"odometerReading"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"readingKm"}}]}},{"kind":"Field","name":{"kind":"Name","value":"notes"}},{"kind":"Field","name":{"kind":"Name","value":"isFullTank"}}]}}]}}]} as unknown as DocumentNode<CreateFuelUpMutation, CreateFuelUpMutationVariables>;
export const GetOdometerReadingsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetOdometerReadings"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"me"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"profile"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"distanceUnit"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"car"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"odometerReadings"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"readingKm"}},{"kind":"Field","name":{"kind":"Name","value":"createTime"}},{"kind":"Field","name":{"kind":"Name","value":"notes"}}]}}]}}]}}]} as unknown as DocumentNode<GetOdometerReadingsQuery, GetOdometerReadingsQueryVariables>;
export const CreateOdometerReadingDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateOdometerReading"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreateOdometerReadingInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createOdometerReading"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"readingKm"}},{"kind":"Field","name":{"kind":"Name","value":"createTime"}},{"kind":"Field","name":{"kind":"Name","value":"notes"}}]}}]}}]} as unknown as DocumentNode<CreateOdometerReadingMutation, CreateOdometerReadingMutationVariables>;
export const GetUpcomingServicesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetUpcomingServices"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"me"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"profile"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"distanceUnit"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"car"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"upcomingServices"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nextDueKm"}},{"kind":"Field","name":{"kind":"Name","value":"nextDueDate"}},{"kind":"Field","name":{"kind":"Name","value":"schedule"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"notes"}},{"kind":"Field","name":{"kind":"Name","value":"items"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"notes"}},{"kind":"Field","name":{"kind":"Name","value":"estimatedMinutes"}},{"kind":"Field","name":{"kind":"Name","value":"defaultIntervalKm"}},{"kind":"Field","name":{"kind":"Name","value":"defaultIntervalMonths"}},{"kind":"Field","name":{"kind":"Name","value":"tags"}}]}},{"kind":"Field","name":{"kind":"Name","value":"repeatEveryKm"}},{"kind":"Field","name":{"kind":"Name","value":"repeatEveryMonths"}},{"kind":"Field","name":{"kind":"Name","value":"startsAtKm"}},{"kind":"Field","name":{"kind":"Name","value":"startsAtMonths"}},{"kind":"Field","name":{"kind":"Name","value":"archived"}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetUpcomingServicesQuery, GetUpcomingServicesQueryVariables>;
export const GetServiceItemsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetServiceItems"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"me"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"profile"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"distanceUnit"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"car"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"serviceItems"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"notes"}},{"kind":"Field","name":{"kind":"Name","value":"estimatedMinutes"}},{"kind":"Field","name":{"kind":"Name","value":"defaultIntervalKm"}},{"kind":"Field","name":{"kind":"Name","value":"defaultIntervalMonths"}},{"kind":"Field","name":{"kind":"Name","value":"tags"}}]}}]}}]}}]} as unknown as DocumentNode<GetServiceItemsQuery, GetServiceItemsQueryVariables>;
export const CreateServiceItemDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateServiceItem"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreateServiceItemInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createServiceItem"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"notes"}},{"kind":"Field","name":{"kind":"Name","value":"estimatedMinutes"}},{"kind":"Field","name":{"kind":"Name","value":"defaultIntervalKm"}},{"kind":"Field","name":{"kind":"Name","value":"defaultIntervalMonths"}},{"kind":"Field","name":{"kind":"Name","value":"tags"}}]}}]}}]} as unknown as DocumentNode<CreateServiceItemMutation, CreateServiceItemMutationVariables>;
export const GetServiceLogsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetServiceLogs"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"me"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"profile"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"distanceUnit"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"car"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"serviceLogs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"datePerformed"}},{"kind":"Field","name":{"kind":"Name","value":"odometerReading"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"readingKm"}},{"kind":"Field","name":{"kind":"Name","value":"notes"}}]}},{"kind":"Field","name":{"kind":"Name","value":"notes"}},{"kind":"Field","name":{"kind":"Name","value":"items"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"notes"}},{"kind":"Field","name":{"kind":"Name","value":"estimatedMinutes"}},{"kind":"Field","name":{"kind":"Name","value":"defaultIntervalKm"}},{"kind":"Field","name":{"kind":"Name","value":"defaultIntervalMonths"}},{"kind":"Field","name":{"kind":"Name","value":"tags"}}]}},{"kind":"Field","name":{"kind":"Name","value":"schedule"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"notes"}},{"kind":"Field","name":{"kind":"Name","value":"repeatEveryKm"}},{"kind":"Field","name":{"kind":"Name","value":"repeatEveryMonths"}},{"kind":"Field","name":{"kind":"Name","value":"startsAtKm"}},{"kind":"Field","name":{"kind":"Name","value":"startsAtMonths"}},{"kind":"Field","name":{"kind":"Name","value":"archived"}}]}},{"kind":"Field","name":{"kind":"Name","value":"performedBy"}}]}}]}}]}}]} as unknown as DocumentNode<GetServiceLogsQuery, GetServiceLogsQueryVariables>;
export const GetServiceSchedulesDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetServiceSchedules"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"me"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"profile"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"distanceUnit"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"car"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"serviceSchedules"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"notes"}},{"kind":"Field","name":{"kind":"Name","value":"items"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"notes"}},{"kind":"Field","name":{"kind":"Name","value":"estimatedMinutes"}},{"kind":"Field","name":{"kind":"Name","value":"defaultIntervalKm"}},{"kind":"Field","name":{"kind":"Name","value":"defaultIntervalMonths"}},{"kind":"Field","name":{"kind":"Name","value":"tags"}}]}},{"kind":"Field","name":{"kind":"Name","value":"repeatEveryKm"}},{"kind":"Field","name":{"kind":"Name","value":"repeatEveryMonths"}},{"kind":"Field","name":{"kind":"Name","value":"startsAtKm"}},{"kind":"Field","name":{"kind":"Name","value":"startsAtMonths"}},{"kind":"Field","name":{"kind":"Name","value":"archived"}}]}}]}}]}}]} as unknown as DocumentNode<GetServiceSchedulesQuery, GetServiceSchedulesQueryVariables>;
export const CreateServiceLogDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateServiceLog"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreateServiceLogInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createServiceLog"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"datePerformed"}},{"kind":"Field","name":{"kind":"Name","value":"odometerReading"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"readingKm"}},{"kind":"Field","name":{"kind":"Name","value":"notes"}}]}},{"kind":"Field","name":{"kind":"Name","value":"notes"}},{"kind":"Field","name":{"kind":"Name","value":"items"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"notes"}},{"kind":"Field","name":{"kind":"Name","value":"estimatedMinutes"}},{"kind":"Field","name":{"kind":"Name","value":"defaultIntervalKm"}},{"kind":"Field","name":{"kind":"Name","value":"defaultIntervalMonths"}},{"kind":"Field","name":{"kind":"Name","value":"tags"}}]}},{"kind":"Field","name":{"kind":"Name","value":"schedule"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"notes"}},{"kind":"Field","name":{"kind":"Name","value":"repeatEveryKm"}},{"kind":"Field","name":{"kind":"Name","value":"repeatEveryMonths"}},{"kind":"Field","name":{"kind":"Name","value":"startsAtKm"}},{"kind":"Field","name":{"kind":"Name","value":"startsAtMonths"}},{"kind":"Field","name":{"kind":"Name","value":"archived"}}]}},{"kind":"Field","name":{"kind":"Name","value":"performedBy"}}]}}]}}]} as unknown as DocumentNode<CreateServiceLogMutation, CreateServiceLogMutationVariables>;
export const CreateServiceScheduleDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateServiceSchedule"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreateServiceScheduleInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createServiceSchedule"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"notes"}},{"kind":"Field","name":{"kind":"Name","value":"items"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"label"}},{"kind":"Field","name":{"kind":"Name","value":"notes"}},{"kind":"Field","name":{"kind":"Name","value":"estimatedMinutes"}},{"kind":"Field","name":{"kind":"Name","value":"defaultIntervalKm"}},{"kind":"Field","name":{"kind":"Name","value":"defaultIntervalMonths"}},{"kind":"Field","name":{"kind":"Name","value":"tags"}}]}},{"kind":"Field","name":{"kind":"Name","value":"repeatEveryKm"}},{"kind":"Field","name":{"kind":"Name","value":"repeatEveryMonths"}},{"kind":"Field","name":{"kind":"Name","value":"startsAtKm"}},{"kind":"Field","name":{"kind":"Name","value":"startsAtMonths"}},{"kind":"Field","name":{"kind":"Name","value":"archived"}}]}}]}}]} as unknown as DocumentNode<CreateServiceScheduleMutation, CreateServiceScheduleMutationVariables>;
export const CreateDragSessionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateDragSession"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreateDragSessionInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createDragSession"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"notes"}}]}}]}}]} as unknown as DocumentNode<CreateDragSessionMutation, CreateDragSessionMutationVariables>;
export const GetDragSessionsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetDragSessions"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"car"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"dragSessions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"notes"}},{"kind":"Field","name":{"kind":"Name","value":"results"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]}}]} as unknown as DocumentNode<GetDragSessionsQuery, GetDragSessionsQueryVariables>;
export const GetDragSessionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetDragSession"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"dragSession"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"notes"}},{"kind":"Field","name":{"kind":"Name","value":"results"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"unit"}},{"kind":"Field","name":{"kind":"Name","value":"value"}},{"kind":"Field","name":{"kind":"Name","value":"result"}}]}}]}}]}}]} as unknown as DocumentNode<GetDragSessionQuery, GetDragSessionQueryVariables>;
export const CreateDragResultDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateDragResult"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreateDragResultInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createDragResult"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"unit"}},{"kind":"Field","name":{"kind":"Name","value":"value"}},{"kind":"Field","name":{"kind":"Name","value":"result"}}]}}]}}]} as unknown as DocumentNode<CreateDragResultMutation, CreateDragResultMutationVariables>;
export const GetProfileDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetProfile"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"me"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"profile"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"currencyCode"}},{"kind":"Field","name":{"kind":"Name","value":"fuelVolumeUnit"}},{"kind":"Field","name":{"kind":"Name","value":"distanceUnit"}},{"kind":"Field","name":{"kind":"Name","value":"fuelConsumptionUnit"}},{"kind":"Field","name":{"kind":"Name","value":"temperatureUnit"}},{"kind":"Field","name":{"kind":"Name","value":"pictureUrl"}}]}}]}}]}}]} as unknown as DocumentNode<GetProfileQuery, GetProfileQueryVariables>;
export const UpdateProfileDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateProfile"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UpdateProfileInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateProfile"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"firstName"}},{"kind":"Field","name":{"kind":"Name","value":"lastName"}},{"kind":"Field","name":{"kind":"Name","value":"currencyCode"}},{"kind":"Field","name":{"kind":"Name","value":"fuelVolumeUnit"}},{"kind":"Field","name":{"kind":"Name","value":"distanceUnit"}},{"kind":"Field","name":{"kind":"Name","value":"fuelConsumptionUnit"}},{"kind":"Field","name":{"kind":"Name","value":"temperatureUnit"}}]}}]}}]} as unknown as DocumentNode<UpdateProfileMutation, UpdateProfileMutationVariables>;
export const UploadProfilePictureDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UploadProfilePicture"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"UploadProfilePictureInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"uploadProfilePicture"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"pictureUrl"}}]}}]}}]} as unknown as DocumentNode<UploadProfilePictureMutation, UploadProfilePictureMutationVariables>;
export const GetGalleryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetGallery"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"car"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"media"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}}]}}]}}]} as unknown as DocumentNode<GetGalleryQuery, GetGalleryQueryVariables>;
export const UploadMediaDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UploadMedia"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreateMediaInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"uploadMedia"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"media"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"url"}}]}},{"kind":"Field","name":{"kind":"Name","value":"uploadUrl"}}]}}]}}]} as unknown as DocumentNode<UploadMediaMutation, UploadMediaMutationVariables>;
export const CreateCarDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateCar"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreateCarInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createCar"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode<CreateCarMutation, CreateCarMutationVariables>;
export const GetGarageDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetGarage"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"me"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"cars"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"bannerImageUrl"}}]}}]}}]}}]} as unknown as DocumentNode<GetGarageQuery, GetGarageQueryVariables>;